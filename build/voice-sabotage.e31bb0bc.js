// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"node_modules/vue/dist/vue.runtime.esm.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*!
 * Vue.js v2.6.12
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */

/*  */
var emptyObject = Object.freeze({}); // These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.

function isUndef(v) {
  return v === undefined || v === null;
}

function isDef(v) {
  return v !== undefined && v !== null;
}

function isTrue(v) {
  return v === true;
}

function isFalse(v) {
  return v === false;
}
/**
 * Check if value is primitive.
 */


function isPrimitive(value) {
  return typeof value === 'string' || typeof value === 'number' || // $flow-disable-line
  typeof value === 'symbol' || typeof value === 'boolean';
}
/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */


function isObject(obj) {
  return obj !== null && typeof obj === 'object';
}
/**
 * Get the raw type string of a value, e.g., [object Object].
 */


var _toString = Object.prototype.toString;

function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */


function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function isRegExp(v) {
  return _toString.call(v) === '[object RegExp]';
}
/**
 * Check if val is a valid array index.
 */


function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}

function isPromise(val) {
  return isDef(val) && typeof val.then === 'function' && typeof val.catch === 'function';
}
/**
 * Convert a value to a string that is actually rendered.
 */


function toString(val) {
  return val == null ? '' : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
}
/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */


function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */


function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');

  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}
/**
 * Check if a tag is a built-in tag.
 */


var isBuiltInTag = makeMap('slot,component', true);
/**
 * Check if an attribute is a reserved attribute.
 */

var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
/**
 * Remove an item from an array.
 */

function remove(arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);

    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
}
/**
 * Check whether an object has the property.
 */


var hasOwnProperty = Object.prototype.hasOwnProperty;

function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
/**
 * Create a cached version of a pure function.
 */


function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
/**
 * Camelize a hyphen-delimited string.
 */


var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});
/**
 * Capitalize a string.
 */

var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
/**
 * Hyphenate a camelCase string.
 */

var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase();
});
/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */

function polyfillBind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }

  boundFn._length = fn.length;
  return boundFn;
}

function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}

var bind = Function.prototype.bind ? nativeBind : polyfillBind;
/**
 * Convert an Array-like object to a real Array.
 */

function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);

  while (i--) {
    ret[i] = list[i + start];
  }

  return ret;
}
/**
 * Mix properties into target object.
 */


function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }

  return to;
}
/**
 * Merge an Array of Objects into a single Object.
 */


function toObject(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}
/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */


function noop(a, b, c) {}
/**
 * Always return false.
 */


var no = function (a, b, c) {
  return false;
};
/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */


var identity = function (_) {
  return _;
};
/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */


function looseEqual(a, b) {
  if (a === b) {
    return true;
  }

  var isObjectA = isObject(a);
  var isObjectB = isObject(b);

  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);

      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */


function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }

  return -1;
}
/**
 * Ensure a function is called only once.
 */


function once(fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}

var SSR_ATTR = 'data-server-rendered';
var ASSET_TYPES = ['component', 'directive', 'filter'];
var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured', 'serverPrefetch'];
/*  */

var config = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};
/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */

var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
/**
 * Check if a string starts with $ or _
 */

function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}
/**
 * Define a property.
 */


function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}
/**
 * Parse simple path.
 */


var bailRE = new RegExp("[^" + unicodeRegExp.source + ".$_\\d]");

function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }

  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }

      obj = obj[segments[i]];
    }

    return obj;
  };
}
/*  */
// can we use __proto__?


var hasProto = '__proto__' in {}; // Browser environment sniffing

var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/); // Firefox has a "watch" function on Object.prototype...

var nativeWatch = {}.watch;
var supportsPassive = false;

if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', {
      get: function get() {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    }); // https://github.com/facebook/flow/issues/285

    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
} // this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV


var _isServer;

var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }

  return _isServer;
}; // detect devtools


var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
/* istanbul ignore next */

function isNative(Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}

var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */
// $flow-disable-line


if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set =
  /*@__PURE__*/
  function () {
    function Set() {
      this.set = Object.create(null);
    }

    Set.prototype.has = function has(key) {
      return this.set[key] === true;
    };

    Set.prototype.add = function add(key) {
      this.set[key] = true;
    };

    Set.prototype.clear = function clear() {
      this.set = Object.create(null);
    };

    return Set;
  }();
}
/*  */


var warn = noop;
var tip = noop;
var generateComponentTrace = noop; // work around flow check

var formatComponentName = noop;

if ("development" !== 'production') {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;

  var classify = function (str) {
    return str.replace(classifyRE, function (c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, '');
  };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && !config.silent) {
      console.error("[Vue warn]: " + msg + trace);
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && !config.silent) {
      console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>';
    }

    var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;

    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
  };

  var repeat = function (str, n) {
    var res = '';

    while (n) {
      if (n % 2 === 1) {
        res += str;
      }

      if (n > 1) {
        str += str;
      }

      n >>= 1;
    }

    return res;
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;

      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];

          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }

        tree.push(vm);
        vm = vm.$parent;
      }

      return '\n\nfound in\n\n' + tree.map(function (vm, i) {
        return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
      }).join('\n');
    } else {
      return "\n\n(found in " + formatComponentName(vm) + ")";
    }
  };
}
/*  */


var uid = 0;
/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */

var Dep = function Dep() {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify() {
  // stabilize the subscriber list first
  var subs = this.subs.slice();

  if ("development" !== 'production' && !config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) {
      return a.id - b.id;
    });
  }

  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
}; // The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.


Dep.target = null;
var targetStack = [];

function pushTarget(target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget() {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}
/*  */


var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = {
  child: {
    configurable: true
  }
}; // DEPRECATED: alias for componentInstance for backwards compat.

/* istanbul ignore next */

prototypeAccessors.child.get = function () {
  return this.componentInstance;
};

Object.defineProperties(VNode.prototype, prototypeAccessors);

var createEmptyVNode = function (text) {
  if (text === void 0) text = '';
  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};

function createTextVNode(val) {
  return new VNode(undefined, undefined, undefined, String(val));
} // optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.


function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, // #7975
  // clone children array to avoid mutating original in case of cloning
  // a child.
  vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned;
}
/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */


var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);
var methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];
/**
 * Intercept mutating methods and emit events
 */

methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    var args = [],
        len = arguments.length;

    while (len--) args[len] = arguments[len];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;

    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break;

      case 'splice':
        inserted = args.slice(2);
        break;
    }

    if (inserted) {
      ob.observeArray(inserted);
    } // notify change


    ob.dep.notify();
    return result;
  });
});
/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */

var shouldObserve = true;

function toggleObserving(value) {
  shouldObserve = value;
}
/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */


var Observer = function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);

  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }

    this.observeArray(value);
  } else {
    this.walk(value);
  }
};
/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */


Observer.prototype.walk = function walk(obj) {
  var keys = Object.keys(obj);

  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};
/**
 * Observe a list of Array items.
 */


Observer.prototype.observeArray = function observeArray(items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
}; // helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */


function protoAugment(target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}
/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */

/* istanbul ignore next */


function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}
/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */


function observe(value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return;
  }

  var ob;

  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }

  if (asRootData && ob) {
    ob.vmCount++;
  }

  return ob;
}
/**
 * Define a reactive property on an Object.
 */


function defineReactive$$1(obj, key, val, customSetter, shallow) {
  var dep = new Dep();
  var property = Object.getOwnPropertyDescriptor(obj, key);

  if (property && property.configurable === false) {
    return;
  } // cater for pre-defined getter/setters


  var getter = property && property.get;
  var setter = property && property.set;

  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;

      if (Dep.target) {
        dep.depend();

        if (childOb) {
          childOb.dep.depend();

          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }

      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */

      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      /* eslint-enable no-self-compare */


      if ("development" !== 'production' && customSetter) {
        customSetter();
      } // #7981: for accessor properties without setter


      if (getter && !setter) {
        return;
      }

      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }

      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */


function set(target, key, val) {
  if ("development" !== 'production' && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot set reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }

  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
    "development" !== 'production' && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
    return val;
  }

  if (!ob) {
    target[key] = val;
    return val;
  }

  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val;
}
/**
 * Delete a property and trigger change if necessary.
 */


function del(target, key) {
  if ("development" !== 'production' && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
    "development" !== 'production' && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
    return;
  }

  if (!hasOwn(target, key)) {
    return;
  }

  delete target[key];

  if (!ob) {
    return;
  }

  ob.dep.notify();
}
/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */


function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();

    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */


var strats = config.optionMergeStrategies;
/**
 * Options with restrictions
 */

if ("development" !== 'production') {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
    }

    return defaultStrat(parent, child);
  };
}
/**
 * Helper that recursively merges two data objects together.
 */


function mergeData(to, from) {
  if (!from) {
    return to;
  }

  var key, toVal, fromVal;
  var keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i]; // in case the object is already observed...

    if (key === '__ob__') {
      continue;
    }

    toVal = to[key];
    fromVal = from[key];

    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }

  return to;
}
/**
 * Data
 */


function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }

    if (!parentVal) {
      return childVal;
    } // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.


    return function mergedDataFn() {
      return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;

      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      "development" !== 'production' && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
      return parentVal;
    }

    return mergeDataOrFn(parentVal, childVal);
  }

  return mergeDataOrFn(parentVal, childVal, vm);
};
/**
 * Hooks and props are merged as arrays.
 */


function mergeHook(parentVal, childVal) {
  var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}

function dedupeHooks(hooks) {
  var res = [];

  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }

  return res;
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});
/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */

function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);

  if (childVal) {
    "development" !== 'production' && assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});
/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */

strats.watch = function (parentVal, childVal, vm, key) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) {
    parentVal = undefined;
  }

  if (childVal === nativeWatch) {
    childVal = undefined;
  }
  /* istanbul ignore if */


  if (!childVal) {
    return Object.create(parentVal || null);
  }

  if ("development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = {};
  extend(ret, parentVal);

  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];

    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }

    ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }

  return ret;
};
/**
 * Other object hashes.
 */


strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = Object.create(null);
  extend(ret, parentVal);

  if (childVal) {
    extend(ret, childVal);
  }

  return ret;
};

strats.provide = mergeDataOrFn;
/**
 * Default strategy.
 */

var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};
/**
 * Validate component names
 */


function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName(name) {
  if (!new RegExp("^[a-zA-Z][\\-\\.0-9_" + unicodeRegExp.source + "]*$").test(name)) {
    warn('Invalid component name: "' + name + '". Component names ' + 'should conform to valid custom element name in html5 specification.');
  }

  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);
  }
}
/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */


function normalizeProps(options, vm) {
  var props = options.props;

  if (!props) {
    return;
  }

  var res = {};
  var i, val, name;

  if (Array.isArray(props)) {
    i = props.length;

    while (i--) {
      val = props[i];

      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = {
          type: null
        };
      } else if ("development" !== 'production') {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : {
        type: val
      };
    }
  } else if ("development" !== 'production') {
    warn("Invalid value for option \"props\": expected an Array or an Object, " + "but got " + toRawType(props) + ".", vm);
  }

  options.props = res;
}
/**
 * Normalize all injections into Object-based format
 */


function normalizeInject(options, vm) {
  var inject = options.inject;

  if (!inject) {
    return;
  }

  var normalized = options.inject = {};

  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = {
        from: inject[i]
      };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({
        from: key
      }, val) : {
        from: val
      };
    }
  } else if ("development" !== 'production') {
    warn("Invalid value for option \"inject\": expected an Array or an Object, " + "but got " + toRawType(inject) + ".", vm);
  }
}
/**
 * Normalize raw function directives into object format.
 */


function normalizeDirectives(options) {
  var dirs = options.directives;

  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];

      if (typeof def$$1 === 'function') {
        dirs[key] = {
          bind: def$$1,
          update: def$$1
        };
      }
    }
  }
}

function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn("Invalid value for option \"" + name + "\": expected an Object, " + "but got " + toRawType(value) + ".", vm);
  }
}
/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */


function mergeOptions(parent, child, vm) {
  if ("development" !== 'production') {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child); // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.

  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }

    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;

  for (key in parent) {
    mergeField(key);
  }

  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }

  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }

  return options;
}
/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */


function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }

  var assets = options[type]; // check local registration variations first

  if (hasOwn(assets, id)) {
    return assets[id];
  }

  var camelizedId = camelize(id);

  if (hasOwn(assets, camelizedId)) {
    return assets[camelizedId];
  }

  var PascalCaseId = capitalize(camelizedId);

  if (hasOwn(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  } // fallback to prototype chain


  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];

  if ("development" !== 'production' && warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }

  return res;
}
/*  */


function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key]; // boolean casting

  var booleanIndex = getTypeIndex(Boolean, prop.type);

  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);

      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  } // check default value


  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key); // since the default value is a fresh copy,
    // make sure to observe it.

    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }

  if ("development" !== 'production' && // skip validation for weex recycle-list child component props
  !false) {
    assertProp(prop, key, value, vm, absent);
  }

  return value;
}
/**
 * Get the default value of a prop.
 */


function getPropDefaultValue(vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined;
  }

  var def = prop.default; // warn against non-factory defaults for Object & Array

  if ("development" !== 'production' && isObject(def)) {
    warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  } // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger


  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
    return vm._props[key];
  } // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context


  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
}
/**
 * Assert whether a prop is valid.
 */


function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }

  if (value == null && !prop.required) {
    return;
  }

  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];

  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }

    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
    return;
  }

  var validator = prop.validator;

  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType(value, type) {
  var valid;
  var expectedType = getType(type);

  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase(); // for primitive wrapper objects

    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }

  return {
    valid: valid,
    expectedType: expectedType
  };
}
/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */


function getType(fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : '';
}

function isSameType(a, b) {
  return getType(a) === getType(b);
}

function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }

  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }

  return -1;
}

function getInvalidTypeMessage(name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." + " Expected " + expectedTypes.map(capitalize).join(', ');
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType); // check if we need to specify expected value

  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }

  message += ", got " + receivedType + " "; // check if we need to specify received value

  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }

  return message;
}

function styleValue(value, type) {
  if (type === 'String') {
    return "\"" + value + "\"";
  } else if (type === 'Number') {
    return "" + Number(value);
  } else {
    return "" + value;
  }
}

function isExplicable(value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) {
    return value.toLowerCase() === elem;
  });
}

function isBoolean() {
  var args = [],
      len = arguments.length;

  while (len--) args[len] = arguments[len];

  return args.some(function (elem) {
    return elem.toLowerCase() === 'boolean';
  });
}
/*  */


function handleError(err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();

  try {
    if (vm) {
      var cur = vm;

      while (cur = cur.$parent) {
        var hooks = cur.$options.errorCaptured;

        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;

              if (capture) {
                return;
              }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }

    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling(handler, context, args, vm, info) {
  var res;

  try {
    res = args ? handler.apply(context, args) : handler.call(context);

    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) {
        return handleError(e, vm, info + " (Promise/async)");
      }); // issue #9511
      // avoid catch triggering multiple times when nested calls

      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }

  return res;
}

function globalHandleError(err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info);
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }

  logError(err, vm, info);
}

function logError(err, vm, info) {
  if ("development" !== 'production') {
    warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
  }
  /* istanbul ignore else */


  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err;
  }
}
/*  */


var isUsingMicroTask = false;
var callbacks = [];
var pending = false;

function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;

  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
} // Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).


var timerFunc; // The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:

/* istanbul ignore next, $flow-disable-line */

if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();

  timerFunc = function () {
    p.then(flushCallbacks); // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.

    if (isIOS) {
      setTimeout(noop);
    }
  };

  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) || // PhantomJS and iOS 7.x
MutationObserver.toString() === '[object MutationObserverConstructor]')) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });

  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };

  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Technically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick(cb, ctx) {
  var _resolve;

  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });

  if (!pending) {
    pending = true;
    timerFunc();
  } // $flow-disable-line


  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    });
  }
}
/*  */

/* not type checking this file because flow doesn't play well with Proxy */


var initProxy;

if ("development" !== 'production') {
  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn("Property or method \"" + key + "\" is not defined on the instance but " + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);
  };

  var warnReservedPrefix = function (target, key) {
    warn("Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " + 'properties starting with "$" or "_" are not proxied in the Vue instance to ' + 'prevent conflicts with Vue internals. ' + 'See: https://vuejs.org/v2/api/#data', target);
  };

  var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set(target, key, value) {
        if (isBuiltInModifier(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
          return false;
        } else {
          target[key] = value;
          return true;
        }
      }
    });
  }

  var hasHandler = {
    has: function has(target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data);

      if (!has && !isAllowed) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return has || !isAllowed;
    }
  };
  var getHandler = {
    get: function get(target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return target[key];
    }
  };

  initProxy = function initProxy(vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}
/*  */


var seenObjects = new _Set();
/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */

function traverse(val) {
  _traverse(val, seenObjects);

  seenObjects.clear();
}

function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);

  if (!isA && !isObject(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }

  if (val.__ob__) {
    var depId = val.__ob__.dep.id;

    if (seen.has(depId)) {
      return;
    }

    seen.add(depId);
  }

  if (isA) {
    i = val.length;

    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;

    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}

var mark;
var measure;

if ("development" !== 'production') {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */

  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
    mark = function (tag) {
      return perf.mark(tag);
    };

    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag); // perf.clearMeasures(name)
    };
  }
}
/*  */


var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first

  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns, vm) {
  function invoker() {
    var arguments$1 = arguments;
    var fns = invoker.fns;

    if (Array.isArray(fns)) {
      var cloned = fns.slice();

      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler");
    }
  }

  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove$$1, createOnceHandler, vm) {
  var name, def$$1, cur, old, event;

  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);

    if (isUndef(cur)) {
      "development" !== 'production' && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }

      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }

      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }

  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}
/*  */


function mergeVNodeHook(def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }

  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook() {
    hook.apply(this, arguments); // important: remove merged hook to ensure it's called only once
    // and prevent memory leak

    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}
/*  */


function extractPropsFromVNodeData(data, Ctor, tag) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;

  if (isUndef(propOptions)) {
    return;
  }

  var res = {};
  var attrs = data.attrs;
  var props = data.props;

  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);

      if ("development" !== 'production') {
        var keyInLowerCase = key.toLowerCase();

        if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {
          tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
        }
      }

      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
    }
  }

  return res;
}

function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];

      if (!preserve) {
        delete hash[key];
      }

      return true;
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];

      if (!preserve) {
        delete hash[altKey];
      }

      return true;
    }
  }

  return false;
}
/*  */
// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:
// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.


function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }

  return children;
} // 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.


function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;

  for (i = 0; i < children.length; i++) {
    c = children[i];

    if (isUndef(c) || typeof c === 'boolean') {
      continue;
    }

    lastIndex = res.length - 1;
    last = res[lastIndex]; //  nested

    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || '') + "_" + i); // merge adjacent text nodes

        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }

        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }

        res.push(c);
      }
    }
  }

  return res;
}
/*  */


function initProvide(vm) {
  var provide = vm.$options.provide;

  if (provide) {
    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
  }
}

function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);

  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if ("development" !== 'production') {
        defineReactive$$1(vm, key, result[key], function () {
          warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
        });
      } else {
        defineReactive$$1(vm, key, result[key]);
      }
    });
    toggleObserving(true);
  }
}

function resolveInject(inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i]; // #6574 in case the inject object is observed...

      if (key === '__ob__') {
        continue;
      }

      var provideKey = inject[key].from;
      var source = vm;

      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }

        source = source.$parent;
      }

      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;
        } else if ("development" !== 'production') {
          warn("Injection \"" + key + "\" not found", vm);
        }
      }
    }

    return result;
  }
}
/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */


function resolveSlots(children, context) {
  if (!children || !children.length) {
    return {};
  }

  var slots = {};

  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node

    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    } // named slots should only be respected if the vnode was rendered in the
    // same context.


    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name = data.slot;
      var slot = slots[name] || (slots[name] = []);

      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  } // ignore slots that contains only whitespace


  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }

  return slots;
}

function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === ' ';
}
/*  */


function normalizeScopedSlots(slots, normalSlots, prevSlots) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;

  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized;
  } else if (isStable && prevSlots && prevSlots !== emptyObject && key === prevSlots.$key && !hasNormalSlots && !prevSlots.$hasNormal) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots;
  } else {
    res = {};

    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  } // expose normal slots on scopedSlots


  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  } // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error


  if (slots && Object.isExtensible(slots)) {
    slots._normalized = res;
  }

  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res;
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res) ? [res] // single vnode
    : normalizeChildren(res);
    return res && (res.length === 0 || res.length === 1 && res[0].isComment // #9658
    ) ? undefined : res;
  }; // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.


  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }

  return normalized;
}

function proxyNormalSlot(slots, key) {
  return function () {
    return slots[key];
  };
}
/*  */

/**
 * Runtime helper for rendering v-for lists.
 */


function renderList(val, render) {
  var ret, i, l, keys, key;

  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);

    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);

    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();

      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);

      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }

  if (!isDef(ret)) {
    ret = [];
  }

  ret._isVList = true;
  return ret;
}
/*  */

/**
 * Runtime helper for rendering <slot>
 */


function renderSlot(name, fallback, props, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;

  if (scopedSlotFn) {
    // scoped slot
    props = props || {};

    if (bindObject) {
      if ("development" !== 'production' && !isObject(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }

      props = extend(extend({}, bindObject), props);
    }

    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;

  if (target) {
    return this.$createElement('template', {
      slot: target
    }, nodes);
  } else {
    return nodes;
  }
}
/*  */

/**
 * Runtime helper for resolving filters
 */


function resolveFilter(id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity;
}
/*  */


function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */


function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;

  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
}
/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */


function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject(value)) {
      "development" !== 'production' && warn('v-bind without argument expects an Object or Array value', this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }

      var hash;

      var loop = function (key) {
        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }

        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);

        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});

            on["update:" + key] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop(key);
    }
  }

  return data;
}
/*  */

/**
 * Runtime helper for rendering static trees.
 */


function renderStatic(index, isInFor) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index]; // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.

  if (tree && !isInFor) {
    return tree;
  } // otherwise, render a fresh tree.


  tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates
  );
  markStatic(tree, "__static__" + index, false);
  return tree;
}
/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */


function markOnce(tree, index, key) {
  markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
  return tree;
}

function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
/*  */


function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      "development" !== 'production' && warn('v-on without argument expects an Object value', this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};

      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }

  return data;
}
/*  */


function resolveScopedSlots(fns, // see flow/vnode
res, // the following are added in 2.6
hasDynamicKeys, contentHashKey) {
  res = res || {
    $stable: !hasDynamicKeys
  };

  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];

    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }

      res[slot.key] = slot.fn;
    }
  }

  if (contentHashKey) {
    res.$key = contentHashKey;
  }

  return res;
}
/*  */


function bindDynamicKeys(baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];

    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if ("development" !== 'production' && key !== '' && key !== null) {
      // null is a special value for explicitly removing a binding
      warn("Invalid value for dynamic directive argument (expected string or null): " + key, this);
    }
  }

  return baseObj;
} // helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.


function prependModifier(value, symbol) {
  return typeof value === 'string' ? symbol + value : value;
}
/*  */


function installRenderHelpers(target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}
/*  */


function FunctionalRenderContext(data, props, children, parent, Ctor) {
  var this$1 = this;
  var options = Ctor.options; // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check

  var contextVm;

  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent); // $flow-disable-line

    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent; // $flow-disable-line

    parent = parent._original;
  }

  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;
  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);

  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(data.scopedSlots, this$1.$slots = resolveSlots(children, parent));
    }

    return this$1.$slots;
  };

  Object.defineProperty(this, 'scopedSlots', {
    enumerable: true,
    get: function get() {
      return normalizeScopedSlots(data.scopedSlots, this.slots());
    }
  }); // support for compiled functional template

  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options; // pre-resolve slots for renderSlot()

    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);

      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }

      return vnode;
    };
  } else {
    this._c = function (a, b, c, d) {
      return createElement(contextVm, a, b, c, d, needNormalization);
    };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;

  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props, data.attrs);
    }

    if (isDef(data.props)) {
      mergeProps(props, data.props);
    }
  }

  var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);

    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }

    return res;
  }
}

function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;

  if ("development" !== 'production') {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }

  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }

  return clone;
}

function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
/*  */

/*  */

/*  */

/*  */
// inline hooks to be invoked on component VNodes during patch


var componentVNodeHooks = {
  init: function init(vnode, hydrating) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow

      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },
  prepatch: function prepatch(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, // updated props
    options.listeners, // updated listeners
    vnode, // new parent vnode
    options.children // new children
    );
  },
  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }

    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  },
  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  }
};
var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }

  var baseCtor = context.$options._base; // plain options object: turn it into a constructor

  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  } // if at this stage it's not a constructor or an async component factory,
  // reject.


  if (typeof Ctor !== 'function') {
    if ("development" !== 'production') {
      warn("Invalid Component definition: " + String(Ctor), context);
    }

    return;
  } // async component


  var asyncFactory;

  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);

    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }

  data = data || {}; // resolve constructor options in case global mixins are applied after
  // component constructor creation

  resolveConstructorOptions(Ctor); // transform component v-model data into props & events

  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  } // extract props


  var propsData = extractPropsFromVNodeData(data, Ctor, tag); // functional component

  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  } // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners


  var listeners = data.on; // replace with listeners with .native modifier
  // so it gets processed during parent component patch.

  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot
    // work around flow
    var slot = data.slot;
    data = {};

    if (slot) {
      data.slot = slot;
    }
  } // install component management hooks onto the placeholder node


  installComponentHooks(data); // return a placeholder vnode

  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, {
    Ctor: Ctor,
    propsData: propsData,
    listeners: listeners,
    tag: tag,
    children: children
  }, asyncFactory);
  return vnode;
}

function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  }; // check inline-template render functions

  var inlineTemplate = vnode.data.inlineTemplate;

  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }

  return new vnode.componentOptions.Ctor(options);
}

function installComponentHooks(data) {
  var hooks = data.hook || (data.hook = {});

  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];

    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1(f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };

  merged._merged = true;
  return merged;
} // transform component v-model info (value and callback) into
// prop and event handler respectively.


function transformModel(options, data) {
  var prop = options.model && options.model.prop || 'value';
  var event = options.model && options.model.event || 'input';
  (data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;

  if (isDef(existing)) {
    if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}
/*  */


var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2; // wrapper function for providing a more flexible interface
// without getting yelled at by flow

function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }

  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }

  return _createElement(context, tag, data, children, normalizationType);
}

function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
    "development" !== 'production' && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
    return createEmptyVNode();
  } // object syntax in v-bind


  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }

  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode();
  } // warn against non-primitive key


  if ("development" !== 'production' && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
    }
  } // support single function children as default scoped slot


  if (Array.isArray(children) && typeof children[0] === 'function') {
    data = data || {};
    data.scopedSlots = {
      default: children[0]
    };
    children.length = 0;
  }

  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }

  var vnode, ns;

  if (typeof tag === 'string') {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);

    if (config.isReservedTag(tag)) {
      // platform built-in elements
      if ("development" !== 'production' && isDef(data) && isDef(data.nativeOn)) {
        warn("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">.", context);
      }

      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(tag, data, children, undefined, undefined, context);
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }

  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns)) {
      applyNS(vnode, ns);
    }

    if (isDef(data)) {
      registerDeepBindings(data);
    }

    return vnode;
  } else {
    return createEmptyVNode();
  }
}

function applyNS(vnode, ns, force) {
  vnode.ns = ns;

  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }

  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];

      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {
        applyNS(child, ns, force);
      }
    }
  }
} // ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes


function registerDeepBindings(data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }

  if (isObject(data.class)) {
    traverse(data.class);
  }
}
/*  */


function initRender(vm) {
  vm._vnode = null; // the root of the child tree

  vm._staticTrees = null; // v-once cached trees

  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree

  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject; // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates

  vm._c = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  }; // normalization is always applied for the public version, used in
  // user-written render functions.


  vm.$createElement = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  }; // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated


  var parentData = parentVnode && parentVnode.data;
  /* istanbul ignore else */

  if ("development" !== 'production') {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, null, true);
  }
}

var currentRenderingInstance = null;

function renderMixin(Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
    } // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.


    vm.$vnode = _parentVnode; // render self

    var vnode;

    try {
      // There's no need to maintain a stack because all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render"); // return error render result,
      // or previous vnode to prevent render error causing blank component

      /* istanbul ignore else */

      if ("development" !== 'production' && vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    } // if the returned array contains only a single node, allow it


    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    } // return empty vnode in case the render function errored out


    if (!(vnode instanceof VNode)) {
      if ("development" !== 'production' && Array.isArray(vnode)) {
        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }

      vnode = createEmptyVNode();
    } // set parent


    vnode.parent = _parentVnode;
    return vnode;
  };
}
/*  */


function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {
    comp = comp.default;
  }

  return isObject(comp) ? base.extend(comp) : comp;
}

function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = {
    data: data,
    context: context,
    children: children,
    tag: tag
  };
  return node;
}

function resolveAsyncComponent(factory, baseCtor) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }

  if (isDef(factory.resolved)) {
    return factory.resolved;
  }

  var owner = currentRenderingInstance;

  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null;
    owner.$on('hook:destroyed', function () {
      return remove(owners, owner);
    });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        owners[i].$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;

        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }

        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor); // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)

      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });
    var reject = once(function (reason) {
      "development" !== 'production' && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));

      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });
    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);

          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;

              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;

            if (isUndef(factory.resolved)) {
              reject("development" !== 'production' ? "timeout (" + res.timeout + "ms)" : null);
            }
          }, res.timeout);
        }
      }
    }

    sync = false; // return in case resolved synchronously

    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
/*  */


function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
/*  */


function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];

      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
/*  */

/*  */


function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false; // init parent attached events

  var listeners = vm.$options._parentListeners;

  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add(event, fn) {
  target.$on(event, fn);
}

function remove$1(event, fn) {
  target.$off(event, fn);
}

function createOnceHandler(event, fn) {
  var _target = target;
  return function onceHandler() {
    var res = fn.apply(null, arguments);

    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  };
}

function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin(Vue) {
  var hookRE = /^hook:/;

  Vue.prototype.$on = function (event, fn) {
    var vm = this;

    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn); // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup

      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }

    return vm;
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;

    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }

    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this; // all

    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    } // array of events


    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }

      return vm;
    } // specific event


    var cbs = vm._events[event];

    if (!cbs) {
      return vm;
    }

    if (!fn) {
      vm._events[event] = null;
      return vm;
    } // specific handler


    var cb;
    var i = cbs.length;

    while (i--) {
      cb = cbs[i];

      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }

    return vm;
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;

    if ("development" !== 'production') {
      var lowerCaseEvent = event.toLowerCase();

      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
      }
    }

    var cbs = vm._events[event];

    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";

      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }

    return vm;
  };
}
/*  */


var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  };
}

function initLifecycle(vm) {
  var options = vm.$options; // locate first non-abstract parent

  var parent = options.parent;

  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }

    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin(Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.

    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false
      /* removeOnly */
      );
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }

    restoreActiveInstance(); // update __vue__ reference

    if (prevEl) {
      prevEl.__vue__ = null;
    }

    if (vm.$el) {
      vm.$el.__vue__ = vm;
    } // if parent is an HOC, update its $el as well


    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    } // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.

  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;

    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;

    if (vm._isBeingDestroyed) {
      return;
    }

    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true; // remove self from parent

    var parent = vm.$parent;

    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    } // teardown watchers


    if (vm._watcher) {
      vm._watcher.teardown();
    }

    var i = vm._watchers.length;

    while (i--) {
      vm._watchers[i].teardown();
    } // remove reference from data ob
    // frozen object may not have observer.


    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    } // call the last hook...


    vm._isDestroyed = true; // invoke destroy hooks on current rendered tree

    vm.__patch__(vm._vnode, null); // fire destroyed hook


    callHook(vm, 'destroyed'); // turn off all instance listeners.

    vm.$off(); // remove __vue__ reference

    if (vm.$el) {
      vm.$el.__vue__ = null;
    } // release circular reference (#6759)


    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent(vm, el, hydrating) {
  vm.$el = el;

  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;

    if ("development" !== 'production') {
      /* istanbul ignore if */
      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
      } else {
        warn('Failed to mount component: template or render function not defined.', vm);
      }
    }
  }

  callHook(vm, 'beforeMount');
  var updateComponent;
  /* istanbul ignore if */

  if ("development" !== 'production' && config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;
      mark(startTag);

      var vnode = vm._render();

      mark(endTag);
      measure("vue " + name + " render", startTag, endTag);
      mark(startTag);

      vm._update(vnode, hydrating);

      mark(endTag);
      measure("vue " + name + " patch", startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  } // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined


  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true
  /* isRenderWatcher */
  );
  hydrating = false; // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook

  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }

  return vm;
}

function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  if ("development" !== 'production') {
    isUpdatingChildComponent = true;
  } // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.
  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.


  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key); // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.

  var needsForceUpdate = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  hasDynamicScopedSlot);
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) {
    // update child tree's parent
    vm._vnode.parent = parentVnode;
  }

  vm.$options._renderChildren = renderChildren; // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render

  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject; // update props

  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];

    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?

      props[key] = validateProp(key, propOptions, propsData, vm);
    }

    toggleObserving(true); // keep a copy of raw propsData

    vm.$options.propsData = propsData;
  } // update listeners


  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners); // resolve slots + force update if has children

  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if ("development" !== 'production') {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }

  return false;
}

function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;

    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }

  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;

    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'activated');
  }
}

function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;

    if (isInInactiveTree(vm)) {
      return;
    }
  }

  if (!vm._inactive) {
    vm._inactive = true;

    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'deactivated');
  }
}

function callHook(vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";

  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }

  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }

  popTarget();
}
/*  */


var MAX_UPDATE_COUNT = 100;
var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;
/**
 * Reset the scheduler's state.
 */

function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has = {};

  if ("development" !== 'production') {
    circular = {};
  }

  waiting = flushing = false;
} // Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.


var currentFlushTimestamp = 0; // Async edge case fix requires storing an event listener's attach timestamp.

var getNow = Date.now; // Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)

if (inBrowser && !isIE) {
  var performance = window.performance;

  if (performance && typeof performance.now === 'function' && getNow() > document.createEvent('Event').timeStamp) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () {
      return performance.now();
    };
  }
}
/**
 * Flush both queues and run the watchers.
 */


function flushSchedulerQueue() {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id; // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.

  queue.sort(function (a, b) {
    return a.id - b.id;
  }); // do not cache length because more watchers might be pushed
  // as we run existing watchers

  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];

    if (watcher.before) {
      watcher.before();
    }

    id = watcher.id;
    has[id] = null;
    watcher.run(); // in dev build, check and stop circular updates.

    if ("development" !== 'production' && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;

      if (circular[id] > MAX_UPDATE_COUNT) {
        warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
        break;
      }
    }
  } // keep copies of post queues before resetting state


  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState(); // call component updated and activated hooks

  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue); // devtool hook

  /* istanbul ignore if */

  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks(queue) {
  var i = queue.length;

  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;

    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}
/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */


function queueActivatedComponent(vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks(queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true
    /* true */
    );
  }
}
/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */


function queueWatcher(watcher) {
  var id = watcher.id;

  if (has[id] == null) {
    has[id] = true;

    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;

      while (i > index && queue[i].id > watcher.id) {
        i--;
      }

      queue.splice(i + 1, 0, watcher);
    } // queue the flush


    if (!waiting) {
      waiting = true;

      if ("development" !== 'production' && !config.async) {
        flushSchedulerQueue();
        return;
      }

      nextTick(flushSchedulerQueue);
    }
  }
}
/*  */


var uid$2 = 0;
/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */

var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
  this.vm = vm;

  if (isRenderWatcher) {
    vm._watcher = this;
  }

  vm._watchers.push(this); // options


  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }

  this.cb = cb;
  this.id = ++uid$2; // uid for batching

  this.active = true;
  this.dirty = this.lazy; // for lazy watchers

  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = "development" !== 'production' ? expOrFn.toString() : ''; // parse expression for getter

  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);

    if (!this.getter) {
      this.getter = noop;
      "development" !== 'production' && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
    }
  }

  this.value = this.lazy ? undefined : this.get();
};
/**
 * Evaluate the getter, and re-collect dependencies.
 */


Watcher.prototype.get = function get() {
  pushTarget(this);
  var value;
  var vm = this.vm;

  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
    } else {
      throw e;
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }

    popTarget();
    this.cleanupDeps();
  }

  return value;
};
/**
 * Add a dependency to this directive.
 */


Watcher.prototype.addDep = function addDep(dep) {
  var id = dep.id;

  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);

    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};
/**
 * Clean up for dependency collection.
 */


Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var i = this.deps.length;

  while (i--) {
    var dep = this.deps[i];

    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }

  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};
/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */


Watcher.prototype.update = function update() {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};
/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */


Watcher.prototype.run = function run() {
  if (this.active) {
    var value = this.get();

    if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated.
    isObject(value) || this.deep) {
      // set new value
      var oldValue = this.value;
      this.value = value;

      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};
/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */


Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};
/**
 * Depend on all deps collected by this watcher.
 */


Watcher.prototype.depend = function depend() {
  var i = this.deps.length;

  while (i--) {
    this.deps[i].depend();
  }
};
/**
 * Remove self from all dependencies' subscriber list.
 */


Watcher.prototype.teardown = function teardown() {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }

    var i = this.deps.length;

    while (i--) {
      this.deps[i].removeSub(this);
    }

    this.active = false;
  }
};
/*  */


var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };

  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;

  if (opts.props) {
    initProps(vm, opts.props);
  }

  if (opts.methods) {
    initMethods(vm, opts.methods);
  }

  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true
    /* asRootData */
    );
  }

  if (opts.computed) {
    initComputed(vm, opts.computed);
  }

  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {}; // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.

  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent; // root instance props should be converted

  if (!isRoot) {
    toggleObserving(false);
  }

  var loop = function (key) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */

    if ("development" !== 'production') {
      var hyphenatedKey = hyphenate(key);

      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop.", vm);
      }

      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
        }
      });
    } else {
      defineReactive$$1(props, key, value);
    } // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.


    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop(key);

  toggleObserving(true);
}

function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};

  if (!isPlainObject(data)) {
    data = {};
    "development" !== 'production' && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
  } // proxy data on instance


  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;

  while (i--) {
    var key = keys[i];

    if ("development" !== 'production') {
      if (methods && hasOwn(methods, key)) {
        warn("Method \"" + key + "\" has already been defined as a data property.", vm);
      }
    }

    if (props && hasOwn(props, key)) {
      "development" !== 'production' && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  } // observe data


  observe(data, true
  /* asRootData */
  );
}

function getData(data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();

  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = {
  lazy: true
};

function initComputed(vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null); // computed properties are just getters during SSR

  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;

    if ("development" !== 'production' && getter == null) {
      warn("Getter is missing for computed property \"" + key + "\".", vm);
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    } // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.


    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if ("development" !== 'production') {
      if (key in vm.$data) {
        warn("The computed property \"" + key + "\" is already defined in data.", vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
      }
    }
  }
}

function defineComputed(target, key, userDef) {
  var shouldCache = !isServerRendering();

  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }

  if ("development" !== 'production' && sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
    };
  }

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];

    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }

      if (Dep.target) {
        watcher.depend();
      }

      return watcher.value;
    }
  };
}

function createGetterInvoker(fn) {
  return function computedGetter() {
    return fn.call(this, this);
  };
}

function initMethods(vm, methods) {
  var props = vm.$options.props;

  for (var key in methods) {
    if ("development" !== 'production') {
      if (typeof methods[key] !== 'function') {
        warn("Method \"" + key + "\" has type \"" + typeof methods[key] + "\" in the component definition. " + "Did you reference the function correctly?", vm);
      }

      if (props && hasOwn(props, key)) {
        warn("Method \"" + key + "\" has already been defined as a prop.", vm);
      }

      if (key in vm && isReserved(key)) {
        warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
      }
    }

    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch(vm, watch) {
  for (var key in watch) {
    var handler = watch[key];

    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }

  if (typeof handler === 'string') {
    handler = vm[handler];
  }

  return vm.$watch(expOrFn, handler, options);
}

function stateMixin(Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};

  dataDef.get = function () {
    return this._data;
  };

  var propsDef = {};

  propsDef.get = function () {
    return this._props;
  };

  if ("development" !== 'production') {
    dataDef.set = function () {
      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
    };

    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }

  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);
  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;

    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }

    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);

    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, "callback for immediate watcher \"" + watcher.expression + "\"");
      }
    }

    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
/*  */


var uid$3 = 0;

function initMixin(Vue) {
  Vue.prototype._init = function (options) {
    var vm = this; // a uid

    vm._uid = uid$3++;
    var startTag, endTag;
    /* istanbul ignore if */

    if ("development" !== 'production' && config.performance && mark) {
      startTag = "vue-perf-start:" + vm._uid;
      endTag = "vue-perf-end:" + vm._uid;
      mark(startTag);
    } // a flag to avoid this being observed


    vm._isVue = true; // merge options

    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    /* istanbul ignore else */


    if ("development" !== 'production') {
      initProxy(vm);
    } else {
      vm._renderProxy = vm;
    } // expose real self


    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props

    initState(vm);
    initProvide(vm); // resolve provide after data/props

    callHook(vm, 'created');
    /* istanbul ignore if */

    if ("development" !== 'production' && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure("vue " + vm._name + " init", startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options); // doing this because it's faster than dynamic enumeration.

  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;

  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;

    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976)

      var modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options

      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }

      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);

      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }

  return options;
}

function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;

  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }

      modified[key] = latest[key];
    }
  }

  return modified;
}

function Vue(options) {
  if ("development" !== 'production' && !(this instanceof Vue)) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }

  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);
/*  */

function initUse(Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);

    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    } // additional parameters


    var args = toArray(arguments, 1);
    args.unshift(this);

    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }

    installedPlugins.push(plugin);
    return this;
  };
}
/*  */


function initMixin$1(Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
/*  */


function initExtend(Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;
  /**
   * Class inheritance
   */

  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});

    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }

    var name = extendOptions.name || Super.options.name;

    if ("development" !== 'production' && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent(options) {
      this._init(options);
    };

    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super; // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.

    if (Sub.options.props) {
      initProps$1(Sub);
    }

    if (Sub.options.computed) {
      initComputed$1(Sub);
    } // allow further extension/mixin/plugin usage


    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use; // create asset registers, so extended classes
    // can have their private assets too.

    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    }); // enable recursive self-lookup

    if (name) {
      Sub.options.components[name] = Sub;
    } // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.


    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options); // cache constructor

    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}

function initProps$1(Comp) {
  var props = Comp.options.props;

  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1(Comp) {
  var computed = Comp.options.computed;

  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
/*  */


function initAssetRegisters(Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if ("development" !== 'production' && type === 'component') {
          validateComponentName(id);
        }

        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }

        if (type === 'directive' && typeof definition === 'function') {
          definition = {
            bind: definition,
            update: definition
          };
        }

        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });
}
/*  */


function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}

function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1;
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  /* istanbul ignore next */


  return false;
}

function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;

  for (var key in cache) {
    var cachedNode = cache[key];

    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);

      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry(cache, key, keys, current) {
  var cached$$1 = cache[key];

  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }

  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];
var KeepAlive = {
  name: 'keep-alive',
  abstract: true,
  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },
  created: function created() {
    this.cache = Object.create(null);
    this.keys = [];
  },
  destroyed: function destroyed() {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) {
        return matches(val, name);
      });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) {
        return !matches(val, name);
      });
    });
  },
  render: function render() {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;

    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;

      if ( // not included
      include && (!name || !matches(include, name)) || // excluded
      exclude && name && matches(exclude, name)) {
        return vnode;
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null // same constructor may get registered as different local components
      // so cid alone is not enough (#3269)
      ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;

      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance; // make current key freshest

        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key); // prune oldest entry

        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }

    return vnode || slot && slot[0];
  }
};
var builtInComponents = {
  KeepAlive: KeepAlive
};
/*  */

function initGlobalAPI(Vue) {
  // config
  var configDef = {};

  configDef.get = function () {
    return config;
  };

  if ("development" !== 'production') {
    configDef.set = function () {
      warn('Do not replace the Vue.config object, set individual fields instead.');
    };
  }

  Object.defineProperty(Vue, 'config', configDef); // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.

  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };
  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick; // 2.6 explicit observable API

  Vue.observable = function (obj) {
    observe(obj);
    return obj;
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  }); // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.

  Vue.options._base = Vue;
  extend(Vue.options.components, builtInComponents);
  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);
Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});
Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get() {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext;
  }
}); // expose FunctionalRenderContext for ssr runtime helper installation

Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});
Vue.version = '2.6.12';
/*  */
// these are reserved for web because they are directly compiled away
// during template compilation

var isReservedAttr = makeMap('style,class'); // attributes that should be using props for binding

var acceptValue = makeMap('input,textarea,option,select,progress');

var mustUseProp = function (tag, type, attr) {
  return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function (key, value) {
  return isFalsyAttrValue(value) || value === 'false' ? 'false' // allow arbitrary string value for contenteditable
  : key === 'contenteditable' && isValidContentEditableValue(value) ? value : 'true';
};

var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');
var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : '';
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false;
};
/*  */


function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;

  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;

    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }

  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }

  return renderClass(data.staticClass, data.class);
}

function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class) ? [child.class, parent.class] : parent.class
  };
}

function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  /* istanbul ignore next */


  return '';
}

function concat(a, b) {
  return a ? b ? a + ' ' + b : a : b || '';
}

function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }

  if (isObject(value)) {
    return stringifyObject(value);
  }

  if (typeof value === 'string') {
    return value;
  }
  /* istanbul ignore next */


  return '';
}

function stringifyArray(value) {
  var res = '';
  var stringified;

  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) {
        res += ' ';
      }

      res += stringified;
    }
  }

  return res;
}

function stringifyObject(value) {
  var res = '';

  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += ' ';
      }

      res += key;
    }
  }

  return res;
}
/*  */


var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};
var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot'); // this map is intentionally selective, only covering SVG elements that may
// contain child elements.

var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag);
};

function getTagNamespace(tag) {
  if (isSVG(tag)) {
    return 'svg';
  } // basic support for MathML
  // note it doesn't support other MathML elements being component roots


  if (tag === 'math') {
    return 'math';
  }
}

var unknownElementCache = Object.create(null);

function isUnknownElement(tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true;
  }

  if (isReservedTag(tag)) {
    return false;
  }

  tag = tag.toLowerCase();
  /* istanbul ignore if */

  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag];
  }

  var el = document.createElement(tag);

  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
  } else {
    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');
/*  */

/**
 * Query an element selector if it's not an element already.
 */

function query(el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);

    if (!selected) {
      "development" !== 'production' && warn('Cannot find element: ' + el);
      return document.createElement('div');
    }

    return selected;
  } else {
    return el;
  }
}
/*  */


function createElement$1(tagName, vnode) {
  var elm = document.createElement(tagName);

  if (tagName !== 'select') {
    return elm;
  } // false or null will remove the attribute but undefined will not


  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }

  return elm;
}

function createElementNS(namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName);
}

function createTextNode(text) {
  return document.createTextNode(text);
}

function createComment(text) {
  return document.createComment(text);
}

function insertBefore(parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild(node, child) {
  node.removeChild(child);
}

function appendChild(node, child) {
  node.appendChild(child);
}

function parentNode(node) {
  return node.parentNode;
}

function nextSibling(node) {
  return node.nextSibling;
}

function tagName(node) {
  return node.tagName;
}

function setTextContent(node, text) {
  node.textContent = text;
}

function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps =
/*#__PURE__*/
Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});
/*  */

var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy(vnode) {
    registerRef(vnode, true);
  }
};

function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;

  if (!isDef(key)) {
    return;
  }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;

  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}
/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */


var emptyNode = new VNode('', {}, []);
var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode(a, b) {
  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
}

function sameInputType(a, b) {
  if (a.tag !== 'input') {
    return true;
  }

  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};

  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;

    if (isDef(key)) {
      map[key] = i;
    }
  }

  return map;
}

function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];

    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt(elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
  }

  function createRmCb(childElm, listeners) {
    function remove$$1() {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }

    remove$$1.listeners = listeners;
    return remove$$1;
  }

  function removeNode(el) {
    var parent = nodeOps.parentNode(el); // element may have already been removed due to v-html / v-text

    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function (ignore) {
      return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }

  var creatingElmInVPre = 0;

  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check

    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;

    if (isDef(tag)) {
      if ("development" !== 'production') {
        if (data && data.pre) {
          creatingElmInVPre++;
        }

        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
        }
      }

      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
      setScope(vnode);
      /* istanbul ignore if */

      {
        createChildren(vnode, children, insertedVnodeQueue);

        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }

        insert(parentElm, vnode.elm, refElm);
      }

      if ("development" !== 'production' && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;

    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;

      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false
        /* hydrating */
        );
      } // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.


      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);

        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }

        return true;
      }
    }
  }

  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }

    vnode.elm = vnode.componentInstance.$el;

    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode); // make sure to invoke the insert hook

      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i; // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.

    var innerNode = vnode;

    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;

      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }

        insertedVnodeQueue.push(innerNode);
        break;
      }
    } // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself


    insert(parentElm, vnode.elm, refElm);
  }

  function insert(parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if ("development" !== 'production') {
        checkDuplicateKeys(children);
      }

      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }

    return isDef(vnode.tag);
  }

  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }

    i = vnode.data.hook; // Reuse variable

    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }

      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  } // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.


  function setScope(vnode) {
    var i;

    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;

      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }

        ancestor = ancestor.parent;
      }
    } // for slot content they should also get the scopeId from the host instance.


    if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook(vnode) {
    var i, j;
    var data = vnode.data;

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) {
        i(vnode);
      }

      for (i = 0; i < cbs.destroy.length; ++i) {
        cbs.destroy[i](vnode);
      }
    }

    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes(vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];

      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;

      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      } // recursively invoke hooks on child component root node


      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }

      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }

      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm; // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions

    var canMove = !removeOnly;

    if ("development" !== 'production') {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }

        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);

        if (isUndef(idxInOld)) {
          // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];

          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }

        newStartVnode = newCh[++newStartIdx];
      }
    }

    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys(children) {
    var seenKeys = {};

    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;

      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld(node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];

      if (isDef(c) && sameVnode(node, c)) {
        return i;
      }
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }

      return;
    } // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.


    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }

    var i;
    var data = vnode.data;

    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;

    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) {
        cbs.update[i](oldVnode, vnode);
      }

      if (isDef(i = data.hook) && isDef(i = i.update)) {
        i(oldVnode, vnode);
      }
    }

    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        if ("development" !== 'production') {
          checkDuplicateKeys(ch);
        }

        if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }

        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
        i(oldVnode, vnode);
      }
    }
  }

  function invokeInsertHook(vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false; // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).

  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key'); // Note: this is a browser-only function so we can assume elms are DOM nodes.

  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    } // assert node match


    if ("development" !== 'production') {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) {
        i(vnode, true
        /* hydrating */
        );
      }

      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }

    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if ("development" !== 'production' && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }

              return false;
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;

            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }

              childNode = childNode.nextSibling;
            } // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.


            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if ("development" !== 'production' && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }

              return false;
            }
          }
        }
      }

      if (isDef(data)) {
        var fullInvoke = false;

        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }

        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }

    return true;
  }

  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }

  return function patch(oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }

      return;
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);

      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }

          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else if ("development" !== 'production') {
              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
            }
          } // either not server-rendered, or hydration failed.
          // create an empty node and replace it


          oldVnode = emptyNodeAt(oldVnode);
        } // replacing existing element


        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm); // create new node

        createElm(vnode, insertedVnodeQueue, // extremely rare edge case: do not insert if old element is in a
        // leaving transition. Only happens when combining transition +
        // keep-alive + HOCs. (#4590)
        oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm)); // update parent placeholder node element, recursively

        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);

          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }

            ancestor.elm = vnode.elm;

            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              } // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.


              var insert = ancestor.data.hook.insert;

              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }

            ancestor = ancestor.parent;
          }
        } // destroy old node


        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
/*  */


var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;

  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];

    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);

      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);

      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };

    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);

  if (!dirs) {
    // $flow-disable-line
    return res;
  }

  var i, dir;

  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];

    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }

    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  } // $flow-disable-line


  return res;
}

function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
}

function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];

  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}

var baseModules = [ref, directives];
/*  */

function updateAttrs(oldVnode, vnode) {
  var opts = vnode.componentOptions;

  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return;
  }

  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return;
  }

  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];

    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  } // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max

  /* istanbul ignore if */


  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }

  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr(el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr(el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.

    /* istanbul ignore if */
    if (isIE && !isIE9 && el.tagName === 'TEXTAREA' && key === 'placeholder' && value !== '' && !el.__ieph) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };

      el.addEventListener('input', blocker); // $flow-disable-line

      el.__ieph = true;
      /* IE placeholder patched */
    }

    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};
/*  */

function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
    return;
  }

  var cls = genClassForVnode(vnode); // handle transition classes

  var transitionClass = el._transitionClasses;

  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  } // set the class


  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};
/*  */

/*  */

/*  */

/*  */
// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.

var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';
/*  */
// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.

function normalizeEvents(on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  } // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4

  /* istanbul ignore if */


  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1(event, handler, capture) {
  var _target = target$1; // save current target element in closure

  return function onceHandler() {
    var res = handler.apply(null, arguments);

    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  };
} // #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.


var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1(name, handler, capture, passive) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;

    handler = original._wrapper = function (e) {
      if ( // no bubbling, should always fire.
      // this is just a safety net in case event.timeStamp is unreliable in
      // certain weird environments...
      e.target === e.currentTarget || // event is fired after handler attachment
      e.timeStamp >= attachedTimestamp || // bail for environments that have buggy event.timeStamp implementations
      // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
      // #9681 QtWebEngine event.timeStamp is negative value
      e.timeStamp <= 0 || // #9448 bail if event is fired in another document in a multi-page
      // electron/nw.js app, since event.timeStamp will be using a different
      // starting reference
      e.target.ownerDocument !== document) {
        return original.apply(this, arguments);
      }
    };
  }

  target$1.addEventListener(name, handler, supportsPassive ? {
    capture: capture,
    passive: passive
  } : capture);
}

function remove$2(name, handler, capture, _target) {
  (_target || target$1).removeEventListener(name, handler._wrapper || handler, capture);
}

function updateDOMListeners(oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return;
  }

  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};
/*  */

var svgContainer;

function updateDOMProps(oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return;
  }

  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key]; // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)

    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) {
        vnode.children.length = 0;
      }

      if (cur === oldProps[key]) {
        continue;
      } // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property


      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur; // avoid resetting cursor position when value is the same

      var strCur = isUndef(cur) ? '' : String(cur);

      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;

      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }

      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if ( // skip the update if old and new VDOM state is the same.
    // `value` is handled separately because the DOM value may be temporarily
    // out of sync with VDOM state due to focus, composition and modifiers.
    // This  #4521 by skipping the unnecessary `checked` update.
    cur !== oldProps[key]) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
} // check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue(elm, checkVal) {
  return !elm.composing && (elm.tagName === 'OPTION' || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
}

function isNotInFocusAndDirty(elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true; // #6157
  // work around IE bug when accessing document.activeElement in an iframe

  try {
    notInFocus = document.activeElement !== elm;
  } catch (e) {}

  return notInFocus && elm.value !== checkVal;
}

function isDirtyWithModifiers(elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime

  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal);
    }

    if (modifiers.trim) {
      return value.trim() !== newVal.trim();
    }
  }

  return value !== newVal;
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};
/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res;
}); // merge static and dynamic style data on the same vnode

function normalizeStyleData(data) {
  var style = normalizeStyleBinding(data.style); // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it

  return data.staticStyle ? extend(data.staticStyle, style) : style;
} // normalize possible array / string values into Object


function normalizeStyleBinding(bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle);
  }

  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle);
  }

  return bindingStyle;
}
/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */


function getStyle(vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;

    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;

      if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }

  if (styleData = normalizeStyleData(vnode.data)) {
    extend(res, styleData);
  }

  var parentNode = vnode;

  while (parentNode = parentNode.parent) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }

  return res;
}
/*  */


var cssVarRE = /^--/;
var importantRE = /\s*!important$/;

var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);

    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];
var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);

  if (prop !== 'filter' && prop in emptyStyle) {
    return prop;
  }

  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);

  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;

    if (name in emptyStyle) {
      return name;
    }
  }
});

function updateStyle(oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
    return;
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {}; // if static style exists, stylebinding already merged into it when doing normalizeStyleData

  var oldStyle = oldStaticStyle || oldStyleBinding;
  var style = normalizeStyleBinding(vnode.data.style) || {}; // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.

  vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;
  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }

  for (name in newStyle) {
    cur = newStyle[name];

    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};
/*  */

var whitespaceRE = /\s+/;
/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */

function addClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";

    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}
/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */


function removeClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }

    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';

    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }

    cur = cur.trim();

    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}
/*  */


function resolveTransition(def$$1) {
  if (!def$$1) {
    return;
  }
  /* istanbul ignore else */


  if (typeof def$$1 === 'object') {
    var res = {};

    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }

    extend(res, def$$1);
    return res;
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1);
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});
var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation'; // Transition property/event sniffing

var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';

if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }

  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
} // binding to window is necessary to make hot reload work in IE in strict mode


var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout :
/* istanbul ignore next */
function (fn) {
  return fn();
};

function nextFrame(fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);

  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }

  removeClass(el, cls);
}

function whenTransitionEnds(el, expectedType, cb) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;

  if (!type) {
    return cb();
  }

  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;

  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };

  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };

  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo(el, expectedType) {
  var styles = window.getComputedStyle(el); // JSDOM may return undefined for transition properties

  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);
  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */

  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }

  var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  };
}

function getTimeout(delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i]);
  }));
} // Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors


function toMs(s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000;
}
/*  */


function enter(vnode, toggleDisplay) {
  var el = vnode.elm; // call leave callback now

  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;

    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data)) {
    return;
  }
  /* istanbul ignore if */


  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration; // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.

  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;

  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return;
  }

  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);

  if ("development" !== 'production' && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }

      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }

    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];

      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }

      enterHook && enterHook(el, cb);
    });
  } // start enter transition


  beforeEnterHook && beforeEnterHook(el);

  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);

      if (!cb.cancelled) {
        addTransitionClass(el, toClass);

        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave(vnode, rm) {
  var el = vnode.elm; // call enter callback now

  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;

    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  /* istanbul ignore if */


  if (isDef(el._leaveCb)) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;
  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);
  var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);

  if ("development" !== 'production' && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }

    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }

      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }

    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave() {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return;
    } // record leaving element


    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }

    beforeLeave && beforeLeave(el);

    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);

        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);

          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }

    leave && leave(el, cb);

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
} // only used in dev mode


function checkDuration(val, name, vnode) {
  if (typeof val !== 'number') {
    warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
  }
}

function isValidDuration(val) {
  return typeof val === 'number' && !isNaN(val);
}
/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */


function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }

  var invokerFns = fn.fns;

  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}

function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1(vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};
var platformModules = [attrs, klass, events, domProps, style, transition];
/*  */
// the directive module should be applied last, after all
// built-in modules have been applied.

var modules = platformModules.concat(baseModules);
var patch = createPatchFunction({
  nodeOps: nodeOps,
  modules: modules
});
/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */

if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;

    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted(el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }

      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;

      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd); // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.

        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */

        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated: function componentUpdated(el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context); // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.

      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);

      if (curOptions.some(function (o, i) {
        return !looseEqual(o, prevOptions[i]);
      })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple ? binding.value.some(function (v) {
          return hasNoMatchingOption(v, curOptions);
        }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);

        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected(el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */

  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected(el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;

  if (isMultiple && !Array.isArray(value)) {
    "development" !== 'production' && warn("<select multiple v-model=\"" + binding.expression + "\"> " + "expects an Array value for its binding, but got " + Object.prototype.toString.call(value).slice(8, -1), vm);
    return;
  }

  var selected, option;

  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];

    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;

      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }

        return;
      }
    }
  }

  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption(value, options) {
  return options.every(function (o) {
    return !looseEqual(o, value);
  });
}

function getValue(option) {
  return '_value' in option ? option._value : option.value;
}

function onCompositionStart(e) {
  e.target.composing = true;
}

function onCompositionEnd(e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) {
    return;
  }

  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger(el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}
/*  */
// recursively search for possible transition defined inside the component root


function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}

var show = {
  bind: function bind(el, ref, vnode) {
    var value = ref.value;
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;

    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },
  update: function update(el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;
    /* istanbul ignore if */

    if (!value === !oldValue) {
      return;
    }

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;

    if (transition$$1) {
      vnode.data.show = true;

      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },
  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};
var platformDirectives = {
  model: directive,
  show: show
};
/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
}; // in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered

function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;

  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}

function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options; // props

  for (var key in options.propsData) {
    data[key] = comp[key];
  } // events.
  // extract listeners and pass them directly to the transition methods


  var listeners = options._parentListeners;

  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }

  return data;
}

function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    });
  }
}

function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}

function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}

var isNotTextNode = function (c) {
  return c.tag || isAsyncPlaceholder(c);
};

var isVShowDirective = function (d) {
  return d.name === 'show';
};

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots.default;

    if (!children) {
      return;
    } // filter out text nodes (possible whitespaces)


    children = children.filter(isNotTextNode);
    /* istanbul ignore if */

    if (!children.length) {
      return;
    } // warn multiple elements


    if ("development" !== 'production' && children.length > 1) {
      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
    }

    var mode = this.mode; // warn invalid mode

    if ("development" !== 'production' && mode && mode !== 'in-out' && mode !== 'out-in') {
      warn('invalid <transition> mode: ' + mode, this.$parent);
    }

    var rawChild = children[0]; // if this is a component root node and the component's
    // parent container node also has transition, skip.

    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    } // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive


    var child = getRealChild(rawChild);
    /* istanbul ignore if */

    if (!child) {
      return rawChild;
    }

    if (this._leaving) {
      return placeholder(h, rawChild);
    } // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.


    var id = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild); // mark v-show
    // so that the transition module can hand over the control to the directive

    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && // #6687 component root is a comment node
    !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data); // handle transition mode

      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }

        var delayedLeave;

        var performLeave = function () {
          delayedLeave();
        };

        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
          delayedLeave = leave;
        });
      }
    }

    return rawChild;
  }
};
/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);
delete props.mode;
var TransitionGroup = {
  props: props,
  beforeMount: function beforeMount() {
    var this$1 = this;
    var update = this._update;

    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1); // force removing pass

      this$1.__patch__(this$1._vnode, this$1.kept, false, // hydrating
      true // removeOnly (!important, avoids unnecessary moves)
      );

      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },
  render: function render(h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];

      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c;
          (c.data || (c.data = {})).transition = transitionData;
        } else if ("development" !== 'production') {
          var opts = c.componentOptions;
          var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;
          warn("<transition-group> children must be keyed: <" + name + ">");
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];

      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();

        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }

      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children);
  },
  updated: function updated() {
    var children = this.prevChildren;
    var moveClass = this.moveClass || (this.name || 'v') + '-move';

    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return;
    } // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.


    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation); // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line

    this._reflow = document.body.offsetHeight;
    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
          if (e && e.target !== el) {
            return;
          }

          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },
  methods: {
    hasMove: function hasMove(el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false;
      }
      /* istanbul ignore if */


      if (this._hasMove) {
        return this._hasMove;
      } // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.


      var clone = el.cloneNode();

      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) {
          removeClass(clone, cls);
        });
      }

      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return this._hasMove = info.hasTransform;
    }
  }
};

function callPendingCbs(c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */


  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition(c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation(c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;

  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};
/*  */
// install platform specific utils

Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement; // install platform runtime directives & components

extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents); // install platform patch function

Vue.prototype.__patch__ = inBrowser ? patch : noop; // public mount method

Vue.prototype.$mount = function (el, hydrating) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating);
}; // devtools global hook

/* istanbul ignore next */


if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else if ("development" !== 'production' && "development" !== 'test') {
        console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
      }
    }

    if ("development" !== 'production' && "development" !== 'test' && config.productionTip !== false && typeof console !== 'undefined') {
      console[console.info ? 'info' : 'log']("You are running Vue in development mode.\n" + "Make sure to turn on production mode when deploying for production.\n" + "See more tips at https://vuejs.org/guide/deployment.html");
    }
  }, 0);
}
/*  */


var _default = Vue;
exports.default = _default;
},{}],"node_modules/tone/build/esm/version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "14.7.77";
exports.version = version;
},{}],"node_modules/@babel/runtime/helpers/arrayWithHoles.js":[function(require,module,exports) {
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],"node_modules/@babel/runtime/helpers/iterableToArrayLimit.js":[function(require,module,exports) {
function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],"node_modules/@babel/runtime/helpers/arrayLikeToArray.js":[function(require,module,exports) {
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],"node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js":[function(require,module,exports) {
var arrayLikeToArray = require("./arrayLikeToArray.js");

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{"./arrayLikeToArray.js":"node_modules/@babel/runtime/helpers/arrayLikeToArray.js"}],"node_modules/@babel/runtime/helpers/nonIterableRest.js":[function(require,module,exports) {
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableRest;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],"node_modules/@babel/runtime/helpers/slicedToArray.js":[function(require,module,exports) {
var arrayWithHoles = require("./arrayWithHoles.js");

var iterableToArrayLimit = require("./iterableToArrayLimit.js");

var unsupportedIterableToArray = require("./unsupportedIterableToArray.js");

var nonIterableRest = require("./nonIterableRest.js");

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{"./arrayWithHoles.js":"node_modules/@babel/runtime/helpers/arrayWithHoles.js","./iterableToArrayLimit.js":"node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","./unsupportedIterableToArray.js":"node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","./nonIterableRest.js":"node_modules/@babel/runtime/helpers/nonIterableRest.js"}],"node_modules/@babel/runtime/helpers/classCallCheck.js":[function(require,module,exports) {
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],"node_modules/@babel/runtime/helpers/createClass.js":[function(require,module,exports) {
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;
module.exports["default"] = module.exports, module.exports.__esModule = true;
},{}],"node_modules/automation-events/build/es5/bundle.js":[function(require,module,exports) {
var define;
var global = arguments[3];
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/helpers/slicedToArray'), require('@babel/runtime/helpers/classCallCheck'), require('@babel/runtime/helpers/createClass')) : typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/helpers/slicedToArray', '@babel/runtime/helpers/classCallCheck', '@babel/runtime/helpers/createClass'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.automationEvents = {}, global._slicedToArray, global._classCallCheck, global._createClass));
})(this, function (exports, _slicedToArray, _classCallCheck, _createClass) {
  'use strict';

  function _interopDefaultLegacy(e) {
    return e && typeof e === 'object' && 'default' in e ? e : {
      'default': e
    };
  }

  var _slicedToArray__default =
  /*#__PURE__*/
  _interopDefaultLegacy(_slicedToArray);

  var _classCallCheck__default =
  /*#__PURE__*/
  _interopDefaultLegacy(_classCallCheck);

  var _createClass__default =
  /*#__PURE__*/
  _interopDefaultLegacy(_createClass);

  var createExtendedExponentialRampToValueAutomationEvent = function createExtendedExponentialRampToValueAutomationEvent(value, endTime, insertTime) {
    return {
      endTime: endTime,
      insertTime: insertTime,
      type: 'exponentialRampToValue',
      value: value
    };
  };

  var createExtendedLinearRampToValueAutomationEvent = function createExtendedLinearRampToValueAutomationEvent(value, endTime, insertTime) {
    return {
      endTime: endTime,
      insertTime: insertTime,
      type: 'linearRampToValue',
      value: value
    };
  };

  var createSetValueAutomationEvent = function createSetValueAutomationEvent(value, startTime) {
    return {
      startTime: startTime,
      type: 'setValue',
      value: value
    };
  };

  var createSetValueCurveAutomationEvent = function createSetValueCurveAutomationEvent(values, startTime, duration) {
    return {
      duration: duration,
      startTime: startTime,
      type: 'setValueCurve',
      values: values
    };
  };

  var getTargetValueAtTime = function getTargetValueAtTime(time, valueAtStartTime, _ref) {
    var startTime = _ref.startTime,
        target = _ref.target,
        timeConstant = _ref.timeConstant;
    return target + (valueAtStartTime - target) * Math.exp((startTime - time) / timeConstant);
  };

  var isExponentialRampToValueAutomationEvent = function isExponentialRampToValueAutomationEvent(automationEvent) {
    return automationEvent.type === 'exponentialRampToValue';
  };

  var isLinearRampToValueAutomationEvent = function isLinearRampToValueAutomationEvent(automationEvent) {
    return automationEvent.type === 'linearRampToValue';
  };

  var isAnyRampToValueAutomationEvent = function isAnyRampToValueAutomationEvent(automationEvent) {
    return isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent);
  };

  var isSetValueAutomationEvent = function isSetValueAutomationEvent(automationEvent) {
    return automationEvent.type === 'setValue';
  };

  var isSetValueCurveAutomationEvent = function isSetValueCurveAutomationEvent(automationEvent) {
    return automationEvent.type === 'setValueCurve';
  };

  var getValueOfAutomationEventAtIndexAtTime = function getValueOfAutomationEventAtIndexAtTime(automationEvents, index, time, defaultValue) {
    var automationEvent = automationEvents[index];
    return automationEvent === undefined ? defaultValue : isAnyRampToValueAutomationEvent(automationEvent) || isSetValueAutomationEvent(automationEvent) ? automationEvent.value : isSetValueCurveAutomationEvent(automationEvent) ? automationEvent.values[automationEvent.values.length - 1] : getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, automationEvent.startTime, defaultValue), automationEvent);
  };

  var getEndTimeAndValueOfPreviousAutomationEvent = function getEndTimeAndValueOfPreviousAutomationEvent(automationEvents, index, currentAutomationEvent, nextAutomationEvent, defaultValue) {
    return currentAutomationEvent === undefined ? [nextAutomationEvent.insertTime, defaultValue] : isAnyRampToValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.endTime, currentAutomationEvent.value] : isSetValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime, currentAutomationEvent.value] : isSetValueCurveAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime + currentAutomationEvent.duration, currentAutomationEvent.values[currentAutomationEvent.values.length - 1]] : [currentAutomationEvent.startTime, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, currentAutomationEvent.startTime, defaultValue)];
  };

  var isCancelAndHoldAutomationEvent = function isCancelAndHoldAutomationEvent(automationEvent) {
    return automationEvent.type === 'cancelAndHold';
  };

  var isCancelScheduledValuesAutomationEvent = function isCancelScheduledValuesAutomationEvent(automationEvent) {
    return automationEvent.type === 'cancelScheduledValues';
  };

  var getEventTime = function getEventTime(automationEvent) {
    if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {
      return automationEvent.cancelTime;
    }

    if (isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent)) {
      return automationEvent.endTime;
    }

    return automationEvent.startTime;
  };

  var getExponentialRampValueAtTime = function getExponentialRampValueAtTime(time, startTime, valueAtStartTime, _ref) {
    var endTime = _ref.endTime,
        value = _ref.value;

    if (valueAtStartTime === value) {
      return value;
    }

    if (0 < valueAtStartTime && 0 < value || valueAtStartTime < 0 && value < 0) {
      return valueAtStartTime * Math.pow(value / valueAtStartTime, (time - startTime) / (endTime - startTime));
    }

    return 0;
  };

  var getLinearRampValueAtTime = function getLinearRampValueAtTime(time, startTime, valueAtStartTime, _ref) {
    var endTime = _ref.endTime,
        value = _ref.value;
    return valueAtStartTime + (time - startTime) / (endTime - startTime) * (value - valueAtStartTime);
  };

  var interpolateValue = function interpolateValue(values, theoreticIndex) {
    var lowerIndex = Math.floor(theoreticIndex);
    var upperIndex = Math.ceil(theoreticIndex);

    if (lowerIndex === upperIndex) {
      return values[lowerIndex];
    }

    return (1 - (theoreticIndex - lowerIndex)) * values[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * values[upperIndex];
  };

  var getValueCurveValueAtTime = function getValueCurveValueAtTime(time, _ref) {
    var duration = _ref.duration,
        startTime = _ref.startTime,
        values = _ref.values;
    var theoreticIndex = (time - startTime) / duration * (values.length - 1);
    return interpolateValue(values, theoreticIndex);
  };

  var isSetTargetAutomationEvent = function isSetTargetAutomationEvent(automationEvent) {
    return automationEvent.type === 'setTarget';
  };

  var AutomationEventList =
  /*#__PURE__*/
  function () {
    function AutomationEventList(defaultValue) {
      _classCallCheck__default['default'](this, AutomationEventList);

      this._automationEvents = [];
      this._currenTime = 0;
      this._defaultValue = defaultValue;
    }

    _createClass__default['default'](AutomationEventList, [{
      key: Symbol.iterator,
      value: function value() {
        return this._automationEvents[Symbol.iterator]();
      }
    }, {
      key: "add",
      value: function add(automationEvent) {
        var eventTime = getEventTime(automationEvent);

        if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {
          var index = this._automationEvents.findIndex(function (currentAutomationEvent) {
            if (isCancelScheduledValuesAutomationEvent(automationEvent) && isSetValueCurveAutomationEvent(currentAutomationEvent)) {
              return currentAutomationEvent.startTime + currentAutomationEvent.duration >= eventTime;
            }

            return getEventTime(currentAutomationEvent) >= eventTime;
          });

          var removedAutomationEvent = this._automationEvents[index];

          if (index !== -1) {
            this._automationEvents = this._automationEvents.slice(0, index);
          }

          if (isCancelAndHoldAutomationEvent(automationEvent)) {
            var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];

            if (removedAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(removedAutomationEvent)) {
              if (isSetTargetAutomationEvent(lastAutomationEvent)) {
                throw new Error('The internal list is malformed.');
              }

              var startTime = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.startTime + lastAutomationEvent.duration : getEventTime(lastAutomationEvent);
              var startValue = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.values[lastAutomationEvent.values.length - 1] : lastAutomationEvent.value;
              var value = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? getExponentialRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent) : getLinearRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent);
              var truncatedAutomationEvent = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? createExtendedExponentialRampToValueAutomationEvent(value, eventTime, this._currenTime) : createExtendedLinearRampToValueAutomationEvent(value, eventTime, this._currenTime);

              this._automationEvents.push(truncatedAutomationEvent);
            }

            if (lastAutomationEvent !== undefined && isSetTargetAutomationEvent(lastAutomationEvent)) {
              this._automationEvents.push(createSetValueAutomationEvent(this.getValue(eventTime), eventTime));
            }

            if (lastAutomationEvent !== undefined && isSetValueCurveAutomationEvent(lastAutomationEvent) && lastAutomationEvent.startTime + lastAutomationEvent.duration > eventTime) {
              this._automationEvents[this._automationEvents.length - 1] = createSetValueCurveAutomationEvent(new Float32Array([6, 7]), lastAutomationEvent.startTime, eventTime - lastAutomationEvent.startTime);
            }
          }
        } else {
          var _index = this._automationEvents.findIndex(function (currentAutomationEvent) {
            return getEventTime(currentAutomationEvent) > eventTime;
          });

          var previousAutomationEvent = _index === -1 ? this._automationEvents[this._automationEvents.length - 1] : this._automationEvents[_index - 1];

          if (previousAutomationEvent !== undefined && isSetValueCurveAutomationEvent(previousAutomationEvent) && getEventTime(previousAutomationEvent) + previousAutomationEvent.duration > eventTime) {
            return false;
          }

          var persistentAutomationEvent = isExponentialRampToValueAutomationEvent(automationEvent) ? createExtendedExponentialRampToValueAutomationEvent(automationEvent.value, automationEvent.endTime, this._currenTime) : isLinearRampToValueAutomationEvent(automationEvent) ? createExtendedLinearRampToValueAutomationEvent(automationEvent.value, eventTime, this._currenTime) : automationEvent;

          if (_index === -1) {
            this._automationEvents.push(persistentAutomationEvent);
          } else {
            if (isSetValueCurveAutomationEvent(automationEvent) && eventTime + automationEvent.duration > getEventTime(this._automationEvents[_index])) {
              return false;
            }

            this._automationEvents.splice(_index, 0, persistentAutomationEvent);
          }
        }

        return true;
      }
    }, {
      key: "flush",
      value: function flush(time) {
        var index = this._automationEvents.findIndex(function (currentAutomationEvent) {
          return getEventTime(currentAutomationEvent) > time;
        });

        if (index > 1) {
          var remainingAutomationEvents = this._automationEvents.slice(index - 1);

          var firstRemainingAutomationEvent = remainingAutomationEvents[0];

          if (isSetTargetAutomationEvent(firstRemainingAutomationEvent)) {
            remainingAutomationEvents.unshift(createSetValueAutomationEvent(getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, firstRemainingAutomationEvent.startTime, this._defaultValue), firstRemainingAutomationEvent.startTime));
          }

          this._automationEvents = remainingAutomationEvents;
        }
      }
    }, {
      key: "getValue",
      value: function getValue(time) {
        if (this._automationEvents.length === 0) {
          return this._defaultValue;
        }

        var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];

        var index = this._automationEvents.findIndex(function (automationEvent) {
          return getEventTime(automationEvent) > time;
        });

        var nextAutomationEvent = this._automationEvents[index];
        var currentAutomationEvent = getEventTime(lastAutomationEvent) <= time ? lastAutomationEvent : this._automationEvents[index - 1];

        if (currentAutomationEvent !== undefined && isSetTargetAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || nextAutomationEvent.insertTime > time)) {
          return getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, currentAutomationEvent.startTime, this._defaultValue), currentAutomationEvent);
        }

        if (currentAutomationEvent !== undefined && isSetValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {
          return currentAutomationEvent.value;
        }

        if (currentAutomationEvent !== undefined && isSetValueCurveAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || currentAutomationEvent.startTime + currentAutomationEvent.duration > time)) {
          if (time < currentAutomationEvent.startTime + currentAutomationEvent.duration) {
            return getValueCurveValueAtTime(time, currentAutomationEvent);
          }

          return currentAutomationEvent.values[currentAutomationEvent.values.length - 1];
        }

        if (currentAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {
          return currentAutomationEvent.value;
        }

        if (nextAutomationEvent !== undefined && isExponentialRampToValueAutomationEvent(nextAutomationEvent)) {
          var _getEndTimeAndValueOf = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),
              _getEndTimeAndValueOf2 = _slicedToArray__default['default'](_getEndTimeAndValueOf, 2),
              startTime = _getEndTimeAndValueOf2[0],
              value = _getEndTimeAndValueOf2[1];

          return getExponentialRampValueAtTime(time, startTime, value, nextAutomationEvent);
        }

        if (nextAutomationEvent !== undefined && isLinearRampToValueAutomationEvent(nextAutomationEvent)) {
          var _getEndTimeAndValueOf3 = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),
              _getEndTimeAndValueOf4 = _slicedToArray__default['default'](_getEndTimeAndValueOf3, 2),
              _startTime = _getEndTimeAndValueOf4[0],
              _value = _getEndTimeAndValueOf4[1];

          return getLinearRampValueAtTime(time, _startTime, _value, nextAutomationEvent);
        }

        return this._defaultValue;
      }
    }]);

    return AutomationEventList;
  }();

  var createCancelAndHoldAutomationEvent = function createCancelAndHoldAutomationEvent(cancelTime) {
    return {
      cancelTime: cancelTime,
      type: 'cancelAndHold'
    };
  };

  var createCancelScheduledValuesAutomationEvent = function createCancelScheduledValuesAutomationEvent(cancelTime) {
    return {
      cancelTime: cancelTime,
      type: 'cancelScheduledValues'
    };
  };

  var createExponentialRampToValueAutomationEvent = function createExponentialRampToValueAutomationEvent(value, endTime) {
    return {
      endTime: endTime,
      type: 'exponentialRampToValue',
      value: value
    };
  };

  var createLinearRampToValueAutomationEvent = function createLinearRampToValueAutomationEvent(value, endTime) {
    return {
      endTime: endTime,
      type: 'linearRampToValue',
      value: value
    };
  };

  var createSetTargetAutomationEvent = function createSetTargetAutomationEvent(target, startTime, timeConstant) {
    return {
      startTime: startTime,
      target: target,
      timeConstant: timeConstant,
      type: 'setTarget'
    };
  };

  exports.AutomationEventList = AutomationEventList;
  exports.createCancelAndHoldAutomationEvent = createCancelAndHoldAutomationEvent;
  exports.createCancelScheduledValuesAutomationEvent = createCancelScheduledValuesAutomationEvent;
  exports.createExponentialRampToValueAutomationEvent = createExponentialRampToValueAutomationEvent;
  exports.createLinearRampToValueAutomationEvent = createLinearRampToValueAutomationEvent;
  exports.createSetTargetAutomationEvent = createSetTargetAutomationEvent;
  exports.createSetValueAutomationEvent = createSetValueAutomationEvent;
  exports.createSetValueCurveAutomationEvent = createSetValueCurveAutomationEvent;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});
},{"@babel/runtime/helpers/slicedToArray":"node_modules/@babel/runtime/helpers/slicedToArray.js","@babel/runtime/helpers/classCallCheck":"node_modules/@babel/runtime/helpers/classCallCheck.js","@babel/runtime/helpers/createClass":"node_modules/@babel/runtime/helpers/createClass.js"}],"node_modules/standardized-audio-context/build/es2019/factories/abort-error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAbortError = void 0;

const createAbortError = () => new DOMException('', 'AbortError');

exports.createAbortError = createAbortError;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/add-active-input-connection-to-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAddActiveInputConnectionToAudioNode = void 0;

const createAddActiveInputConnectionToAudioNode = insertElementInSet => {
  return (activeInputs, source, [output, input, eventListener], ignoreDuplicates) => {
    insertElementInSet(activeInputs[input], [source, output, eventListener], activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);
  };
};

exports.createAddActiveInputConnectionToAudioNode = createAddActiveInputConnectionToAudioNode;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/add-audio-node-connections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAddAudioNodeConnections = void 0;

const createAddAudioNodeConnections = audioNodeConnectionsStore => {
  return (audioNode, audioNodeRenderer, nativeAudioNode) => {
    const activeInputs = [];

    for (let i = 0; i < nativeAudioNode.numberOfInputs; i += 1) {
      activeInputs.push(new Set());
    }

    audioNodeConnectionsStore.set(audioNode, {
      activeInputs,
      outputs: new Set(),
      passiveInputs: new WeakMap(),
      renderer: audioNodeRenderer
    });
  };
};

exports.createAddAudioNodeConnections = createAddAudioNodeConnections;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/add-audio-param-connections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAddAudioParamConnections = void 0;

const createAddAudioParamConnections = audioParamConnectionsStore => {
  return (audioParam, audioParamRenderer) => {
    audioParamConnectionsStore.set(audioParam, {
      activeInputs: new Set(),
      passiveInputs: new WeakMap(),
      renderer: audioParamRenderer
    });
  };
};

exports.createAddAudioParamConnections = createAddAudioParamConnections;
},{}],"node_modules/standardized-audio-context/build/es2019/globals.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NODE_TO_PROCESSOR_MAPS = exports.NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = exports.CYCLE_COUNTERS = exports.EVENT_LISTENERS = exports.CONTEXT_STORE = exports.AUDIO_PARAM_STORE = exports.AUDIO_PARAM_CONNECTIONS_STORE = exports.AUDIO_NODE_STORE = exports.AUDIO_NODE_CONNECTIONS_STORE = exports.ACTIVE_AUDIO_NODE_STORE = void 0;
const ACTIVE_AUDIO_NODE_STORE = new WeakSet();
exports.ACTIVE_AUDIO_NODE_STORE = ACTIVE_AUDIO_NODE_STORE;
const AUDIO_NODE_CONNECTIONS_STORE = new WeakMap();
exports.AUDIO_NODE_CONNECTIONS_STORE = AUDIO_NODE_CONNECTIONS_STORE;
const AUDIO_NODE_STORE = new WeakMap();
exports.AUDIO_NODE_STORE = AUDIO_NODE_STORE;
const AUDIO_PARAM_CONNECTIONS_STORE = new WeakMap();
exports.AUDIO_PARAM_CONNECTIONS_STORE = AUDIO_PARAM_CONNECTIONS_STORE;
const AUDIO_PARAM_STORE = new WeakMap();
exports.AUDIO_PARAM_STORE = AUDIO_PARAM_STORE;
const CONTEXT_STORE = new WeakMap();
exports.CONTEXT_STORE = CONTEXT_STORE;
const EVENT_LISTENERS = new WeakMap();
exports.EVENT_LISTENERS = EVENT_LISTENERS;
const CYCLE_COUNTERS = new WeakMap(); // This clunky name is borrowed from the spec. :-)

exports.CYCLE_COUNTERS = CYCLE_COUNTERS;
const NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = new WeakMap();
exports.NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS;
const NODE_TO_PROCESSOR_MAPS = new WeakMap();
exports.NODE_TO_PROCESSOR_MAPS = NODE_TO_PROCESSOR_MAPS;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/is-constructible.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isConstructible = void 0;
const handler = {
  construct() {
    return handler;
  }

};

const isConstructible = constructible => {
  try {
    const proxy = new Proxy(constructible, handler);
    new proxy(); // tslint:disable-line:no-unused-expression
  } catch {
    return false;
  }

  return true;
};

exports.isConstructible = isConstructible;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/split-import-statements.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.splitImportStatements = void 0;

/*
 * This massive regex tries to cover all the following cases.
 *
 * import './path';
 * import defaultImport from './path';
 * import { namedImport } from './path';
 * import { namedImport as renamendImport } from './path';
 * import * as namespaceImport from './path';
 * import defaultImport, { namedImport } from './path';
 * import defaultImport, { namedImport as renamendImport } from './path';
 * import defaultImport, * as namespaceImport from './path';
 */
const IMPORT_STATEMENT_REGEX = /^import(?:(?:[\s]+[\w]+|(?:[\s]+[\w]+[\s]*,)?[\s]*\{[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?(?:[\s]*,[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?)*[\s]*}|(?:[\s]+[\w]+[\s]*,)?[\s]*\*[\s]+as[\s]+[\w]+)[\s]+from)?(?:[\s]*)("([^"\\]|\\.)+"|'([^'\\]|\\.)+')(?:[\s]*);?/; // tslint:disable-line:max-line-length

const splitImportStatements = (source, url) => {
  const importStatements = [];
  let sourceWithoutImportStatements = source.replace(/^[\s]+/, '');
  let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);

  while (result !== null) {
    const unresolvedUrl = result[1].slice(1, -1);
    const importStatementWithResolvedUrl = result[0].replace(/([\s]+)?;?$/, '').replace(unresolvedUrl, new URL(unresolvedUrl, url).toString());
    importStatements.push(importStatementWithResolvedUrl);
    sourceWithoutImportStatements = sourceWithoutImportStatements.slice(result[0].length).replace(/^[\s]+/, '');
    result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);
  }

  return [importStatements.join(';'), sourceWithoutImportStatements];
};

exports.splitImportStatements = splitImportStatements;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/add-audio-worklet-module.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAddAudioWorkletModule = void 0;

var _globals = require("../globals");

var _isConstructible = require("../helpers/is-constructible");

var _splitImportStatements = require("../helpers/split-import-statements");

const verifyParameterDescriptors = parameterDescriptors => {
  if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {
    throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');
  }
};

const verifyProcessorCtor = processorCtor => {
  if (!(0, _isConstructible.isConstructible)(processorCtor)) {
    throw new TypeError('The given value for processorCtor should be a constructor.');
  }

  if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {
    throw new TypeError('The given value for processorCtor should have a prototype.');
  }
};

const createAddAudioWorkletModule = (cacheTestResult, createNotSupportedError, evaluateSource, exposeCurrentFrameAndCurrentTime, fetchSource, getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, ongoingRequests, resolvedRequests, testAudioWorkletProcessorPostMessageSupport, window) => {
  return (context, moduleURL, options = {
    credentials: 'omit'
  }) => {
    const nativeContext = getNativeContext(context); // Bug #59: Safari does not implement the audioWorklet property.

    if (nativeContext.audioWorklet !== undefined) {
      return Promise.all([fetchSource(moduleURL), Promise.resolve(cacheTestResult(testAudioWorkletProcessorPostMessageSupport, testAudioWorkletProcessorPostMessageSupport))]).then(([[source, absoluteUrl], isSupportingPostMessage]) => {
        const [importStatements, sourceWithoutImportStatements] = (0, _splitImportStatements.splitImportStatements)(source, absoluteUrl);
        /*
         * Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.
         *
         * This is the unminified version of the code used below.
         *
         * ```js
         * class extends AudioWorkletProcessor {
         *
         *     __buffers = new WeakSet();
         *
         *     constructor () {
         *         super();
         *
         *         this.port.postMessage = ((postMessage) => {
         *             return (message, transferables) => {
         *                 const filteredTransferables = (transferables)
         *                     ? transferables.filter((transferable) => !this.__buffers.has(transferable))
         *                     : transferables;
         *
         *                 return postMessage.call(this.port, message, filteredTransferables);
         *              };
         *         })(this.port.postMessage);
         *     }
         * }
         * ```
         */

        const patchedSourceWithoutImportStatements = isSupportingPostMessage ? sourceWithoutImportStatements : sourceWithoutImportStatements.replace(/\s+extends\s+AudioWorkletProcessor\s*{/, ` extends (class extends AudioWorkletProcessor {__b=new WeakSet();constructor(){super();(p=>p.postMessage=(q=>(m,t)=>q.call(p,m,t?t.filter(u=>!this.__b.has(u)):t))(p.postMessage))(this.port)}}){`);
        /*
         * Bug #170: Chrome and Edge do call process() with an array with empty channelData for each input if no input is connected.
         *
         * Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.
         *
         * This is the unminified version of the code used below:
         *
         * ```js
         * `${ importStatements };
         * ((registerProcessor) => {${ sourceWithoutImportStatements }
         * })((name, processorCtor) => registerProcessor(name, class extends processorCtor {
         *
         *     __collectBuffers = (array) => {
         *         array.forEach((element) => this.__buffers.add(element.buffer));
         *     };
         *
         *     process (inputs, outputs, parameters) {
         *         inputs.forEach(this.__collectBuffers);
         *         outputs.forEach(this.__collectBuffers);
         *         this.__collectBuffers(Object.values(parameters));
         *
         *         return super.process(
         *             (inputs.map((input) => input.some((channelData) => channelData.length === 0)) ? [ ] : input),
         *             outputs,
         *             parameters
         *         );
         *     }
         *
         * }))`
         * ```
         */

        const memberDefinition = isSupportingPostMessage ? '' : '__c = (a) => a.forEach(e=>this.__b.add(e.buffer));';
        const bufferRegistration = isSupportingPostMessage ? '' : 'i.forEach(this.__c);o.forEach(this.__c);this.__c(Object.values(p));';
        const wrappedSource = `${importStatements};(registerProcessor=>{${patchedSourceWithoutImportStatements}
})((n,p)=>registerProcessor(n,class extends p{${memberDefinition}process(i,o,p){${bufferRegistration}return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}))`;
        const blob = new Blob([wrappedSource], {
          type: 'application/javascript; charset=utf-8'
        });
        const url = URL.createObjectURL(blob);
        return nativeContext.audioWorklet.addModule(url, options).then(() => {
          if (isNativeOfflineAudioContext(nativeContext)) {
            return;
          } // Bug #186: Chrome, Edge and Opera do not allow to create an AudioWorkletNode on a closed AudioContext.


          const backupOfflineAudioContext = getOrCreateBackupOfflineAudioContext(nativeContext);
          return backupOfflineAudioContext.audioWorklet.addModule(url, options);
        }).finally(() => URL.revokeObjectURL(url));
      });
    }

    const resolvedRequestsOfContext = resolvedRequests.get(context);

    if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {
      return Promise.resolve();
    }

    const ongoingRequestsOfContext = ongoingRequests.get(context);

    if (ongoingRequestsOfContext !== undefined) {
      const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);

      if (promiseOfOngoingRequest !== undefined) {
        return promiseOfOngoingRequest;
      }
    }

    const promise = fetchSource(moduleURL).then(([source, absoluteUrl]) => {
      const [importStatements, sourceWithoutImportStatements] = (0, _splitImportStatements.splitImportStatements)(source, absoluteUrl);
      /*
       * This is the unminified version of the code used below:
       *
       * ```js
       * ${ importStatements };
       * ((a, b) => {
       *     (a[b] = a[b] || [ ]).push(
       *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {
       *             ${ sourceWithoutImportStatements }
       *         }
       *     );
       * })(window, '_AWGS');
       * ```
       */
      // tslint:disable-next-line:max-line-length

      const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}
})})(window,'_AWGS')`; // @todo Evaluating the given source code is a possible security problem.

      return evaluateSource(wrappedSource);
    }).then(() => {
      const evaluateAudioWorkletGlobalScope = window._AWGS.pop();

      if (evaluateAudioWorkletGlobalScope === undefined) {
        // Bug #182 Chrome, Edge and Opera do throw an instance of a SyntaxError instead of a DOMException.
        throw new SyntaxError();
      }

      exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor {}, undefined, (name, processorCtor) => {
        if (name.trim() === '') {
          throw createNotSupportedError();
        }

        const nodeNameToProcessorConstructorMap = _globals.NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);

        if (nodeNameToProcessorConstructorMap !== undefined) {
          if (nodeNameToProcessorConstructorMap.has(name)) {
            throw createNotSupportedError();
          }

          verifyProcessorCtor(processorCtor);
          verifyParameterDescriptors(processorCtor.parameterDescriptors);
          nodeNameToProcessorConstructorMap.set(name, processorCtor);
        } else {
          verifyProcessorCtor(processorCtor);
          verifyParameterDescriptors(processorCtor.parameterDescriptors);

          _globals.NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));
        }
      }, nativeContext.sampleRate, undefined, undefined));
    });

    if (ongoingRequestsOfContext === undefined) {
      ongoingRequests.set(context, new Map([[moduleURL, promise]]));
    } else {
      ongoingRequestsOfContext.set(moduleURL, promise);
    }

    promise.then(() => {
      const rslvdRqstsFCntxt = resolvedRequests.get(context);

      if (rslvdRqstsFCntxt === undefined) {
        resolvedRequests.set(context, new Set([moduleURL]));
      } else {
        rslvdRqstsFCntxt.add(moduleURL);
      }
    }).finally(() => {
      const ngngRqstsFCntxt = ongoingRequests.get(context);

      if (ngngRqstsFCntxt !== undefined) {
        ngngRqstsFCntxt.delete(moduleURL);
      }
    });
    return promise;
  };
};

exports.createAddAudioWorkletModule = createAddAudioWorkletModule;
},{"../globals":"node_modules/standardized-audio-context/build/es2019/globals.js","../helpers/is-constructible":"node_modules/standardized-audio-context/build/es2019/helpers/is-constructible.js","../helpers/split-import-statements":"node_modules/standardized-audio-context/build/es2019/helpers/split-import-statements.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getValueForKey = void 0;

const getValueForKey = (map, key) => {
  const value = map.get(key);

  if (value === undefined) {
    throw new Error('A value with the given key could not be found.');
  }

  return value;
};

exports.getValueForKey = getValueForKey;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pickElementFromSet = void 0;

const pickElementFromSet = (set, predicate) => {
  const matchingElements = Array.from(set).filter(predicate);

  if (matchingElements.length > 1) {
    throw Error('More than one element was found.');
  }

  if (matchingElements.length === 0) {
    throw Error('No element was found.');
  }

  const [matchingElement] = matchingElements;
  set.delete(matchingElement);
  return matchingElement;
};

exports.pickElementFromSet = pickElementFromSet;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deletePassiveInputConnectionToAudioNode = void 0;

var _getValueForKey = require("./get-value-for-key");

var _pickElementFromSet = require("./pick-element-from-set");

const deletePassiveInputConnectionToAudioNode = (passiveInputs, source, output, input) => {
  const passiveInputConnections = (0, _getValueForKey.getValueForKey)(passiveInputs, source);
  const matchingConnection = (0, _pickElementFromSet.pickElementFromSet)(passiveInputConnections, passiveInputConnection => passiveInputConnection[0] === output && passiveInputConnection[1] === input);

  if (passiveInputConnections.size === 0) {
    passiveInputs.delete(source);
  }

  return matchingConnection;
};

exports.deletePassiveInputConnectionToAudioNode = deletePassiveInputConnectionToAudioNode;
},{"./get-value-for-key":"node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js","./pick-element-from-set":"node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEventListenersOfAudioNode = void 0;

var _globals = require("../globals");

var _getValueForKey = require("./get-value-for-key");

const getEventListenersOfAudioNode = audioNode => {
  return (0, _getValueForKey.getValueForKey)(_globals.EVENT_LISTENERS, audioNode);
};

exports.getEventListenersOfAudioNode = getEventListenersOfAudioNode;
},{"../globals":"node_modules/standardized-audio-context/build/es2019/globals.js","./get-value-for-key":"node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setInternalStateToActive = void 0;

var _globals = require("../globals");

var _getEventListenersOfAudioNode = require("./get-event-listeners-of-audio-node");

const setInternalStateToActive = audioNode => {
  if (_globals.ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {
    throw new Error('The AudioNode is already stored.');
  }

  _globals.ACTIVE_AUDIO_NODE_STORE.add(audioNode);

  (0, _getEventListenersOfAudioNode.getEventListenersOfAudioNode)(audioNode).forEach(eventListener => eventListener(true));
};

exports.setInternalStateToActive = setInternalStateToActive;
},{"../globals":"node_modules/standardized-audio-context/build/es2019/globals.js","./get-event-listeners-of-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js"}],"node_modules/standardized-audio-context/build/es2019/guards/audio-worklet-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAudioWorkletNode = void 0;

const isAudioWorkletNode = audioNode => {
  return 'port' in audioNode;
};

exports.isAudioWorkletNode = isAudioWorkletNode;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setInternalStateToPassive = void 0;

var _globals = require("../globals");

var _getEventListenersOfAudioNode = require("./get-event-listeners-of-audio-node");

const setInternalStateToPassive = audioNode => {
  if (!_globals.ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {
    throw new Error('The AudioNode is not stored.');
  }

  _globals.ACTIVE_AUDIO_NODE_STORE.delete(audioNode);

  (0, _getEventListenersOfAudioNode.getEventListenersOfAudioNode)(audioNode).forEach(eventListener => eventListener(false));
};

exports.setInternalStateToPassive = setInternalStateToPassive;
},{"../globals":"node_modules/standardized-audio-context/build/es2019/globals.js","./get-event-listeners-of-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive-when-necessary.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setInternalStateToPassiveWhenNecessary = void 0;

var _audioWorkletNode = require("../guards/audio-worklet-node");

var _setInternalStateToPassive = require("./set-internal-state-to-passive");

// Set the internalState of the audioNode to 'passive' if it is not an AudioWorkletNode and if it has no 'active' input connections.
const setInternalStateToPassiveWhenNecessary = (audioNode, activeInputs) => {
  if (!(0, _audioWorkletNode.isAudioWorkletNode)(audioNode) && activeInputs.every(connections => connections.size === 0)) {
    (0, _setInternalStateToPassive.setInternalStateToPassive)(audioNode);
  }
};

exports.setInternalStateToPassiveWhenNecessary = setInternalStateToPassiveWhenNecessary;
},{"../guards/audio-worklet-node":"node_modules/standardized-audio-context/build/es2019/guards/audio-worklet-node.js","./set-internal-state-to-passive":"node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js"}],"node_modules/standardized-audio-context/build/es2019/factories/add-connection-to-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAddConnectionToAudioNode = void 0;

var _deletePassiveInputConnectionToAudioNode = require("../helpers/delete-passive-input-connection-to-audio-node");

var _setInternalStateToActive = require("../helpers/set-internal-state-to-active");

var _setInternalStateToPassiveWhenNecessary = require("../helpers/set-internal-state-to-passive-when-necessary");

const createAddConnectionToAudioNode = (addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getAudioNodeTailTime, getEventListenersOfAudioNode, getNativeAudioNode, insertElementInSet, isActiveAudioNode, isPartOfACycle, isPassiveAudioNode) => {
  const tailTimeTimeoutIds = new WeakMap();
  return (source, destination, output, input, isOffline) => {
    const {
      activeInputs,
      passiveInputs
    } = getAudioNodeConnections(destination);
    const {
      outputs
    } = getAudioNodeConnections(source);
    const eventListeners = getEventListenersOfAudioNode(source);

    const eventListener = isActive => {
      const nativeDestinationAudioNode = getNativeAudioNode(destination);
      const nativeSourceAudioNode = getNativeAudioNode(source);

      if (isActive) {
        const partialConnection = (0, _deletePassiveInputConnectionToAudioNode.deletePassiveInputConnectionToAudioNode)(passiveInputs, source, output, input);
        addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);

        if (!isOffline && !isPartOfACycle(source)) {
          connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);
        }

        if (isPassiveAudioNode(destination)) {
          (0, _setInternalStateToActive.setInternalStateToActive)(destination);
        }
      } else {
        const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);
        addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);

        if (!isOffline && !isPartOfACycle(source)) {
          disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);
        }

        const tailTime = getAudioNodeTailTime(destination);

        if (tailTime === 0) {
          if (isActiveAudioNode(destination)) {
            (0, _setInternalStateToPassiveWhenNecessary.setInternalStateToPassiveWhenNecessary)(destination, activeInputs);
          }
        } else {
          const tailTimeTimeoutId = tailTimeTimeoutIds.get(destination);

          if (tailTimeTimeoutId !== undefined) {
            clearTimeout(tailTimeTimeoutId);
          }

          tailTimeTimeoutIds.set(destination, setTimeout(() => {
            if (isActiveAudioNode(destination)) {
              (0, _setInternalStateToPassiveWhenNecessary.setInternalStateToPassiveWhenNecessary)(destination, activeInputs);
            }
          }, tailTime * 1000));
        }
      }
    };

    if (insertElementInSet(outputs, [destination, output, input], outputConnection => outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input, true)) {
      eventListeners.add(eventListener);

      if (isActiveAudioNode(source)) {
        addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);
      } else {
        addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);
      }

      return true;
    }

    return false;
  };
};

exports.createAddConnectionToAudioNode = createAddConnectionToAudioNode;
},{"../helpers/delete-passive-input-connection-to-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-node.js","../helpers/set-internal-state-to-active":"node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js","../helpers/set-internal-state-to-passive-when-necessary":"node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive-when-necessary.js"}],"node_modules/standardized-audio-context/build/es2019/factories/add-passive-input-connection-to-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAddPassiveInputConnectionToAudioNode = void 0;

const createAddPassiveInputConnectionToAudioNode = insertElementInSet => {
  return (passiveInputs, input, [source, output, eventListener], ignoreDuplicates) => {
    const passiveInputConnections = passiveInputs.get(source);

    if (passiveInputConnections === undefined) {
      passiveInputs.set(source, new Set([[output, input, eventListener]]));
    } else {
      insertElementInSet(passiveInputConnections, [output, input, eventListener], passiveInputConnection => passiveInputConnection[0] === output && passiveInputConnection[1] === input, ignoreDuplicates);
    }
  };
};

exports.createAddPassiveInputConnectionToAudioNode = createAddPassiveInputConnectionToAudioNode;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/add-silent-connection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAddSilentConnection = void 0;

const createAddSilentConnection = createNativeGainNode => {
  return (nativeContext, nativeAudioScheduledSourceNode) => {
    const nativeGainNode = createNativeGainNode(nativeContext, {
      channelCount: 1,
      channelCountMode: 'explicit',
      channelInterpretation: 'discrete',
      gain: 0
    });
    nativeAudioScheduledSourceNode.connect(nativeGainNode).connect(nativeContext.destination);

    const disconnect = () => {
      nativeAudioScheduledSourceNode.removeEventListener('ended', disconnect);
      nativeAudioScheduledSourceNode.disconnect(nativeGainNode);
      nativeGainNode.disconnect();
    };

    nativeAudioScheduledSourceNode.addEventListener('ended', disconnect);
  };
};

exports.createAddSilentConnection = createAddSilentConnection;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/add-unrendered-audio-worklet-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAddUnrenderedAudioWorkletNode = void 0;

const createAddUnrenderedAudioWorkletNode = getUnrenderedAudioWorkletNodes => {
  return (nativeContext, audioWorkletNode) => {
    getUnrenderedAudioWorkletNodes(nativeContext).add(audioWorkletNode);
  };
};

exports.createAddUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/analyser-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAnalyserNodeConstructor = void 0;
const DEFAULT_OPTIONS = {
  channelCount: 2,
  channelCountMode: 'max',
  channelInterpretation: 'speakers',
  fftSize: 2048,
  maxDecibels: -30,
  minDecibels: -100,
  smoothingTimeConstant: 0.8
};

const createAnalyserNodeConstructor = (audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext) => {
  return class AnalyserNode extends audionNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);
      const analyserNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null;
      super(context, false, nativeAnalyserNode, analyserNodeRenderer);
      this._nativeAnalyserNode = nativeAnalyserNode;
    }

    get fftSize() {
      return this._nativeAnalyserNode.fftSize;
    }

    set fftSize(value) {
      this._nativeAnalyserNode.fftSize = value;
    }

    get frequencyBinCount() {
      return this._nativeAnalyserNode.frequencyBinCount;
    }

    get maxDecibels() {
      return this._nativeAnalyserNode.maxDecibels;
    }

    set maxDecibels(value) {
      // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.
      const maxDecibels = this._nativeAnalyserNode.maxDecibels;
      this._nativeAnalyserNode.maxDecibels = value;

      if (!(value > this._nativeAnalyserNode.minDecibels)) {
        this._nativeAnalyserNode.maxDecibels = maxDecibels;
        throw createIndexSizeError();
      }
    }

    get minDecibels() {
      return this._nativeAnalyserNode.minDecibels;
    }

    set minDecibels(value) {
      // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.
      const minDecibels = this._nativeAnalyserNode.minDecibels;
      this._nativeAnalyserNode.minDecibels = value;

      if (!(this._nativeAnalyserNode.maxDecibels > value)) {
        this._nativeAnalyserNode.minDecibels = minDecibels;
        throw createIndexSizeError();
      }
    }

    get smoothingTimeConstant() {
      return this._nativeAnalyserNode.smoothingTimeConstant;
    }

    set smoothingTimeConstant(value) {
      this._nativeAnalyserNode.smoothingTimeConstant = value;
    }

    getByteFrequencyData(array) {
      this._nativeAnalyserNode.getByteFrequencyData(array);
    }

    getByteTimeDomainData(array) {
      this._nativeAnalyserNode.getByteTimeDomainData(array);
    }

    getFloatFrequencyData(array) {
      this._nativeAnalyserNode.getFloatFrequencyData(array);
    }

    getFloatTimeDomainData(array) {
      this._nativeAnalyserNode.getFloatTimeDomainData(array);
    }

  };
};

exports.createAnalyserNodeConstructor = createAnalyserNodeConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isOwnedByContext = void 0;

const isOwnedByContext = (nativeAudioNode, nativeContext) => {
  return nativeAudioNode.context === nativeContext;
};

exports.isOwnedByContext = isOwnedByContext;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/analyser-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAnalyserNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createAnalyserNodeRendererFactory = (createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeAnalyserNodes = new WeakMap();

    const createAnalyserNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeAnalyserNode = getNativeAudioNode(proxy); // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativeAnalyserNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeAnalyserNode, nativeOfflineAudioContext);

      if (!nativeAnalyserNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeAnalyserNode.channelCount,
          channelCountMode: nativeAnalyserNode.channelCountMode,
          channelInterpretation: nativeAnalyserNode.channelInterpretation,
          fftSize: nativeAnalyserNode.fftSize,
          maxDecibels: nativeAnalyserNode.maxDecibels,
          minDecibels: nativeAnalyserNode.minDecibels,
          smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant
        };
        nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);
      }

      renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);
      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode, trace);
      return nativeAnalyserNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);

        if (renderedNativeAnalyserNode !== undefined) {
          return Promise.resolve(renderedNativeAnalyserNode);
        }

        return createAnalyserNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createAnalyserNodeRendererFactory = createAnalyserNodeRendererFactory;
},{"../helpers/is-owned-by-context":"node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testAudioBufferCopyChannelMethodsOutOfBoundsSupport = void 0;

const testAudioBufferCopyChannelMethodsOutOfBoundsSupport = nativeAudioBuffer => {
  try {
    nativeAudioBuffer.copyToChannel(new Float32Array(1), 0, -1);
  } catch {
    return false;
  }

  return true;
};

exports.testAudioBufferCopyChannelMethodsOutOfBoundsSupport = testAudioBufferCopyChannelMethodsOutOfBoundsSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/index-size-error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIndexSizeError = void 0;

const createIndexSizeError = () => new DOMException('', 'IndexSizeError');

exports.createIndexSizeError = createIndexSizeError;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAudioBufferGetChannelDataMethod = void 0;

var _indexSizeError = require("../factories/index-size-error");

const wrapAudioBufferGetChannelDataMethod = audioBuffer => {
  audioBuffer.getChannelData = (getChannelData => {
    return channel => {
      try {
        return getChannelData.call(audioBuffer, channel);
      } catch (err) {
        if (err.code === 12) {
          throw (0, _indexSizeError.createIndexSizeError)();
        }

        throw err;
      }
    };
  })(audioBuffer.getChannelData);
};

exports.wrapAudioBufferGetChannelDataMethod = wrapAudioBufferGetChannelDataMethod;
},{"../factories/index-size-error":"node_modules/standardized-audio-context/build/es2019/factories/index-size-error.js"}],"node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioBufferConstructor = void 0;

var _testAudioBufferCopyChannelMethodsOutOfBoundsSupport = require("../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support");

var _wrapAudioBufferGetChannelDataMethod = require("../helpers/wrap-audio-buffer-get-channel-data-method");

const DEFAULT_OPTIONS = {
  numberOfChannels: 1
};

const createAudioBufferConstructor = (audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {
  let nativeOfflineAudioContext = null;
  return class AudioBuffer {
    constructor(options) {
      if (nativeOfflineAudioContextConstructor === null) {
        throw new Error('Missing the native OfflineAudioContext constructor.');
      }

      const {
        length,
        numberOfChannels,
        sampleRate
      } = { ...DEFAULT_OPTIONS,
        ...options
      };

      if (nativeOfflineAudioContext === null) {
        nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
      }
      /*
       * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the
       * factory function. But since Firefox also supports the constructor everything should be fine.
       */


      const audioBuffer = nativeAudioBufferConstructor !== null && cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport) ? new nativeAudioBufferConstructor({
        length,
        numberOfChannels,
        sampleRate
      }) : nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate); // Bug #99: Safari does not throw an error when the numberOfChannels is zero.

      if (audioBuffer.numberOfChannels === 0) {
        throw createNotSupportedError();
      } // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
      // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.


      if (typeof audioBuffer.copyFromChannel !== 'function') {
        wrapAudioBufferCopyChannelMethods(audioBuffer);
        (0, _wrapAudioBufferGetChannelDataMethod.wrapAudioBufferGetChannelDataMethod)(audioBuffer); // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.
      } else if (!cacheTestResult(_testAudioBufferCopyChannelMethodsOutOfBoundsSupport.testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => (0, _testAudioBufferCopyChannelMethodsOutOfBoundsSupport.testAudioBufferCopyChannelMethodsOutOfBoundsSupport)(audioBuffer))) {
        wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);
      }

      audioBufferStore.add(audioBuffer);
      /*
       * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native
       * (Offline)AudioContexts.
       */

      return audioBuffer;
    }

    static [Symbol.hasInstance](instance) {
      return instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype || audioBufferStore.has(instance);
    }

  };
};

exports.createAudioBufferConstructor = createAudioBufferConstructor;
},{"../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support":"node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js","../helpers/wrap-audio-buffer-get-channel-data-method":"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js"}],"node_modules/standardized-audio-context/build/es2019/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MOST_POSITIVE_SINGLE_FLOAT = exports.MOST_NEGATIVE_SINGLE_FLOAT = void 0;
const MOST_NEGATIVE_SINGLE_FLOAT = -3.4028234663852886e38;
exports.MOST_NEGATIVE_SINGLE_FLOAT = MOST_NEGATIVE_SINGLE_FLOAT;
const MOST_POSITIVE_SINGLE_FLOAT = -MOST_NEGATIVE_SINGLE_FLOAT;
exports.MOST_POSITIVE_SINGLE_FLOAT = MOST_POSITIVE_SINGLE_FLOAT;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isActiveAudioNode = void 0;

var _globals = require("../globals");

const isActiveAudioNode = audioNode => _globals.ACTIVE_AUDIO_NODE_STORE.has(audioNode);

exports.isActiveAudioNode = isActiveAudioNode;
},{"../globals":"node_modules/standardized-audio-context/build/es2019/globals.js"}],"node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioBufferSourceNodeConstructor = void 0;

var _constants = require("../constants");

var _isActiveAudioNode = require("../helpers/is-active-audio-node");

var _setInternalStateToActive = require("../helpers/set-internal-state-to-active");

var _setInternalStateToPassive = require("../helpers/set-internal-state-to-passive");

const DEFAULT_OPTIONS = {
  buffer: null,
  channelCount: 2,
  channelCountMode: 'max',
  channelInterpretation: 'speakers',
  // Bug #149: Safari does not yet support the detune AudioParam.
  loop: false,
  loopEnd: 0,
  loopStart: 0,
  playbackRate: 1
};

const createAudioBufferSourceNodeConstructor = (audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {
  return class AudioBufferSourceNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const audioBufferSourceNodeRenderer = isOffline ? createAudioBufferSourceNodeRenderer() : null;
      super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);
      this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;
      this._isBufferNullified = false;
      this._isBufferSet = mergedOptions.buffer !== null;
      this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;
      this._onended = null; // Bug #73: Safari does not export the correct values for maxValue and minValue.

      this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT);
    }

    get buffer() {
      if (this._isBufferNullified) {
        return null;
      }

      return this._nativeAudioBufferSourceNode.buffer;
    }

    set buffer(value) {
      this._nativeAudioBufferSourceNode.buffer = value; // Bug #72: Only Chrome, Edge & Opera do not allow to reassign the buffer yet.

      if (value !== null) {
        if (this._isBufferSet) {
          throw createInvalidStateError();
        }

        this._isBufferSet = true;
      }
    }

    get loop() {
      return this._nativeAudioBufferSourceNode.loop;
    }

    set loop(value) {
      this._nativeAudioBufferSourceNode.loop = value;
    }

    get loopEnd() {
      return this._nativeAudioBufferSourceNode.loopEnd;
    }

    set loopEnd(value) {
      this._nativeAudioBufferSourceNode.loopEnd = value;
    }

    get loopStart() {
      return this._nativeAudioBufferSourceNode.loopStart;
    }

    set loopStart(value) {
      this._nativeAudioBufferSourceNode.loopStart = value;
    }

    get onended() {
      return this._onended;
    }

    set onended(value) {
      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
      this._nativeAudioBufferSourceNode.onended = wrappedListener;
      const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;
      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;
    }

    get playbackRate() {
      return this._playbackRate;
    }

    start(when = 0, offset = 0, duration) {
      this._nativeAudioBufferSourceNode.start(when, offset, duration);

      if (this._audioBufferSourceNodeRenderer !== null) {
        this._audioBufferSourceNodeRenderer.start = duration === undefined ? [when, offset] : [when, offset, duration];
      }

      if (this.context.state !== 'closed') {
        (0, _setInternalStateToActive.setInternalStateToActive)(this);

        const resetInternalStateToPassive = () => {
          this._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive);

          if ((0, _isActiveAudioNode.isActiveAudioNode)(this)) {
            (0, _setInternalStateToPassive.setInternalStateToPassive)(this);
          }
        };

        this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);
      }
    }

    stop(when = 0) {
      this._nativeAudioBufferSourceNode.stop(when);

      if (this._audioBufferSourceNodeRenderer !== null) {
        this._audioBufferSourceNodeRenderer.stop = when;
      }
    }

  };
};

exports.createAudioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor;
},{"../constants":"node_modules/standardized-audio-context/build/es2019/constants.js","../helpers/is-active-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js","../helpers/set-internal-state-to-active":"node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js","../helpers/set-internal-state-to-passive":"node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js"}],"node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioBufferSourceNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createAudioBufferSourceNodeRendererFactory = (connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeAudioBufferSourceNodes = new WeakMap();
    let start = null;
    let stop = null;

    const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);
      /*
       * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created
       * again.
       */

      const nativeAudioBufferSourceNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeAudioBufferSourceNode, nativeOfflineAudioContext);

      if (!nativeAudioBufferSourceNodeIsOwnedByContext) {
        const options = {
          buffer: nativeAudioBufferSourceNode.buffer,
          channelCount: nativeAudioBufferSourceNode.channelCount,
          channelCountMode: nativeAudioBufferSourceNode.channelCountMode,
          channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,
          // Bug #149: Safari does not yet support the detune AudioParam.
          loop: nativeAudioBufferSourceNode.loop,
          loopEnd: nativeAudioBufferSourceNode.loopEnd,
          loopStart: nativeAudioBufferSourceNode.loopStart,
          playbackRate: nativeAudioBufferSourceNode.playbackRate.value
        };
        nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);

        if (start !== null) {
          nativeAudioBufferSourceNode.start(...start);
        }

        if (stop !== null) {
          nativeAudioBufferSourceNode.stop(stop);
        }
      }

      renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);

      if (!nativeAudioBufferSourceNodeIsOwnedByContext) {
        // Bug #149: Safari does not yet support the detune AudioParam.
        await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);
      } else {
        // Bug #149: Safari does not yet support the detune AudioParam.
        await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);
      }

      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode, trace);
      return nativeAudioBufferSourceNode;
    };

    return {
      set start(value) {
        start = value;
      },

      set stop(value) {
        stop = value;
      },

      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);

        if (renderedNativeAudioBufferSourceNode !== undefined) {
          return Promise.resolve(renderedNativeAudioBufferSourceNode);
        }

        return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createAudioBufferSourceNodeRendererFactory = createAudioBufferSourceNodeRendererFactory;
},{"../helpers/is-owned-by-context":"node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"node_modules/standardized-audio-context/build/es2019/guards/audio-buffer-source-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAudioBufferSourceNode = void 0;

const isAudioBufferSourceNode = audioNode => {
  return 'playbackRate' in audioNode;
};

exports.isAudioBufferSourceNode = isAudioBufferSourceNode;
},{}],"node_modules/standardized-audio-context/build/es2019/guards/biquad-filter-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isBiquadFilterNode = void 0;

const isBiquadFilterNode = audioNode => {
  return 'frequency' in audioNode && 'gain' in audioNode;
};

exports.isBiquadFilterNode = isBiquadFilterNode;
},{}],"node_modules/standardized-audio-context/build/es2019/guards/constant-source-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isConstantSourceNode = void 0;

const isConstantSourceNode = audioNode => {
  return 'offset' in audioNode;
};

exports.isConstantSourceNode = isConstantSourceNode;
},{}],"node_modules/standardized-audio-context/build/es2019/guards/gain-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isGainNode = void 0;

const isGainNode = audioNode => {
  return !('frequency' in audioNode) && 'gain' in audioNode;
};

exports.isGainNode = isGainNode;
},{}],"node_modules/standardized-audio-context/build/es2019/guards/oscillator-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isOscillatorNode = void 0;

const isOscillatorNode = audioNode => {
  return 'detune' in audioNode && 'frequency' in audioNode;
};

exports.isOscillatorNode = isOscillatorNode;
},{}],"node_modules/standardized-audio-context/build/es2019/guards/stereo-panner-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isStereoPannerNode = void 0;

const isStereoPannerNode = audioNode => {
  return 'pan' in audioNode;
};

exports.isStereoPannerNode = isStereoPannerNode;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAudioNodeConnections = void 0;

var _globals = require("../globals");

var _getValueForKey = require("./get-value-for-key");

const getAudioNodeConnections = audioNode => {
  return (0, _getValueForKey.getValueForKey)(_globals.AUDIO_NODE_CONNECTIONS_STORE, audioNode);
};

exports.getAudioNodeConnections = getAudioNodeConnections;
},{"../globals":"node_modules/standardized-audio-context/build/es2019/globals.js","./get-value-for-key":"node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAudioParamConnections = void 0;

var _globals = require("../globals");

var _getValueForKey = require("./get-value-for-key");

const getAudioParamConnections = audioParam => {
  return (0, _getValueForKey.getValueForKey)(_globals.AUDIO_PARAM_CONNECTIONS_STORE, audioParam);
};

exports.getAudioParamConnections = getAudioParamConnections;
},{"../globals":"node_modules/standardized-audio-context/build/es2019/globals.js","./get-value-for-key":"node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/deactivate-active-audio-node-input-connections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deactivateActiveAudioNodeInputConnections = void 0;

var _audioBufferSourceNode = require("../guards/audio-buffer-source-node");

var _audioWorkletNode = require("../guards/audio-worklet-node");

var _biquadFilterNode = require("../guards/biquad-filter-node");

var _constantSourceNode = require("../guards/constant-source-node");

var _gainNode = require("../guards/gain-node");

var _oscillatorNode = require("../guards/oscillator-node");

var _stereoPannerNode = require("../guards/stereo-panner-node");

var _getAudioNodeConnections = require("./get-audio-node-connections");

var _getAudioParamConnections = require("./get-audio-param-connections");

var _isActiveAudioNode = require("./is-active-audio-node");

var _setInternalStateToPassive = require("./set-internal-state-to-passive");

const deactivateActiveAudioNodeInputConnections = (audioNode, trace) => {
  const {
    activeInputs
  } = (0, _getAudioNodeConnections.getAudioNodeConnections)(audioNode);
  activeInputs.forEach(connections => connections.forEach(([source]) => {
    if (!trace.includes(audioNode)) {
      deactivateActiveAudioNodeInputConnections(source, [...trace, audioNode]);
    }
  }));
  const audioParams = (0, _audioBufferSourceNode.isAudioBufferSourceNode)(audioNode) ? [// Bug #149: Safari does not yet support the detune AudioParam.
  audioNode.playbackRate] : (0, _audioWorkletNode.isAudioWorkletNode)(audioNode) ? Array.from(audioNode.parameters.values()) : (0, _biquadFilterNode.isBiquadFilterNode)(audioNode) ? [audioNode.Q, audioNode.detune, audioNode.frequency, audioNode.gain] : (0, _constantSourceNode.isConstantSourceNode)(audioNode) ? [audioNode.offset] : (0, _gainNode.isGainNode)(audioNode) ? [audioNode.gain] : (0, _oscillatorNode.isOscillatorNode)(audioNode) ? [audioNode.detune, audioNode.frequency] : (0, _stereoPannerNode.isStereoPannerNode)(audioNode) ? [audioNode.pan] : [];

  for (const audioParam of audioParams) {
    const audioParamConnections = (0, _getAudioParamConnections.getAudioParamConnections)(audioParam);

    if (audioParamConnections !== undefined) {
      audioParamConnections.activeInputs.forEach(([source]) => deactivateActiveAudioNodeInputConnections(source, trace));
    }
  }

  if ((0, _isActiveAudioNode.isActiveAudioNode)(audioNode)) {
    (0, _setInternalStateToPassive.setInternalStateToPassive)(audioNode);
  }
};

exports.deactivateActiveAudioNodeInputConnections = deactivateActiveAudioNodeInputConnections;
},{"../guards/audio-buffer-source-node":"node_modules/standardized-audio-context/build/es2019/guards/audio-buffer-source-node.js","../guards/audio-worklet-node":"node_modules/standardized-audio-context/build/es2019/guards/audio-worklet-node.js","../guards/biquad-filter-node":"node_modules/standardized-audio-context/build/es2019/guards/biquad-filter-node.js","../guards/constant-source-node":"node_modules/standardized-audio-context/build/es2019/guards/constant-source-node.js","../guards/gain-node":"node_modules/standardized-audio-context/build/es2019/guards/gain-node.js","../guards/oscillator-node":"node_modules/standardized-audio-context/build/es2019/guards/oscillator-node.js","../guards/stereo-panner-node":"node_modules/standardized-audio-context/build/es2019/guards/stereo-panner-node.js","./get-audio-node-connections":"node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js","./get-audio-param-connections":"node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js","./is-active-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js","./set-internal-state-to-passive":"node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/deactivate-audio-graph.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deactivateAudioGraph = void 0;

var _deactivateActiveAudioNodeInputConnections = require("./deactivate-active-audio-node-input-connections");

const deactivateAudioGraph = context => {
  (0, _deactivateActiveAudioNodeInputConnections.deactivateActiveAudioNodeInputConnections)(context.destination, []);
};

exports.deactivateAudioGraph = deactivateAudioGraph;
},{"./deactivate-active-audio-node-input-connections":"node_modules/standardized-audio-context/build/es2019/helpers/deactivate-active-audio-node-input-connections.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/is-valid-latency-hint.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isValidLatencyHint = void 0;

const isValidLatencyHint = latencyHint => {
  return latencyHint === undefined || typeof latencyHint === 'number' || typeof latencyHint === 'string' && (latencyHint === 'balanced' || latencyHint === 'interactive' || latencyHint === 'playback');
};

exports.isValidLatencyHint = isValidLatencyHint;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioContextConstructor = void 0;

var _deactivateAudioGraph = require("../helpers/deactivate-audio-graph");

var _isValidLatencyHint = require("../helpers/is-valid-latency-hint");

const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) => {
  return class AudioContext extends baseAudioContextConstructor {
    constructor(options = {}) {
      if (nativeAudioContextConstructor === null) {
        throw new Error('Missing the native AudioContext constructor.');
      }

      const nativeAudioContext = new nativeAudioContextConstructor(options); // Bug #131 Safari returns null when there are four other AudioContexts running already.

      if (nativeAudioContext === null) {
        throw createUnknownError();
      } // Bug #51 Only Chrome, Edge and Opera throw an error if the given latencyHint is invalid.


      if (!(0, _isValidLatencyHint.isValidLatencyHint)(options.latencyHint)) {
        throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);
      } // Bug #150 Safari does not support setting the sampleRate.


      if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {
        throw createNotSupportedError();
      }

      super(nativeAudioContext, 2);
      const {
        latencyHint
      } = options;
      const {
        sampleRate
      } = nativeAudioContext; // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.

      this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :
      /*
       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a
       * ScriptProcessorNode.
       */
      Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;
      this._nativeAudioContext = nativeAudioContext; // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.

      if (nativeAudioContextConstructor.name === 'webkitAudioContext') {
        this._nativeGainNode = nativeAudioContext.createGain();
        this._nativeOscillatorNode = nativeAudioContext.createOscillator();
        this._nativeGainNode.gain.value = 1e-37;

        this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);

        this._nativeOscillatorNode.start();
      } else {
        this._nativeGainNode = null;
        this._nativeOscillatorNode = null;
      }

      this._state = null;
      /*
       * Bug #34: Chrome, Edge and Opera pretend to be running right away, but fire an onstatechange event when the state actually
       * changes to 'running'.
       */

      if (nativeAudioContext.state === 'running') {
        this._state = 'suspended';

        const revokeState = () => {
          if (this._state === 'suspended') {
            this._state = null;
          }

          nativeAudioContext.removeEventListener('statechange', revokeState);
        };

        nativeAudioContext.addEventListener('statechange', revokeState);
      }
    }

    get baseLatency() {
      return this._baseLatency;
    }

    get state() {
      return this._state !== null ? this._state : this._nativeAudioContext.state;
    }

    close() {
      // Bug #35: Firefox does not throw an error if the AudioContext was closed before.
      if (this.state === 'closed') {
        return this._nativeAudioContext.close().then(() => {
          throw createInvalidStateError();
        });
      } // Bug #34: If the state was set to suspended before it should be revoked now.


      if (this._state === 'suspended') {
        this._state = null;
      }

      return this._nativeAudioContext.close().then(() => {
        if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {
          this._nativeOscillatorNode.stop();

          this._nativeGainNode.disconnect();

          this._nativeOscillatorNode.disconnect();
        }

        (0, _deactivateAudioGraph.deactivateAudioGraph)(this);
      });
    }

    createMediaElementSource(mediaElement) {
      return new mediaElementAudioSourceNodeConstructor(this, {
        mediaElement
      });
    }

    createMediaStreamDestination() {
      return new mediaStreamAudioDestinationNodeConstructor(this);
    }

    createMediaStreamSource(mediaStream) {
      return new mediaStreamAudioSourceNodeConstructor(this, {
        mediaStream
      });
    }

    createMediaStreamTrackSource(mediaStreamTrack) {
      return new mediaStreamTrackAudioSourceNodeConstructor(this, {
        mediaStreamTrack
      });
    }

    resume() {
      if (this._state === 'suspended') {
        return new Promise((resolve, reject) => {
          const resolvePromise = () => {
            this._nativeAudioContext.removeEventListener('statechange', resolvePromise);

            if (this._nativeAudioContext.state === 'running') {
              resolve();
            } else {
              this.resume().then(resolve, reject);
            }
          };

          this._nativeAudioContext.addEventListener('statechange', resolvePromise);
        });
      }

      return this._nativeAudioContext.resume().catch(err => {
        // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.
        // Bug #56: Safari invokes the catch handler but without an error.
        if (err === undefined || err.code === 15) {
          throw createInvalidStateError();
        }

        throw err;
      });
    }

    suspend() {
      return this._nativeAudioContext.suspend().catch(err => {
        // Bug #56: Safari invokes the catch handler but without an error.
        if (err === undefined) {
          throw createInvalidStateError();
        }

        throw err;
      });
    }

  };
};

exports.createAudioContextConstructor = createAudioContextConstructor;
},{"../helpers/deactivate-audio-graph":"node_modules/standardized-audio-context/build/es2019/helpers/deactivate-audio-graph.js","../helpers/is-valid-latency-hint":"node_modules/standardized-audio-context/build/es2019/helpers/is-valid-latency-hint.js"}],"node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioDestinationNodeConstructor = void 0;

const createAudioDestinationNodeConstructor = (audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode) => {
  return class AudioDestinationNode extends audioNodeConstructor {
    constructor(context, channelCount) {
      const nativeContext = getNativeContext(context);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);
      const audioDestinationNodeRenderer = isOffline ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode) : null;
      super(context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);
      this._isNodeOfNativeOfflineAudioContext = isOffline;
      this._nativeAudioDestinationNode = nativeAudioDestinationNode;
    }

    get channelCount() {
      return this._nativeAudioDestinationNode.channelCount;
    }

    set channelCount(value) {
      // Bug #52: Chrome, Edge, Opera & Safari do not throw an exception at all.
      // Bug #54: Firefox does throw an IndexSizeError.
      if (this._isNodeOfNativeOfflineAudioContext) {
        throw createInvalidStateError();
      } // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.


      if (value > this._nativeAudioDestinationNode.maxChannelCount) {
        throw createIndexSizeError();
      }

      this._nativeAudioDestinationNode.channelCount = value;
    }

    get channelCountMode() {
      return this._nativeAudioDestinationNode.channelCountMode;
    }

    set channelCountMode(value) {
      // Bug #53: No browser does throw an exception yet.
      if (this._isNodeOfNativeOfflineAudioContext) {
        throw createInvalidStateError();
      }

      this._nativeAudioDestinationNode.channelCountMode = value;
    }

    get maxChannelCount() {
      return this._nativeAudioDestinationNode.maxChannelCount;
    }

  };
};

exports.createAudioDestinationNodeConstructor = createAudioDestinationNodeConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioDestinationNodeRenderer = void 0;

const createAudioDestinationNodeRenderer = renderInputsOfAudioNode => {
  let nativeAudioDestinationNodePromise = null;

  const createAudioDestinationNode = async (proxy, nativeOfflineAudioContext, trace) => {
    const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;
    await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode, trace);
    return nativeAudioDestinationNode;
  };

  return {
    render(proxy, nativeOfflineAudioContext, trace) {
      if (nativeAudioDestinationNodePromise === null) {
        nativeAudioDestinationNodePromise = createAudioDestinationNode(proxy, nativeOfflineAudioContext, trace);
      }

      return nativeAudioDestinationNodePromise;
    }

  };
};

exports.createAudioDestinationNodeRenderer = createAudioDestinationNodeRenderer;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/audio-listener-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioListenerFactory = void 0;

var _constants = require("../constants");

const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext) => {
  return (context, nativeContext) => {
    const nativeListener = nativeContext.listener; // Bug #117: Only Chrome, Edge & Opera support the new interface already.

    const createFakeAudioParams = () => {
      const channelMergerNode = createNativeChannelMergerNode(nativeContext, {
        channelCount: 1,
        channelCountMode: 'explicit',
        channelInterpretation: 'speakers',
        numberOfInputs: 9
      });
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);

      const createFakeAudioParam = (input, value) => {
        const constantSourceNode = createNativeConstantSourceNode(nativeContext, {
          channelCount: 1,
          channelCountMode: 'explicit',
          channelInterpretation: 'discrete',
          offset: value
        });
        constantSourceNode.connect(channelMergerNode, 0, input); // @todo This should be stopped when the context is closed.

        constantSourceNode.start();
        Object.defineProperty(constantSourceNode.offset, 'defaultValue', {
          get() {
            return value;
          }

        });
        /*
         * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and
         * minValue for GainNodes.
         */

        return createAudioParam({
          context
        }, isOffline, constantSourceNode.offset, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT);
      };

      let lastOrientation = [0, 0, -1, 0, 1, 0];
      let lastPosition = [0, 0, 0]; // tslint:disable-next-line:deprecation

      scriptProcessorNode.onaudioprocess = ({
        inputBuffer
      }) => {
        const orientation = [inputBuffer.getChannelData(0)[0], inputBuffer.getChannelData(1)[0], inputBuffer.getChannelData(2)[0], inputBuffer.getChannelData(3)[0], inputBuffer.getChannelData(4)[0], inputBuffer.getChannelData(5)[0]];

        if (orientation.some((value, index) => value !== lastOrientation[index])) {
          nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation

          lastOrientation = orientation;
        }

        const positon = [inputBuffer.getChannelData(6)[0], inputBuffer.getChannelData(7)[0], inputBuffer.getChannelData(8)[0]];

        if (positon.some((value, index) => value !== lastPosition[index])) {
          nativeListener.setPosition(...positon); // tslint:disable-line:deprecation

          lastPosition = positon;
        }
      };

      channelMergerNode.connect(scriptProcessorNode);
      return {
        forwardX: createFakeAudioParam(0, 0),
        forwardY: createFakeAudioParam(1, 0),
        forwardZ: createFakeAudioParam(2, -1),
        positionX: createFakeAudioParam(6, 0),
        positionY: createFakeAudioParam(7, 0),
        positionZ: createFakeAudioParam(8, 0),
        upX: createFakeAudioParam(3, 0),
        upY: createFakeAudioParam(4, 1),
        upZ: createFakeAudioParam(5, 0)
      };
    };

    const {
      forwardX,
      forwardY,
      forwardZ,
      positionX,
      positionY,
      positionZ,
      upX,
      upY,
      upZ
    } = nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener;
    return {
      get forwardX() {
        return forwardX;
      },

      get forwardY() {
        return forwardY;
      },

      get forwardZ() {
        return forwardZ;
      },

      get positionX() {
        return positionX;
      },

      get positionY() {
        return positionY;
      },

      get positionZ() {
        return positionZ;
      },

      get upX() {
        return upX;
      },

      get upY() {
        return upY;
      },

      get upZ() {
        return upZ;
      }

    };
  };
};

exports.createAudioListenerFactory = createAudioListenerFactory;
},{"../constants":"node_modules/standardized-audio-context/build/es2019/constants.js"}],"node_modules/standardized-audio-context/build/es2019/guards/audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAudioNode = void 0;

const isAudioNode = audioNodeOrAudioParam => {
  return 'context' in audioNodeOrAudioParam;
};

exports.isAudioNode = isAudioNode;
},{}],"node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAudioNodeOutputConnection = void 0;

var _audioNode = require("./audio-node");

const isAudioNodeOutputConnection = outputConnection => {
  return (0, _audioNode.isAudioNode)(outputConnection[0]);
};

exports.isAudioNodeOutputConnection = isAudioNodeOutputConnection;
},{"./audio-node":"node_modules/standardized-audio-context/build/es2019/guards/audio-node.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.insertElementInSet = void 0;

const insertElementInSet = (set, element, predicate, ignoreDuplicates) => {
  for (const lmnt of set) {
    if (predicate(lmnt)) {
      if (ignoreDuplicates) {
        return false;
      }

      throw Error('The set contains at least one similar element.');
    }
  }

  set.add(element);
  return true;
};

exports.insertElementInSet = insertElementInSet;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/add-active-input-connection-to-audio-param.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addActiveInputConnectionToAudioParam = void 0;

var _insertElementInSet = require("./insert-element-in-set");

const addActiveInputConnectionToAudioParam = (activeInputs, source, [output, eventListener], ignoreDuplicates) => {
  (0, _insertElementInSet.insertElementInSet)(activeInputs, [source, output, eventListener], activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);
};

exports.addActiveInputConnectionToAudioParam = addActiveInputConnectionToAudioParam;
},{"./insert-element-in-set":"node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/add-passive-input-connection-to-audio-param.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addPassiveInputConnectionToAudioParam = void 0;

var _insertElementInSet = require("./insert-element-in-set");

const addPassiveInputConnectionToAudioParam = (passiveInputs, [source, output, eventListener], ignoreDuplicates) => {
  const passiveInputConnections = passiveInputs.get(source);

  if (passiveInputConnections === undefined) {
    passiveInputs.set(source, new Set([[output, eventListener]]));
  } else {
    (0, _insertElementInSet.insertElementInSet)(passiveInputConnections, [output, eventListener], passiveInputConnection => passiveInputConnection[0] === output, ignoreDuplicates);
  }
};

exports.addPassiveInputConnectionToAudioParam = addPassiveInputConnectionToAudioParam;
},{"./insert-element-in-set":"node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js"}],"node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNativeAudioNodeFaker = void 0;

const isNativeAudioNodeFaker = nativeAudioNodeOrNativeAudioNodeFaker => {
  return 'inputs' in nativeAudioNodeOrNativeAudioNodeFaker;
};

exports.isNativeAudioNodeFaker = isNativeAudioNodeFaker;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectNativeAudioNodeToNativeAudioNode = void 0;

var _nativeAudioNodeFaker = require("../guards/native-audio-node-faker");

const connectNativeAudioNodeToNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {
  if ((0, _nativeAudioNodeFaker.isNativeAudioNodeFaker)(nativeDestinationAudioNode)) {
    const fakeNativeDestinationAudioNode = nativeDestinationAudioNode.inputs[input];
    nativeSourceAudioNode.connect(fakeNativeDestinationAudioNode, output, 0);
    return [fakeNativeDestinationAudioNode, output, 0];
  }

  nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);
  return [nativeDestinationAudioNode, output, input];
};

exports.connectNativeAudioNodeToNativeAudioNode = connectNativeAudioNodeToNativeAudioNode;
},{"../guards/native-audio-node-faker":"node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/delete-active-input-connection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteActiveInputConnection = void 0;

const deleteActiveInputConnection = (activeInputConnections, source, output) => {
  for (const activeInputConnection of activeInputConnections) {
    if (activeInputConnection[0] === source && activeInputConnection[1] === output) {
      activeInputConnections.delete(activeInputConnection);
      return activeInputConnection;
    }
  }

  return null;
};

exports.deleteActiveInputConnection = deleteActiveInputConnection;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/delete-active-input-connection-to-audio-param.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteActiveInputConnectionToAudioParam = void 0;

var _pickElementFromSet = require("./pick-element-from-set");

const deleteActiveInputConnectionToAudioParam = (activeInputs, source, output) => {
  return (0, _pickElementFromSet.pickElementFromSet)(activeInputs, activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output);
};

exports.deleteActiveInputConnectionToAudioParam = deleteActiveInputConnectionToAudioParam;
},{"./pick-element-from-set":"node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/delete-event-listeners-of-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteEventListenerOfAudioNode = void 0;

var _getEventListenersOfAudioNode = require("./get-event-listeners-of-audio-node");

const deleteEventListenerOfAudioNode = (audioNode, eventListener) => {
  const eventListeners = (0, _getEventListenersOfAudioNode.getEventListenersOfAudioNode)(audioNode);

  if (!eventListeners.delete(eventListener)) {
    throw new Error('Missing the expected event listener.');
  }
};

exports.deleteEventListenerOfAudioNode = deleteEventListenerOfAudioNode;
},{"./get-event-listeners-of-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-param.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deletePassiveInputConnectionToAudioParam = void 0;

var _getValueForKey = require("./get-value-for-key");

var _pickElementFromSet = require("./pick-element-from-set");

const deletePassiveInputConnectionToAudioParam = (passiveInputs, source, output) => {
  const passiveInputConnections = (0, _getValueForKey.getValueForKey)(passiveInputs, source);
  const matchingConnection = (0, _pickElementFromSet.pickElementFromSet)(passiveInputConnections, passiveInputConnection => passiveInputConnection[0] === output);

  if (passiveInputConnections.size === 0) {
    passiveInputs.delete(source);
  }

  return matchingConnection;
};

exports.deletePassiveInputConnectionToAudioParam = deletePassiveInputConnectionToAudioParam;
},{"./get-value-for-key":"node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js","./pick-element-from-set":"node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.disconnectNativeAudioNodeFromNativeAudioNode = void 0;

var _nativeAudioNodeFaker = require("../guards/native-audio-node-faker");

const disconnectNativeAudioNodeFromNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {
  if ((0, _nativeAudioNodeFaker.isNativeAudioNodeFaker)(nativeDestinationAudioNode)) {
    nativeSourceAudioNode.disconnect(nativeDestinationAudioNode.inputs[input], output, 0);
  } else {
    nativeSourceAudioNode.disconnect(nativeDestinationAudioNode, output, input);
  }
};

exports.disconnectNativeAudioNodeFromNativeAudioNode = disconnectNativeAudioNodeFromNativeAudioNode;
},{"../guards/native-audio-node-faker":"node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNativeAudioNode = void 0;

var _globals = require("../globals");

var _getValueForKey = require("./get-value-for-key");

const getNativeAudioNode = audioNode => {
  return (0, _getValueForKey.getValueForKey)(_globals.AUDIO_NODE_STORE, audioNode);
};

exports.getNativeAudioNode = getNativeAudioNode;
},{"../globals":"node_modules/standardized-audio-context/build/es2019/globals.js","./get-value-for-key":"node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-param.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNativeAudioParam = void 0;

var _globals = require("../globals");

var _getValueForKey = require("./get-value-for-key");

const getNativeAudioParam = audioParam => {
  return (0, _getValueForKey.getValueForKey)(_globals.AUDIO_PARAM_STORE, audioParam);
};

exports.getNativeAudioParam = getNativeAudioParam;
},{"../globals":"node_modules/standardized-audio-context/build/es2019/globals.js","./get-value-for-key":"node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPartOfACycle = void 0;

var _globals = require("../globals");

const isPartOfACycle = audioNode => {
  return _globals.CYCLE_COUNTERS.has(audioNode);
};

exports.isPartOfACycle = isPartOfACycle;
},{"../globals":"node_modules/standardized-audio-context/build/es2019/globals.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/is-passive-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPassiveAudioNode = void 0;

var _globals = require("../globals");

const isPassiveAudioNode = audioNode => {
  return !_globals.ACTIVE_AUDIO_NODE_STORE.has(audioNode);
};

exports.isPassiveAudioNode = isPassiveAudioNode;
},{"../globals":"node_modules/standardized-audio-context/build/es2019/globals.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/test-audio-node-disconnect-method-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testAudioNodeDisconnectMethodSupport = void 0;

const testAudioNodeDisconnectMethodSupport = nativeAudioContext => {
  return new Promise(resolve => {
    const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1);
    const dummy = nativeAudioContext.createGain(); // Bug #95: Safari does not play one sample buffers.

    const ones = nativeAudioContext.createBuffer(1, 2, 44100);
    const channelData = ones.getChannelData(0);
    channelData[0] = 1;
    channelData[1] = 1;
    const source = nativeAudioContext.createBufferSource();
    source.buffer = ones;
    source.loop = true;
    source.connect(analyzer).connect(nativeAudioContext.destination);
    source.connect(dummy);
    source.disconnect(dummy); // tslint:disable-next-line:deprecation

    analyzer.onaudioprocess = event => {
      const chnnlDt = event.inputBuffer.getChannelData(0);

      if (Array.prototype.some.call(chnnlDt, sample => sample === 1)) {
        resolve(true);
      } else {
        resolve(false);
      }

      source.stop();
      analyzer.onaudioprocess = null; // tslint:disable-line:deprecation

      source.disconnect(analyzer);
      analyzer.disconnect(nativeAudioContext.destination);
    };

    source.start();
  });
};

exports.testAudioNodeDisconnectMethodSupport = testAudioNodeDisconnectMethodSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/visit-each-audio-node-once.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.visitEachAudioNodeOnce = void 0;

const visitEachAudioNodeOnce = (cycles, visitor) => {
  const counts = new Map();

  for (const cycle of cycles) {
    for (const audioNode of cycle) {
      const count = counts.get(audioNode);
      counts.set(audioNode, count === undefined ? 1 : count + 1);
    }
  }

  counts.forEach((count, audioNode) => visitor(audioNode, count));
};

exports.visitEachAudioNodeOnce = visitEachAudioNodeOnce;
},{}],"node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNativeAudioNode = void 0;

const isNativeAudioNode = nativeAudioNodeOrAudioParam => {
  return 'context' in nativeAudioNodeOrAudioParam;
};

exports.isNativeAudioNode = isNativeAudioNode;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-node-disconnect-method.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAudioNodeDisconnectMethod = void 0;

var _nativeAudioNode = require("../guards/native-audio-node");

const wrapAudioNodeDisconnectMethod = nativeAudioNode => {
  const connections = new Map();

  nativeAudioNode.connect = (connect => {
    // tslint:disable-next-line:invalid-void
    return (destination, output = 0, input = 0) => {
      const returnValue = (0, _nativeAudioNode.isNativeAudioNode)(destination) ? connect(destination, output, input) : connect(destination, output); // Save the new connection only if the calls to connect above didn't throw an error.

      const connectionsToDestination = connections.get(destination);

      if (connectionsToDestination === undefined) {
        connections.set(destination, [{
          input,
          output
        }]);
      } else {
        if (connectionsToDestination.every(connection => connection.input !== input || connection.output !== output)) {
          connectionsToDestination.push({
            input,
            output
          });
        }
      }

      return returnValue;
    };
  })(nativeAudioNode.connect.bind(nativeAudioNode));

  nativeAudioNode.disconnect = (disconnect => {
    return (destinationOrOutput, output, input) => {
      disconnect.apply(nativeAudioNode);

      if (destinationOrOutput === undefined) {
        connections.clear();
      } else if (typeof destinationOrOutput === 'number') {
        for (const [destination, connectionsToDestination] of connections) {
          const filteredConnections = connectionsToDestination.filter(connection => connection.output !== destinationOrOutput);

          if (filteredConnections.length === 0) {
            connections.delete(destination);
          } else {
            connections.set(destination, filteredConnections);
          }
        }
      } else if (connections.has(destinationOrOutput)) {
        if (output === undefined) {
          connections.delete(destinationOrOutput);
        } else {
          const connectionsToDestination = connections.get(destinationOrOutput);

          if (connectionsToDestination !== undefined) {
            const filteredConnections = connectionsToDestination.filter(connection => connection.output !== output && (connection.input !== input || input === undefined));

            if (filteredConnections.length === 0) {
              connections.delete(destinationOrOutput);
            } else {
              connections.set(destinationOrOutput, filteredConnections);
            }
          }
        }
      }

      for (const [destination, connectionsToDestination] of connections) {
        connectionsToDestination.forEach(connection => {
          if ((0, _nativeAudioNode.isNativeAudioNode)(destination)) {
            nativeAudioNode.connect(destination, connection.output, connection.input);
          } else {
            nativeAudioNode.connect(destination, connection.output);
          }
        });
      }
    };
  })(nativeAudioNode.disconnect);
};

exports.wrapAudioNodeDisconnectMethod = wrapAudioNodeDisconnectMethod;
},{"../guards/native-audio-node":"node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js"}],"node_modules/standardized-audio-context/build/es2019/factories/audio-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioNodeConstructor = void 0;

var _globals = require("../globals");

var _audioNode = require("../guards/audio-node");

var _audioNodeOutputConnection = require("../guards/audio-node-output-connection");

var _addActiveInputConnectionToAudioParam = require("../helpers/add-active-input-connection-to-audio-param");

var _addPassiveInputConnectionToAudioParam = require("../helpers/add-passive-input-connection-to-audio-param");

var _connectNativeAudioNodeToNativeAudioNode = require("../helpers/connect-native-audio-node-to-native-audio-node");

var _deleteActiveInputConnection = require("../helpers/delete-active-input-connection");

var _deleteActiveInputConnectionToAudioParam = require("../helpers/delete-active-input-connection-to-audio-param");

var _deleteEventListenersOfAudioNode = require("../helpers/delete-event-listeners-of-audio-node");

var _deletePassiveInputConnectionToAudioNode = require("../helpers/delete-passive-input-connection-to-audio-node");

var _deletePassiveInputConnectionToAudioParam = require("../helpers/delete-passive-input-connection-to-audio-param");

var _disconnectNativeAudioNodeFromNativeAudioNode = require("../helpers/disconnect-native-audio-node-from-native-audio-node");

var _getAudioNodeConnections = require("../helpers/get-audio-node-connections");

var _getAudioParamConnections = require("../helpers/get-audio-param-connections");

var _getEventListenersOfAudioNode = require("../helpers/get-event-listeners-of-audio-node");

var _getNativeAudioNode = require("../helpers/get-native-audio-node");

var _getNativeAudioParam = require("../helpers/get-native-audio-param");

var _insertElementInSet = require("../helpers/insert-element-in-set");

var _isActiveAudioNode = require("../helpers/is-active-audio-node");

var _isPartOfACycle = require("../helpers/is-part-of-a-cycle");

var _isPassiveAudioNode = require("../helpers/is-passive-audio-node");

var _setInternalStateToActive = require("../helpers/set-internal-state-to-active");

var _setInternalStateToPassiveWhenNecessary = require("../helpers/set-internal-state-to-passive-when-necessary");

var _testAudioNodeDisconnectMethodSupport = require("../helpers/test-audio-node-disconnect-method-support");

var _visitEachAudioNodeOnce = require("../helpers/visit-each-audio-node-once");

var _wrapAudioNodeDisconnectMethod = require("../helpers/wrap-audio-node-disconnect-method");

const addConnectionToAudioParamOfAudioContext = (source, destination, output, isOffline) => {
  const {
    activeInputs,
    passiveInputs
  } = (0, _getAudioParamConnections.getAudioParamConnections)(destination);
  const {
    outputs
  } = (0, _getAudioNodeConnections.getAudioNodeConnections)(source);
  const eventListeners = (0, _getEventListenersOfAudioNode.getEventListenersOfAudioNode)(source);

  const eventListener = isActive => {
    const nativeAudioNode = (0, _getNativeAudioNode.getNativeAudioNode)(source);
    const nativeAudioParam = (0, _getNativeAudioParam.getNativeAudioParam)(destination);

    if (isActive) {
      const partialConnection = (0, _deletePassiveInputConnectionToAudioParam.deletePassiveInputConnectionToAudioParam)(passiveInputs, source, output);
      (0, _addActiveInputConnectionToAudioParam.addActiveInputConnectionToAudioParam)(activeInputs, source, partialConnection, false);

      if (!isOffline && !(0, _isPartOfACycle.isPartOfACycle)(source)) {
        nativeAudioNode.connect(nativeAudioParam, output);
      }
    } else {
      const partialConnection = (0, _deleteActiveInputConnectionToAudioParam.deleteActiveInputConnectionToAudioParam)(activeInputs, source, output);
      (0, _addPassiveInputConnectionToAudioParam.addPassiveInputConnectionToAudioParam)(passiveInputs, partialConnection, false);

      if (!isOffline && !(0, _isPartOfACycle.isPartOfACycle)(source)) {
        nativeAudioNode.disconnect(nativeAudioParam, output);
      }
    }
  };

  if ((0, _insertElementInSet.insertElementInSet)(outputs, [destination, output], outputConnection => outputConnection[0] === destination && outputConnection[1] === output, true)) {
    eventListeners.add(eventListener);

    if ((0, _isActiveAudioNode.isActiveAudioNode)(source)) {
      (0, _addActiveInputConnectionToAudioParam.addActiveInputConnectionToAudioParam)(activeInputs, source, [output, eventListener], true);
    } else {
      (0, _addPassiveInputConnectionToAudioParam.addPassiveInputConnectionToAudioParam)(passiveInputs, [source, output, eventListener], true);
    }

    return true;
  }

  return false;
};

const deleteInputConnectionOfAudioNode = (source, destination, output, input) => {
  const {
    activeInputs,
    passiveInputs
  } = (0, _getAudioNodeConnections.getAudioNodeConnections)(destination);
  const activeInputConnection = (0, _deleteActiveInputConnection.deleteActiveInputConnection)(activeInputs[input], source, output);

  if (activeInputConnection === null) {
    const passiveInputConnection = (0, _deletePassiveInputConnectionToAudioNode.deletePassiveInputConnectionToAudioNode)(passiveInputs, source, output, input);
    return [passiveInputConnection[2], false];
  }

  return [activeInputConnection[2], true];
};

const deleteInputConnectionOfAudioParam = (source, destination, output) => {
  const {
    activeInputs,
    passiveInputs
  } = (0, _getAudioParamConnections.getAudioParamConnections)(destination);
  const activeInputConnection = (0, _deleteActiveInputConnection.deleteActiveInputConnection)(activeInputs, source, output);

  if (activeInputConnection === null) {
    const passiveInputConnection = (0, _deletePassiveInputConnectionToAudioParam.deletePassiveInputConnectionToAudioParam)(passiveInputs, source, output);
    return [passiveInputConnection[1], false];
  }

  return [activeInputConnection[2], true];
};

const deleteInputsOfAudioNode = (source, isOffline, destination, output, input) => {
  const [listener, isActive] = deleteInputConnectionOfAudioNode(source, destination, output, input);

  if (listener !== null) {
    (0, _deleteEventListenersOfAudioNode.deleteEventListenerOfAudioNode)(source, listener);

    if (isActive && !isOffline && !(0, _isPartOfACycle.isPartOfACycle)(source)) {
      (0, _disconnectNativeAudioNodeFromNativeAudioNode.disconnectNativeAudioNodeFromNativeAudioNode)((0, _getNativeAudioNode.getNativeAudioNode)(source), (0, _getNativeAudioNode.getNativeAudioNode)(destination), output, input);
    }
  }

  if ((0, _isActiveAudioNode.isActiveAudioNode)(destination)) {
    const {
      activeInputs
    } = (0, _getAudioNodeConnections.getAudioNodeConnections)(destination);
    (0, _setInternalStateToPassiveWhenNecessary.setInternalStateToPassiveWhenNecessary)(destination, activeInputs);
  }
};

const deleteInputsOfAudioParam = (source, isOffline, destination, output) => {
  const [listener, isActive] = deleteInputConnectionOfAudioParam(source, destination, output);

  if (listener !== null) {
    (0, _deleteEventListenersOfAudioNode.deleteEventListenerOfAudioNode)(source, listener);

    if (isActive && !isOffline && !(0, _isPartOfACycle.isPartOfACycle)(source)) {
      (0, _getNativeAudioNode.getNativeAudioNode)(source).disconnect((0, _getNativeAudioParam.getNativeAudioParam)(destination), output);
    }
  }
};

const deleteAnyConnection = (source, isOffline) => {
  const audioNodeConnectionsOfSource = (0, _getAudioNodeConnections.getAudioNodeConnections)(source);
  const destinations = [];

  for (const outputConnection of audioNodeConnectionsOfSource.outputs) {
    if ((0, _audioNodeOutputConnection.isAudioNodeOutputConnection)(outputConnection)) {
      deleteInputsOfAudioNode(source, isOffline, ...outputConnection);
    } else {
      deleteInputsOfAudioParam(source, isOffline, ...outputConnection);
    }

    destinations.push(outputConnection[0]);
  }

  audioNodeConnectionsOfSource.outputs.clear();
  return destinations;
};

const deleteConnectionAtOutput = (source, isOffline, output) => {
  const audioNodeConnectionsOfSource = (0, _getAudioNodeConnections.getAudioNodeConnections)(source);
  const destinations = [];

  for (const outputConnection of audioNodeConnectionsOfSource.outputs) {
    if (outputConnection[1] === output) {
      if ((0, _audioNodeOutputConnection.isAudioNodeOutputConnection)(outputConnection)) {
        deleteInputsOfAudioNode(source, isOffline, ...outputConnection);
      } else {
        deleteInputsOfAudioParam(source, isOffline, ...outputConnection);
      }

      destinations.push(outputConnection[0]);
      audioNodeConnectionsOfSource.outputs.delete(outputConnection);
    }
  }

  return destinations;
};

const deleteConnectionToDestination = (source, isOffline, destination, output, input) => {
  const audioNodeConnectionsOfSource = (0, _getAudioNodeConnections.getAudioNodeConnections)(source);
  return Array.from(audioNodeConnectionsOfSource.outputs).filter(outputConnection => outputConnection[0] === destination && (output === undefined || outputConnection[1] === output) && (input === undefined || outputConnection[2] === input)).map(outputConnection => {
    if ((0, _audioNodeOutputConnection.isAudioNodeOutputConnection)(outputConnection)) {
      deleteInputsOfAudioNode(source, isOffline, ...outputConnection);
    } else {
      deleteInputsOfAudioParam(source, isOffline, ...outputConnection);
    }

    audioNodeConnectionsOfSource.outputs.delete(outputConnection);
    return outputConnection[0];
  });
};

const createAudioNodeConstructor = (addAudioNodeConnections, addConnectionToAudioNode, cacheTestResult, createIncrementCycleCounter, createIndexSizeError, createInvalidAccessError, createNotSupportedError, decrementCycleCounter, detectCycles, eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext) => {
  return class AudioNode extends eventTargetConstructor {
    constructor(context, isActive, nativeAudioNode, audioNodeRenderer) {
      super(nativeAudioNode);
      this._context = context;
      this._nativeAudioNode = nativeAudioNode;
      const nativeContext = getNativeContext(context); // Bug #12: Safari does not support to disconnect a specific destination.

      if (isNativeAudioContext(nativeContext) && true !== cacheTestResult(_testAudioNodeDisconnectMethodSupport.testAudioNodeDisconnectMethodSupport, () => {
        return (0, _testAudioNodeDisconnectMethodSupport.testAudioNodeDisconnectMethodSupport)(nativeContext);
      })) {
        (0, _wrapAudioNodeDisconnectMethod.wrapAudioNodeDisconnectMethod)(nativeAudioNode);
      }

      _globals.AUDIO_NODE_STORE.set(this, nativeAudioNode);

      _globals.EVENT_LISTENERS.set(this, new Set());

      if (context.state !== 'closed' && isActive) {
        (0, _setInternalStateToActive.setInternalStateToActive)(this);
      }

      addAudioNodeConnections(this, audioNodeRenderer, nativeAudioNode);
    }

    get channelCount() {
      return this._nativeAudioNode.channelCount;
    }

    set channelCount(value) {
      this._nativeAudioNode.channelCount = value;
    }

    get channelCountMode() {
      return this._nativeAudioNode.channelCountMode;
    }

    set channelCountMode(value) {
      this._nativeAudioNode.channelCountMode = value;
    }

    get channelInterpretation() {
      return this._nativeAudioNode.channelInterpretation;
    }

    set channelInterpretation(value) {
      this._nativeAudioNode.channelInterpretation = value;
    }

    get context() {
      return this._context;
    }

    get numberOfInputs() {
      return this._nativeAudioNode.numberOfInputs;
    }

    get numberOfOutputs() {
      return this._nativeAudioNode.numberOfOutputs;
    } // tslint:disable-next-line:invalid-void


    connect(destination, output = 0, input = 0) {
      // Bug #174: Safari does expose a wrong numberOfOutputs for MediaStreamAudioDestinationNodes.
      if (output < 0 || output >= this._nativeAudioNode.numberOfOutputs) {
        throw createIndexSizeError();
      }

      const nativeContext = getNativeContext(this._context);
      const isOffline = isNativeOfflineAudioContext(nativeContext);

      if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {
        throw createInvalidAccessError();
      }

      if ((0, _audioNode.isAudioNode)(destination)) {
        const nativeDestinationAudioNode = (0, _getNativeAudioNode.getNativeAudioNode)(destination);

        try {
          const connection = (0, _connectNativeAudioNodeToNativeAudioNode.connectNativeAudioNodeToNativeAudioNode)(this._nativeAudioNode, nativeDestinationAudioNode, output, input);
          const isPassive = (0, _isPassiveAudioNode.isPassiveAudioNode)(this);

          if (isOffline || isPassive) {
            this._nativeAudioNode.disconnect(...connection);
          }

          if (this.context.state !== 'closed' && !isPassive && (0, _isPassiveAudioNode.isPassiveAudioNode)(destination)) {
            (0, _setInternalStateToActive.setInternalStateToActive)(destination);
          }
        } catch (err) {
          // Bug #41: Safari does not throw the correct exception so far.
          if (err.code === 12) {
            throw createInvalidAccessError();
          }

          throw err;
        }

        const isNewConnectionToAudioNode = addConnectionToAudioNode(this, destination, output, input, isOffline); // Bug #164: Only Firefox detects cycles so far.

        if (isNewConnectionToAudioNode) {
          const cycles = detectCycles([this], destination);
          (0, _visitEachAudioNodeOnce.visitEachAudioNodeOnce)(cycles, createIncrementCycleCounter(isOffline));
        }

        return destination;
      }

      const nativeAudioParam = (0, _getNativeAudioParam.getNativeAudioParam)(destination);
      /*
       * Bug #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an
       * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify
       * Safari.
       */

      if (nativeAudioParam.name === 'playbackRate') {
        throw createNotSupportedError();
      }

      try {
        this._nativeAudioNode.connect(nativeAudioParam, output);

        if (isOffline || (0, _isPassiveAudioNode.isPassiveAudioNode)(this)) {
          this._nativeAudioNode.disconnect(nativeAudioParam, output);
        }
      } catch (err) {
        // Bug #58: Only Firefox does throw an InvalidStateError yet.
        if (err.code === 12) {
          throw createInvalidAccessError();
        }

        throw err;
      }

      const isNewConnectionToAudioParam = addConnectionToAudioParamOfAudioContext(this, destination, output, isOffline); // Bug #164: Only Firefox detects cycles so far.

      if (isNewConnectionToAudioParam) {
        const cycles = detectCycles([this], destination);
        (0, _visitEachAudioNodeOnce.visitEachAudioNodeOnce)(cycles, createIncrementCycleCounter(isOffline));
      }
    }

    disconnect(destinationOrOutput, output, input) {
      let destinations;
      const nativeContext = getNativeContext(this._context);
      const isOffline = isNativeOfflineAudioContext(nativeContext);

      if (destinationOrOutput === undefined) {
        destinations = deleteAnyConnection(this, isOffline);
      } else if (typeof destinationOrOutput === 'number') {
        if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {
          throw createIndexSizeError();
        }

        destinations = deleteConnectionAtOutput(this, isOffline, destinationOrOutput);
      } else {
        if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {
          throw createIndexSizeError();
        }

        if ((0, _audioNode.isAudioNode)(destinationOrOutput) && input !== undefined && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {
          throw createIndexSizeError();
        }

        destinations = deleteConnectionToDestination(this, isOffline, destinationOrOutput, output, input);

        if (destinations.length === 0) {
          throw createInvalidAccessError();
        }
      } // Bug #164: Only Firefox detects cycles so far.


      for (const destination of destinations) {
        const cycles = detectCycles([this], destination);
        (0, _visitEachAudioNodeOnce.visitEachAudioNodeOnce)(cycles, decrementCycleCounter);
      }
    }

  };
};

exports.createAudioNodeConstructor = createAudioNodeConstructor;
},{"../globals":"node_modules/standardized-audio-context/build/es2019/globals.js","../guards/audio-node":"node_modules/standardized-audio-context/build/es2019/guards/audio-node.js","../guards/audio-node-output-connection":"node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js","../helpers/add-active-input-connection-to-audio-param":"node_modules/standardized-audio-context/build/es2019/helpers/add-active-input-connection-to-audio-param.js","../helpers/add-passive-input-connection-to-audio-param":"node_modules/standardized-audio-context/build/es2019/helpers/add-passive-input-connection-to-audio-param.js","../helpers/connect-native-audio-node-to-native-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js","../helpers/delete-active-input-connection":"node_modules/standardized-audio-context/build/es2019/helpers/delete-active-input-connection.js","../helpers/delete-active-input-connection-to-audio-param":"node_modules/standardized-audio-context/build/es2019/helpers/delete-active-input-connection-to-audio-param.js","../helpers/delete-event-listeners-of-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/delete-event-listeners-of-audio-node.js","../helpers/delete-passive-input-connection-to-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-node.js","../helpers/delete-passive-input-connection-to-audio-param":"node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-param.js","../helpers/disconnect-native-audio-node-from-native-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js","../helpers/get-audio-node-connections":"node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js","../helpers/get-audio-param-connections":"node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js","../helpers/get-event-listeners-of-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js","../helpers/get-native-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js","../helpers/get-native-audio-param":"node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-param.js","../helpers/insert-element-in-set":"node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js","../helpers/is-active-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js","../helpers/is-part-of-a-cycle":"node_modules/standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle.js","../helpers/is-passive-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/is-passive-audio-node.js","../helpers/set-internal-state-to-active":"node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js","../helpers/set-internal-state-to-passive-when-necessary":"node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive-when-necessary.js","../helpers/test-audio-node-disconnect-method-support":"node_modules/standardized-audio-context/build/es2019/helpers/test-audio-node-disconnect-method-support.js","../helpers/visit-each-audio-node-once":"node_modules/standardized-audio-context/build/es2019/helpers/visit-each-audio-node-once.js","../helpers/wrap-audio-node-disconnect-method":"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-node-disconnect-method.js"}],"node_modules/standardized-audio-context/build/es2019/factories/audio-param-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioParamFactory = void 0;

var _automationEvents = require("automation-events");

const createAudioParamFactory = (addAudioParamConnections, audioParamAudioNodeStore, audioParamStore, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor, setValueAtTimeUntilPossible) => {
  return (audioNode, isAudioParamOfOfflineAudioContext, nativeAudioParam, maxValue = null, minValue = null) => {
    const automationEventList = new _automationEvents.AutomationEventList(nativeAudioParam.defaultValue);
    const audioParamRenderer = isAudioParamOfOfflineAudioContext ? createAudioParamRenderer(automationEventList) : null;
    const audioParam = {
      get defaultValue() {
        return nativeAudioParam.defaultValue;
      },

      get maxValue() {
        return maxValue === null ? nativeAudioParam.maxValue : maxValue;
      },

      get minValue() {
        return minValue === null ? nativeAudioParam.minValue : minValue;
      },

      get value() {
        return nativeAudioParam.value;
      },

      set value(value) {
        nativeAudioParam.value = value; // Bug #98: Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().

        audioParam.setValueAtTime(value, audioNode.context.currentTime);
      },

      cancelAndHoldAtTime(cancelTime) {
        // Bug #28: Firefox & Safari do not yet implement cancelAndHoldAtTime().
        if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {
          if (audioParamRenderer === null) {
            automationEventList.flush(audioNode.context.currentTime);
          }

          automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));
          nativeAudioParam.cancelAndHoldAtTime(cancelTime);
        } else {
          const previousLastEvent = Array.from(automationEventList).pop();

          if (audioParamRenderer === null) {
            automationEventList.flush(audioNode.context.currentTime);
          }

          automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));
          const currentLastEvent = Array.from(automationEventList).pop();
          nativeAudioParam.cancelScheduledValues(cancelTime);

          if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {
            if (currentLastEvent.type === 'exponentialRampToValue') {
              nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);
            } else if (currentLastEvent.type === 'linearRampToValue') {
              nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);
            } else if (currentLastEvent.type === 'setValue') {
              nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);
            } else if (currentLastEvent.type === 'setValueCurve') {
              nativeAudioParam.setValueCurveAtTime(currentLastEvent.values, currentLastEvent.startTime, currentLastEvent.duration);
            }
          }
        }

        return audioParam;
      },

      cancelScheduledValues(cancelTime) {
        if (audioParamRenderer === null) {
          automationEventList.flush(audioNode.context.currentTime);
        }

        automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));
        nativeAudioParam.cancelScheduledValues(cancelTime);
        return audioParam;
      },

      exponentialRampToValueAtTime(value, endTime) {
        // Bug #45: Safari does not throw an error yet.
        if (value === 0) {
          throw new RangeError();
        } // Bug #187: Safari does not throw an error yet.


        if (!Number.isFinite(endTime) || endTime < 0) {
          throw new RangeError();
        }

        if (audioParamRenderer === null) {
          automationEventList.flush(audioNode.context.currentTime);
        }

        automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));
        nativeAudioParam.exponentialRampToValueAtTime(value, endTime);
        return audioParam;
      },

      linearRampToValueAtTime(value, endTime) {
        if (audioParamRenderer === null) {
          automationEventList.flush(audioNode.context.currentTime);
        }

        automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));
        nativeAudioParam.linearRampToValueAtTime(value, endTime);
        return audioParam;
      },

      setTargetAtTime(target, startTime, timeConstant) {
        if (audioParamRenderer === null) {
          automationEventList.flush(audioNode.context.currentTime);
        }

        automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));
        nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);
        return audioParam;
      },

      setValueAtTime(value, startTime) {
        if (audioParamRenderer === null) {
          automationEventList.flush(audioNode.context.currentTime);
        }

        automationEventList.add(createSetValueAutomationEvent(value, startTime));
        nativeAudioParam.setValueAtTime(value, startTime);
        return audioParam;
      },

      setValueCurveAtTime(values, startTime, duration) {
        // Bug 183: Safari only accepts a Float32Array.
        const convertedValues = values instanceof Float32Array ? values : new Float32Array(values);
        /*
         * Bug #152: Safari does not correctly interpolate the values of the curve.
         * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the
         * existence of the webkitAudioContext is used as a workaround here.
         */

        if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {
          const endTime = startTime + duration;
          const sampleRate = audioNode.context.sampleRate;
          const firstSample = Math.ceil(startTime * sampleRate);
          const lastSample = Math.floor(endTime * sampleRate);
          const numberOfInterpolatedValues = lastSample - firstSample;
          const interpolatedValues = new Float32Array(numberOfInterpolatedValues);

          for (let i = 0; i < numberOfInterpolatedValues; i += 1) {
            const theoreticIndex = (convertedValues.length - 1) / duration * ((firstSample + i) / sampleRate - startTime);
            const lowerIndex = Math.floor(theoreticIndex);
            const upperIndex = Math.ceil(theoreticIndex);
            interpolatedValues[i] = lowerIndex === upperIndex ? convertedValues[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * convertedValues[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * convertedValues[upperIndex];
          }

          if (audioParamRenderer === null) {
            automationEventList.flush(audioNode.context.currentTime);
          }

          automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));
          nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);
          const timeOfLastSample = lastSample / sampleRate;

          if (timeOfLastSample < endTime) {
            setValueAtTimeUntilPossible(audioParam, interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);
          }

          setValueAtTimeUntilPossible(audioParam, convertedValues[convertedValues.length - 1], endTime);
        } else {
          if (audioParamRenderer === null) {
            automationEventList.flush(audioNode.context.currentTime);
          }

          automationEventList.add(createSetValueCurveAutomationEvent(convertedValues, startTime, duration));
          nativeAudioParam.setValueCurveAtTime(convertedValues, startTime, duration);
        }

        return audioParam;
      }

    };
    audioParamStore.set(audioParam, nativeAudioParam);
    audioParamAudioNodeStore.set(audioParam, audioNode);
    addAudioParamConnections(audioParam, audioParamRenderer);
    return audioParam;
  };
};

exports.createAudioParamFactory = createAudioParamFactory;
},{"automation-events":"node_modules/automation-events/build/es5/bundle.js"}],"node_modules/standardized-audio-context/build/es2019/factories/audio-param-renderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioParamRenderer = void 0;

const createAudioParamRenderer = automationEventList => {
  return {
    replay(audioParam) {
      for (const automationEvent of automationEventList) {
        if (automationEvent.type === 'exponentialRampToValue') {
          const {
            endTime,
            value
          } = automationEvent;
          audioParam.exponentialRampToValueAtTime(value, endTime);
        } else if (automationEvent.type === 'linearRampToValue') {
          const {
            endTime,
            value
          } = automationEvent;
          audioParam.linearRampToValueAtTime(value, endTime);
        } else if (automationEvent.type === 'setTarget') {
          const {
            startTime,
            target,
            timeConstant
          } = automationEvent;
          audioParam.setTargetAtTime(target, startTime, timeConstant);
        } else if (automationEvent.type === 'setValue') {
          const {
            startTime,
            value
          } = automationEvent;
          audioParam.setValueAtTime(value, startTime);
        } else if (automationEvent.type === 'setValueCurve') {
          const {
            duration,
            startTime,
            values
          } = automationEvent;
          audioParam.setValueCurveAtTime(values, startTime, duration);
        } else {
          throw new Error("Can't apply an unknown automation.");
        }
      }
    }

  };
};

exports.createAudioParamRenderer = createAudioParamRenderer;
},{}],"node_modules/standardized-audio-context/build/es2019/read-only-map.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReadOnlyMap = void 0;

class ReadOnlyMap {
  constructor(parameters) {
    this._map = new Map(parameters);
  }

  get size() {
    return this._map.size;
  }

  entries() {
    return this._map.entries();
  }

  forEach(callback, thisArg = null) {
    return this._map.forEach((value, key) => callback.call(thisArg, value, key, this));
  }

  get(name) {
    return this._map.get(name);
  }

  has(name) {
    return this._map.has(name);
  }

  keys() {
    return this._map.keys();
  }

  values() {
    return this._map.values();
  }

}

exports.ReadOnlyMap = ReadOnlyMap;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioWorkletNodeConstructor = void 0;

var _globals = require("../globals");

var _readOnlyMap = require("../read-only-map");

const DEFAULT_OPTIONS = {
  channelCount: 2,
  // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.
  channelCountMode: 'explicit',
  channelInterpretation: 'speakers',
  numberOfInputs: 1,
  numberOfOutputs: 1,
  parameterData: {},
  processorOptions: {}
};

const createAudioWorkletNodeConstructor = (addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, wrapEventListener) => {
  return class AudioWorkletNode extends audioNodeConstructor {
    constructor(context, name, options) {
      var _a;

      const nativeContext = getNativeContext(context);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const mergedOptions = sanitizeAudioWorkletNodeOptions({ ...DEFAULT_OPTIONS,
        ...options
      });

      const nodeNameToProcessorConstructorMap = _globals.NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);

      const processorConstructor = nodeNameToProcessorConstructorMap === null || nodeNameToProcessorConstructorMap === void 0 ? void 0 : nodeNameToProcessorConstructorMap.get(name); // Bug #186: Chrome, Edge and Opera do not allow to create an AudioWorkletNode on a closed AudioContext.

      const nativeContextOrBackupOfflineAudioContext = isOffline || nativeContext.state !== 'closed' ? nativeContext : (_a = getBackupOfflineAudioContext(nativeContext)) !== null && _a !== void 0 ? _a : nativeContext;
      const nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContextOrBackupOfflineAudioContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);
      const audioWorkletNodeRenderer = isOffline ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor) : null;
      /*
       * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor
       * returns false.
       */

      super(context, true, nativeAudioWorkletNode, audioWorkletNodeRenderer);
      const parameters = [];
      nativeAudioWorkletNode.parameters.forEach((nativeAudioParam, nm) => {
        const audioParam = createAudioParam(this, isOffline, nativeAudioParam);
        parameters.push([nm, audioParam]);
      });
      this._nativeAudioWorkletNode = nativeAudioWorkletNode;
      this._onprocessorerror = null;
      this._parameters = new _readOnlyMap.ReadOnlyMap(parameters);
      /*
       * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to
       * the destination.
       */

      if (isOffline) {
        addUnrenderedAudioWorkletNode(nativeContext, this);
      }

      const {
        activeInputs
      } = getAudioNodeConnections(this);
      setActiveAudioWorkletNodeInputs(nativeAudioWorkletNode, activeInputs);
    }

    get onprocessorerror() {
      return this._onprocessorerror;
    }

    set onprocessorerror(value) {
      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
      this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;
      const nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;
      this._onprocessorerror = nativeOnProcessorError !== null && nativeOnProcessorError === wrappedListener ? value : nativeOnProcessorError;
    }

    get parameters() {
      if (this._parameters === null) {
        // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.
        return this._nativeAudioWorkletNode.parameters;
      }

      return this._parameters;
    }

    get port() {
      return this._nativeAudioWorkletNode.port;
    }

  };
};

exports.createAudioWorkletNodeConstructor = createAudioWorkletNodeConstructor;
},{"../globals":"node_modules/standardized-audio-context/build/es2019/globals.js","../read-only-map":"node_modules/standardized-audio-context/build/es2019/read-only-map.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/copy-from-channel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copyFromChannel = copyFromChannel;

function copyFromChannel(audioBuffer, // @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }
parent, key, channelNumber, bufferOffset) {
  if (typeof audioBuffer.copyFromChannel === 'function') {
    // The byteLength will be 0 when the ArrayBuffer was transferred.
    if (parent[key].byteLength === 0) {
      parent[key] = new Float32Array(128);
    }

    audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset); // Bug #5: Safari does not support copyFromChannel().
  } else {
    const channelData = audioBuffer.getChannelData(channelNumber); // The byteLength will be 0 when the ArrayBuffer was transferred.

    if (parent[key].byteLength === 0) {
      parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);
    } else {
      const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);
      parent[key].set(slicedInput);
    }
  }
}
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/copy-to-channel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copyToChannel = void 0;

const copyToChannel = (audioBuffer, parent, key, channelNumber, bufferOffset) => {
  if (typeof audioBuffer.copyToChannel === 'function') {
    // The byteLength will be 0 when the ArrayBuffer was transferred.
    if (parent[key].byteLength !== 0) {
      audioBuffer.copyToChannel(parent[key], channelNumber, bufferOffset);
    } // Bug #5: Safari does not support copyToChannel().

  } else {
    // The byteLength will be 0 when the ArrayBuffer was transferred.
    if (parent[key].byteLength !== 0) {
      audioBuffer.getChannelData(channelNumber).set(parent[key], bufferOffset);
    }
  }
};

exports.copyToChannel = copyToChannel;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/create-nested-arrays.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNestedArrays = void 0;

const createNestedArrays = (x, y) => {
  const arrays = [];

  for (let i = 0; i < x; i += 1) {
    const array = [];
    const length = typeof y === 'number' ? y : y[i];

    for (let j = 0; j < length; j += 1) {
      array.push(new Float32Array(128));
    }

    arrays.push(array);
  }

  return arrays;
};

exports.createNestedArrays = createNestedArrays;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/get-audio-worklet-processor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAudioWorkletProcessor = void 0;

var _globals = require("../globals");

var _getNativeAudioNode = require("./get-native-audio-node");

var _getValueForKey = require("./get-value-for-key");

const getAudioWorkletProcessor = (nativeOfflineAudioContext, proxy) => {
  const nodeToProcessorMap = (0, _getValueForKey.getValueForKey)(_globals.NODE_TO_PROCESSOR_MAPS, nativeOfflineAudioContext);
  const nativeAudioWorkletNode = (0, _getNativeAudioNode.getNativeAudioNode)(proxy);
  return (0, _getValueForKey.getValueForKey)(nodeToProcessorMap, nativeAudioWorkletNode);
};

exports.getAudioWorkletProcessor = getAudioWorkletProcessor;
},{"../globals":"node_modules/standardized-audio-context/build/es2019/globals.js","./get-native-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js","./get-value-for-key":"node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js"}],"node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioWorkletNodeRendererFactory = void 0;

var _copyFromChannel = require("../helpers/copy-from-channel");

var _copyToChannel = require("../helpers/copy-to-channel");

var _createNestedArrays = require("../helpers/create-nested-arrays");

var _getAudioNodeConnections = require("../helpers/get-audio-node-connections");

var _getAudioWorkletProcessor = require("../helpers/get-audio-worklet-processor");

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const processBuffer = async (proxy, renderedBuffer, nativeOfflineAudioContext, options, outputChannelCount, processorConstructor, exposeCurrentFrameAndCurrentTime) => {
  // Ceil the length to the next full render quantum.
  // Bug #17: Safari does not yet expose the length.
  const length = renderedBuffer === null ? Math.ceil(proxy.context.length / 128) * 128 : renderedBuffer.length;
  const numberOfInputChannels = options.channelCount * options.numberOfInputs;
  const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);
  const processedBuffer = numberOfOutputChannels === 0 ? null : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, nativeOfflineAudioContext.sampleRate);

  if (processorConstructor === undefined) {
    throw new Error('Missing the processor constructor.');
  }

  const audioNodeConnections = (0, _getAudioNodeConnections.getAudioNodeConnections)(proxy);
  const audioWorkletProcessor = await (0, _getAudioWorkletProcessor.getAudioWorkletProcessor)(nativeOfflineAudioContext, proxy);
  const inputs = (0, _createNestedArrays.createNestedArrays)(options.numberOfInputs, options.channelCount);
  const outputs = (0, _createNestedArrays.createNestedArrays)(options.numberOfOutputs, outputChannelCount);
  const parameters = Array.from(proxy.parameters.keys()).reduce((prmtrs, name) => ({ ...prmtrs,
    [name]: new Float32Array(128)
  }), {});

  for (let i = 0; i < length; i += 128) {
    if (options.numberOfInputs > 0 && renderedBuffer !== null) {
      for (let j = 0; j < options.numberOfInputs; j += 1) {
        for (let k = 0; k < options.channelCount; k += 1) {
          (0, _copyFromChannel.copyFromChannel)(renderedBuffer, inputs[j], k, k, i);
        }
      }
    }

    if (processorConstructor.parameterDescriptors !== undefined && renderedBuffer !== null) {
      processorConstructor.parameterDescriptors.forEach(({
        name
      }, index) => {
        (0, _copyFromChannel.copyFromChannel)(renderedBuffer, parameters, name, numberOfInputChannels + index, i);
      });
    }

    for (let j = 0; j < options.numberOfInputs; j += 1) {
      for (let k = 0; k < outputChannelCount[j]; k += 1) {
        // The byteLength will be 0 when the ArrayBuffer was transferred.
        if (outputs[j][k].byteLength === 0) {
          outputs[j][k] = new Float32Array(128);
        }
      }
    }

    try {
      const potentiallyEmptyInputs = inputs.map((input, index) => {
        if (audioNodeConnections.activeInputs[index].size === 0) {
          return [];
        }

        return input;
      });
      const activeSourceFlag = exposeCurrentFrameAndCurrentTime(i / nativeOfflineAudioContext.sampleRate, nativeOfflineAudioContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));

      if (processedBuffer !== null) {
        for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {
          for (let k = 0; k < outputChannelCount[j]; k += 1) {
            (0, _copyToChannel.copyToChannel)(processedBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);
          }

          outputChannelSplitterNodeOutput += outputChannelCount[j];
        }
      }

      if (!activeSourceFlag) {
        break;
      }
    } catch (error) {
      proxy.dispatchEvent(new ErrorEvent('processorerror', {
        colno: error.colno,
        filename: error.filename,
        lineno: error.lineno,
        message: error.message
      }));
      break;
    }
  }

  return processedBuffer;
};

const createAudioWorkletNodeRendererFactory = (connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {
  return (name, options, processorConstructor) => {
    const renderedNativeAudioNodes = new WeakMap();
    let processedBufferPromise = null;

    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeAudioWorkletNode = getNativeAudioNode(proxy);
      let nativeOutputNodes = null;
      const nativeAudioWorkletNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeAudioWorkletNode, nativeOfflineAudioContext);
      const outputChannelCount = Array.isArray(options.outputChannelCount) ? options.outputChannelCount : Array.from(options.outputChannelCount); // Bug #61: Only Chrome, Edge, Firefox & Opera have an implementation of the AudioWorkletNode yet.

      if (nativeAudioWorkletNodeConstructor === null) {
        const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);
        const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {
          channelCount: Math.max(1, numberOfOutputChannels),
          channelCountMode: 'explicit',
          channelInterpretation: 'discrete',
          numberOfOutputs: Math.max(1, numberOfOutputChannels)
        });
        const outputChannelMergerNodes = [];

        for (let i = 0; i < proxy.numberOfOutputs; i += 1) {
          outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeOfflineAudioContext, {
            channelCount: 1,
            channelCountMode: 'explicit',
            channelInterpretation: 'speakers',
            numberOfInputs: outputChannelCount[i]
          }));
        }

        const outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {
          channelCount: options.channelCount,
          channelCountMode: options.channelCountMode,
          channelInterpretation: options.channelInterpretation,
          gain: 1
        });
        outputGainNode.connect = connectMultipleOutputs.bind(null, outputChannelMergerNodes);
        outputGainNode.disconnect = disconnectMultipleOutputs.bind(null, outputChannelMergerNodes);
        nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];
      } else if (!nativeAudioWorkletNodeIsOwnedByContext) {
        nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);
      }

      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeOutputNodes === null ? nativeAudioWorkletNode : nativeOutputNodes[2]);

      if (nativeOutputNodes !== null) {
        if (processedBufferPromise === null) {
          if (processorConstructor === undefined) {
            throw new Error('Missing the processor constructor.');
          }

          if (nativeOfflineAudioContextConstructor === null) {
            throw new Error('Missing the native OfflineAudioContext constructor.');
          } // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.


          const numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;
          const numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;
          const numberOfChannels = numberOfInputChannels + numberOfParameters;

          const renderBuffer = async () => {
            const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(numberOfChannels, // Ceil the length to the next full render quantum.
            // Bug #17: Safari does not yet expose the length.
            Math.ceil(proxy.context.length / 128) * 128, nativeOfflineAudioContext.sampleRate);
            const gainNodes = [];
            const inputChannelSplitterNodes = [];

            for (let i = 0; i < options.numberOfInputs; i += 1) {
              gainNodes.push(createNativeGainNode(partialOfflineAudioContext, {
                channelCount: options.channelCount,
                channelCountMode: options.channelCountMode,
                channelInterpretation: options.channelInterpretation,
                gain: 1
              }));
              inputChannelSplitterNodes.push(createNativeChannelSplitterNode(partialOfflineAudioContext, {
                channelCount: options.channelCount,
                channelCountMode: 'explicit',
                channelInterpretation: 'discrete',
                numberOfOutputs: options.channelCount
              }));
            }

            const constantSourceNodes = await Promise.all(Array.from(proxy.parameters.values()).map(async audioParam => {
              const constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {
                channelCount: 1,
                channelCountMode: 'explicit',
                channelInterpretation: 'discrete',
                offset: audioParam.value
              });
              await renderAutomation(partialOfflineAudioContext, audioParam, constantSourceNode.offset, trace);
              return constantSourceNode;
            }));
            const inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {
              channelCount: 1,
              channelCountMode: 'explicit',
              channelInterpretation: 'speakers',
              numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)
            });

            for (let i = 0; i < options.numberOfInputs; i += 1) {
              gainNodes[i].connect(inputChannelSplitterNodes[i]);

              for (let j = 0; j < options.channelCount; j += 1) {
                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);
              }
            }

            for (const [index, constantSourceNode] of constantSourceNodes.entries()) {
              constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);
              constantSourceNode.start(0);
            }

            inputChannelMergerNode.connect(partialOfflineAudioContext.destination);
            await Promise.all(gainNodes.map(gainNode => renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode, trace)));
            return renderNativeOfflineAudioContext(partialOfflineAudioContext);
          };

          processedBufferPromise = processBuffer(proxy, numberOfChannels === 0 ? null : await renderBuffer(), nativeOfflineAudioContext, options, outputChannelCount, processorConstructor, exposeCurrentFrameAndCurrentTime);
        }

        const processedBuffer = await processedBufferPromise;
        const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {
          buffer: null,
          channelCount: 2,
          channelCountMode: 'max',
          channelInterpretation: 'speakers',
          loop: false,
          loopEnd: 0,
          loopStart: 0,
          playbackRate: 1
        });
        const [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode] = nativeOutputNodes;

        if (processedBuffer !== null) {
          audioBufferSourceNode.buffer = processedBuffer;
          audioBufferSourceNode.start(0);
        }

        audioBufferSourceNode.connect(outputChannelSplitterNode);

        for (let i = 0, outputChannelSplitterNodeOutput = 0; i < proxy.numberOfOutputs; i += 1) {
          const outputChannelMergerNode = outputChannelMergerNodes[i];

          for (let j = 0; j < outputChannelCount[i]; j += 1) {
            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);
          }

          outputChannelSplitterNodeOutput += outputChannelCount[i];
        }

        return outputGainNode;
      }

      if (!nativeAudioWorkletNodeIsOwnedByContext) {
        for (const [nm, audioParam] of proxy.parameters.entries()) {
          await renderAutomation(nativeOfflineAudioContext, audioParam, // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.
          nativeAudioWorkletNode.parameters.get(nm), trace);
        }
      } else {
        for (const [nm, audioParam] of proxy.parameters.entries()) {
          await connectAudioParam(nativeOfflineAudioContext, audioParam, // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.
          nativeAudioWorkletNode.parameters.get(nm), trace);
        }
      }

      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode, trace);
      return nativeAudioWorkletNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        deleteUnrenderedAudioWorkletNode(nativeOfflineAudioContext, proxy);
        const renderedNativeAudioWorkletNodeOrGainNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);

        if (renderedNativeAudioWorkletNodeOrGainNode !== undefined) {
          return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);
        }

        return createAudioNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createAudioWorkletNodeRendererFactory = createAudioWorkletNodeRendererFactory;
},{"../helpers/copy-from-channel":"node_modules/standardized-audio-context/build/es2019/helpers/copy-from-channel.js","../helpers/copy-to-channel":"node_modules/standardized-audio-context/build/es2019/helpers/copy-to-channel.js","../helpers/create-nested-arrays":"node_modules/standardized-audio-context/build/es2019/helpers/create-nested-arrays.js","../helpers/get-audio-node-connections":"node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js","../helpers/get-audio-worklet-processor":"node_modules/standardized-audio-context/build/es2019/helpers/get-audio-worklet-processor.js","../helpers/is-owned-by-context":"node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"node_modules/standardized-audio-context/build/es2019/factories/base-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBaseAudioContextConstructor = void 0;

const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {
  return class BaseAudioContext extends minimalBaseAudioContextConstructor {
    constructor(_nativeContext, numberOfChannels) {
      super(_nativeContext, numberOfChannels);
      this._nativeContext = _nativeContext;
      this._audioWorklet = addAudioWorkletModule === undefined ? undefined : {
        addModule: (moduleURL, options) => {
          return addAudioWorkletModule(this, moduleURL, options);
        }
      };
    }

    get audioWorklet() {
      return this._audioWorklet;
    }

    createAnalyser() {
      return new analyserNodeConstructor(this);
    }

    createBiquadFilter() {
      return new biquadFilterNodeConstructor(this);
    }

    createBuffer(numberOfChannels, length, sampleRate) {
      return new audioBufferConstructor({
        length,
        numberOfChannels,
        sampleRate
      });
    }

    createBufferSource() {
      return new audioBufferSourceNodeConstructor(this);
    }

    createChannelMerger(numberOfInputs = 6) {
      return new channelMergerNodeConstructor(this, {
        numberOfInputs
      });
    }

    createChannelSplitter(numberOfOutputs = 6) {
      return new channelSplitterNodeConstructor(this, {
        numberOfOutputs
      });
    }

    createConstantSource() {
      return new constantSourceNodeConstructor(this);
    }

    createConvolver() {
      return new convolverNodeConstructor(this);
    }

    createDelay(maxDelayTime = 1) {
      return new delayNodeConstructor(this, {
        maxDelayTime
      });
    }

    createDynamicsCompressor() {
      return new dynamicsCompressorNodeConstructor(this);
    }

    createGain() {
      return new gainNodeConstructor(this);
    }

    createIIRFilter(feedforward, feedback) {
      return new iIRFilterNodeConstructor(this, {
        feedback,
        feedforward
      });
    }

    createOscillator() {
      return new oscillatorNodeConstructor(this);
    }

    createPanner() {
      return new pannerNodeConstructor(this);
    }

    createPeriodicWave(real, imag, constraints = {
      disableNormalization: false
    }) {
      return new periodicWaveConstructor(this, { ...constraints,
        imag,
        real
      });
    }

    createStereoPanner() {
      return new stereoPannerNodeConstructor(this);
    }

    createWaveShaper() {
      return new waveShaperNodeConstructor(this);
    }

    decodeAudioData(audioData, successCallback, errorCallback) {
      return decodeAudioData(this._nativeContext, audioData).then(audioBuffer => {
        if (typeof successCallback === 'function') {
          successCallback(audioBuffer);
        }

        return audioBuffer;
      }).catch(err => {
        if (typeof errorCallback === 'function') {
          errorCallback(err);
        }

        throw err;
      });
    }

  };
};

exports.createBaseAudioContextConstructor = createBaseAudioContextConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBiquadFilterNodeConstructor = void 0;

var _constants = require("../constants");

const DEFAULT_OPTIONS = {
  Q: 1,
  channelCount: 2,
  channelCountMode: 'max',
  channelInterpretation: 'speakers',
  detune: 0,
  frequency: 350,
  gain: 0,
  type: 'lowpass'
};

const createBiquadFilterNodeConstructor = (audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {
  return class BiquadFilterNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const biquadFilterNodeRenderer = isOffline ? createBiquadFilterNodeRenderer() : null;
      super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer); // Bug #80: Safari does not export the correct values for maxValue and minValue.

      this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT); // Bug #78: Firefox & Safari do not export the correct values for maxValue and minValue.

      this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(_constants.MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(_constants.MOST_POSITIVE_SINGLE_FLOAT)); // Bug #77: Firefox & Safari do not export the correct value for minValue.

      this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0); // Bug #79: Firefox & Safari do not export the correct values for maxValue and minValue.

      this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(_constants.MOST_POSITIVE_SINGLE_FLOAT), _constants.MOST_NEGATIVE_SINGLE_FLOAT);
      this._nativeBiquadFilterNode = nativeBiquadFilterNode; // @todo Determine a meaningful tail-time instead of just using one second.

      setAudioNodeTailTime(this, 1);
    }

    get detune() {
      return this._detune;
    }

    get frequency() {
      return this._frequency;
    }

    get gain() {
      return this._gain;
    }

    get Q() {
      return this._Q;
    }

    get type() {
      return this._nativeBiquadFilterNode.type;
    }

    set type(value) {
      this._nativeBiquadFilterNode.type = value;
    }

    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {
      // Bug #189: Safari does throw an InvalidStateError.
      try {
        this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);
      } catch (err) {
        if (err.code === 11) {
          throw createInvalidAccessError();
        }

        throw err;
      } // Bug #68: Safari does not throw an error if the parameters differ in their length.


      if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {
        throw createInvalidAccessError();
      }
    }

  };
};

exports.createBiquadFilterNodeConstructor = createBiquadFilterNodeConstructor;
},{"../constants":"node_modules/standardized-audio-context/build/es2019/constants.js"}],"node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBiquadFilterNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeBiquadFilterNodes = new WeakMap();

    const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeBiquadFilterNode = getNativeAudioNode(proxy);
      /*
       * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created
       * again.
       */

      const nativeBiquadFilterNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeBiquadFilterNode, nativeOfflineAudioContext);

      if (!nativeBiquadFilterNodeIsOwnedByContext) {
        const options = {
          Q: nativeBiquadFilterNode.Q.value,
          channelCount: nativeBiquadFilterNode.channelCount,
          channelCountMode: nativeBiquadFilterNode.channelCountMode,
          channelInterpretation: nativeBiquadFilterNode.channelInterpretation,
          detune: nativeBiquadFilterNode.detune.value,
          frequency: nativeBiquadFilterNode.frequency.value,
          gain: nativeBiquadFilterNode.gain.value,
          type: nativeBiquadFilterNode.type
        };
        nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);
      }

      renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);

      if (!nativeBiquadFilterNodeIsOwnedByContext) {
        await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);
      } else {
        await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);
      }

      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode, trace);
      return nativeBiquadFilterNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);

        if (renderedNativeBiquadFilterNode !== undefined) {
          return Promise.resolve(renderedNativeBiquadFilterNode);
        }

        return createBiquadFilterNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createBiquadFilterNodeRendererFactory = createBiquadFilterNodeRendererFactory;
},{"../helpers/is-owned-by-context":"node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"node_modules/standardized-audio-context/build/es2019/factories/cache-test-result.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCacheTestResult = void 0;

const createCacheTestResult = (ongoingTests, testResults) => {
  return (tester, test) => {
    const cachedTestResult = testResults.get(tester);

    if (cachedTestResult !== undefined) {
      return cachedTestResult;
    }

    const ongoingTest = ongoingTests.get(tester);

    if (ongoingTest !== undefined) {
      return ongoingTest;
    }

    try {
      const synchronousTestResult = test();

      if (synchronousTestResult instanceof Promise) {
        ongoingTests.set(tester, synchronousTestResult);
        return synchronousTestResult.catch(() => false).then(finalTestResult => {
          ongoingTests.delete(tester);
          testResults.set(tester, finalTestResult);
          return finalTestResult;
        });
      }

      testResults.set(tester, synchronousTestResult);
      return synchronousTestResult;
    } catch {
      testResults.set(tester, false);
      return false;
    }
  };
};

exports.createCacheTestResult = createCacheTestResult;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createChannelMergerNodeConstructor = void 0;
const DEFAULT_OPTIONS = {
  channelCount: 1,
  channelCountMode: 'explicit',
  channelInterpretation: 'speakers',
  numberOfInputs: 6
};

const createChannelMergerNodeConstructor = (audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext) => {
  return class ChannelMergerNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeChannelMergerNode = createNativeChannelMergerNode(nativeContext, mergedOptions);
      const channelMergerNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelMergerNodeRenderer() : null;
      super(context, false, nativeChannelMergerNode, channelMergerNodeRenderer);
    }

  };
};

exports.createChannelMergerNodeConstructor = createChannelMergerNodeConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createChannelMergerNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeAudioNodes = new WeakMap();

    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativeAudioNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeAudioNode, nativeOfflineAudioContext);

      if (!nativeAudioNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeAudioNode.channelCount,
          channelCountMode: nativeAudioNode.channelCountMode,
          channelInterpretation: nativeAudioNode.channelInterpretation,
          numberOfInputs: nativeAudioNode.numberOfInputs
        };
        nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);
      }

      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);
      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode, trace);
      return nativeAudioNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);

        if (renderedNativeAudioNode !== undefined) {
          return Promise.resolve(renderedNativeAudioNode);
        }

        return createAudioNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createChannelMergerNodeRendererFactory = createChannelMergerNodeRendererFactory;
},{"../helpers/is-owned-by-context":"node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createChannelSplitterNodeConstructor = void 0;
const DEFAULT_OPTIONS = {
  channelCount: 6,
  channelCountMode: 'explicit',
  channelInterpretation: 'discrete',
  numberOfOutputs: 6
};

const createChannelSplitterNodeConstructor = (audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions) => {
  return class ChannelSplitterNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = sanitizeChannelSplitterOptions({ ...DEFAULT_OPTIONS,
        ...options
      });
      const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);
      const channelSplitterNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null;
      super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);
    }

  };
};

exports.createChannelSplitterNodeConstructor = createChannelSplitterNodeConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createChannelSplitterNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeAudioNodes = new WeakMap();

    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativeAudioNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeAudioNode, nativeOfflineAudioContext);

      if (!nativeAudioNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeAudioNode.channelCount,
          channelCountMode: nativeAudioNode.channelCountMode,
          channelInterpretation: nativeAudioNode.channelInterpretation,
          numberOfOutputs: nativeAudioNode.numberOfOutputs
        };
        nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);
      }

      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);
      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode, trace);
      return nativeAudioNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);

        if (renderedNativeAudioNode !== undefined) {
          return Promise.resolve(renderedNativeAudioNode);
        }

        return createAudioNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createChannelSplitterNodeRendererFactory = createChannelSplitterNodeRendererFactory;
},{"../helpers/is-owned-by-context":"node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"node_modules/standardized-audio-context/build/es2019/factories/connect-audio-param.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConnectAudioParam = void 0;

const createConnectAudioParam = renderInputsOfAudioParam => {
  return (nativeOfflineAudioContext, audioParam, nativeAudioParam, trace) => {
    return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam, trace);
  };
};

exports.createConnectAudioParam = createConnectAudioParam;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/connect-multiple-outputs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConnectMultipleOutputs = void 0;

var _nativeAudioNode = require("../guards/native-audio-node");

const createConnectMultipleOutputs = createIndexSizeError => {
  return (outputAudioNodes, destination, output = 0, input = 0) => {
    const outputAudioNode = outputAudioNodes[output];

    if (outputAudioNode === undefined) {
      throw createIndexSizeError();
    }

    if ((0, _nativeAudioNode.isNativeAudioNode)(destination)) {
      return outputAudioNode.connect(destination, 0, input);
    }

    return outputAudioNode.connect(destination, 0);
  };
};

exports.createConnectMultipleOutputs = createConnectMultipleOutputs;
},{"../guards/native-audio-node":"node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js"}],"node_modules/standardized-audio-context/build/es2019/factories/connected-native-audio-buffer-source-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConnectedNativeAudioBufferSourceNodeFactory = void 0;

const createConnectedNativeAudioBufferSourceNodeFactory = createNativeAudioBufferSourceNode => {
  return (nativeContext, nativeAudioNode) => {
    const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {
      buffer: null,
      channelCount: 2,
      channelCountMode: 'max',
      channelInterpretation: 'speakers',
      loop: false,
      loopEnd: 0,
      loopStart: 0,
      playbackRate: 1
    });
    const nativeAudioBuffer = nativeContext.createBuffer(1, 2, 44100);
    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;
    nativeAudioBufferSourceNode.loop = true;
    nativeAudioBufferSourceNode.connect(nativeAudioNode);
    nativeAudioBufferSourceNode.start();
    return () => {
      nativeAudioBufferSourceNode.stop();
      nativeAudioBufferSourceNode.disconnect(nativeAudioNode);
    };
  };
};

exports.createConnectedNativeAudioBufferSourceNodeFactory = createConnectedNativeAudioBufferSourceNodeFactory;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConstantSourceNodeConstructor = void 0;

var _constants = require("../constants");

var _isActiveAudioNode = require("../helpers/is-active-audio-node");

var _setInternalStateToActive = require("../helpers/set-internal-state-to-active");

var _setInternalStateToPassive = require("../helpers/set-internal-state-to-passive");

const DEFAULT_OPTIONS = {
  channelCount: 2,
  channelCountMode: 'max',
  channelInterpretation: 'speakers',
  offset: 1
};

const createConstantSourceNodeConstructor = (audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {
  return class ConstantSourceNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const constantSourceNodeRenderer = isOffline ? createConstantSourceNodeRendererFactory() : null;
      super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);
      this._constantSourceNodeRenderer = constantSourceNodeRenderer;
      this._nativeConstantSourceNode = nativeConstantSourceNode;
      /*
       * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and minValue
       * for GainNodes.
       */

      this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT);
      this._onended = null;
    }

    get offset() {
      return this._offset;
    }

    get onended() {
      return this._onended;
    }

    set onended(value) {
      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
      this._nativeConstantSourceNode.onended = wrappedListener;
      const nativeOnEnded = this._nativeConstantSourceNode.onended;
      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;
    }

    start(when = 0) {
      this._nativeConstantSourceNode.start(when);

      if (this._constantSourceNodeRenderer !== null) {
        this._constantSourceNodeRenderer.start = when;
      }

      if (this.context.state !== 'closed') {
        (0, _setInternalStateToActive.setInternalStateToActive)(this);

        const resetInternalStateToPassive = () => {
          this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);

          if ((0, _isActiveAudioNode.isActiveAudioNode)(this)) {
            (0, _setInternalStateToPassive.setInternalStateToPassive)(this);
          }
        };

        this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);
      }
    }

    stop(when = 0) {
      this._nativeConstantSourceNode.stop(when);

      if (this._constantSourceNodeRenderer !== null) {
        this._constantSourceNodeRenderer.stop = when;
      }
    }

  };
};

exports.createConstantSourceNodeConstructor = createConstantSourceNodeConstructor;
},{"../constants":"node_modules/standardized-audio-context/build/es2019/constants.js","../helpers/is-active-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js","../helpers/set-internal-state-to-active":"node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js","../helpers/set-internal-state-to-passive":"node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js"}],"node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConstantSourceNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeConstantSourceNodes = new WeakMap();
    let start = null;
    let stop = null;

    const createConstantSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeConstantSourceNode = getNativeAudioNode(proxy);
      /*
       * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created
       * again.
       */

      const nativeConstantSourceNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeConstantSourceNode, nativeOfflineAudioContext);

      if (!nativeConstantSourceNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeConstantSourceNode.channelCount,
          channelCountMode: nativeConstantSourceNode.channelCountMode,
          channelInterpretation: nativeConstantSourceNode.channelInterpretation,
          offset: nativeConstantSourceNode.offset.value
        };
        nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);

        if (start !== null) {
          nativeConstantSourceNode.start(start);
        }

        if (stop !== null) {
          nativeConstantSourceNode.stop(stop);
        }
      }

      renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);

      if (!nativeConstantSourceNodeIsOwnedByContext) {
        await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);
      } else {
        await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);
      }

      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode, trace);
      return nativeConstantSourceNode;
    };

    return {
      set start(value) {
        start = value;
      },

      set stop(value) {
        stop = value;
      },

      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);

        if (renderedNativeConstantSourceNode !== undefined) {
          return Promise.resolve(renderedNativeConstantSourceNode);
        }

        return createConstantSourceNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createConstantSourceNodeRendererFactory = createConstantSourceNodeRendererFactory;
},{"../helpers/is-owned-by-context":"node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"node_modules/standardized-audio-context/build/es2019/factories/convert-number-to-unsigned-long.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConvertNumberToUnsignedLong = void 0;

const createConvertNumberToUnsignedLong = unit32Array => {
  return value => {
    unit32Array[0] = value;
    return unit32Array[0];
  };
};

exports.createConvertNumberToUnsignedLong = createConvertNumberToUnsignedLong;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/convolver-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConvolverNodeConstructor = void 0;
const DEFAULT_OPTIONS = {
  buffer: null,
  channelCount: 2,
  channelCountMode: 'clamped-max',
  channelInterpretation: 'speakers',
  disableNormalization: false
};

const createConvolverNodeConstructor = (audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {
  return class ConvolverNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const convolverNodeRenderer = isOffline ? createConvolverNodeRenderer() : null;
      super(context, false, nativeConvolverNode, convolverNodeRenderer);
      this._isBufferNullified = false;
      this._nativeConvolverNode = nativeConvolverNode;

      if (mergedOptions.buffer !== null) {
        setAudioNodeTailTime(this, mergedOptions.buffer.duration);
      }
    }

    get buffer() {
      if (this._isBufferNullified) {
        return null;
      }

      return this._nativeConvolverNode.buffer;
    }

    set buffer(value) {
      this._nativeConvolverNode.buffer = value; // Bug #115: Safari does not allow to set the buffer to null.

      if (value === null && this._nativeConvolverNode.buffer !== null) {
        const nativeContext = this._nativeConvolverNode.context;
        this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, 44100);
        this._isBufferNullified = true;
        setAudioNodeTailTime(this, 0);
      } else {
        this._isBufferNullified = false;
        setAudioNodeTailTime(this, this._nativeConvolverNode.buffer === null ? 0 : this._nativeConvolverNode.buffer.duration);
      }
    }

    get normalize() {
      return this._nativeConvolverNode.normalize;
    }

    set normalize(value) {
      this._nativeConvolverNode.normalize = value;
    }

  };
};

exports.createConvolverNodeConstructor = createConvolverNodeConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/convolver-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConvolverNodeRendererFactory = void 0;

var _nativeAudioNodeFaker = require("../guards/native-audio-node-faker");

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeConvolverNodes = new WeakMap();

    const createConvolverNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeConvolverNode = getNativeAudioNode(proxy); // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativeConvolverNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeConvolverNode, nativeOfflineAudioContext);

      if (!nativeConvolverNodeIsOwnedByContext) {
        const options = {
          buffer: nativeConvolverNode.buffer,
          channelCount: nativeConvolverNode.channelCount,
          channelCountMode: nativeConvolverNode.channelCountMode,
          channelInterpretation: nativeConvolverNode.channelInterpretation,
          disableNormalization: !nativeConvolverNode.normalize
        };
        nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);
      }

      renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);

      if ((0, _nativeAudioNodeFaker.isNativeAudioNodeFaker)(nativeConvolverNode)) {
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0], trace);
      } else {
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode, trace);
      }

      return nativeConvolverNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);

        if (renderedNativeConvolverNode !== undefined) {
          return Promise.resolve(renderedNativeConvolverNode);
        }

        return createConvolverNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createConvolverNodeRendererFactory = createConvolverNodeRendererFactory;
},{"../guards/native-audio-node-faker":"node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js","../helpers/is-owned-by-context":"node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"node_modules/standardized-audio-context/build/es2019/factories/create-native-offline-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCreateNativeOfflineAudioContext = void 0;

const createCreateNativeOfflineAudioContext = (createNotSupportedError, nativeOfflineAudioContextConstructor) => {
  return (numberOfChannels, length, sampleRate) => {
    if (nativeOfflineAudioContextConstructor === null) {
      throw new Error('Missing the native OfflineAudioContext constructor.');
    }

    try {
      return new nativeOfflineAudioContextConstructor(numberOfChannels, length, sampleRate);
    } catch (err) {
      // Bug #143, #144 & #146: Safari throws a SyntaxError when numberOfChannels, length or sampleRate are invalid.
      if (err.name === 'SyntaxError') {
        throw createNotSupportedError();
      }

      throw err;
    }
  };
};

exports.createCreateNativeOfflineAudioContext = createCreateNativeOfflineAudioContext;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/data-clone-error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDataCloneError = void 0;

const createDataCloneError = () => new DOMException('', 'DataCloneError');

exports.createDataCloneError = createDataCloneError;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/detach-array-buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detachArrayBuffer = void 0;

const detachArrayBuffer = arrayBuffer => {
  const {
    port1
  } = new MessageChannel();
  port1.postMessage(arrayBuffer, [arrayBuffer]);
};

exports.detachArrayBuffer = detachArrayBuffer;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/decode-audio-data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDecodeAudioData = void 0;

var _detachArrayBuffer = require("../helpers/detach-array-buffer");

var _wrapAudioBufferGetChannelDataMethod = require("../helpers/wrap-audio-buffer-get-channel-data-method");

const createDecodeAudioData = (audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {
  return (anyContext, audioData) => {
    const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext); // Bug #43: Only Chrome, Edge and Opera do throw a DataCloneError.

    if (detachedArrayBuffers.has(audioData)) {
      const err = createDataCloneError();
      return Promise.reject(err);
    } // The audioData parameter maybe of a type which can't be added to a WeakSet.


    try {
      detachedArrayBuffers.add(audioData);
    } catch {} // Ignore errors.
    // Bug #21: Safari does not support promises yet.


    if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {
      return nativeContext.decodeAudioData(audioData).then(audioBuffer => {
        // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.
        if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {
          wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);
        }

        audioBufferStore.add(audioBuffer);
        return audioBuffer;
      });
    } // Bug #21: Safari does not return a Promise yet.


    return new Promise((resolve, reject) => {
      const complete = () => {
        // Bug #133: Safari does neuter the ArrayBuffer.
        try {
          (0, _detachArrayBuffer.detachArrayBuffer)(audioData);
        } catch {// Ignore errors.
        }
      };

      const fail = err => {
        reject(err);
        complete();
      }; // Bug #26: Safari throws a synchronous error.


      try {
        // Bug #1: Safari requires a successCallback.
        nativeContext.decodeAudioData(audioData, audioBuffer => {
          // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
          // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.
          if (typeof audioBuffer.copyFromChannel !== 'function') {
            wrapAudioBufferCopyChannelMethods(audioBuffer);
            (0, _wrapAudioBufferGetChannelDataMethod.wrapAudioBufferGetChannelDataMethod)(audioBuffer);
          }

          audioBufferStore.add(audioBuffer);
          complete();
          resolve(audioBuffer);
        }, err => {
          // Bug #4: Safari returns null instead of an error.
          if (err === null) {
            fail(createEncodingError());
          } else {
            fail(err);
          }
        });
      } catch (err) {
        fail(err);
      }
    });
  };
};

exports.createDecodeAudioData = createDecodeAudioData;
},{"../helpers/detach-array-buffer":"node_modules/standardized-audio-context/build/es2019/helpers/detach-array-buffer.js","../helpers/wrap-audio-buffer-get-channel-data-method":"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js"}],"node_modules/standardized-audio-context/build/es2019/factories/decrement-cycle-counter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDecrementCycleCounter = void 0;

var _audioNodeOutputConnection = require("../guards/audio-node-output-connection");

const createDecrementCycleCounter = (connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext) => {
  return (audioNode, count) => {
    const cycleCounter = cycleCounters.get(audioNode);

    if (cycleCounter === undefined) {
      throw new Error('Missing the expected cycle count.');
    }

    const nativeContext = getNativeContext(audioNode.context);
    const isOffline = isNativeOfflineAudioContext(nativeContext);

    if (cycleCounter === count) {
      cycleCounters.delete(audioNode);

      if (!isOffline && isActiveAudioNode(audioNode)) {
        const nativeSourceAudioNode = getNativeAudioNode(audioNode);
        const {
          outputs
        } = getAudioNodeConnections(audioNode);

        for (const output of outputs) {
          if ((0, _audioNodeOutputConnection.isAudioNodeOutputConnection)(output)) {
            const nativeDestinationAudioNode = getNativeAudioNode(output[0]);
            connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);
          } else {
            const nativeDestinationAudioParam = getNativeAudioParam(output[0]);
            nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);
          }
        }
      }
    } else {
      cycleCounters.set(audioNode, cycleCounter - count);
    }
  };
};

exports.createDecrementCycleCounter = createDecrementCycleCounter;
},{"../guards/audio-node-output-connection":"node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js"}],"node_modules/standardized-audio-context/build/es2019/factories/delay-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDelayNodeConstructor = void 0;
const DEFAULT_OPTIONS = {
  channelCount: 2,
  channelCountMode: 'max',
  channelInterpretation: 'speakers',
  delayTime: 0,
  maxDelayTime: 1
};

const createDelayNodeConstructor = (audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {
  return class DelayNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const delayNodeRenderer = isOffline ? createDelayNodeRenderer(mergedOptions.maxDelayTime) : null;
      super(context, false, nativeDelayNode, delayNodeRenderer);
      this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime);
      setAudioNodeTailTime(this, mergedOptions.maxDelayTime);
    }

    get delayTime() {
      return this._delayTime;
    }

  };
};

exports.createDelayNodeConstructor = createDelayNodeConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/delay-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDelayNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
  return maxDelayTime => {
    const renderedNativeDelayNodes = new WeakMap();

    const createDelayNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeDelayNode = getNativeAudioNode(proxy); // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativeDelayNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeDelayNode, nativeOfflineAudioContext);

      if (!nativeDelayNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeDelayNode.channelCount,
          channelCountMode: nativeDelayNode.channelCountMode,
          channelInterpretation: nativeDelayNode.channelInterpretation,
          delayTime: nativeDelayNode.delayTime.value,
          maxDelayTime
        };
        nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);
      }

      renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);

      if (!nativeDelayNodeIsOwnedByContext) {
        await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);
      } else {
        await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);
      }

      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode, trace);
      return nativeDelayNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);

        if (renderedNativeDelayNode !== undefined) {
          return Promise.resolve(renderedNativeDelayNode);
        }

        return createDelayNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createDelayNodeRendererFactory = createDelayNodeRendererFactory;
},{"../helpers/is-owned-by-context":"node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"node_modules/standardized-audio-context/build/es2019/factories/delete-active-input-connection-to-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDeleteActiveInputConnectionToAudioNode = void 0;

const createDeleteActiveInputConnectionToAudioNode = pickElementFromSet => {
  return (activeInputs, source, output, input) => {
    return pickElementFromSet(activeInputs[input], activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output);
  };
};

exports.createDeleteActiveInputConnectionToAudioNode = createDeleteActiveInputConnectionToAudioNode;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/delete-unrendered-audio-worklet-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDeleteUnrenderedAudioWorkletNode = void 0;

const createDeleteUnrenderedAudioWorkletNode = getUnrenderedAudioWorkletNodes => {
  return (nativeContext, audioWorkletNode) => {
    getUnrenderedAudioWorkletNodes(nativeContext).delete(audioWorkletNode);
  };
};

exports.createDeleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode;
},{}],"node_modules/standardized-audio-context/build/es2019/guards/delay-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDelayNode = void 0;

const isDelayNode = audioNode => {
  return 'delayTime' in audioNode;
};

exports.isDelayNode = isDelayNode;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/detect-cycles.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDetectCycles = void 0;

var _audioNode = require("../guards/audio-node");

var _delayNode = require("../guards/delay-node");

const createDetectCycles = (audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey) => {
  return function detectCycles(chain, nextLink) {
    const audioNode = (0, _audioNode.isAudioNode)(nextLink) ? nextLink : getValueForKey(audioParamAudioNodeStore, nextLink);

    if ((0, _delayNode.isDelayNode)(audioNode)) {
      return [];
    }

    if (chain[0] === audioNode) {
      return [chain];
    }

    if (chain.includes(audioNode)) {
      return [];
    }

    const {
      outputs
    } = getAudioNodeConnections(audioNode);
    return Array.from(outputs).map(outputConnection => detectCycles([...chain, audioNode], outputConnection[0])).reduce((mergedCycles, nestedCycles) => mergedCycles.concat(nestedCycles), []);
  };
};

exports.createDetectCycles = createDetectCycles;
},{"../guards/audio-node":"node_modules/standardized-audio-context/build/es2019/guards/audio-node.js","../guards/delay-node":"node_modules/standardized-audio-context/build/es2019/guards/delay-node.js"}],"node_modules/standardized-audio-context/build/es2019/factories/disconnect-multiple-outputs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDisconnectMultipleOutputs = void 0;

var _nativeAudioNode = require("../guards/native-audio-node");

const getOutputAudioNodeAtIndex = (createIndexSizeError, outputAudioNodes, output) => {
  const outputAudioNode = outputAudioNodes[output];

  if (outputAudioNode === undefined) {
    throw createIndexSizeError();
  }

  return outputAudioNode;
};

const createDisconnectMultipleOutputs = createIndexSizeError => {
  return (outputAudioNodes, destinationOrOutput = undefined, output = undefined, input = 0) => {
    if (destinationOrOutput === undefined) {
      return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect());
    }

    if (typeof destinationOrOutput === 'number') {
      return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput).disconnect();
    }

    if ((0, _nativeAudioNode.isNativeAudioNode)(destinationOrOutput)) {
      if (output === undefined) {
        return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect(destinationOrOutput));
      }

      if (input === undefined) {
        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);
      }

      return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0, input);
    }

    if (output === undefined) {
      return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect(destinationOrOutput));
    }

    return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);
  };
};

exports.createDisconnectMultipleOutputs = createDisconnectMultipleOutputs;
},{"../guards/native-audio-node":"node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js"}],"node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDynamicsCompressorNodeConstructor = void 0;
const DEFAULT_OPTIONS = {
  attack: 0.003,
  channelCount: 2,
  channelCountMode: 'clamped-max',
  channelInterpretation: 'speakers',
  knee: 30,
  ratio: 12,
  release: 0.25,
  threshold: -24
};

const createDynamicsCompressorNodeConstructor = (audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {
  return class DynamicsCompressorNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const dynamicsCompressorNodeRenderer = isOffline ? createDynamicsCompressorNodeRenderer() : null;
      super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);
      this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack);
      this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee);
      this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;
      this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio);
      this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release);
      this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold);
      setAudioNodeTailTime(this, 0.006);
    }

    get attack() {
      return this._attack;
    } // Bug #108: Safari allows a channelCount of three and above which is why the getter and setter needs to be overwritten here.


    get channelCount() {
      return this._nativeDynamicsCompressorNode.channelCount;
    }

    set channelCount(value) {
      const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;
      this._nativeDynamicsCompressorNode.channelCount = value;

      if (value > 2) {
        this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;
        throw createNotSupportedError();
      }
    }
    /*
     * Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be
     * overwritten here.
     */


    get channelCountMode() {
      return this._nativeDynamicsCompressorNode.channelCountMode;
    }

    set channelCountMode(value) {
      const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;
      this._nativeDynamicsCompressorNode.channelCountMode = value;

      if (value === 'max') {
        this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;
        throw createNotSupportedError();
      }
    }

    get knee() {
      return this._knee;
    }

    get ratio() {
      return this._ratio;
    }

    get reduction() {
      // Bug #111: Safari returns an AudioParam instead of a number.
      if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {
        return this._nativeDynamicsCompressorNode.reduction.value;
      }

      return this._nativeDynamicsCompressorNode.reduction;
    }

    get release() {
      return this._release;
    }

    get threshold() {
      return this._threshold;
    }

  };
};

exports.createDynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDynamicsCompressorNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeDynamicsCompressorNodes = new WeakMap();

    const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);
      /*
       * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be
       * created again.
       */

      const nativeDynamicsCompressorNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeDynamicsCompressorNode, nativeOfflineAudioContext);

      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {
        const options = {
          attack: nativeDynamicsCompressorNode.attack.value,
          channelCount: nativeDynamicsCompressorNode.channelCount,
          channelCountMode: nativeDynamicsCompressorNode.channelCountMode,
          channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,
          knee: nativeDynamicsCompressorNode.knee.value,
          ratio: nativeDynamicsCompressorNode.ratio.value,
          release: nativeDynamicsCompressorNode.release.value,
          threshold: nativeDynamicsCompressorNode.threshold.value
        };
        nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);
      }

      renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);

      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {
        await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);
      } else {
        await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);
      }

      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode, trace);
      return nativeDynamicsCompressorNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);

        if (renderedNativeDynamicsCompressorNode !== undefined) {
          return Promise.resolve(renderedNativeDynamicsCompressorNode);
        }

        return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createDynamicsCompressorNodeRendererFactory = createDynamicsCompressorNodeRendererFactory;
},{"../helpers/is-owned-by-context":"node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"node_modules/standardized-audio-context/build/es2019/factories/encoding-error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEncodingError = void 0;

const createEncodingError = () => new DOMException('', 'EncodingError');

exports.createEncodingError = createEncodingError;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/evaluate-source.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEvaluateSource = void 0;

const createEvaluateSource = window => {
  return source => new Promise((resolve, reject) => {
    if (window === null) {
      // Bug #182 Chrome, Edge and Opera do throw an instance of a SyntaxError instead of a DOMException.
      reject(new SyntaxError());
      return;
    }

    const head = window.document.head;

    if (head === null) {
      // Bug #182 Chrome, Edge and Opera do throw an instance of a SyntaxError instead of a DOMException.
      reject(new SyntaxError());
    } else {
      const script = window.document.createElement('script'); // @todo Safari doesn't like URLs with a type of 'application/javascript; charset=utf-8'.

      const blob = new Blob([source], {
        type: 'application/javascript'
      });
      const url = URL.createObjectURL(blob);
      const originalOnErrorHandler = window.onerror;

      const removeErrorEventListenerAndRevokeUrl = () => {
        window.onerror = originalOnErrorHandler;
        URL.revokeObjectURL(url);
      };

      window.onerror = (message, src, lineno, colno, error) => {
        // @todo Edge thinks the source is the one of the html document.
        if (src === url || src === window.location.href && lineno === 1 && colno === 1) {
          removeErrorEventListenerAndRevokeUrl();
          reject(error);
          return false;
        }

        if (originalOnErrorHandler !== null) {
          return originalOnErrorHandler(message, src, lineno, colno, error);
        }
      };

      script.onerror = () => {
        removeErrorEventListenerAndRevokeUrl(); // Bug #182 Chrome, Edge and Opera do throw an instance of a SyntaxError instead of a DOMException.

        reject(new SyntaxError());
      };

      script.onload = () => {
        removeErrorEventListenerAndRevokeUrl();
        resolve();
      };

      script.src = url;
      script.type = 'module';
      head.appendChild(script);
    }
  });
};

exports.createEvaluateSource = createEvaluateSource;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/event-target-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEventTargetConstructor = void 0;

const createEventTargetConstructor = wrapEventListener => {
  return class EventTarget {
    constructor(_nativeEventTarget) {
      this._nativeEventTarget = _nativeEventTarget;
      this._listeners = new WeakMap();
    }

    addEventListener(type, listener, options) {
      if (listener !== null) {
        let wrappedEventListener = this._listeners.get(listener);

        if (wrappedEventListener === undefined) {
          wrappedEventListener = wrapEventListener(this, listener);

          if (typeof listener === 'function') {
            this._listeners.set(listener, wrappedEventListener);
          }
        }

        this._nativeEventTarget.addEventListener(type, wrappedEventListener, options);
      }
    }

    dispatchEvent(event) {
      return this._nativeEventTarget.dispatchEvent(event);
    }

    removeEventListener(type, listener, options) {
      const wrappedEventListener = listener === null ? undefined : this._listeners.get(listener);

      this._nativeEventTarget.removeEventListener(type, wrappedEventListener === undefined ? null : wrappedEventListener, options);
    }

  };
};

exports.createEventTargetConstructor = createEventTargetConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/expose-current-frame-and-current-time.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createExposeCurrentFrameAndCurrentTime = void 0;

const createExposeCurrentFrameAndCurrentTime = window => {
  return (currentTime, sampleRate, fn) => {
    Object.defineProperties(window, {
      currentFrame: {
        configurable: true,

        get() {
          return Math.round(currentTime * sampleRate);
        }

      },
      currentTime: {
        configurable: true,

        get() {
          return currentTime;
        }

      }
    });

    try {
      return fn();
    } finally {
      if (window !== null) {
        delete window.currentFrame;
        delete window.currentTime;
      }
    }
  };
};

exports.createExposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/fetch-source.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFetchSource = void 0;

const createFetchSource = createAbortError => {
  return async url => {
    try {
      const response = await fetch(url);

      if (response.ok) {
        return [await response.text(), response.url];
      }
    } catch {} // Ignore errors.
    // tslint:disable-line:no-empty


    throw createAbortError();
  };
};

exports.createFetchSource = createFetchSource;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/gain-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGainNodeConstructor = void 0;

var _constants = require("../constants");

const DEFAULT_OPTIONS = {
  channelCount: 2,
  channelCountMode: 'max',
  channelInterpretation: 'speakers',
  gain: 1
};

const createGainNodeConstructor = (audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext) => {
  return class GainNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const gainNodeRenderer = isOffline ? createGainNodeRenderer() : null;
      super(context, false, nativeGainNode, gainNodeRenderer); // Bug #74: Safari does not export the correct values for maxValue and minValue.

      this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT);
    }

    get gain() {
      return this._gain;
    }

  };
};

exports.createGainNodeConstructor = createGainNodeConstructor;
},{"../constants":"node_modules/standardized-audio-context/build/es2019/constants.js"}],"node_modules/standardized-audio-context/build/es2019/factories/gain-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGainNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeGainNodes = new WeakMap();

    const createGainNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeGainNode = getNativeAudioNode(proxy); // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativeGainNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeGainNode, nativeOfflineAudioContext);

      if (!nativeGainNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeGainNode.channelCount,
          channelCountMode: nativeGainNode.channelCountMode,
          channelInterpretation: nativeGainNode.channelInterpretation,
          gain: nativeGainNode.gain.value
        };
        nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);
      }

      renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);

      if (!nativeGainNodeIsOwnedByContext) {
        await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);
      } else {
        await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);
      }

      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode, trace);
      return nativeGainNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);

        if (renderedNativeGainNode !== undefined) {
          return Promise.resolve(renderedNativeGainNode);
        }

        return createGainNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createGainNodeRendererFactory = createGainNodeRendererFactory;
},{"../helpers/is-owned-by-context":"node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"node_modules/standardized-audio-context/build/es2019/factories/get-active-audio-worklet-node-inputs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGetActiveAudioWorkletNodeInputs = void 0;

const createGetActiveAudioWorkletNodeInputs = (activeAudioWorkletNodeInputsStore, getValueForKey) => {
  return nativeAudioWorkletNode => getValueForKey(activeAudioWorkletNodeInputsStore, nativeAudioWorkletNode);
};

exports.createGetActiveAudioWorkletNodeInputs = createGetActiveAudioWorkletNodeInputs;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-renderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGetAudioNodeRenderer = void 0;

const createGetAudioNodeRenderer = getAudioNodeConnections => {
  return audioNode => {
    const audioNodeConnections = getAudioNodeConnections(audioNode);

    if (audioNodeConnections.renderer === null) {
      throw new Error('Missing the renderer of the given AudioNode in the audio graph.');
    }

    return audioNodeConnections.renderer;
  };
};

exports.createGetAudioNodeRenderer = createGetAudioNodeRenderer;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-tail-time.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGetAudioNodeTailTime = void 0;

const createGetAudioNodeTailTime = audioNodeTailTimeStore => {
  return audioNode => {
    var _a;

    return (_a = audioNodeTailTimeStore.get(audioNode)) !== null && _a !== void 0 ? _a : 0;
  };
};

exports.createGetAudioNodeTailTime = createGetAudioNodeTailTime;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/get-audio-param-renderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGetAudioParamRenderer = void 0;

const createGetAudioParamRenderer = getAudioParamConnections => {
  return audioParam => {
    const audioParamConnections = getAudioParamConnections(audioParam);

    if (audioParamConnections.renderer === null) {
      throw new Error('Missing the renderer of the given AudioParam in the audio graph.');
    }

    return audioParamConnections.renderer;
  };
};

exports.createGetAudioParamRenderer = createGetAudioParamRenderer;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/get-backup-offline-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGetBackupOfflineAudioContext = void 0;

const createGetBackupOfflineAudioContext = backupOfflineAudioContextStore => {
  return nativeContext => {
    return backupOfflineAudioContextStore.get(nativeContext);
  };
};

exports.createGetBackupOfflineAudioContext = createGetBackupOfflineAudioContext;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createInvalidStateError = void 0;

const createInvalidStateError = () => new DOMException('', 'InvalidStateError');

exports.createInvalidStateError = createInvalidStateError;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/get-native-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGetNativeContext = void 0;

var _invalidStateError = require("./invalid-state-error");

const createGetNativeContext = contextStore => {
  return context => {
    const nativeContext = contextStore.get(context);

    if (nativeContext === undefined) {
      throw (0, _invalidStateError.createInvalidStateError)();
    }

    return nativeContext;
  };
};

exports.createGetNativeContext = createGetNativeContext;
},{"./invalid-state-error":"node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js"}],"node_modules/standardized-audio-context/build/es2019/factories/get-or-create-backup-offline-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGetOrCreateBackupOfflineAudioContext = void 0;

const createGetOrCreateBackupOfflineAudioContext = (backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor) => {
  return nativeContext => {
    let backupOfflineAudioContext = backupOfflineAudioContextStore.get(nativeContext);

    if (backupOfflineAudioContext !== undefined) {
      return backupOfflineAudioContext;
    }

    if (nativeOfflineAudioContextConstructor === null) {
      throw new Error('Missing the native OfflineAudioContext constructor.');
    }

    backupOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 8000);
    backupOfflineAudioContextStore.set(nativeContext, backupOfflineAudioContext);
    return backupOfflineAudioContext;
  };
};

exports.createGetOrCreateBackupOfflineAudioContext = createGetOrCreateBackupOfflineAudioContext;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/get-unrendered-audio-worklet-nodes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGetUnrenderedAudioWorkletNodes = void 0;

const createGetUnrenderedAudioWorkletNodes = unrenderedAudioWorkletNodeStore => {
  return nativeContext => {
    const unrenderedAudioWorkletNodes = unrenderedAudioWorkletNodeStore.get(nativeContext);

    if (unrenderedAudioWorkletNodes === undefined) {
      throw new Error('The context has no set of AudioWorkletNodes.');
    }

    return unrenderedAudioWorkletNodes;
  };
};

exports.createGetUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/invalid-access-error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createInvalidAccessError = void 0;

const createInvalidAccessError = () => new DOMException('', 'InvalidAccessError');

exports.createInvalidAccessError = createInvalidAccessError;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/wrap-iir-filter-node-get-frequency-response-method.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapIIRFilterNodeGetFrequencyResponseMethod = void 0;

var _invalidAccessError = require("../factories/invalid-access-error");

const wrapIIRFilterNodeGetFrequencyResponseMethod = nativeIIRFilterNode => {
  nativeIIRFilterNode.getFrequencyResponse = (getFrequencyResponse => {
    return (frequencyHz, magResponse, phaseResponse) => {
      if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {
        throw (0, _invalidAccessError.createInvalidAccessError)();
      }

      return getFrequencyResponse.call(nativeIIRFilterNode, frequencyHz, magResponse, phaseResponse);
    };
  })(nativeIIRFilterNode.getFrequencyResponse);
};

exports.wrapIIRFilterNodeGetFrequencyResponseMethod = wrapIIRFilterNodeGetFrequencyResponseMethod;
},{"../factories/invalid-access-error":"node_modules/standardized-audio-context/build/es2019/factories/invalid-access-error.js"}],"node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIIRFilterNodeConstructor = void 0;

var _wrapIirFilterNodeGetFrequencyResponseMethod = require("../helpers/wrap-iir-filter-node-get-frequency-response-method");

const DEFAULT_OPTIONS = {
  channelCount: 2,
  channelCountMode: 'max',
  channelInterpretation: 'speakers'
};

const createIIRFilterNodeConstructor = (audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {
  return class IIRFilterNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);
      const iirFilterNodeRenderer = isOffline ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) : null;
      super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer); // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.
      // @todo Write a test which allows other browsers to remain unpatched.

      (0, _wrapIirFilterNodeGetFrequencyResponseMethod.wrapIIRFilterNodeGetFrequencyResponseMethod)(nativeIIRFilterNode);
      this._nativeIIRFilterNode = nativeIIRFilterNode; // @todo Determine a meaningful tail-time instead of just using one second.

      setAudioNodeTailTime(this, 1);
    }

    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {
      return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);
    }

  };
};

exports.createIIRFilterNodeConstructor = createIIRFilterNodeConstructor;
},{"../helpers/wrap-iir-filter-node-get-frequency-response-method":"node_modules/standardized-audio-context/build/es2019/helpers/wrap-iir-filter-node-get-frequency-response-method.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/filter-buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterBuffer = void 0;

// This implementation as shamelessly inspired by source code of
// tslint:disable-next-line:max-line-length
// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.
const filterBuffer = (feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output) => {
  const inputLength = input.length;
  let i = bufferIndex;

  for (let j = 0; j < inputLength; j += 1) {
    let y = feedforward[0] * input[j];

    for (let k = 1; k < minLength; k += 1) {
      const x = i - k & bufferLength - 1; // tslint:disable-line:no-bitwise

      y += feedforward[k] * xBuffer[x];
      y -= feedback[k] * yBuffer[x];
    }

    for (let k = minLength; k < feedforwardLength; k += 1) {
      y += feedforward[k] * xBuffer[i - k & bufferLength - 1]; // tslint:disable-line:no-bitwise
    }

    for (let k = minLength; k < feedbackLength; k += 1) {
      y -= feedback[k] * yBuffer[i - k & bufferLength - 1]; // tslint:disable-line:no-bitwise
    }

    xBuffer[i] = input[j];
    yBuffer[i] = y;
    i = i + 1 & bufferLength - 1; // tslint:disable-line:no-bitwise

    output[j] = y;
  }

  return i;
};

exports.filterBuffer = filterBuffer;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIIRFilterNodeRendererFactory = void 0;

var _filterBuffer = require("../helpers/filter-buffer");

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {
  const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);
  const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);
  const feedbackLength = convertedFeedback.length;
  const feedforwardLength = convertedFeedforward.length;
  const minLength = Math.min(feedbackLength, feedforwardLength);

  if (convertedFeedback[0] !== 1) {
    for (let i = 0; i < feedbackLength; i += 1) {
      convertedFeedforward[i] /= convertedFeedback[0];
    }

    for (let i = 1; i < feedforwardLength; i += 1) {
      convertedFeedback[i] /= convertedFeedback[0];
    }
  }

  const bufferLength = 32;
  const xBuffer = new Float32Array(bufferLength);
  const yBuffer = new Float32Array(bufferLength);
  const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);
  const numberOfChannels = renderedBuffer.numberOfChannels;

  for (let i = 0; i < numberOfChannels; i += 1) {
    const input = renderedBuffer.getChannelData(i);
    const output = filteredBuffer.getChannelData(i);
    xBuffer.fill(0);
    yBuffer.fill(0);
    (0, _filterBuffer.filterBuffer)(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);
  }

  return filteredBuffer;
};

const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {
  return (feedback, feedforward) => {
    const renderedNativeAudioNodes = new WeakMap();
    let filteredBufferPromise = null;

    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeAudioBufferSourceNode = null;
      let nativeIIRFilterNode = getNativeAudioNode(proxy); // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativeIIRFilterNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeIIRFilterNode, nativeOfflineAudioContext); // Bug #9: Safari does not support IIRFilterNodes.

      if (nativeOfflineAudioContext.createIIRFilter === undefined) {
        nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {
          buffer: null,
          channelCount: 2,
          channelCountMode: 'max',
          channelInterpretation: 'speakers',
          loop: false,
          loopEnd: 0,
          loopStart: 0,
          playbackRate: 1
        });
      } else if (!nativeIIRFilterNodeIsOwnedByContext) {
        // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.
        nativeIIRFilterNode = nativeOfflineAudioContext.createIIRFilter(feedforward, feedback);
      }

      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode);

      if (nativeAudioBufferSourceNode !== null) {
        if (filteredBufferPromise === null) {
          if (nativeOfflineAudioContextConstructor === null) {
            throw new Error('Missing the native OfflineAudioContext constructor.');
          }

          const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor( // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.
          proxy.context.destination.channelCount, // Bug #17: Safari does not yet expose the length.
          proxy.context.length, nativeOfflineAudioContext.sampleRate);

          filteredBufferPromise = (async () => {
            await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination, trace);
            const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);
            return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);
          })();
        }

        const filteredBuffer = await filteredBufferPromise;
        nativeAudioBufferSourceNode.buffer = filteredBuffer;
        nativeAudioBufferSourceNode.start(0);
        return nativeAudioBufferSourceNode;
      }

      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode, trace);
      return nativeIIRFilterNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);

        if (renderedNativeAudioNode !== undefined) {
          return Promise.resolve(renderedNativeAudioNode);
        }

        return createAudioNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createIIRFilterNodeRendererFactory = createIIRFilterNodeRendererFactory;
},{"../helpers/filter-buffer":"node_modules/standardized-audio-context/build/es2019/helpers/filter-buffer.js","../helpers/is-owned-by-context":"node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"node_modules/standardized-audio-context/build/es2019/factories/increment-cycle-counter-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIncrementCycleCounterFactory = void 0;

var _audioNodeOutputConnection = require("../guards/audio-node-output-connection");

const createIncrementCycleCounterFactory = (cycleCounters, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode) => {
  return isOffline => {
    return (audioNode, count) => {
      const cycleCounter = cycleCounters.get(audioNode);

      if (cycleCounter === undefined) {
        if (!isOffline && isActiveAudioNode(audioNode)) {
          const nativeSourceAudioNode = getNativeAudioNode(audioNode);
          const {
            outputs
          } = getAudioNodeConnections(audioNode);

          for (const output of outputs) {
            if ((0, _audioNodeOutputConnection.isAudioNodeOutputConnection)(output)) {
              const nativeDestinationAudioNode = getNativeAudioNode(output[0]);
              disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);
            } else {
              const nativeDestinationAudioParam = getNativeAudioParam(output[0]);
              nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);
            }
          }
        }

        cycleCounters.set(audioNode, count);
      } else {
        cycleCounters.set(audioNode, cycleCounter + count);
      }
    };
  };
};

exports.createIncrementCycleCounterFactory = createIncrementCycleCounterFactory;
},{"../guards/audio-node-output-connection":"node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js"}],"node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsAnyAudioContext = void 0;

const createIsAnyAudioContext = (contextStore, isNativeAudioContext) => {
  return anything => {
    const nativeContext = contextStore.get(anything);
    return isNativeAudioContext(nativeContext) || isNativeAudioContext(anything);
  };
};

exports.createIsAnyAudioContext = createIsAnyAudioContext;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsAnyAudioNode = void 0;

const createIsAnyAudioNode = (audioNodeStore, isNativeAudioNode) => {
  return anything => audioNodeStore.has(anything) || isNativeAudioNode(anything);
};

exports.createIsAnyAudioNode = createIsAnyAudioNode;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-param.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsAnyAudioParam = void 0;

const createIsAnyAudioParam = (audioParamStore, isNativeAudioParam) => {
  return anything => audioParamStore.has(anything) || isNativeAudioParam(anything);
};

exports.createIsAnyAudioParam = createIsAnyAudioParam;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/is-any-offline-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsAnyOfflineAudioContext = void 0;

const createIsAnyOfflineAudioContext = (contextStore, isNativeOfflineAudioContext) => {
  return anything => {
    const nativeContext = contextStore.get(anything);
    return isNativeOfflineAudioContext(nativeContext) || isNativeOfflineAudioContext(anything);
  };
};

exports.createIsAnyOfflineAudioContext = createIsAnyOfflineAudioContext;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsNativeAudioContext = void 0;

const createIsNativeAudioContext = nativeAudioContextConstructor => {
  return anything => {
    return nativeAudioContextConstructor !== null && anything instanceof nativeAudioContextConstructor;
  };
};

exports.createIsNativeAudioContext = createIsNativeAudioContext;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsNativeAudioNode = void 0;

const createIsNativeAudioNode = window => {
  return anything => {
    return window !== null && typeof window.AudioNode === 'function' && anything instanceof window.AudioNode;
  };
};

exports.createIsNativeAudioNode = createIsNativeAudioNode;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-param.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsNativeAudioParam = void 0;

const createIsNativeAudioParam = window => {
  return anything => {
    return window !== null && typeof window.AudioParam === 'function' && anything instanceof window.AudioParam;
  };
};

exports.createIsNativeAudioParam = createIsNativeAudioParam;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/is-native-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsNativeContext = void 0;

const createIsNativeContext = (isNativeAudioContext, isNativeOfflineAudioContext) => {
  return anything => {
    return isNativeAudioContext(anything) || isNativeOfflineAudioContext(anything);
  };
};

exports.createIsNativeContext = createIsNativeContext;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/is-native-offline-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsNativeOfflineAudioContext = void 0;

const createIsNativeOfflineAudioContext = nativeOfflineAudioContextConstructor => {
  return anything => {
    return nativeOfflineAudioContextConstructor !== null && anything instanceof nativeOfflineAudioContextConstructor;
  };
};

exports.createIsNativeOfflineAudioContext = createIsNativeOfflineAudioContext;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/is-secure-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsSecureContext = void 0;

const createIsSecureContext = window => window !== null && window.isSecureContext;

exports.createIsSecureContext = createIsSecureContext;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/is-supported-promise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsSupportedPromise = void 0;

const createIsSupportedPromise = async (cacheTestResult, testAudioBufferCopyChannelMethodsSubarraySupport, testAudioContextCloseMethodSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextOptionsSupport, testAudioNodeConnectMethodSupport, testAudioWorkletProcessorNoOutputsSupport, testChannelMergerNodeChannelCountSupport, testConstantSourceNodeAccurateSchedulingSupport, testConvolverNodeBufferReassignabilitySupport, testConvolverNodeChannelCountSupport, testDomExceptionContrucorSupport, testIsSecureContextSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testStereoPannerNodeDefaultValueSupport, testTransferablesSupport) => {
  if (cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, testAudioBufferCopyChannelMethodsSubarraySupport) && cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport) && cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport) && cacheTestResult(testAudioNodeConnectMethodSupport, testAudioNodeConnectMethodSupport) && cacheTestResult(testChannelMergerNodeChannelCountSupport, testChannelMergerNodeChannelCountSupport) && cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport) && cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport) && cacheTestResult(testConvolverNodeChannelCountSupport, testConvolverNodeChannelCountSupport) && cacheTestResult(testDomExceptionContrucorSupport, testDomExceptionContrucorSupport) && cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport) && cacheTestResult(testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport)) {
    const results = await Promise.all([cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport), cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport), cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport), cacheTestResult(testTransferablesSupport, testTransferablesSupport)]);
    return results.every(result => result);
  }

  return false;
};

exports.createIsSupportedPromise = createIsSupportedPromise;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/media-element-audio-source-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMediaElementAudioSourceNodeConstructor = void 0;

const createMediaElementAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) => {
  return class MediaElementAudioSourceNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const nativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode(nativeContext, options); // Bug #171: Safari allows to create a MediaElementAudioSourceNode with an OfflineAudioContext.

      if (isNativeOfflineAudioContext(nativeContext)) {
        throw TypeError();
      }

      super(context, true, nativeMediaElementAudioSourceNode, null);
      this._nativeMediaElementAudioSourceNode = nativeMediaElementAudioSourceNode;
    }

    get mediaElement() {
      return this._nativeMediaElementAudioSourceNode.mediaElement;
    }

  };
};

exports.createMediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-destination-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMediaStreamAudioDestinationNodeConstructor = void 0;
const DEFAULT_OPTIONS = {
  channelCount: 2,
  channelCountMode: 'explicit',
  channelInterpretation: 'speakers'
};

const createMediaStreamAudioDestinationNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext) => {
  return class MediaStreamAudioDestinationNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context); // Bug #173: Safari allows to create a MediaStreamAudioDestinationNode with an OfflineAudioContext.

      if (isNativeOfflineAudioContext(nativeContext)) {
        throw new TypeError();
      }

      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNode(nativeContext, mergedOptions);
      super(context, false, nativeMediaStreamAudioDestinationNode, null);
      this._nativeMediaStreamAudioDestinationNode = nativeMediaStreamAudioDestinationNode;
    }

    get stream() {
      return this._nativeMediaStreamAudioDestinationNode.stream;
    }

  };
};

exports.createMediaStreamAudioDestinationNodeConstructor = createMediaStreamAudioDestinationNodeConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-source-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMediaStreamAudioSourceNodeConstructor = void 0;

const createMediaStreamAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) => {
  return class MediaStreamAudioSourceNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const nativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode(nativeContext, options); // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.

      if (isNativeOfflineAudioContext(nativeContext)) {
        throw new TypeError();
      }

      super(context, true, nativeMediaStreamAudioSourceNode, null);
      this._nativeMediaStreamAudioSourceNode = nativeMediaStreamAudioSourceNode;
    }

    get mediaStream() {
      return this._nativeMediaStreamAudioSourceNode.mediaStream;
    }

  };
};

exports.createMediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/media-stream-track-audio-source-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMediaStreamTrackAudioSourceNodeConstructor = void 0;

const createMediaStreamTrackAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext) => {
  return class MediaStreamTrackAudioSourceNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const nativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNode(nativeContext, options);
      super(context, true, nativeMediaStreamTrackAudioSourceNode, null);
    }

  };
};

exports.createMediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/minimal-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMinimalAudioContextConstructor = void 0;

var _deactivateAudioGraph = require("../helpers/deactivate-audio-graph");

var _isValidLatencyHint = require("../helpers/is-valid-latency-hint");

const createMinimalAudioContextConstructor = (createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor) => {
  return class MinimalAudioContext extends minimalBaseAudioContextConstructor {
    constructor(options = {}) {
      if (nativeAudioContextConstructor === null) {
        throw new Error('Missing the native AudioContext constructor.');
      }

      const nativeAudioContext = new nativeAudioContextConstructor(options); // Bug #131 Safari returns null when there are four other AudioContexts running already.

      if (nativeAudioContext === null) {
        throw createUnknownError();
      } // Bug #51 Only Chrome Edge, and Opera throw an error if the given latencyHint is invalid.


      if (!(0, _isValidLatencyHint.isValidLatencyHint)(options.latencyHint)) {
        throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);
      } // Bug #150 Safari does not support setting the sampleRate.


      if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {
        throw createNotSupportedError();
      }

      super(nativeAudioContext, 2);
      const {
        latencyHint
      } = options;
      const {
        sampleRate
      } = nativeAudioContext; // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.

      this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :
      /*
       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a
       * ScriptProcessorNode.
       */
      Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;
      this._nativeAudioContext = nativeAudioContext; // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.

      if (nativeAudioContextConstructor.name === 'webkitAudioContext') {
        this._nativeGainNode = nativeAudioContext.createGain();
        this._nativeOscillatorNode = nativeAudioContext.createOscillator();
        this._nativeGainNode.gain.value = 1e-37;

        this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);

        this._nativeOscillatorNode.start();
      } else {
        this._nativeGainNode = null;
        this._nativeOscillatorNode = null;
      }

      this._state = null;
      /*
       * Bug #34: Chrome, Edge and Opera pretend to be running right away, but fire an onstatechange event when the state actually
       * changes to 'running'.
       */

      if (nativeAudioContext.state === 'running') {
        this._state = 'suspended';

        const revokeState = () => {
          if (this._state === 'suspended') {
            this._state = null;
          }

          nativeAudioContext.removeEventListener('statechange', revokeState);
        };

        nativeAudioContext.addEventListener('statechange', revokeState);
      }
    }

    get baseLatency() {
      return this._baseLatency;
    }

    get state() {
      return this._state !== null ? this._state : this._nativeAudioContext.state;
    }

    close() {
      // Bug #35: Firefox does not throw an error if the AudioContext was closed before.
      if (this.state === 'closed') {
        return this._nativeAudioContext.close().then(() => {
          throw createInvalidStateError();
        });
      } // Bug #34: If the state was set to suspended before it should be revoked now.


      if (this._state === 'suspended') {
        this._state = null;
      }

      return this._nativeAudioContext.close().then(() => {
        if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {
          this._nativeOscillatorNode.stop();

          this._nativeGainNode.disconnect();

          this._nativeOscillatorNode.disconnect();
        }

        (0, _deactivateAudioGraph.deactivateAudioGraph)(this);
      });
    }

    resume() {
      if (this._state === 'suspended') {
        return new Promise((resolve, reject) => {
          const resolvePromise = () => {
            this._nativeAudioContext.removeEventListener('statechange', resolvePromise);

            if (this._nativeAudioContext.state === 'running') {
              resolve();
            } else {
              this.resume().then(resolve, reject);
            }
          };

          this._nativeAudioContext.addEventListener('statechange', resolvePromise);
        });
      }

      return this._nativeAudioContext.resume().catch(err => {
        // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.
        // Bug #56: Safari invokes the catch handler but without an error.
        if (err === undefined || err.code === 15) {
          throw createInvalidStateError();
        }

        throw err;
      });
    }

    suspend() {
      return this._nativeAudioContext.suspend().catch(err => {
        // Bug #56: Safari invokes the catch handler but without an error.
        if (err === undefined) {
          throw createInvalidStateError();
        }

        throw err;
      });
    }

  };
};

exports.createMinimalAudioContextConstructor = createMinimalAudioContextConstructor;
},{"../helpers/deactivate-audio-graph":"node_modules/standardized-audio-context/build/es2019/helpers/deactivate-audio-graph.js","../helpers/is-valid-latency-hint":"node_modules/standardized-audio-context/build/es2019/helpers/is-valid-latency-hint.js"}],"node_modules/standardized-audio-context/build/es2019/factories/minimal-base-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMinimalBaseAudioContextConstructor = void 0;

var _globals = require("../globals");

const createMinimalBaseAudioContextConstructor = (audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener) => {
  return class MinimalBaseAudioContext extends eventTargetConstructor {
    constructor(_nativeContext, numberOfChannels) {
      super(_nativeContext);
      this._nativeContext = _nativeContext;

      _globals.CONTEXT_STORE.set(this, _nativeContext);

      if (isNativeOfflineAudioContext(_nativeContext)) {
        unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());
      }

      this._destination = new audioDestinationNodeConstructor(this, numberOfChannels);
      this._listener = createAudioListener(this, _nativeContext);
      this._onstatechange = null;
    }

    get currentTime() {
      return this._nativeContext.currentTime;
    }

    get destination() {
      return this._destination;
    }

    get listener() {
      return this._listener;
    }

    get onstatechange() {
      return this._onstatechange;
    }

    set onstatechange(value) {
      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
      this._nativeContext.onstatechange = wrappedListener;
      const nativeOnStateChange = this._nativeContext.onstatechange;
      this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value : nativeOnStateChange;
    }

    get sampleRate() {
      return this._nativeContext.sampleRate;
    }

    get state() {
      return this._nativeContext.state;
    }

  };
};

exports.createMinimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor;
},{"../globals":"node_modules/standardized-audio-context/build/es2019/globals.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testPromiseSupport = void 0;

const testPromiseSupport = nativeContext => {
  // This 12 numbers represent the 48 bytes of an empty WAVE file with a single sample.
  const uint32Array = new Uint32Array([1179011410, 40, 1163280727, 544501094, 16, 131073, 44100, 176400, 1048580, 1635017060, 4, 0]);

  try {
    // Bug #1: Safari requires a successCallback.
    const promise = nativeContext.decodeAudioData(uint32Array.buffer, () => {// Ignore the success callback.
    });

    if (promise === undefined) {
      return false;
    }

    promise.catch(() => {// Ignore rejected errors.
    });
    return true;
  } catch {// Ignore errors.
  }

  return false;
};

exports.testPromiseSupport = testPromiseSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/minimal-offline-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMinimalOfflineAudioContextConstructor = void 0;

var _deactivateAudioGraph = require("../helpers/deactivate-audio-graph");

var _testPromiseSupport = require("../helpers/test-promise-support");

const DEFAULT_OPTIONS = {
  numberOfChannels: 1
};

const createMinimalOfflineAudioContextConstructor = (cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering) => {
  return class MinimalOfflineAudioContext extends minimalBaseAudioContextConstructor {
    constructor(options) {
      const {
        length,
        numberOfChannels,
        sampleRate
      } = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate); // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.

      if (!cacheTestResult(_testPromiseSupport.testPromiseSupport, () => (0, _testPromiseSupport.testPromiseSupport)(nativeOfflineAudioContext))) {
        nativeOfflineAudioContext.addEventListener('statechange', (() => {
          let i = 0;

          const delayStateChangeEvent = event => {
            if (this._state === 'running') {
              if (i > 0) {
                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);
                event.stopImmediatePropagation();

                this._waitForThePromiseToSettle(event);
              } else {
                i += 1;
              }
            }
          };

          return delayStateChangeEvent;
        })());
      }

      super(nativeOfflineAudioContext, numberOfChannels);
      this._length = length;
      this._nativeOfflineAudioContext = nativeOfflineAudioContext;
      this._state = null;
    }

    get length() {
      // Bug #17: Safari does not yet expose the length.
      if (this._nativeOfflineAudioContext.length === undefined) {
        return this._length;
      }

      return this._nativeOfflineAudioContext.length;
    }

    get state() {
      return this._state === null ? this._nativeOfflineAudioContext.state : this._state;
    }

    startRendering() {
      /*
       * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore
       * the state of the nativeOfflineAudioContext might no transition to running immediately.
       */
      if (this._state === 'running') {
        return Promise.reject(createInvalidStateError());
      }

      this._state = 'running';
      return startRendering(this.destination, this._nativeOfflineAudioContext).finally(() => {
        this._state = null;
        (0, _deactivateAudioGraph.deactivateAudioGraph)(this);
      });
    }

    _waitForThePromiseToSettle(event) {
      if (this._state === null) {
        this._nativeOfflineAudioContext.dispatchEvent(event);
      } else {
        setTimeout(() => this._waitForThePromiseToSettle(event));
      }
    }

  };
};

exports.createMinimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor;
},{"../helpers/deactivate-audio-graph":"node_modules/standardized-audio-context/build/es2019/helpers/deactivate-audio-graph.js","../helpers/test-promise-support":"node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js"}],"node_modules/standardized-audio-context/build/es2019/factories/monitor-connections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMonitorConnections = void 0;

const createMonitorConnections = (insertElementInSet, isNativeAudioNode) => {
  return (nativeAudioNode, whenConnected, whenDisconnected) => {
    const connections = new Set();

    nativeAudioNode.connect = (connect => {
      // tslint:disable-next-line:invalid-void
      return (destination, output = 0, input = 0) => {
        const wasDisconnected = connections.size === 0;

        if (isNativeAudioNode(destination)) {
          // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.
          connect.call(nativeAudioNode, destination, output, input);
          insertElementInSet(connections, [destination, output, input], connection => connection[0] === destination && connection[1] === output && connection[2] === input, true);

          if (wasDisconnected) {
            whenConnected();
          }

          return destination;
        }

        connect.call(nativeAudioNode, destination, output);
        insertElementInSet(connections, [destination, output], connection => connection[0] === destination && connection[1] === output, true);

        if (wasDisconnected) {
          whenConnected();
        }

        return;
      };
    })(nativeAudioNode.connect);

    nativeAudioNode.disconnect = (disconnect => {
      return (destinationOrOutput, output, input) => {
        const wasConnected = connections.size > 0;

        if (destinationOrOutput === undefined) {
          disconnect.apply(nativeAudioNode);
          connections.clear();
        } else if (typeof destinationOrOutput === 'number') {
          // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.
          disconnect.call(nativeAudioNode, destinationOrOutput);

          for (const connection of connections) {
            if (connection[1] === destinationOrOutput) {
              connections.delete(connection);
            }
          }
        } else {
          if (isNativeAudioNode(destinationOrOutput)) {
            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.
            disconnect.call(nativeAudioNode, destinationOrOutput, output, input);
          } else {
            // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.
            disconnect.call(nativeAudioNode, destinationOrOutput, output);
          }

          for (const connection of connections) {
            if (connection[0] === destinationOrOutput && (output === undefined || connection[1] === output) && (input === undefined || connection[2] === input)) {
              connections.delete(connection);
            }
          }
        }

        const isDisconnected = connections.size === 0;

        if (wasConnected && isDisconnected) {
          whenDisconnected();
        }
      };
    })(nativeAudioNode.disconnect);

    return nativeAudioNode;
  };
};

exports.createMonitorConnections = createMonitorConnections;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assignNativeAudioNodeOption = void 0;

const assignNativeAudioNodeOption = (nativeAudioNode, options, option) => {
  const value = options[option];

  if (value !== undefined && value !== nativeAudioNode[option]) {
    nativeAudioNode[option] = value;
  }
};

exports.assignNativeAudioNodeOption = assignNativeAudioNodeOption;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assignNativeAudioNodeOptions = void 0;

var _assignNativeAudioNodeOption = require("./assign-native-audio-node-option");

const assignNativeAudioNodeOptions = (nativeAudioNode, options) => {
  (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAudioNode, options, 'channelCount');
  (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAudioNode, options, 'channelCountMode');
  (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAudioNode, options, 'channelInterpretation');
};

exports.assignNativeAudioNodeOptions = assignNativeAudioNodeOptions;
},{"./assign-native-audio-node-option":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/test-analyser-node-get-float-time-domain-data-method-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testAnalyserNodeGetFloatTimeDomainDataMethodSupport = void 0;

const testAnalyserNodeGetFloatTimeDomainDataMethodSupport = nativeAnalyserNode => {
  return typeof nativeAnalyserNode.getFloatTimeDomainData === 'function';
};

exports.testAnalyserNodeGetFloatTimeDomainDataMethodSupport = testAnalyserNodeGetFloatTimeDomainDataMethodSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/wrap-analyser-node-get-float-time-domain-data-method.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAnalyserNodeGetFloatTimeDomainDataMethod = void 0;

const wrapAnalyserNodeGetFloatTimeDomainDataMethod = nativeAnalyserNode => {
  nativeAnalyserNode.getFloatTimeDomainData = array => {
    const byteTimeDomainData = new Uint8Array(array.length);
    nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);
    const length = Math.max(byteTimeDomainData.length, nativeAnalyserNode.fftSize);

    for (let i = 0; i < length; i += 1) {
      array[i] = (byteTimeDomainData[i] - 128) * 0.0078125;
    }

    return array;
  };
};

exports.wrapAnalyserNodeGetFloatTimeDomainDataMethod = wrapAnalyserNodeGetFloatTimeDomainDataMethod;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/native-analyser-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeAnalyserNodeFactory = void 0;

var _assignNativeAudioNodeOption = require("../helpers/assign-native-audio-node-option");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

var _testAnalyserNodeGetFloatTimeDomainDataMethodSupport = require("../helpers/test-analyser-node-get-float-time-domain-data-method-support");

var _wrapAnalyserNodeGetFloatTimeDomainDataMethod = require("../helpers/wrap-analyser-node-get-float-time-domain-data-method");

const createNativeAnalyserNodeFactory = (cacheTestResult, createIndexSizeError) => {
  return (nativeContext, options) => {
    const nativeAnalyserNode = nativeContext.createAnalyser(); // Bug #37: Firefox does not create an AnalyserNode with the default properties.

    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeAnalyserNode, options); // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.

    if (!(options.maxDecibels > options.minDecibels)) {
      throw createIndexSizeError();
    }

    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAnalyserNode, options, 'fftSize');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAnalyserNode, options, 'maxDecibels');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAnalyserNode, options, 'minDecibels');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAnalyserNode, options, 'smoothingTimeConstant'); // Bug #36: Safari does not support getFloatTimeDomainData() yet.

    if (!cacheTestResult(_testAnalyserNodeGetFloatTimeDomainDataMethodSupport.testAnalyserNodeGetFloatTimeDomainDataMethodSupport, () => (0, _testAnalyserNodeGetFloatTimeDomainDataMethodSupport.testAnalyserNodeGetFloatTimeDomainDataMethodSupport)(nativeAnalyserNode))) {
      (0, _wrapAnalyserNodeGetFloatTimeDomainDataMethod.wrapAnalyserNodeGetFloatTimeDomainDataMethod)(nativeAnalyserNode);
    }

    return nativeAnalyserNode;
  };
};

exports.createNativeAnalyserNodeFactory = createNativeAnalyserNodeFactory;
},{"../helpers/assign-native-audio-node-option":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js","../helpers/assign-native-audio-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js","../helpers/test-analyser-node-get-float-time-domain-data-method-support":"node_modules/standardized-audio-context/build/es2019/helpers/test-analyser-node-get-float-time-domain-data-method-support.js","../helpers/wrap-analyser-node-get-float-time-domain-data-method":"node_modules/standardized-audio-context/build/es2019/helpers/wrap-analyser-node-get-float-time-domain-data-method.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeAudioBufferConstructor = void 0;

const createNativeAudioBufferConstructor = window => {
  if (window === null) {
    return null;
  }

  if (window.hasOwnProperty('AudioBuffer')) {
    return window.AudioBuffer;
  }

  return null;
};

exports.createNativeAudioBufferConstructor = createNativeAudioBufferConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assignNativeAudioNodeAudioParamValue = void 0;

const assignNativeAudioNodeAudioParamValue = (nativeAudioNode, options, audioParam) => {
  const value = options[audioParam];

  if (value !== undefined && value !== nativeAudioNode[audioParam].value) {
    nativeAudioNode[audioParam].value = value;
  }
};

exports.assignNativeAudioNodeAudioParamValue = assignNativeAudioNodeAudioParamValue;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = void 0;

var _invalidStateError = require("../factories/invalid-state-error");

const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = nativeAudioBufferSourceNode => {
  nativeAudioBufferSourceNode.start = (start => {
    let isScheduled = false;
    return (when = 0, offset = 0, duration) => {
      if (isScheduled) {
        throw (0, _invalidStateError.createInvalidStateError)();
      }

      start.call(nativeAudioBufferSourceNode, when, offset, duration);
      isScheduled = true;
    };
  })(nativeAudioBufferSourceNode.start);
};

exports.wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = wrapAudioBufferSourceNodeStartMethodConsecutiveCalls;
},{"../factories/invalid-state-error":"node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAudioScheduledSourceNodeStartMethodNegativeParameters = void 0;

const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = nativeAudioScheduledSourceNode => {
  nativeAudioScheduledSourceNode.start = (start => {
    return (when = 0, offset = 0, duration) => {
      if (typeof duration === 'number' && duration < 0 || offset < 0 || when < 0) {
        throw new RangeError("The parameters can't be negative.");
      } // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.


      start.call(nativeAudioScheduledSourceNode, when, offset, duration);
    };
  })(nativeAudioScheduledSourceNode.start);
};

exports.wrapAudioScheduledSourceNodeStartMethodNegativeParameters = wrapAudioScheduledSourceNodeStartMethodNegativeParameters;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAudioScheduledSourceNodeStopMethodNegativeParameters = void 0;

const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = nativeAudioScheduledSourceNode => {
  nativeAudioScheduledSourceNode.stop = (stop => {
    return (when = 0) => {
      if (when < 0) {
        throw new RangeError("The parameter can't be negative.");
      }

      stop.call(nativeAudioScheduledSourceNode, when);
    };
  })(nativeAudioScheduledSourceNode.stop);
};

exports.wrapAudioScheduledSourceNodeStopMethodNegativeParameters = wrapAudioScheduledSourceNodeStopMethodNegativeParameters;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-source-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeAudioBufferSourceNodeFactory = void 0;

var _assignNativeAudioNodeAudioParamValue = require("../helpers/assign-native-audio-node-audio-param-value");

var _assignNativeAudioNodeOption = require("../helpers/assign-native-audio-node-option");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

var _wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = require("../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls");

var _wrapAudioScheduledSourceNodeStartMethodNegativeParameters = require("../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters");

var _wrapAudioScheduledSourceNodeStopMethodNegativeParameters = require("../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters");

const createNativeAudioBufferSourceNodeFactory = (addSilentConnection, cacheTestResult, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioBufferSourceNodeStopMethodNullifiedBuffer, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {
  return (nativeContext, options) => {
    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeAudioBufferSourceNode, options);
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeAudioBufferSourceNode, options, 'playbackRate');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAudioBufferSourceNode, options, 'buffer'); // Bug #149: Safari does not yet support the detune AudioParam.

    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAudioBufferSourceNode, options, 'loop');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAudioBufferSourceNode, options, 'loopEnd');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAudioBufferSourceNode, options, 'loopStart'); // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.

    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, () => testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext))) {
      (0, _wrapAudioBufferSourceNodeStartMethodConsecutiveCalls.wrapAudioBufferSourceNodeStartMethodConsecutiveCalls)(nativeAudioBufferSourceNode);
    } // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.


    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, () => testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext))) {
      wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);
    } // Bug #162: Safari does throw an error when stop() is called on an AudioBufferSourceNode which has no buffer assigned to it.


    if (!cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, () => testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext))) {
      wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);
    } // Bug #44: Safari does not throw a RangeError yet.


    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {
      (0, _wrapAudioScheduledSourceNodeStartMethodNegativeParameters.wrapAudioScheduledSourceNodeStartMethodNegativeParameters)(nativeAudioBufferSourceNode);
    } // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.


    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {
      wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);
    } // Bug #44: Only Firefox does not throw a RangeError yet.


    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {
      (0, _wrapAudioScheduledSourceNodeStopMethodNegativeParameters.wrapAudioScheduledSourceNodeStopMethodNegativeParameters)(nativeAudioBufferSourceNode);
    } // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.


    addSilentConnection(nativeContext, nativeAudioBufferSourceNode);
    return nativeAudioBufferSourceNode;
  };
};

exports.createNativeAudioBufferSourceNodeFactory = createNativeAudioBufferSourceNodeFactory;
},{"../helpers/assign-native-audio-node-audio-param-value":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","../helpers/assign-native-audio-node-option":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js","../helpers/assign-native-audio-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js","../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls":"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js","../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters":"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js","../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters":"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeAudioContextConstructor = void 0;

const createNativeAudioContextConstructor = window => {
  if (window === null) {
    return null;
  }

  if (window.hasOwnProperty('AudioContext')) {
    return window.AudioContext;
  }

  return window.hasOwnProperty('webkitAudioContext') ? window.webkitAudioContext : null;
};

exports.createNativeAudioContextConstructor = createNativeAudioContextConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/native-audio-destination-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeAudioDestinationNodeFactory = void 0;

const createNativeAudioDestinationNodeFactory = (createNativeGainNode, overwriteAccessors) => {
  return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {
    const nativeAudioDestinationNode = nativeContext.destination; // Bug #132: Safari does not have the correct channelCount.

    if (nativeAudioDestinationNode.channelCount !== channelCount) {
      try {
        nativeAudioDestinationNode.channelCount = channelCount;
      } catch {// Bug #169: Safari throws an error on each attempt to change the channelCount.
      }
    } // Bug #83: Safari does not have the correct channelCountMode.


    if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {
      nativeAudioDestinationNode.channelCountMode = 'explicit';
    } // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.


    if (nativeAudioDestinationNode.maxChannelCount === 0) {
      Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {
        value: channelCount
      });
    } // Bug #168: No browser does yet have an AudioDestinationNode with an output.


    const gainNode = createNativeGainNode(nativeContext, {
      channelCount,
      channelCountMode: nativeAudioDestinationNode.channelCountMode,
      channelInterpretation: nativeAudioDestinationNode.channelInterpretation,
      gain: 1
    });
    overwriteAccessors(gainNode, 'channelCount', get => () => get.call(gainNode), set => value => {
      set.call(gainNode, value);

      try {
        nativeAudioDestinationNode.channelCount = value;
      } catch (err) {
        // Bug #169: Safari throws an error on each attempt to change the channelCount.
        if (value > nativeAudioDestinationNode.maxChannelCount) {
          throw err;
        }
      }
    });
    overwriteAccessors(gainNode, 'channelCountMode', get => () => get.call(gainNode), set => value => {
      set.call(gainNode, value);
      nativeAudioDestinationNode.channelCountMode = value;
    });
    overwriteAccessors(gainNode, 'channelInterpretation', get => () => get.call(gainNode), set => value => {
      set.call(gainNode, value);
      nativeAudioDestinationNode.channelInterpretation = value;
    });
    Object.defineProperty(gainNode, 'maxChannelCount', {
      get: () => nativeAudioDestinationNode.maxChannelCount
    }); // @todo This should be disconnected when the context is closed.

    gainNode.connect(nativeAudioDestinationNode);
    return gainNode;
  };
};

exports.createNativeAudioDestinationNodeFactory = createNativeAudioDestinationNodeFactory;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeAudioWorkletNodeConstructor = void 0;

const createNativeAudioWorkletNodeConstructor = window => {
  if (window === null) {
    return null;
  }

  return window.hasOwnProperty('AudioWorkletNode') ? window.AudioWorkletNode : null;
};

exports.createNativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/test-clonability-of-audio-worklet-node-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testClonabilityOfAudioWorkletNodeOptions = void 0;

const testClonabilityOfAudioWorkletNodeOptions = audioWorkletNodeOptions => {
  const {
    port1
  } = new MessageChannel();

  try {
    // This will throw an error if the audioWorkletNodeOptions are not clonable.
    port1.postMessage(audioWorkletNodeOptions);
  } finally {
    port1.close();
  }
};

exports.testClonabilityOfAudioWorkletNodeOptions = testClonabilityOfAudioWorkletNodeOptions;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeAudioWorkletNodeFactory = void 0;

var _testClonabilityOfAudioWorkletNodeOptions = require("../helpers/test-clonability-of-audio-worklet-node-options");

const createNativeAudioWorkletNodeFactory = (createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections) => {
  return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {
    if (nativeAudioWorkletNodeConstructor !== null) {
      try {
        const nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeContext, name, options);
        const patchedEventListeners = new Map();
        let onprocessorerror = null;
        Object.defineProperties(nativeAudioWorkletNode, {
          /*
           * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some
           * browsers have no native implementation to achieve a consistent behavior.
           */
          channelCount: {
            get: () => options.channelCount,
            set: () => {
              throw createInvalidStateError();
            }
          },
          channelCountMode: {
            get: () => 'explicit',
            set: () => {
              throw createInvalidStateError();
            }
          },
          // Bug #156: Chrome and Edge do not yet fire an ErrorEvent.
          onprocessorerror: {
            get: () => onprocessorerror,
            set: value => {
              if (typeof onprocessorerror === 'function') {
                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);
              }

              onprocessorerror = typeof value === 'function' ? value : null;

              if (typeof onprocessorerror === 'function') {
                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);
              }
            }
          }
        });

        nativeAudioWorkletNode.addEventListener = (addEventListener => {
          return (...args) => {
            if (args[0] === 'processorerror') {
              const unpatchedEventListener = typeof args[1] === 'function' ? args[1] : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;

              if (unpatchedEventListener !== null) {
                const patchedEventListener = patchedEventListeners.get(args[1]);

                if (patchedEventListener !== undefined) {
                  args[1] = patchedEventListener;
                } else {
                  args[1] = event => {
                    // Bug #178: Chrome, Edge and Opera do fire an event of type error.
                    if (event.type === 'error') {
                      Object.defineProperties(event, {
                        type: {
                          value: 'processorerror'
                        }
                      });
                      unpatchedEventListener(event);
                    } else {
                      unpatchedEventListener(new ErrorEvent(args[0], { ...event
                      }));
                    }
                  };

                  patchedEventListeners.set(unpatchedEventListener, args[1]);
                }
              }
            } // Bug #178: Chrome, Edge and Opera do fire an event of type error.


            addEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);
            return addEventListener.call(nativeAudioWorkletNode, ...args);
          };
        })(nativeAudioWorkletNode.addEventListener);

        nativeAudioWorkletNode.removeEventListener = (removeEventListener => {
          return (...args) => {
            if (args[0] === 'processorerror') {
              const patchedEventListener = patchedEventListeners.get(args[1]);

              if (patchedEventListener !== undefined) {
                patchedEventListeners.delete(args[1]);
                args[1] = patchedEventListener;
              }
            } // Bug #178: Chrome, Edge and Opera do fire an event of type error.


            removeEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);
            return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);
          };
        })(nativeAudioWorkletNode.removeEventListener);
        /*
         * Bug #86: Chrome and Edge do not invoke the process() function if the corresponding AudioWorkletNode is unconnected but
         * has an output.
         */


        if (options.numberOfOutputs !== 0) {
          const nativeGainNode = createNativeGainNode(nativeContext, {
            channelCount: 1,
            channelCountMode: 'explicit',
            channelInterpretation: 'discrete',
            gain: 0
          });
          nativeAudioWorkletNode.connect(nativeGainNode).connect(nativeContext.destination);

          const whenConnected = () => nativeGainNode.disconnect();

          const whenDisconnected = () => nativeGainNode.connect(nativeContext.destination); // @todo Disconnect the connection when the process() function of the AudioWorkletNode returns false.


          return monitorConnections(nativeAudioWorkletNode, whenConnected, whenDisconnected);
        }

        return nativeAudioWorkletNode;
      } catch (err) {
        // Bug #60: Chrome, Edge & Opera throw an InvalidStateError instead of a NotSupportedError.
        if (err.code === 11) {
          throw createNotSupportedError();
        }

        throw err;
      }
    } // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.


    if (processorConstructor === undefined) {
      throw createNotSupportedError();
    }

    (0, _testClonabilityOfAudioWorkletNodeOptions.testClonabilityOfAudioWorkletNodeOptions)(options);
    return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);
  };
};

exports.createNativeAudioWorkletNodeFactory = createNativeAudioWorkletNodeFactory;
},{"../helpers/test-clonability-of-audio-worklet-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/test-clonability-of-audio-worklet-node-options.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/compute-buffer-size.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeBufferSize = void 0;

const computeBufferSize = (baseLatency, sampleRate) => {
  if (baseLatency === null) {
    return 512;
  }

  return Math.max(512, Math.min(16384, Math.pow(2, Math.round(Math.log2(baseLatency * sampleRate)))));
};

exports.computeBufferSize = computeBufferSize;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/clone-audio-worklet-node-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cloneAudioWorkletNodeOptions = void 0;

const cloneAudioWorkletNodeOptions = audioWorkletNodeOptions => {
  return new Promise((resolve, reject) => {
    const {
      port1,
      port2
    } = new MessageChannel();

    port1.onmessage = ({
      data
    }) => {
      port1.close();
      port2.close();
      resolve(data);
    };

    port1.onmessageerror = ({
      data
    }) => {
      port1.close();
      port2.close();
      reject(data);
    }; // This will throw an error if the audioWorkletNodeOptions are not clonable.


    port2.postMessage(audioWorkletNodeOptions);
  });
};

exports.cloneAudioWorkletNodeOptions = cloneAudioWorkletNodeOptions;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor-promise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioWorkletProcessorPromise = void 0;

var _cloneAudioWorkletNodeOptions = require("./clone-audio-worklet-node-options");

const createAudioWorkletProcessorPromise = async (processorConstructor, audioWorkletNodeOptions) => {
  const clonedAudioWorkletNodeOptions = await (0, _cloneAudioWorkletNodeOptions.cloneAudioWorkletNodeOptions)(audioWorkletNodeOptions);
  return new processorConstructor(clonedAudioWorkletNodeOptions);
};

exports.createAudioWorkletProcessorPromise = createAudioWorkletProcessorPromise;
},{"./clone-audio-worklet-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/clone-audio-worklet-node-options.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioWorkletProcessor = void 0;

var _globals = require("../globals");

var _createAudioWorkletProcessorPromise = require("./create-audio-worklet-processor-promise");

const createAudioWorkletProcessor = (nativeContext, nativeAudioWorkletNode, processorConstructor, audioWorkletNodeOptions) => {
  let nodeToProcessorMap = _globals.NODE_TO_PROCESSOR_MAPS.get(nativeContext);

  if (nodeToProcessorMap === undefined) {
    nodeToProcessorMap = new WeakMap();

    _globals.NODE_TO_PROCESSOR_MAPS.set(nativeContext, nodeToProcessorMap);
  }

  const audioWorkletProcessorPromise = (0, _createAudioWorkletProcessorPromise.createAudioWorkletProcessorPromise)(processorConstructor, audioWorkletNodeOptions);
  nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);
  return audioWorkletProcessorPromise;
};

exports.createAudioWorkletProcessor = createAudioWorkletProcessor;
},{"../globals":"node_modules/standardized-audio-context/build/es2019/globals.js","./create-audio-worklet-processor-promise":"node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor-promise.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-faker-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeAudioWorkletNodeFakerFactory = void 0;

var _constants = require("../constants");

var _computeBufferSize = require("../helpers/compute-buffer-size");

var _copyFromChannel = require("../helpers/copy-from-channel");

var _copyToChannel = require("../helpers/copy-to-channel");

var _createAudioWorkletProcessor = require("../helpers/create-audio-worklet-processor");

var _createNestedArrays = require("../helpers/create-nested-arrays");

var _readOnlyMap = require("../read-only-map");

const createNativeAudioWorkletNodeFakerFactory = (connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections) => {
  return (nativeContext, baseLatency, processorConstructor, options) => {
    if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {
      throw createNotSupportedError();
    }

    const outputChannelCount = Array.isArray(options.outputChannelCount) ? options.outputChannelCount : Array.from(options.outputChannelCount); // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.

    if (outputChannelCount.some(channelCount => channelCount < 1)) {
      throw createNotSupportedError();
    }

    if (outputChannelCount.length !== options.numberOfOutputs) {
      throw createIndexSizeError();
    } // Bug #61: This is not part of the standard but required for the faker to work.


    if (options.channelCountMode !== 'explicit') {
      throw createNotSupportedError();
    }

    const numberOfInputChannels = options.channelCount * options.numberOfInputs;
    const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);
    const numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length; // Bug #61: This is not part of the standard but required for the faker to work.

    if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {
      throw createNotSupportedError();
    }

    const messageChannel = new MessageChannel();
    const gainNodes = [];
    const inputChannelSplitterNodes = [];

    for (let i = 0; i < options.numberOfInputs; i += 1) {
      gainNodes.push(createNativeGainNode(nativeContext, {
        channelCount: options.channelCount,
        channelCountMode: options.channelCountMode,
        channelInterpretation: options.channelInterpretation,
        gain: 1
      }));
      inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext, {
        channelCount: options.channelCount,
        channelCountMode: 'explicit',
        channelInterpretation: 'discrete',
        numberOfOutputs: options.channelCount
      }));
    }

    const constantSourceNodes = [];

    if (processorConstructor.parameterDescriptors !== undefined) {
      for (const {
        defaultValue,
        maxValue,
        minValue,
        name
      } of processorConstructor.parameterDescriptors) {
        const constantSourceNode = createNativeConstantSourceNode(nativeContext, {
          channelCount: 1,
          channelCountMode: 'explicit',
          channelInterpretation: 'discrete',
          offset: options.parameterData[name] !== undefined ? options.parameterData[name] : defaultValue === undefined ? 0 : defaultValue
        });
        Object.defineProperties(constantSourceNode.offset, {
          defaultValue: {
            get: () => defaultValue === undefined ? 0 : defaultValue
          },
          maxValue: {
            get: () => maxValue === undefined ? _constants.MOST_POSITIVE_SINGLE_FLOAT : maxValue
          },
          minValue: {
            get: () => minValue === undefined ? _constants.MOST_NEGATIVE_SINGLE_FLOAT : minValue
          }
        });
        constantSourceNodes.push(constantSourceNode);
      }
    }

    const inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {
      channelCount: 1,
      channelCountMode: 'explicit',
      channelInterpretation: 'speakers',
      numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)
    });
    const bufferSize = (0, _computeBufferSize.computeBufferSize)(baseLatency, nativeContext.sampleRate);
    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels + numberOfParameters, // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.
    Math.max(1, numberOfOutputChannels));
    const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {
      channelCount: Math.max(1, numberOfOutputChannels),
      channelCountMode: 'explicit',
      channelInterpretation: 'discrete',
      numberOfOutputs: Math.max(1, numberOfOutputChannels)
    });
    const outputChannelMergerNodes = [];

    for (let i = 0; i < options.numberOfOutputs; i += 1) {
      outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext, {
        channelCount: 1,
        channelCountMode: 'explicit',
        channelInterpretation: 'speakers',
        numberOfInputs: outputChannelCount[i]
      }));
    }

    for (let i = 0; i < options.numberOfInputs; i += 1) {
      gainNodes[i].connect(inputChannelSplitterNodes[i]);

      for (let j = 0; j < options.channelCount; j += 1) {
        inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);
      }
    }

    const parameterMap = new _readOnlyMap.ReadOnlyMap(processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.map(({
      name
    }, index) => {
      const constantSourceNode = constantSourceNodes[index];
      constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);
      constantSourceNode.start(0);
      return [name, constantSourceNode.offset];
    }));
    inputChannelMergerNode.connect(scriptProcessorNode);
    let channelInterpretation = options.channelInterpretation;
    let onprocessorerror = null; // Bug #87: Expose at least one output to make this node connectable.

    const outputAudioNodes = options.numberOfOutputs === 0 ? [scriptProcessorNode] : outputChannelMergerNodes;
    const nativeAudioWorkletNodeFaker = {
      get bufferSize() {
        return bufferSize;
      },

      get channelCount() {
        return options.channelCount;
      },

      set channelCount(_) {
        // Bug #61: This is not part of the standard but required for the faker to work.
        throw createInvalidStateError();
      },

      get channelCountMode() {
        return options.channelCountMode;
      },

      set channelCountMode(_) {
        // Bug #61: This is not part of the standard but required for the faker to work.
        throw createInvalidStateError();
      },

      get channelInterpretation() {
        return channelInterpretation;
      },

      set channelInterpretation(value) {
        for (const gainNode of gainNodes) {
          gainNode.channelInterpretation = value;
        }

        channelInterpretation = value;
      },

      get context() {
        return scriptProcessorNode.context;
      },

      get inputs() {
        return gainNodes;
      },

      get numberOfInputs() {
        return options.numberOfInputs;
      },

      get numberOfOutputs() {
        return options.numberOfOutputs;
      },

      get onprocessorerror() {
        return onprocessorerror;
      },

      set onprocessorerror(value) {
        if (typeof onprocessorerror === 'function') {
          nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);
        }

        onprocessorerror = typeof value === 'function' ? value : null;

        if (typeof onprocessorerror === 'function') {
          nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);
        }
      },

      get parameters() {
        return parameterMap;
      },

      get port() {
        return messageChannel.port2;
      },

      addEventListener(...args) {
        return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);
      },

      connect: connectMultipleOutputs.bind(null, outputAudioNodes),
      disconnect: disconnectMultipleOutputs.bind(null, outputAudioNodes),

      dispatchEvent(...args) {
        return scriptProcessorNode.dispatchEvent(args[0]);
      },

      removeEventListener(...args) {
        return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);
      }

    };
    const patchedEventListeners = new Map();

    messageChannel.port1.addEventListener = (addEventListener => {
      return (...args) => {
        if (args[0] === 'message') {
          const unpatchedEventListener = typeof args[1] === 'function' ? args[1] : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;

          if (unpatchedEventListener !== null) {
            const patchedEventListener = patchedEventListeners.get(args[1]);

            if (patchedEventListener !== undefined) {
              args[1] = patchedEventListener;
            } else {
              args[1] = event => {
                exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => unpatchedEventListener(event));
              };

              patchedEventListeners.set(unpatchedEventListener, args[1]);
            }
          }
        }

        return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);
      };
    })(messageChannel.port1.addEventListener);

    messageChannel.port1.removeEventListener = (removeEventListener => {
      return (...args) => {
        if (args[0] === 'message') {
          const patchedEventListener = patchedEventListeners.get(args[1]);

          if (patchedEventListener !== undefined) {
            patchedEventListeners.delete(args[1]);
            args[1] = patchedEventListener;
          }
        }

        return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);
      };
    })(messageChannel.port1.removeEventListener);

    let onmessage = null;
    Object.defineProperty(messageChannel.port1, 'onmessage', {
      get: () => onmessage,
      set: value => {
        if (typeof onmessage === 'function') {
          messageChannel.port1.removeEventListener('message', onmessage);
        }

        onmessage = typeof value === 'function' ? value : null;

        if (typeof onmessage === 'function') {
          messageChannel.port1.addEventListener('message', onmessage);
          messageChannel.port1.start();
        }
      }
    });
    processorConstructor.prototype.port = messageChannel.port1;
    let audioWorkletProcessor = null;
    const audioWorkletProcessorPromise = (0, _createAudioWorkletProcessor.createAudioWorkletProcessor)(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);
    audioWorkletProcessorPromise.then(dWrkltPrcssr => audioWorkletProcessor = dWrkltPrcssr);
    const inputs = (0, _createNestedArrays.createNestedArrays)(options.numberOfInputs, options.channelCount);
    const outputs = (0, _createNestedArrays.createNestedArrays)(options.numberOfOutputs, outputChannelCount);
    const parameters = processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.reduce((prmtrs, {
      name
    }) => ({ ...prmtrs,
      [name]: new Float32Array(128)
    }), {});
    let isActive = true;

    const disconnectOutputsGraph = () => {
      if (options.numberOfOutputs > 0) {
        scriptProcessorNode.disconnect(outputChannelSplitterNode);
      }

      for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {
        const outputChannelMergerNode = outputChannelMergerNodes[i];

        for (let j = 0; j < outputChannelCount[i]; j += 1) {
          outputChannelSplitterNode.disconnect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);
        }

        outputChannelSplitterNodeOutput += outputChannelCount[i];
      }
    };

    const activeInputIndexes = new Map(); // tslint:disable-next-line:deprecation

    scriptProcessorNode.onaudioprocess = ({
      inputBuffer,
      outputBuffer
    }) => {
      if (audioWorkletProcessor !== null) {
        const activeInputs = getActiveAudioWorkletNodeInputs(nativeAudioWorkletNodeFaker);

        for (let i = 0; i < bufferSize; i += 128) {
          for (let j = 0; j < options.numberOfInputs; j += 1) {
            for (let k = 0; k < options.channelCount; k += 1) {
              (0, _copyFromChannel.copyFromChannel)(inputBuffer, inputs[j], k, k, i);
            }
          }

          if (processorConstructor.parameterDescriptors !== undefined) {
            processorConstructor.parameterDescriptors.forEach(({
              name
            }, index) => {
              (0, _copyFromChannel.copyFromChannel)(inputBuffer, parameters, name, numberOfInputChannels + index, i);
            });
          }

          for (let j = 0; j < options.numberOfInputs; j += 1) {
            for (let k = 0; k < outputChannelCount[j]; k += 1) {
              // The byteLength will be 0 when the ArrayBuffer was transferred.
              if (outputs[j][k].byteLength === 0) {
                outputs[j][k] = new Float32Array(128);
              }
            }
          }

          try {
            const potentiallyEmptyInputs = inputs.map((input, index) => {
              const activeInput = activeInputs[index];

              if (activeInput.size > 0) {
                activeInputIndexes.set(index, bufferSize / 128);
                return input;
              }

              const count = activeInputIndexes.get(index);

              if (count === undefined) {
                return [];
              }

              if (input.every(channelData => channelData.every(sample => sample === 0))) {
                if (count === 1) {
                  activeInputIndexes.delete(index);
                } else {
                  activeInputIndexes.set(index, count - 1);
                }
              }

              return input;
            });
            const activeSourceFlag = exposeCurrentFrameAndCurrentTime(nativeContext.currentTime + i / nativeContext.sampleRate, nativeContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));
            isActive = activeSourceFlag;

            for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {
              for (let k = 0; k < outputChannelCount[j]; k += 1) {
                (0, _copyToChannel.copyToChannel)(outputBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);
              }

              outputChannelSplitterNodeOutput += outputChannelCount[j];
            }
          } catch (error) {
            isActive = false;
            nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent('processorerror', {
              colno: error.colno,
              filename: error.filename,
              lineno: error.lineno,
              message: error.message
            }));
          }

          if (!isActive) {
            for (let j = 0; j < options.numberOfInputs; j += 1) {
              gainNodes[j].disconnect(inputChannelSplitterNodes[j]);

              for (let k = 0; k < options.channelCount; k += 1) {
                inputChannelSplitterNodes[i].disconnect(inputChannelMergerNode, k, j * options.channelCount + k);
              }
            }

            if (processorConstructor.parameterDescriptors !== undefined) {
              const length = processorConstructor.parameterDescriptors.length;

              for (let j = 0; j < length; j += 1) {
                const constantSourceNode = constantSourceNodes[j];
                constantSourceNode.disconnect(inputChannelMergerNode, 0, numberOfInputChannels + j);
                constantSourceNode.stop();
              }
            }

            inputChannelMergerNode.disconnect(scriptProcessorNode);
            scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation

            if (isConnected) {
              disconnectOutputsGraph();
            } else {
              disconnectFakeGraph();
            }

            break;
          }
        }
      }
    };

    let isConnected = false; // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.

    const nativeGainNode = createNativeGainNode(nativeContext, {
      channelCount: 1,
      channelCountMode: 'explicit',
      channelInterpretation: 'discrete',
      gain: 0
    });

    const connectFakeGraph = () => scriptProcessorNode.connect(nativeGainNode).connect(nativeContext.destination);

    const disconnectFakeGraph = () => {
      scriptProcessorNode.disconnect(nativeGainNode);
      nativeGainNode.disconnect();
    };

    const whenConnected = () => {
      if (isActive) {
        disconnectFakeGraph();

        if (options.numberOfOutputs > 0) {
          scriptProcessorNode.connect(outputChannelSplitterNode);
        }

        for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {
          const outputChannelMergerNode = outputChannelMergerNodes[i];

          for (let j = 0; j < outputChannelCount[i]; j += 1) {
            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);
          }

          outputChannelSplitterNodeOutput += outputChannelCount[i];
        }
      }

      isConnected = true;
    };

    const whenDisconnected = () => {
      if (isActive) {
        connectFakeGraph();
        disconnectOutputsGraph();
      }

      isConnected = false;
    };

    connectFakeGraph();
    return monitorConnections(nativeAudioWorkletNodeFaker, whenConnected, whenDisconnected);
  };
};

exports.createNativeAudioWorkletNodeFakerFactory = createNativeAudioWorkletNodeFakerFactory;
},{"../constants":"node_modules/standardized-audio-context/build/es2019/constants.js","../helpers/compute-buffer-size":"node_modules/standardized-audio-context/build/es2019/helpers/compute-buffer-size.js","../helpers/copy-from-channel":"node_modules/standardized-audio-context/build/es2019/helpers/copy-from-channel.js","../helpers/copy-to-channel":"node_modules/standardized-audio-context/build/es2019/helpers/copy-to-channel.js","../helpers/create-audio-worklet-processor":"node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor.js","../helpers/create-nested-arrays":"node_modules/standardized-audio-context/build/es2019/helpers/create-nested-arrays.js","../read-only-map":"node_modules/standardized-audio-context/build/es2019/read-only-map.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-biquad-filter-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeBiquadFilterNode = void 0;

var _assignNativeAudioNodeAudioParamValue = require("../helpers/assign-native-audio-node-audio-param-value");

var _assignNativeAudioNodeOption = require("../helpers/assign-native-audio-node-option");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeBiquadFilterNode = (nativeContext, options) => {
  const nativeBiquadFilterNode = nativeContext.createBiquadFilter();
  (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeBiquadFilterNode, options);
  (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeBiquadFilterNode, options, 'Q');
  (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeBiquadFilterNode, options, 'detune');
  (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeBiquadFilterNode, options, 'frequency');
  (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeBiquadFilterNode, options, 'gain');
  (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeBiquadFilterNode, options, 'type');
  return nativeBiquadFilterNode;
};

exports.createNativeBiquadFilterNode = createNativeBiquadFilterNode;
},{"../helpers/assign-native-audio-node-audio-param-value":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","../helpers/assign-native-audio-node-option":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js","../helpers/assign-native-audio-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-channel-merger-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeChannelMergerNodeFactory = void 0;

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeChannelMergerNodeFactory = (nativeAudioContextConstructor, wrapChannelMergerNode) => {
  return (nativeContext, options) => {
    const nativeChannelMergerNode = nativeContext.createChannelMerger(options.numberOfInputs);
    /*
     * Bug #20: Safari requires a connection of any kind to treat the input signal correctly.
     * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of
     * the webkitAudioContext is used as a workaround here.
     */

    if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {
      wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);
    }

    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeChannelMergerNode, options);
    return nativeChannelMergerNode;
  };
};

exports.createNativeChannelMergerNodeFactory = createNativeChannelMergerNodeFactory;
},{"../helpers/assign-native-audio-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/wrap-channel-splitter-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapChannelSplitterNode = void 0;

var _invalidStateError = require("../factories/invalid-state-error");

const wrapChannelSplitterNode = channelSplitterNode => {
  const channelCount = channelSplitterNode.numberOfOutputs; // Bug #97: Safari does not throw an error when attempting to change the channelCount to something other than its initial value.

  Object.defineProperty(channelSplitterNode, 'channelCount', {
    get: () => channelCount,
    set: value => {
      if (value !== channelCount) {
        throw (0, _invalidStateError.createInvalidStateError)();
      }
    }
  }); // Bug #30: Safari does not throw an error when attempting to change the channelCountMode to something other than explicit.

  Object.defineProperty(channelSplitterNode, 'channelCountMode', {
    get: () => 'explicit',
    set: value => {
      if (value !== 'explicit') {
        throw (0, _invalidStateError.createInvalidStateError)();
      }
    }
  }); // Bug #32: Safari does not throw an error when attempting to change the channelInterpretation to something other than discrete.

  Object.defineProperty(channelSplitterNode, 'channelInterpretation', {
    get: () => 'discrete',
    set: value => {
      if (value !== 'discrete') {
        throw (0, _invalidStateError.createInvalidStateError)();
      }
    }
  });
};

exports.wrapChannelSplitterNode = wrapChannelSplitterNode;
},{"../factories/invalid-state-error":"node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-channel-splitter-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeChannelSplitterNode = void 0;

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

var _wrapChannelSplitterNode = require("../helpers/wrap-channel-splitter-node");

const createNativeChannelSplitterNode = (nativeContext, options) => {
  const nativeChannelSplitterNode = nativeContext.createChannelSplitter(options.numberOfOutputs); // Bug #96: Safari does not have the correct channelCount.
  // Bug #29: Safari does not have the correct channelCountMode.
  // Bug #31: Safari does not have the correct channelInterpretation.

  (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeChannelSplitterNode, options); // Bug #29, #30, #31, #32, #96 & #97: Only Chrome, Edge, Firefox & Opera partially support the spec yet.

  (0, _wrapChannelSplitterNode.wrapChannelSplitterNode)(nativeChannelSplitterNode);
  return nativeChannelSplitterNode;
};

exports.createNativeChannelSplitterNode = createNativeChannelSplitterNode;
},{"../helpers/assign-native-audio-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js","../helpers/wrap-channel-splitter-node":"node_modules/standardized-audio-context/build/es2019/helpers/wrap-channel-splitter-node.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeConstantSourceNodeFactory = void 0;

var _assignNativeAudioNodeAudioParamValue = require("../helpers/assign-native-audio-node-audio-param-value");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

var _wrapAudioScheduledSourceNodeStartMethodNegativeParameters = require("../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters");

var _wrapAudioScheduledSourceNodeStopMethodNegativeParameters = require("../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters");

const createNativeConstantSourceNodeFactory = (addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport) => {
  return (nativeContext, options) => {
    // Bug #62: Safari does not support ConstantSourceNodes.
    if (nativeContext.createConstantSource === undefined) {
      return createNativeConstantSourceNodeFaker(nativeContext, options);
    }

    const nativeConstantSourceNode = nativeContext.createConstantSource();
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeConstantSourceNode, options);
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeConstantSourceNode, options, 'offset'); // Bug #44: Safari does not throw a RangeError yet.

    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {
      (0, _wrapAudioScheduledSourceNodeStartMethodNegativeParameters.wrapAudioScheduledSourceNodeStartMethodNegativeParameters)(nativeConstantSourceNode);
    } // Bug #44: Only Firefox does not throw a RangeError yet.


    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {
      (0, _wrapAudioScheduledSourceNodeStopMethodNegativeParameters.wrapAudioScheduledSourceNodeStopMethodNegativeParameters)(nativeConstantSourceNode);
    } // Bug #175: Safari will not fire an ended event if the ConstantSourceNode is unconnected.


    addSilentConnection(nativeContext, nativeConstantSourceNode);
    return nativeConstantSourceNode;
  };
};

exports.createNativeConstantSourceNodeFactory = createNativeConstantSourceNodeFactory;
},{"../helpers/assign-native-audio-node-audio-param-value":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","../helpers/assign-native-audio-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js","../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters":"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js","../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters":"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.interceptConnections = void 0;

const interceptConnections = (original, interceptor) => {
  original.connect = interceptor.connect.bind(interceptor);
  original.disconnect = interceptor.disconnect.bind(interceptor);
  return original;
};

exports.interceptConnections = interceptConnections;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-faker-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeConstantSourceNodeFakerFactory = void 0;

var _interceptConnections = require("../helpers/intercept-connections");

const createNativeConstantSourceNodeFakerFactory = (addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections) => {
  return (nativeContext, {
    offset,
    ...audioNodeOptions
  }) => {
    const audioBuffer = nativeContext.createBuffer(1, 2, 44100);
    const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {
      buffer: null,
      channelCount: 2,
      channelCountMode: 'max',
      channelInterpretation: 'speakers',
      loop: false,
      loopEnd: 0,
      loopStart: 0,
      playbackRate: 1
    });
    const gainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,
      gain: offset
    }); // Bug #5: Safari does not support copyFromChannel() and copyToChannel().

    const channelData = audioBuffer.getChannelData(0); // Bug #95: Safari does not play or loop one sample buffers.

    channelData[0] = 1;
    channelData[1] = 1;
    audioBufferSourceNode.buffer = audioBuffer;
    audioBufferSourceNode.loop = true;
    const nativeConstantSourceNodeFaker = {
      get bufferSize() {
        return undefined;
      },

      get channelCount() {
        return gainNode.channelCount;
      },

      set channelCount(value) {
        gainNode.channelCount = value;
      },

      get channelCountMode() {
        return gainNode.channelCountMode;
      },

      set channelCountMode(value) {
        gainNode.channelCountMode = value;
      },

      get channelInterpretation() {
        return gainNode.channelInterpretation;
      },

      set channelInterpretation(value) {
        gainNode.channelInterpretation = value;
      },

      get context() {
        return gainNode.context;
      },

      get inputs() {
        return [];
      },

      get numberOfInputs() {
        return audioBufferSourceNode.numberOfInputs;
      },

      get numberOfOutputs() {
        return gainNode.numberOfOutputs;
      },

      get offset() {
        return gainNode.gain;
      },

      get onended() {
        return audioBufferSourceNode.onended;
      },

      set onended(value) {
        audioBufferSourceNode.onended = value;
      },

      addEventListener(...args) {
        return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);
      },

      dispatchEvent(...args) {
        return audioBufferSourceNode.dispatchEvent(args[0]);
      },

      removeEventListener(...args) {
        return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);
      },

      start(when = 0) {
        audioBufferSourceNode.start.call(audioBufferSourceNode, when);
      },

      stop(when = 0) {
        audioBufferSourceNode.stop.call(audioBufferSourceNode, when);
      }

    };

    const whenConnected = () => audioBufferSourceNode.connect(gainNode);

    const whenDisconnected = () => audioBufferSourceNode.disconnect(gainNode); // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.


    addSilentConnection(nativeContext, audioBufferSourceNode);
    return monitorConnections((0, _interceptConnections.interceptConnections)(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);
  };
};

exports.createNativeConstantSourceNodeFakerFactory = createNativeConstantSourceNodeFakerFactory;
},{"../helpers/intercept-connections":"node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeConvolverNodeFactory = void 0;

var _assignNativeAudioNodeOption = require("../helpers/assign-native-audio-node-option");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeConvolverNodeFactory = (createNotSupportedError, overwriteAccessors) => {
  return (nativeContext, options) => {
    const nativeConvolverNode = nativeContext.createConvolver();
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeConvolverNode, options); // The normalize property needs to be set before setting the buffer.

    if (options.disableNormalization === nativeConvolverNode.normalize) {
      nativeConvolverNode.normalize = !options.disableNormalization;
    }

    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeConvolverNode, options, 'buffer'); // Bug #113: Safari does allow to set the channelCount to a value larger than 2.

    if (options.channelCount > 2) {
      throw createNotSupportedError();
    }

    overwriteAccessors(nativeConvolverNode, 'channelCount', get => () => get.call(nativeConvolverNode), set => value => {
      if (value > 2) {
        throw createNotSupportedError();
      }

      return set.call(nativeConvolverNode, value);
    }); // Bug #114: Safari allows to set the channelCountMode to 'max'.

    if (options.channelCountMode === 'max') {
      throw createNotSupportedError();
    }

    overwriteAccessors(nativeConvolverNode, 'channelCountMode', get => () => get.call(nativeConvolverNode), set => value => {
      if (value === 'max') {
        throw createNotSupportedError();
      }

      return set.call(nativeConvolverNode, value);
    });
    return nativeConvolverNode;
  };
};

exports.createNativeConvolverNodeFactory = createNativeConvolverNodeFactory;
},{"../helpers/assign-native-audio-node-option":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js","../helpers/assign-native-audio-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-delay-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeDelayNode = void 0;

var _assignNativeAudioNodeAudioParamValue = require("../helpers/assign-native-audio-node-audio-param-value");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeDelayNode = (nativeContext, options) => {
  const nativeDelayNode = nativeContext.createDelay(options.maxDelayTime);
  (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeDelayNode, options);
  (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeDelayNode, options, 'delayTime');
  return nativeDelayNode;
};

exports.createNativeDelayNode = createNativeDelayNode;
},{"../helpers/assign-native-audio-node-audio-param-value":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","../helpers/assign-native-audio-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-dynamics-compressor-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeDynamicsCompressorNodeFactory = void 0;

var _assignNativeAudioNodeAudioParamValue = require("../helpers/assign-native-audio-node-audio-param-value");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeDynamicsCompressorNodeFactory = createNotSupportedError => {
  return (nativeContext, options) => {
    const nativeDynamicsCompressorNode = nativeContext.createDynamicsCompressor();
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeDynamicsCompressorNode, options); // Bug #108: Safari allows a channelCount of three and above.

    if (options.channelCount > 2) {
      throw createNotSupportedError();
    } // Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max'.


    if (options.channelCountMode === 'max') {
      throw createNotSupportedError();
    }

    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeDynamicsCompressorNode, options, 'attack');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeDynamicsCompressorNode, options, 'knee');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeDynamicsCompressorNode, options, 'ratio');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeDynamicsCompressorNode, options, 'release');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeDynamicsCompressorNode, options, 'threshold');
    return nativeDynamicsCompressorNode;
  };
};

exports.createNativeDynamicsCompressorNodeFactory = createNativeDynamicsCompressorNodeFactory;
},{"../helpers/assign-native-audio-node-audio-param-value":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","../helpers/assign-native-audio-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-gain-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeGainNode = void 0;

var _assignNativeAudioNodeAudioParamValue = require("../helpers/assign-native-audio-node-audio-param-value");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeGainNode = (nativeContext, options) => {
  const nativeGainNode = nativeContext.createGain();
  (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeGainNode, options);
  (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeGainNode, options, 'gain');
  return nativeGainNode;
};

exports.createNativeGainNode = createNativeGainNode;
},{"../helpers/assign-native-audio-node-audio-param-value":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","../helpers/assign-native-audio-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeIIRFilterNodeFactory = void 0;

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeIIRFilterNodeFactory = createNativeIIRFilterNodeFaker => {
  return (nativeContext, baseLatency, options) => {
    // Bug #9: Safari does not support IIRFilterNodes.
    if (nativeContext.createIIRFilter === undefined) {
      return createNativeIIRFilterNodeFaker(nativeContext, baseLatency, options);
    } // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.


    const nativeIIRFilterNode = nativeContext.createIIRFilter(options.feedforward, options.feedback);
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeIIRFilterNode, options);
    return nativeIIRFilterNode;
  };
};

exports.createNativeIIRFilterNodeFactory = createNativeIIRFilterNodeFactory;
},{"../helpers/assign-native-audio-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-faker-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeIIRFilterNodeFakerFactory = void 0;

var _computeBufferSize = require("../helpers/compute-buffer-size");

var _filterBuffer = require("../helpers/filter-buffer");

var _interceptConnections = require("../helpers/intercept-connections");

function divide(a, b) {
  const denominator = b[0] * b[0] + b[1] * b[1];
  return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];
}

function multiply(a, b) {
  return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];
}

function evaluatePolynomial(coefficient, z) {
  let result = [0, 0];

  for (let i = coefficient.length - 1; i >= 0; i -= 1) {
    result = multiply(result, z);
    result[0] += coefficient[i];
  }

  return result;
}

const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) => {
  return (nativeContext, baseLatency, {
    channelCount,
    channelCountMode,
    channelInterpretation,
    feedback,
    feedforward
  }) => {
    const bufferSize = (0, _computeBufferSize.computeBufferSize)(baseLatency, nativeContext.sampleRate);
    const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);
    const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);
    const feedbackLength = convertedFeedback.length;
    const feedforwardLength = convertedFeedforward.length;
    const minLength = Math.min(feedbackLength, feedforwardLength);

    if (feedbackLength === 0 || feedbackLength > 20) {
      throw createNotSupportedError();
    }

    if (convertedFeedback[0] === 0) {
      throw createInvalidStateError();
    }

    if (feedforwardLength === 0 || feedforwardLength > 20) {
      throw createNotSupportedError();
    }

    if (convertedFeedforward[0] === 0) {
      throw createInvalidStateError();
    }

    if (convertedFeedback[0] !== 1) {
      for (let i = 0; i < feedforwardLength; i += 1) {
        convertedFeedforward[i] /= convertedFeedback[0];
      }

      for (let i = 1; i < feedbackLength; i += 1) {
        convertedFeedback[i] /= convertedFeedback[0];
      }
    }

    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);
    scriptProcessorNode.channelCount = channelCount;
    scriptProcessorNode.channelCountMode = channelCountMode;
    scriptProcessorNode.channelInterpretation = channelInterpretation;
    const bufferLength = 32;
    const bufferIndexes = [];
    const xBuffers = [];
    const yBuffers = [];

    for (let i = 0; i < channelCount; i += 1) {
      bufferIndexes.push(0);
      const xBuffer = new Float32Array(bufferLength);
      const yBuffer = new Float32Array(bufferLength);
      xBuffer.fill(0);
      yBuffer.fill(0);
      xBuffers.push(xBuffer);
      yBuffers.push(yBuffer);
    } // tslint:disable-next-line:deprecation


    scriptProcessorNode.onaudioprocess = event => {
      const inputBuffer = event.inputBuffer;
      const outputBuffer = event.outputBuffer;
      const numberOfChannels = inputBuffer.numberOfChannels;

      for (let i = 0; i < numberOfChannels; i += 1) {
        const input = inputBuffer.getChannelData(i);
        const output = outputBuffer.getChannelData(i);
        bufferIndexes[i] = (0, _filterBuffer.filterBuffer)(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);
      }
    };

    const nyquist = nativeContext.sampleRate / 2;
    const nativeIIRFilterNodeFaker = {
      get bufferSize() {
        return bufferSize;
      },

      get channelCount() {
        return scriptProcessorNode.channelCount;
      },

      set channelCount(value) {
        scriptProcessorNode.channelCount = value;
      },

      get channelCountMode() {
        return scriptProcessorNode.channelCountMode;
      },

      set channelCountMode(value) {
        scriptProcessorNode.channelCountMode = value;
      },

      get channelInterpretation() {
        return scriptProcessorNode.channelInterpretation;
      },

      set channelInterpretation(value) {
        scriptProcessorNode.channelInterpretation = value;
      },

      get context() {
        return scriptProcessorNode.context;
      },

      get inputs() {
        return [scriptProcessorNode];
      },

      get numberOfInputs() {
        return scriptProcessorNode.numberOfInputs;
      },

      get numberOfOutputs() {
        return scriptProcessorNode.numberOfOutputs;
      },

      addEventListener(...args) {
        // @todo Dissallow adding an audioprocess listener.
        return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);
      },

      dispatchEvent(...args) {
        return scriptProcessorNode.dispatchEvent(args[0]);
      },

      getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {
        if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {
          throw createInvalidAccessError();
        }

        const length = frequencyHz.length;

        for (let i = 0; i < length; i += 1) {
          const omega = -Math.PI * (frequencyHz[i] / nyquist);
          const z = [Math.cos(omega), Math.sin(omega)];
          const numerator = evaluatePolynomial(convertedFeedforward, z);
          const denominator = evaluatePolynomial(convertedFeedback, z);
          const response = divide(numerator, denominator);
          magResponse[i] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);
          phaseResponse[i] = Math.atan2(response[1], response[0]);
        }
      },

      removeEventListener(...args) {
        return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);
      }

    };
    return (0, _interceptConnections.interceptConnections)(nativeIIRFilterNodeFaker, scriptProcessorNode);
  };
};

exports.createNativeIIRFilterNodeFakerFactory = createNativeIIRFilterNodeFakerFactory;
},{"../helpers/compute-buffer-size":"node_modules/standardized-audio-context/build/es2019/helpers/compute-buffer-size.js","../helpers/filter-buffer":"node_modules/standardized-audio-context/build/es2019/helpers/filter-buffer.js","../helpers/intercept-connections":"node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-media-element-audio-source-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeMediaElementAudioSourceNode = void 0;

const createNativeMediaElementAudioSourceNode = (nativeAudioContext, options) => {
  return nativeAudioContext.createMediaElementSource(options.mediaElement);
};

exports.createNativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-destination-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeMediaStreamAudioDestinationNode = void 0;

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeMediaStreamAudioDestinationNode = (nativeAudioContext, options) => {
  const nativeMediaStreamAudioDestinationNode = nativeAudioContext.createMediaStreamDestination();
  (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeMediaStreamAudioDestinationNode, options); // Bug #174: Safari does expose a wrong numberOfOutputs.

  if (nativeMediaStreamAudioDestinationNode.numberOfOutputs === 1) {
    Object.defineProperty(nativeMediaStreamAudioDestinationNode, 'numberOfOutputs', {
      get: () => 0
    });
  }

  return nativeMediaStreamAudioDestinationNode;
};

exports.createNativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNode;
},{"../helpers/assign-native-audio-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-source-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeMediaStreamAudioSourceNode = void 0;

const createNativeMediaStreamAudioSourceNode = (nativeAudioContext, {
  mediaStream
}) => {
  const audioStreamTracks = mediaStream.getAudioTracks();
  /*
   * Bug #151: Safari does not use the audio track as input anymore if it gets removed from the mediaStream after construction.
   * Bug #159: Safari picks the first audio track if the MediaStream has more than one audio track.
   */

  audioStreamTracks.sort((a, b) => a.id < b.id ? -1 : a.id > b.id ? 1 : 0);
  const filteredAudioStreamTracks = audioStreamTracks.slice(0, 1);
  const nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));
  /*
   * Bug #151 & #159: The given mediaStream gets reconstructed before it gets passed to the native node which is why the accessor needs
   * to be overwritten as it would otherwise expose the reconstructed version.
   */

  Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', {
    value: mediaStream
  });
  return nativeMediaStreamAudioSourceNode;
};

exports.createNativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-track-audio-source-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeMediaStreamTrackAudioSourceNodeFactory = void 0;

const createNativeMediaStreamTrackAudioSourceNodeFactory = (createInvalidStateError, isNativeOfflineAudioContext) => {
  return (nativeAudioContext, {
    mediaStreamTrack
  }) => {
    // Bug #121: Only Firefox does yet support the MediaStreamTrackAudioSourceNode.
    if (typeof nativeAudioContext.createMediaStreamTrackSource === 'function') {
      return nativeAudioContext.createMediaStreamTrackSource(mediaStreamTrack);
    }

    const mediaStream = new MediaStream([mediaStreamTrack]);
    const nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(mediaStream); // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.

    if (mediaStreamTrack.kind !== 'audio') {
      throw createInvalidStateError();
    } // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.


    if (isNativeOfflineAudioContext(nativeAudioContext)) {
      throw new TypeError();
    }

    return nativeMediaStreamAudioSourceNode;
  };
};

exports.createNativeMediaStreamTrackAudioSourceNodeFactory = createNativeMediaStreamTrackAudioSourceNodeFactory;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/native-offline-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeOfflineAudioContextConstructor = void 0;

const createNativeOfflineAudioContextConstructor = window => {
  if (window === null) {
    return null;
  }

  if (window.hasOwnProperty('OfflineAudioContext')) {
    return window.OfflineAudioContext;
  }

  return window.hasOwnProperty('webkitOfflineAudioContext') ? window.webkitOfflineAudioContext : null;
};

exports.createNativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/native-oscillator-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeOscillatorNodeFactory = void 0;

var _assignNativeAudioNodeAudioParamValue = require("../helpers/assign-native-audio-node-audio-param-value");

var _assignNativeAudioNodeOption = require("../helpers/assign-native-audio-node-option");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

var _wrapAudioScheduledSourceNodeStartMethodNegativeParameters = require("../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters");

var _wrapAudioScheduledSourceNodeStopMethodNegativeParameters = require("../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters");

const createNativeOscillatorNodeFactory = (addSilentConnection, cacheTestResult, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {
  return (nativeContext, options) => {
    const nativeOscillatorNode = nativeContext.createOscillator();
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeOscillatorNode, options);
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeOscillatorNode, options, 'detune');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeOscillatorNode, options, 'frequency');

    if (options.periodicWave !== undefined) {
      nativeOscillatorNode.setPeriodicWave(options.periodicWave);
    } else {
      (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeOscillatorNode, options, 'type');
    } // Bug #44: Only Chrome, Edge & Opera throw a RangeError yet.


    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {
      (0, _wrapAudioScheduledSourceNodeStartMethodNegativeParameters.wrapAudioScheduledSourceNodeStartMethodNegativeParameters)(nativeOscillatorNode);
    } // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.


    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {
      wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);
    } // Bug #44: Only Firefox does not throw a RangeError yet.


    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {
      (0, _wrapAudioScheduledSourceNodeStopMethodNegativeParameters.wrapAudioScheduledSourceNodeStopMethodNegativeParameters)(nativeOscillatorNode);
    } // Bug #175: Safari will not fire an ended event if the OscillatorNode is unconnected.


    addSilentConnection(nativeContext, nativeOscillatorNode);
    return nativeOscillatorNode;
  };
};

exports.createNativeOscillatorNodeFactory = createNativeOscillatorNodeFactory;
},{"../helpers/assign-native-audio-node-audio-param-value":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","../helpers/assign-native-audio-node-option":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js","../helpers/assign-native-audio-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js","../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters":"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js","../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters":"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativePannerNodeFactory = void 0;

var _assignNativeAudioNodeAudioParamValue = require("../helpers/assign-native-audio-node-audio-param-value");

var _assignNativeAudioNodeOption = require("../helpers/assign-native-audio-node-option");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativePannerNodeFactory = createNativePannerNodeFaker => {
  return (nativeContext, options) => {
    const nativePannerNode = nativeContext.createPanner(); // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.

    if (nativePannerNode.orientationX === undefined) {
      return createNativePannerNodeFaker(nativeContext, options);
    }

    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativePannerNode, options);
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativePannerNode, options, 'orientationX');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativePannerNode, options, 'orientationY');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativePannerNode, options, 'orientationZ');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativePannerNode, options, 'positionX');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativePannerNode, options, 'positionY');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativePannerNode, options, 'positionZ');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativePannerNode, options, 'coneInnerAngle');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativePannerNode, options, 'coneOuterAngle');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativePannerNode, options, 'coneOuterGain');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativePannerNode, options, 'distanceModel');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativePannerNode, options, 'maxDistance');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativePannerNode, options, 'panningModel');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativePannerNode, options, 'refDistance');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativePannerNode, options, 'rolloffFactor');
    return nativePannerNode;
  };
};

exports.createNativePannerNodeFactory = createNativePannerNodeFactory;
},{"../helpers/assign-native-audio-node-audio-param-value":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","../helpers/assign-native-audio-node-option":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js","../helpers/assign-native-audio-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-faker-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativePannerNodeFakerFactory = void 0;

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

var _interceptConnections = require("../helpers/intercept-connections");

const createNativePannerNodeFakerFactory = (connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, monitorConnections) => {
  return (nativeContext, {
    coneInnerAngle,
    coneOuterAngle,
    coneOuterGain,
    distanceModel,
    maxDistance,
    orientationX,
    orientationY,
    orientationZ,
    panningModel,
    positionX,
    positionY,
    positionZ,
    refDistance,
    rolloffFactor,
    ...audioNodeOptions
  }) => {
    const pannerNode = nativeContext.createPanner(); // Bug #125: Safari does not throw an error yet.

    if (audioNodeOptions.channelCount > 2) {
      throw createNotSupportedError();
    } // Bug #126: Safari does not throw an error yet.


    if (audioNodeOptions.channelCountMode === 'max') {
      throw createNotSupportedError();
    }

    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(pannerNode, audioNodeOptions);
    const SINGLE_CHANNEL_OPTIONS = {
      channelCount: 1,
      channelCountMode: 'explicit',
      channelInterpretation: 'discrete'
    };
    const channelMergerNode = createNativeChannelMergerNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      channelInterpretation: 'speakers',
      numberOfInputs: 6
    });
    const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,
      gain: 1
    });
    const orientationXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 1
    });
    const orientationYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    });
    const orientationZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    });
    const positionXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    });
    const positionYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    });
    const positionZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    });
    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 1);
    const waveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      curve: new Float32Array([1, 1]),
      oversample: 'none'
    });
    let lastOrientation = [orientationX, orientationY, orientationZ];
    let lastPosition = [positionX, positionY, positionZ]; // tslint:disable-next-line:deprecation

    scriptProcessorNode.onaudioprocess = ({
      inputBuffer
    }) => {
      const orientation = [inputBuffer.getChannelData(0)[0], inputBuffer.getChannelData(1)[0], inputBuffer.getChannelData(2)[0]];

      if (orientation.some((value, index) => value !== lastOrientation[index])) {
        pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation

        lastOrientation = orientation;
      }

      const positon = [inputBuffer.getChannelData(3)[0], inputBuffer.getChannelData(4)[0], inputBuffer.getChannelData(5)[0]];

      if (positon.some((value, index) => value !== lastPosition[index])) {
        pannerNode.setPosition(...positon); // tslint:disable-line:deprecation

        lastPosition = positon;
      }
    };

    Object.defineProperty(orientationYGainNode.gain, 'defaultValue', {
      get: () => 0
    });
    Object.defineProperty(orientationZGainNode.gain, 'defaultValue', {
      get: () => 0
    });
    Object.defineProperty(positionXGainNode.gain, 'defaultValue', {
      get: () => 0
    });
    Object.defineProperty(positionYGainNode.gain, 'defaultValue', {
      get: () => 0
    });
    Object.defineProperty(positionZGainNode.gain, 'defaultValue', {
      get: () => 0
    });
    const nativePannerNodeFaker = {
      get bufferSize() {
        return undefined;
      },

      get channelCount() {
        return pannerNode.channelCount;
      },

      set channelCount(value) {
        // Bug #125: Safari does not throw an error yet.
        if (value > 2) {
          throw createNotSupportedError();
        }

        inputGainNode.channelCount = value;
        pannerNode.channelCount = value;
      },

      get channelCountMode() {
        return pannerNode.channelCountMode;
      },

      set channelCountMode(value) {
        // Bug #126: Safari does not throw an error yet.
        if (value === 'max') {
          throw createNotSupportedError();
        }

        inputGainNode.channelCountMode = value;
        pannerNode.channelCountMode = value;
      },

      get channelInterpretation() {
        return pannerNode.channelInterpretation;
      },

      set channelInterpretation(value) {
        inputGainNode.channelInterpretation = value;
        pannerNode.channelInterpretation = value;
      },

      get coneInnerAngle() {
        return pannerNode.coneInnerAngle;
      },

      set coneInnerAngle(value) {
        pannerNode.coneInnerAngle = value;
      },

      get coneOuterAngle() {
        return pannerNode.coneOuterAngle;
      },

      set coneOuterAngle(value) {
        pannerNode.coneOuterAngle = value;
      },

      get coneOuterGain() {
        return pannerNode.coneOuterGain;
      },

      set coneOuterGain(value) {
        // Bug #127: Safari does not throw an InvalidStateError yet.
        if (value < 0 || value > 1) {
          throw createInvalidStateError();
        }

        pannerNode.coneOuterGain = value;
      },

      get context() {
        return pannerNode.context;
      },

      get distanceModel() {
        return pannerNode.distanceModel;
      },

      set distanceModel(value) {
        pannerNode.distanceModel = value;
      },

      get inputs() {
        return [inputGainNode];
      },

      get maxDistance() {
        return pannerNode.maxDistance;
      },

      set maxDistance(value) {
        // Bug #128: Safari does not throw an error yet.
        if (value < 0) {
          throw new RangeError();
        }

        pannerNode.maxDistance = value;
      },

      get numberOfInputs() {
        return pannerNode.numberOfInputs;
      },

      get numberOfOutputs() {
        return pannerNode.numberOfOutputs;
      },

      get orientationX() {
        return orientationXGainNode.gain;
      },

      get orientationY() {
        return orientationYGainNode.gain;
      },

      get orientationZ() {
        return orientationZGainNode.gain;
      },

      get panningModel() {
        return pannerNode.panningModel;
      },

      set panningModel(value) {
        pannerNode.panningModel = value;
      },

      get positionX() {
        return positionXGainNode.gain;
      },

      get positionY() {
        return positionYGainNode.gain;
      },

      get positionZ() {
        return positionZGainNode.gain;
      },

      get refDistance() {
        return pannerNode.refDistance;
      },

      set refDistance(value) {
        // Bug #129: Safari does not throw an error yet.
        if (value < 0) {
          throw new RangeError();
        }

        pannerNode.refDistance = value;
      },

      get rolloffFactor() {
        return pannerNode.rolloffFactor;
      },

      set rolloffFactor(value) {
        // Bug #130: Safari does not throw an error yet.
        if (value < 0) {
          throw new RangeError();
        }

        pannerNode.rolloffFactor = value;
      },

      addEventListener(...args) {
        return inputGainNode.addEventListener(args[0], args[1], args[2]);
      },

      dispatchEvent(...args) {
        return inputGainNode.dispatchEvent(args[0]);
      },

      removeEventListener(...args) {
        return inputGainNode.removeEventListener(args[0], args[1], args[2]);
      }

    };

    if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {
      nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;
    }

    if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {
      nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;
    }

    if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {
      nativePannerNodeFaker.coneOuterGain = coneOuterGain;
    }

    if (distanceModel !== nativePannerNodeFaker.distanceModel) {
      nativePannerNodeFaker.distanceModel = distanceModel;
    }

    if (maxDistance !== nativePannerNodeFaker.maxDistance) {
      nativePannerNodeFaker.maxDistance = maxDistance;
    }

    if (orientationX !== nativePannerNodeFaker.orientationX.value) {
      nativePannerNodeFaker.orientationX.value = orientationX;
    }

    if (orientationY !== nativePannerNodeFaker.orientationY.value) {
      nativePannerNodeFaker.orientationY.value = orientationY;
    }

    if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {
      nativePannerNodeFaker.orientationZ.value = orientationZ;
    }

    if (panningModel !== nativePannerNodeFaker.panningModel) {
      nativePannerNodeFaker.panningModel = panningModel;
    }

    if (positionX !== nativePannerNodeFaker.positionX.value) {
      nativePannerNodeFaker.positionX.value = positionX;
    }

    if (positionY !== nativePannerNodeFaker.positionY.value) {
      nativePannerNodeFaker.positionY.value = positionY;
    }

    if (positionZ !== nativePannerNodeFaker.positionZ.value) {
      nativePannerNodeFaker.positionZ.value = positionZ;
    }

    if (refDistance !== nativePannerNodeFaker.refDistance) {
      nativePannerNodeFaker.refDistance = refDistance;
    }

    if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {
      nativePannerNodeFaker.rolloffFactor = rolloffFactor;
    }

    if (lastOrientation[0] !== 1 || lastOrientation[1] !== 0 || lastOrientation[2] !== 0) {
      pannerNode.setOrientation(...lastOrientation); // tslint:disable-line:deprecation
    }

    if (lastPosition[0] !== 0 || lastPosition[1] !== 0 || lastPosition[2] !== 0) {
      pannerNode.setPosition(...lastPosition); // tslint:disable-line:deprecation
    }

    const whenConnected = () => {
      inputGainNode.connect(pannerNode); // Bug #119: Safari does not fully support the WaveShaperNode.

      connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);
      waveShaperNode.connect(orientationXGainNode).connect(channelMergerNode, 0, 0);
      waveShaperNode.connect(orientationYGainNode).connect(channelMergerNode, 0, 1);
      waveShaperNode.connect(orientationZGainNode).connect(channelMergerNode, 0, 2);
      waveShaperNode.connect(positionXGainNode).connect(channelMergerNode, 0, 3);
      waveShaperNode.connect(positionYGainNode).connect(channelMergerNode, 0, 4);
      waveShaperNode.connect(positionZGainNode).connect(channelMergerNode, 0, 5);
      channelMergerNode.connect(scriptProcessorNode).connect(nativeContext.destination);
    };

    const whenDisconnected = () => {
      inputGainNode.disconnect(pannerNode); // Bug #119: Safari does not fully support the WaveShaperNode.

      disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);
      waveShaperNode.disconnect(orientationXGainNode);
      orientationXGainNode.disconnect(channelMergerNode);
      waveShaperNode.disconnect(orientationYGainNode);
      orientationYGainNode.disconnect(channelMergerNode);
      waveShaperNode.disconnect(orientationZGainNode);
      orientationZGainNode.disconnect(channelMergerNode);
      waveShaperNode.disconnect(positionXGainNode);
      positionXGainNode.disconnect(channelMergerNode);
      waveShaperNode.disconnect(positionYGainNode);
      positionYGainNode.disconnect(channelMergerNode);
      waveShaperNode.disconnect(positionZGainNode);
      positionZGainNode.disconnect(channelMergerNode);
      channelMergerNode.disconnect(scriptProcessorNode);
      scriptProcessorNode.disconnect(nativeContext.destination);
    };

    return monitorConnections((0, _interceptConnections.interceptConnections)(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);
  };
};

exports.createNativePannerNodeFakerFactory = createNativePannerNodeFakerFactory;
},{"../helpers/assign-native-audio-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js","../helpers/intercept-connections":"node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-periodic-wave-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativePeriodicWaveFactory = void 0;

const createNativePeriodicWaveFactory = createIndexSizeError => {
  return (nativeContext, {
    disableNormalization,
    imag,
    real
  }) => {
    // Bug #180: Safari does not allow to use ordinary arrays.
    const convertedImag = imag instanceof Float32Array ? imag : new Float32Array(imag);
    const convertedReal = real instanceof Float32Array ? real : new Float32Array(real);
    const nativePeriodicWave = nativeContext.createPeriodicWave(convertedReal, convertedImag, {
      disableNormalization
    }); // Bug #181: Safari does not throw an IndexSizeError so far if the given arrays have less than two values.

    if (Array.from(imag).length < 2) {
      throw createIndexSizeError();
    }

    return nativePeriodicWave;
  };
};

exports.createNativePeriodicWaveFactory = createNativePeriodicWaveFactory;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/native-script-processor-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeScriptProcessorNode = void 0;

const createNativeScriptProcessorNode = (nativeContext, bufferSize, numberOfInputChannels, numberOfOutputChannels) => {
  return nativeContext.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels);
};

exports.createNativeScriptProcessorNode = createNativeScriptProcessorNode;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeStereoPannerNodeFactory = void 0;

var _assignNativeAudioNodeAudioParamValue = require("../helpers/assign-native-audio-node-audio-param-value");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeStereoPannerNodeFactory = (createNativeStereoPannerNodeFaker, createNotSupportedError) => {
  return (nativeContext, options) => {
    const channelCountMode = options.channelCountMode;
    /*
     * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari
     * which supports it and therefore it can't be supported at all.
     */

    if (channelCountMode === 'clamped-max') {
      throw createNotSupportedError();
    } // Bug #105: Safari does not support the StereoPannerNode.


    if (nativeContext.createStereoPanner === undefined) {
      return createNativeStereoPannerNodeFaker(nativeContext, options);
    }

    const nativeStereoPannerNode = nativeContext.createStereoPanner();
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeStereoPannerNode, options);
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeStereoPannerNode, options, 'pan');
    /*
     * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari
     * which supports it and therefore it can't be supported at all.
     */

    Object.defineProperty(nativeStereoPannerNode, 'channelCountMode', {
      get: () => channelCountMode,
      set: value => {
        if (value !== channelCountMode) {
          throw createNotSupportedError();
        }
      }
    });
    return nativeStereoPannerNode;
  };
};

exports.createNativeStereoPannerNodeFactory = createNativeStereoPannerNodeFactory;
},{"../helpers/assign-native-audio-node-audio-param-value":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","../helpers/assign-native-audio-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-faker-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeStereoPannerNodeFakerFactory = void 0;

var _interceptConnections = require("../helpers/intercept-connections");

const createNativeStereoPannerNodeFakerFactory = (createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections) => {
  // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.
  const CURVE_SIZE = 16385;
  const DC_CURVE = new Float32Array([1, 1]);
  const HALF_PI = Math.PI / 2;
  const SINGLE_CHANNEL_OPTIONS = {
    channelCount: 1,
    channelCountMode: 'explicit',
    channelInterpretation: 'discrete'
  };
  const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = { ...SINGLE_CHANNEL_OPTIONS,
    oversample: 'none'
  };

  const buildInternalGraphForMono = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {
    const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);
    const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);

    for (let i = 0; i < CURVE_SIZE; i += 1) {
      const x = i / (CURVE_SIZE - 1) * HALF_PI;
      leftWaveShaperCurve[i] = Math.cos(x);
      rightWaveShaperCurve[i] = Math.sin(x);
    }

    const leftGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    }); // Bug #119: Safari does not fully support the WaveShaperNode.

    const leftWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: leftWaveShaperCurve
    }); // Bug #119: Safari does not fully support the WaveShaperNode.

    const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: DC_CURVE
    });
    const rightGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    }); // Bug #119: Safari does not fully support the WaveShaperNode.

    const rightWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: rightWaveShaperCurve
    });
    return {
      connectGraph() {
        inputGainNode.connect(leftGainNode);
        inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);
        inputGainNode.connect(rightGainNode);
        panWaveShaperNode.connect(panGainNode);
        panGainNode.connect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);
        panGainNode.connect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);
        leftWaveShaperNode.connect(leftGainNode.gain);
        rightWaveShaperNode.connect(rightGainNode.gain);
        leftGainNode.connect(channelMergerNode, 0, 0);
        rightGainNode.connect(channelMergerNode, 0, 1);
      },

      disconnectGraph() {
        inputGainNode.disconnect(leftGainNode);
        inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);
        inputGainNode.disconnect(rightGainNode);
        panWaveShaperNode.disconnect(panGainNode);
        panGainNode.disconnect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);
        panGainNode.disconnect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);
        leftWaveShaperNode.disconnect(leftGainNode.gain);
        rightWaveShaperNode.disconnect(rightGainNode.gain);
        leftGainNode.disconnect(channelMergerNode, 0, 0);
        rightGainNode.disconnect(channelMergerNode, 0, 1);
      }

    };
  };

  const buildInternalGraphForStereo = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {
    const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
    const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
    const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
    const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
    const centerIndex = Math.floor(CURVE_SIZE / 2);

    for (let i = 0; i < CURVE_SIZE; i += 1) {
      if (i > centerIndex) {
        const x = (i - centerIndex) / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;
        leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);
        leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);
        rightInputForLeftOutputWaveShaperCurve[i] = 0;
        rightInputForRightOutputWaveShaperCurve[i] = 1;
      } else {
        const x = i / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;
        leftInputForLeftOutputWaveShaperCurve[i] = 1;
        leftInputForRightOutputWaveShaperCurve[i] = 0;
        rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);
        rightInputForRightOutputWaveShaperCurve[i] = Math.sin(x);
      }
    }

    const channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {
      channelCount: 2,
      channelCountMode: 'explicit',
      channelInterpretation: 'discrete',
      numberOfOutputs: 2
    });
    const leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    }); // Bug #119: Safari does not fully support the WaveShaperNode.

    const leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: leftInputForLeftOutputWaveShaperCurve
    });
    const leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    }); // Bug #119: Safari does not fully support the WaveShaperNode.

    const leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: leftInputForRightOutputWaveShaperCurve
    }); // Bug #119: Safari does not fully support the WaveShaperNode.

    const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: DC_CURVE
    });
    const rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    }); // Bug #119: Safari does not fully support the WaveShaperNode.

    const rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: rightInputForLeftOutputWaveShaperCurve
    });
    const rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    }); // Bug #119: Safari does not fully support the WaveShaperNode.

    const rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: rightInputForRightOutputWaveShaperCurve
    });
    return {
      connectGraph() {
        inputGainNode.connect(channelSplitterNode);
        inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);
        channelSplitterNode.connect(leftInputForLeftOutputGainNode, 0);
        channelSplitterNode.connect(leftInputForRightOutputGainNode, 0);
        channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);
        channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);
        panWaveShaperNode.connect(panGainNode);
        panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs === undefined ? leftInputForLeftOutputWaveShaperNode : leftInputForLeftOutputWaveShaperNode.inputs[0]);
        panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs === undefined ? leftInputForRightOutputWaveShaperNode : leftInputForRightOutputWaveShaperNode.inputs[0]);
        panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs === undefined ? rightInputForLeftOutputWaveShaperNode : rightInputForLeftOutputWaveShaperNode.inputs[0]);
        panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs === undefined ? rightInputForRightOutputWaveShaperNode : rightInputForRightOutputWaveShaperNode.inputs[0]);
        leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);
        leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);
        rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);
        rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);
        leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);
        rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);
        leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);
        rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);
      },

      disconnectGraph() {
        inputGainNode.disconnect(channelSplitterNode);
        inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);
        channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 0);
        channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 0);
        channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);
        channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);
        panWaveShaperNode.disconnect(panGainNode);
        panGainNode.disconnect(leftInputForLeftOutputWaveShaperNode.inputs === undefined ? leftInputForLeftOutputWaveShaperNode : leftInputForLeftOutputWaveShaperNode.inputs[0]);
        panGainNode.disconnect(leftInputForRightOutputWaveShaperNode.inputs === undefined ? leftInputForRightOutputWaveShaperNode : leftInputForRightOutputWaveShaperNode.inputs[0]);
        panGainNode.disconnect(rightInputForLeftOutputWaveShaperNode.inputs === undefined ? rightInputForLeftOutputWaveShaperNode : rightInputForLeftOutputWaveShaperNode.inputs[0]);
        panGainNode.disconnect(rightInputForRightOutputWaveShaperNode.inputs === undefined ? rightInputForRightOutputWaveShaperNode : rightInputForRightOutputWaveShaperNode.inputs[0]);
        leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);
        leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);
        rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);
        rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);
        leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);
        rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);
        leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);
        rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);
      }

    };
  };

  const buildInternalGraph = (nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) => {
    if (channelCount === 1) {
      return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);
    }

    if (channelCount === 2) {
      return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);
    }

    throw createNotSupportedError();
  };

  return (nativeContext, {
    channelCount,
    channelCountMode,
    pan,
    ...audioNodeOptions
  }) => {
    if (channelCountMode === 'max') {
      throw createNotSupportedError();
    }

    const channelMergerNode = createNativeChannelMergerNode(nativeContext, { ...audioNodeOptions,
      channelCount: 1,
      channelCountMode,
      numberOfInputs: 2
    });
    const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,
      channelCount,
      channelCountMode,
      gain: 1
    });
    const panGainNode = createNativeGainNode(nativeContext, {
      channelCount: 1,
      channelCountMode: 'explicit',
      channelInterpretation: 'discrete',
      gain: pan
    });
    let {
      connectGraph,
      disconnectGraph
    } = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode);
    Object.defineProperty(panGainNode.gain, 'defaultValue', {
      get: () => 0
    });
    Object.defineProperty(panGainNode.gain, 'maxValue', {
      get: () => 1
    });
    Object.defineProperty(panGainNode.gain, 'minValue', {
      get: () => -1
    });
    const nativeStereoPannerNodeFakerFactory = {
      get bufferSize() {
        return undefined;
      },

      get channelCount() {
        return inputGainNode.channelCount;
      },

      set channelCount(value) {
        if (inputGainNode.channelCount !== value) {
          if (isConnected) {
            disconnectGraph();
          }

          ({
            connectGraph,
            disconnectGraph
          } = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode));

          if (isConnected) {
            connectGraph();
          }
        }

        inputGainNode.channelCount = value;
      },

      get channelCountMode() {
        return inputGainNode.channelCountMode;
      },

      set channelCountMode(value) {
        if (value === 'clamped-max' || value === 'max') {
          throw createNotSupportedError();
        }

        inputGainNode.channelCountMode = value;
      },

      get channelInterpretation() {
        return inputGainNode.channelInterpretation;
      },

      set channelInterpretation(value) {
        inputGainNode.channelInterpretation = value;
      },

      get context() {
        return inputGainNode.context;
      },

      get inputs() {
        return [inputGainNode];
      },

      get numberOfInputs() {
        return inputGainNode.numberOfInputs;
      },

      get numberOfOutputs() {
        return inputGainNode.numberOfOutputs;
      },

      get pan() {
        return panGainNode.gain;
      },

      addEventListener(...args) {
        return inputGainNode.addEventListener(args[0], args[1], args[2]);
      },

      dispatchEvent(...args) {
        return inputGainNode.dispatchEvent(args[0]);
      },

      removeEventListener(...args) {
        return inputGainNode.removeEventListener(args[0], args[1], args[2]);
      }

    };
    let isConnected = false;

    const whenConnected = () => {
      connectGraph();
      isConnected = true;
    };

    const whenDisconnected = () => {
      disconnectGraph();
      isConnected = false;
    };

    return monitorConnections((0, _interceptConnections.interceptConnections)(nativeStereoPannerNodeFakerFactory, channelMergerNode), whenConnected, whenDisconnected);
  };
};

exports.createNativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory;
},{"../helpers/intercept-connections":"node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeWaveShaperNodeFactory = void 0;

var _assignNativeAudioNodeOption = require("../helpers/assign-native-audio-node-option");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeWaveShaperNodeFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors) => {
  return (nativeContext, options) => {
    const nativeWaveShaperNode = nativeContext.createWaveShaper();
    /*
     * Bug #119: Safari does not correctly map the values.
     * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of
     * the webkitAudioContext is used as a workaround here. Testing for the automationRate property is necessary because this workaround
     * isn't necessary anymore since v14.0.2 of Safari.
     */

    if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext' && nativeContext.createGain().gain.automationRate === undefined) {
      return createNativeWaveShaperNodeFaker(nativeContext, options);
    }

    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeWaveShaperNode, options);
    const curve = options.curve === null || options.curve instanceof Float32Array ? options.curve : new Float32Array(options.curve); // Bug #104: Chrome, Edge and Opera will throw an InvalidAccessError when the curve has less than two samples.

    if (curve !== null && curve.length < 2) {
      throw createInvalidStateError();
    } // Only values of type Float32Array can be assigned to the curve property.


    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeWaveShaperNode, {
      curve
    }, 'curve');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeWaveShaperNode, options, 'oversample');
    let disconnectNativeAudioBufferSourceNode = null;
    let isConnected = false;
    overwriteAccessors(nativeWaveShaperNode, 'curve', get => () => get.call(nativeWaveShaperNode), set => value => {
      set.call(nativeWaveShaperNode, value);

      if (isConnected) {
        if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {
          disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);
        } else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {
          disconnectNativeAudioBufferSourceNode();
          disconnectNativeAudioBufferSourceNode = null;
        }
      }

      return value;
    });

    const whenConnected = () => {
      isConnected = true;

      if (isDCCurve(nativeWaveShaperNode.curve)) {
        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);
      }
    };

    const whenDisconnected = () => {
      isConnected = false;

      if (disconnectNativeAudioBufferSourceNode !== null) {
        disconnectNativeAudioBufferSourceNode();
        disconnectNativeAudioBufferSourceNode = null;
      }
    };

    return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);
  };
};

exports.createNativeWaveShaperNodeFactory = createNativeWaveShaperNodeFactory;
},{"../helpers/assign-native-audio-node-option":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js","../helpers/assign-native-audio-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-faker-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeWaveShaperNodeFakerFactory = void 0;

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

var _interceptConnections = require("../helpers/intercept-connections");

const createNativeWaveShaperNodeFakerFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections) => {
  return (nativeContext, {
    curve,
    oversample,
    ...audioNodeOptions
  }) => {
    const negativeWaveShaperNode = nativeContext.createWaveShaper();
    const positiveWaveShaperNode = nativeContext.createWaveShaper();
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(negativeWaveShaperNode, audioNodeOptions);
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(positiveWaveShaperNode, audioNodeOptions);
    const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,
      gain: 1
    });
    const invertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,
      gain: -1
    });
    const outputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,
      gain: 1
    });
    const revertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,
      gain: -1
    });
    let disconnectNativeAudioBufferSourceNode = null;
    let isConnected = false;
    let unmodifiedCurve = null;
    const nativeWaveShaperNodeFaker = {
      get bufferSize() {
        return undefined;
      },

      get channelCount() {
        return negativeWaveShaperNode.channelCount;
      },

      set channelCount(value) {
        inputGainNode.channelCount = value;
        invertGainNode.channelCount = value;
        negativeWaveShaperNode.channelCount = value;
        outputGainNode.channelCount = value;
        positiveWaveShaperNode.channelCount = value;
        revertGainNode.channelCount = value;
      },

      get channelCountMode() {
        return negativeWaveShaperNode.channelCountMode;
      },

      set channelCountMode(value) {
        inputGainNode.channelCountMode = value;
        invertGainNode.channelCountMode = value;
        negativeWaveShaperNode.channelCountMode = value;
        outputGainNode.channelCountMode = value;
        positiveWaveShaperNode.channelCountMode = value;
        revertGainNode.channelCountMode = value;
      },

      get channelInterpretation() {
        return negativeWaveShaperNode.channelInterpretation;
      },

      set channelInterpretation(value) {
        inputGainNode.channelInterpretation = value;
        invertGainNode.channelInterpretation = value;
        negativeWaveShaperNode.channelInterpretation = value;
        outputGainNode.channelInterpretation = value;
        positiveWaveShaperNode.channelInterpretation = value;
        revertGainNode.channelInterpretation = value;
      },

      get context() {
        return negativeWaveShaperNode.context;
      },

      get curve() {
        return unmodifiedCurve;
      },

      set curve(value) {
        // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.
        if (value !== null && value.length < 2) {
          throw createInvalidStateError();
        }

        if (value === null) {
          negativeWaveShaperNode.curve = value;
          positiveWaveShaperNode.curve = value;
        } else {
          const curveLength = value.length;
          const negativeCurve = new Float32Array(curveLength + 2 - curveLength % 2);
          const positiveCurve = new Float32Array(curveLength + 2 - curveLength % 2);
          negativeCurve[0] = value[0];
          positiveCurve[0] = -value[curveLength - 1];
          const length = Math.ceil((curveLength + 1) / 2);
          const centerIndex = (curveLength + 1) / 2 - 1;

          for (let i = 1; i < length; i += 1) {
            const theoreticIndex = i / length * centerIndex;
            const lowerIndex = Math.floor(theoreticIndex);
            const upperIndex = Math.ceil(theoreticIndex);
            negativeCurve[i] = lowerIndex === upperIndex ? value[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * value[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * value[upperIndex];
            positiveCurve[i] = lowerIndex === upperIndex ? -value[curveLength - 1 - lowerIndex] : -((1 - (theoreticIndex - lowerIndex)) * value[curveLength - 1 - lowerIndex]) - (1 - (upperIndex - theoreticIndex)) * value[curveLength - 1 - upperIndex];
          }

          negativeCurve[length] = curveLength % 2 === 1 ? value[length - 1] : (value[length - 2] + value[length - 1]) / 2;
          negativeWaveShaperNode.curve = negativeCurve;
          positiveWaveShaperNode.curve = positiveCurve;
        }

        unmodifiedCurve = value;

        if (isConnected) {
          if (isDCCurve(unmodifiedCurve) && disconnectNativeAudioBufferSourceNode === null) {
            disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);
          } else if (disconnectNativeAudioBufferSourceNode !== null) {
            disconnectNativeAudioBufferSourceNode();
            disconnectNativeAudioBufferSourceNode = null;
          }
        }
      },

      get inputs() {
        return [inputGainNode];
      },

      get numberOfInputs() {
        return negativeWaveShaperNode.numberOfInputs;
      },

      get numberOfOutputs() {
        return negativeWaveShaperNode.numberOfOutputs;
      },

      get oversample() {
        return negativeWaveShaperNode.oversample;
      },

      set oversample(value) {
        negativeWaveShaperNode.oversample = value;
        positiveWaveShaperNode.oversample = value;
      },

      addEventListener(...args) {
        return inputGainNode.addEventListener(args[0], args[1], args[2]);
      },

      dispatchEvent(...args) {
        return inputGainNode.dispatchEvent(args[0]);
      },

      removeEventListener(...args) {
        return inputGainNode.removeEventListener(args[0], args[1], args[2]);
      }

    };

    if (curve !== null) {
      // Only values of type Float32Array can be assigned to the curve property.
      nativeWaveShaperNodeFaker.curve = curve instanceof Float32Array ? curve : new Float32Array(curve);
    }

    if (oversample !== nativeWaveShaperNodeFaker.oversample) {
      nativeWaveShaperNodeFaker.oversample = oversample;
    }

    const whenConnected = () => {
      inputGainNode.connect(negativeWaveShaperNode).connect(outputGainNode);
      inputGainNode.connect(invertGainNode).connect(positiveWaveShaperNode).connect(revertGainNode).connect(outputGainNode);
      isConnected = true;

      if (isDCCurve(unmodifiedCurve)) {
        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);
      }
    };

    const whenDisconnected = () => {
      inputGainNode.disconnect(negativeWaveShaperNode);
      negativeWaveShaperNode.disconnect(outputGainNode);
      inputGainNode.disconnect(invertGainNode);
      invertGainNode.disconnect(positiveWaveShaperNode);
      positiveWaveShaperNode.disconnect(revertGainNode);
      revertGainNode.disconnect(outputGainNode);
      isConnected = false;

      if (disconnectNativeAudioBufferSourceNode !== null) {
        disconnectNativeAudioBufferSourceNode();
        disconnectNativeAudioBufferSourceNode = null;
      }
    };

    return monitorConnections((0, _interceptConnections.interceptConnections)(nativeWaveShaperNodeFaker, outputGainNode), whenConnected, whenDisconnected);
  };
};

exports.createNativeWaveShaperNodeFakerFactory = createNativeWaveShaperNodeFakerFactory;
},{"../helpers/assign-native-audio-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js","../helpers/intercept-connections":"node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js"}],"node_modules/standardized-audio-context/build/es2019/factories/not-supported-error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNotSupportedError = void 0;

const createNotSupportedError = () => new DOMException('', 'NotSupportedError');

exports.createNotSupportedError = createNotSupportedError;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/offline-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOfflineAudioContextConstructor = void 0;

var _deactivateAudioGraph = require("../helpers/deactivate-audio-graph");

var _testPromiseSupport = require("../helpers/test-promise-support");

const DEFAULT_OPTIONS = {
  numberOfChannels: 1
};

const createOfflineAudioContextConstructor = (baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering) => {
  return class OfflineAudioContext extends baseAudioContextConstructor {
    constructor(a, b, c) {
      let options;

      if (typeof a === 'number' && b !== undefined && c !== undefined) {
        options = {
          length: b,
          numberOfChannels: a,
          sampleRate: c
        };
      } else if (typeof a === 'object') {
        options = a;
      } else {
        throw new Error('The given parameters are not valid.');
      }

      const {
        length,
        numberOfChannels,
        sampleRate
      } = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate); // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.

      if (!cacheTestResult(_testPromiseSupport.testPromiseSupport, () => (0, _testPromiseSupport.testPromiseSupport)(nativeOfflineAudioContext))) {
        nativeOfflineAudioContext.addEventListener('statechange', (() => {
          let i = 0;

          const delayStateChangeEvent = event => {
            if (this._state === 'running') {
              if (i > 0) {
                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);
                event.stopImmediatePropagation();

                this._waitForThePromiseToSettle(event);
              } else {
                i += 1;
              }
            }
          };

          return delayStateChangeEvent;
        })());
      }

      super(nativeOfflineAudioContext, numberOfChannels);
      this._length = length;
      this._nativeOfflineAudioContext = nativeOfflineAudioContext;
      this._state = null;
    }

    get length() {
      // Bug #17: Safari does not yet expose the length.
      if (this._nativeOfflineAudioContext.length === undefined) {
        return this._length;
      }

      return this._nativeOfflineAudioContext.length;
    }

    get state() {
      return this._state === null ? this._nativeOfflineAudioContext.state : this._state;
    }

    startRendering() {
      /*
       * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore
       * the state of the nativeOfflineAudioContext might no transition to running immediately.
       */
      if (this._state === 'running') {
        return Promise.reject(createInvalidStateError());
      }

      this._state = 'running';
      return startRendering(this.destination, this._nativeOfflineAudioContext).finally(() => {
        this._state = null;
        (0, _deactivateAudioGraph.deactivateAudioGraph)(this);
      });
    }

    _waitForThePromiseToSettle(event) {
      if (this._state === null) {
        this._nativeOfflineAudioContext.dispatchEvent(event);
      } else {
        setTimeout(() => this._waitForThePromiseToSettle(event));
      }
    }

  };
};

exports.createOfflineAudioContextConstructor = createOfflineAudioContextConstructor;
},{"../helpers/deactivate-audio-graph":"node_modules/standardized-audio-context/build/es2019/helpers/deactivate-audio-graph.js","../helpers/test-promise-support":"node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js"}],"node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOscillatorNodeConstructor = void 0;

var _isActiveAudioNode = require("../helpers/is-active-audio-node");

var _setInternalStateToActive = require("../helpers/set-internal-state-to-active");

var _setInternalStateToPassive = require("../helpers/set-internal-state-to-passive");

const DEFAULT_OPTIONS = {
  channelCount: 2,
  channelCountMode: 'max',
  channelInterpretation: 'speakers',
  detune: 0,
  frequency: 440,
  periodicWave: undefined,
  type: 'sine'
};

const createOscillatorNodeConstructor = (audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {
  return class OscillatorNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const oscillatorNodeRenderer = isOffline ? createOscillatorNodeRenderer() : null;
      const nyquist = context.sampleRate / 2;
      super(context, false, nativeOscillatorNode, oscillatorNodeRenderer); // Bug #81: Firefox & Safari do not export the correct values for maxValue and minValue.

      this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600); // Bug #76: Safari does not export the correct values for maxValue and minValue.

      this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);
      this._nativeOscillatorNode = nativeOscillatorNode;
      this._onended = null;
      this._oscillatorNodeRenderer = oscillatorNodeRenderer;

      if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {
        this._oscillatorNodeRenderer.periodicWave = mergedOptions.periodicWave;
      }
    }

    get detune() {
      return this._detune;
    }

    get frequency() {
      return this._frequency;
    }

    get onended() {
      return this._onended;
    }

    set onended(value) {
      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
      this._nativeOscillatorNode.onended = wrappedListener;
      const nativeOnEnded = this._nativeOscillatorNode.onended;
      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;
    }

    get type() {
      return this._nativeOscillatorNode.type;
    }

    set type(value) {
      this._nativeOscillatorNode.type = value;

      if (this._oscillatorNodeRenderer !== null) {
        this._oscillatorNodeRenderer.periodicWave = null;
      }
    }

    setPeriodicWave(periodicWave) {
      this._nativeOscillatorNode.setPeriodicWave(periodicWave);

      if (this._oscillatorNodeRenderer !== null) {
        this._oscillatorNodeRenderer.periodicWave = periodicWave;
      }
    }

    start(when = 0) {
      this._nativeOscillatorNode.start(when);

      if (this._oscillatorNodeRenderer !== null) {
        this._oscillatorNodeRenderer.start = when;
      }

      if (this.context.state !== 'closed') {
        (0, _setInternalStateToActive.setInternalStateToActive)(this);

        const resetInternalStateToPassive = () => {
          this._nativeOscillatorNode.removeEventListener('ended', resetInternalStateToPassive);

          if ((0, _isActiveAudioNode.isActiveAudioNode)(this)) {
            (0, _setInternalStateToPassive.setInternalStateToPassive)(this);
          }
        };

        this._nativeOscillatorNode.addEventListener('ended', resetInternalStateToPassive);
      }
    }

    stop(when = 0) {
      this._nativeOscillatorNode.stop(when);

      if (this._oscillatorNodeRenderer !== null) {
        this._oscillatorNodeRenderer.stop = when;
      }
    }

  };
};

exports.createOscillatorNodeConstructor = createOscillatorNodeConstructor;
},{"../helpers/is-active-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js","../helpers/set-internal-state-to-active":"node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js","../helpers/set-internal-state-to-passive":"node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js"}],"node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOscillatorNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeOscillatorNodes = new WeakMap();
    let periodicWave = null;
    let start = null;
    let stop = null;

    const createOscillatorNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeOscillatorNode = getNativeAudioNode(proxy); // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativeOscillatorNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeOscillatorNode, nativeOfflineAudioContext);

      if (!nativeOscillatorNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeOscillatorNode.channelCount,
          channelCountMode: nativeOscillatorNode.channelCountMode,
          channelInterpretation: nativeOscillatorNode.channelInterpretation,
          detune: nativeOscillatorNode.detune.value,
          frequency: nativeOscillatorNode.frequency.value,
          periodicWave: periodicWave === null ? undefined : periodicWave,
          type: nativeOscillatorNode.type
        };
        nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);

        if (start !== null) {
          nativeOscillatorNode.start(start);
        }

        if (stop !== null) {
          nativeOscillatorNode.stop(stop);
        }
      }

      renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);

      if (!nativeOscillatorNodeIsOwnedByContext) {
        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);
      } else {
        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);
      }

      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode, trace);
      return nativeOscillatorNode;
    };

    return {
      set periodicWave(value) {
        periodicWave = value;
      },

      set start(value) {
        start = value;
      },

      set stop(value) {
        stop = value;
      },

      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);

        if (renderedNativeOscillatorNode !== undefined) {
          return Promise.resolve(renderedNativeOscillatorNode);
        }

        return createOscillatorNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createOscillatorNodeRendererFactory = createOscillatorNodeRendererFactory;
},{"../helpers/is-owned-by-context":"node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"node_modules/standardized-audio-context/build/es2019/factories/panner-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPannerNodeConstructor = void 0;

var _constants = require("../constants");

const DEFAULT_OPTIONS = {
  channelCount: 2,
  channelCountMode: 'clamped-max',
  channelInterpretation: 'speakers',
  coneInnerAngle: 360,
  coneOuterAngle: 360,
  coneOuterGain: 0,
  distanceModel: 'inverse',
  maxDistance: 10000,
  orientationX: 1,
  orientationY: 0,
  orientationZ: 0,
  panningModel: 'equalpower',
  positionX: 0,
  positionY: 0,
  positionZ: 0,
  refDistance: 1,
  rolloffFactor: 1
};

const createPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {
  return class PannerNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const pannerNodeRenderer = isOffline ? createPannerNodeRenderer() : null;
      super(context, false, nativePannerNode, pannerNodeRenderer);
      this._nativePannerNode = nativePannerNode; // Bug #74: Safari does not export the correct values for maxValue and minValue.

      this._orientationX = createAudioParam(this, isOffline, nativePannerNode.orientationX, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT);
      this._orientationY = createAudioParam(this, isOffline, nativePannerNode.orientationY, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT);
      this._orientationZ = createAudioParam(this, isOffline, nativePannerNode.orientationZ, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT);
      this._positionX = createAudioParam(this, isOffline, nativePannerNode.positionX, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT);
      this._positionY = createAudioParam(this, isOffline, nativePannerNode.positionY, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT);
      this._positionZ = createAudioParam(this, isOffline, nativePannerNode.positionZ, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT); // @todo Determine a meaningful tail-time instead of just using one second.

      setAudioNodeTailTime(this, 1);
    }

    get coneInnerAngle() {
      return this._nativePannerNode.coneInnerAngle;
    }

    set coneInnerAngle(value) {
      this._nativePannerNode.coneInnerAngle = value;
    }

    get coneOuterAngle() {
      return this._nativePannerNode.coneOuterAngle;
    }

    set coneOuterAngle(value) {
      this._nativePannerNode.coneOuterAngle = value;
    }

    get coneOuterGain() {
      return this._nativePannerNode.coneOuterGain;
    }

    set coneOuterGain(value) {
      this._nativePannerNode.coneOuterGain = value;
    }

    get distanceModel() {
      return this._nativePannerNode.distanceModel;
    }

    set distanceModel(value) {
      this._nativePannerNode.distanceModel = value;
    }

    get maxDistance() {
      return this._nativePannerNode.maxDistance;
    }

    set maxDistance(value) {
      this._nativePannerNode.maxDistance = value;
    }

    get orientationX() {
      return this._orientationX;
    }

    get orientationY() {
      return this._orientationY;
    }

    get orientationZ() {
      return this._orientationZ;
    }

    get panningModel() {
      return this._nativePannerNode.panningModel;
    }

    set panningModel(value) {
      this._nativePannerNode.panningModel = value;
    }

    get positionX() {
      return this._positionX;
    }

    get positionY() {
      return this._positionY;
    }

    get positionZ() {
      return this._positionZ;
    }

    get refDistance() {
      return this._nativePannerNode.refDistance;
    }

    set refDistance(value) {
      this._nativePannerNode.refDistance = value;
    }

    get rolloffFactor() {
      return this._nativePannerNode.rolloffFactor;
    }

    set rolloffFactor(value) {
      this._nativePannerNode.rolloffFactor = value;
    }

  };
};

exports.createPannerNodeConstructor = createPannerNodeConstructor;
},{"../constants":"node_modules/standardized-audio-context/build/es2019/constants.js"}],"node_modules/standardized-audio-context/build/es2019/factories/panner-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPannerNodeRendererFactory = void 0;

var _nativeAudioNodeFaker = require("../guards/native-audio-node-faker");

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createPannerNodeRendererFactory = (connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {
  return () => {
    const renderedNativeAudioNodes = new WeakMap();
    let renderedBufferPromise = null;

    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeGainNode = null;
      let nativePannerNode = getNativeAudioNode(proxy);
      const commonAudioNodeOptions = {
        channelCount: nativePannerNode.channelCount,
        channelCountMode: nativePannerNode.channelCountMode,
        channelInterpretation: nativePannerNode.channelInterpretation
      };
      const commonNativePannerNodeOptions = { ...commonAudioNodeOptions,
        coneInnerAngle: nativePannerNode.coneInnerAngle,
        coneOuterAngle: nativePannerNode.coneOuterAngle,
        coneOuterGain: nativePannerNode.coneOuterGain,
        distanceModel: nativePannerNode.distanceModel,
        maxDistance: nativePannerNode.maxDistance,
        panningModel: nativePannerNode.panningModel,
        refDistance: nativePannerNode.refDistance,
        rolloffFactor: nativePannerNode.rolloffFactor
      }; // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativePannerNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativePannerNode, nativeOfflineAudioContext); // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.

      if ('bufferSize' in nativePannerNode) {
        nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,
          gain: 1
        });
      } else if (!nativePannerNodeIsOwnedByContext) {
        const options = { ...commonNativePannerNodeOptions,
          orientationX: nativePannerNode.orientationX.value,
          orientationY: nativePannerNode.orientationY.value,
          orientationZ: nativePannerNode.orientationZ.value,
          positionX: nativePannerNode.positionX.value,
          positionY: nativePannerNode.positionY.value,
          positionZ: nativePannerNode.positionZ.value
        };
        nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);
      }

      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);

      if (nativeGainNode !== null) {
        if (renderedBufferPromise === null) {
          if (nativeOfflineAudioContextConstructor === null) {
            throw new Error('Missing the native OfflineAudioContext constructor.');
          }

          const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6, // Bug #17: Safari does not yet expose the length.
          proxy.context.length, nativeOfflineAudioContext.sampleRate);
          const nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {
            channelCount: 1,
            channelCountMode: 'explicit',
            channelInterpretation: 'speakers',
            numberOfInputs: 6
          });
          nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);

          renderedBufferPromise = (async () => {
            const nativeConstantSourceNodes = await Promise.all([proxy.orientationX, proxy.orientationY, proxy.orientationZ, proxy.positionX, proxy.positionY, proxy.positionZ].map(async (audioParam, index) => {
              const nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {
                channelCount: 1,
                channelCountMode: 'explicit',
                channelInterpretation: 'discrete',
                offset: index === 0 ? 1 : 0
              });
              await renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset, trace);
              return nativeConstantSourceNode;
            }));

            for (let i = 0; i < 6; i += 1) {
              nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);
              nativeConstantSourceNodes[i].start(0);
            }

            return renderNativeOfflineAudioContext(partialOfflineAudioContext);
          })();
        }

        const renderedBuffer = await renderedBufferPromise;
        const inputGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,
          gain: 1
        });
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode, trace);
        const channelDatas = [];

        for (let i = 0; i < renderedBuffer.numberOfChannels; i += 1) {
          channelDatas.push(renderedBuffer.getChannelData(i));
        }

        let lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];
        let lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];
        let gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,
          gain: 1
        });
        let partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, { ...commonNativePannerNodeOptions,
          orientationX: lastOrientation[0],
          orientationY: lastOrientation[1],
          orientationZ: lastOrientation[2],
          positionX: lastPosition[0],
          positionY: lastPosition[1],
          positionZ: lastPosition[2]
        });
        inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);
        partialPannerNode.connect(nativeGainNode);

        for (let i = 128; i < renderedBuffer.length; i += 128) {
          const orientation = [channelDatas[0][i], channelDatas[1][i], channelDatas[2][i]];
          const positon = [channelDatas[3][i], channelDatas[4][i], channelDatas[5][i]];

          if (orientation.some((value, index) => value !== lastOrientation[index]) || positon.some((value, index) => value !== lastPosition[index])) {
            lastOrientation = orientation;
            lastPosition = positon;
            const currentTime = i / nativeOfflineAudioContext.sampleRate;
            gateGainNode.gain.setValueAtTime(0, currentTime);
            gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,
              gain: 0
            });
            partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, { ...commonNativePannerNodeOptions,
              orientationX: lastOrientation[0],
              orientationY: lastOrientation[1],
              orientationZ: lastOrientation[2],
              positionX: lastPosition[0],
              positionY: lastPosition[1],
              positionZ: lastPosition[2]
            });
            gateGainNode.gain.setValueAtTime(1, currentTime);
            inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);
            partialPannerNode.connect(nativeGainNode);
          }
        }

        return nativeGainNode;
      }

      if (!nativePannerNodeIsOwnedByContext) {
        await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);
      } else {
        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);
      }

      if ((0, _nativeAudioNodeFaker.isNativeAudioNodeFaker)(nativePannerNode)) {
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0], trace);
      } else {
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode, trace);
      }

      return nativePannerNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);

        if (renderedNativeGainNodeOrNativePannerNode !== undefined) {
          return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);
        }

        return createAudioNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createPannerNodeRendererFactory = createPannerNodeRendererFactory;
},{"../guards/native-audio-node-faker":"node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js","../helpers/is-owned-by-context":"node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"node_modules/standardized-audio-context/build/es2019/factories/periodic-wave-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPeriodicWaveConstructor = void 0;
const DEFAULT_OPTIONS = {
  disableNormalization: false
};

const createPeriodicWaveConstructor = (createNativePeriodicWave, getNativeContext, periodicWaveStore, sanitizePeriodicWaveOptions) => {
  return class PeriodicWave {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = sanitizePeriodicWaveOptions({ ...DEFAULT_OPTIONS,
        ...options
      });
      const periodicWave = createNativePeriodicWave(nativeContext, mergedOptions);
      periodicWaveStore.add(periodicWave); // This does violate all good pratices but it is used here to simplify the handling of periodic waves.

      return periodicWave;
    }

    static [Symbol.hasInstance](instance) {
      return instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === PeriodicWave.prototype || periodicWaveStore.has(instance);
    }

  };
};

exports.createPeriodicWaveConstructor = createPeriodicWaveConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/render-automation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRenderAutomation = void 0;

const createRenderAutomation = (getAudioParamRenderer, renderInputsOfAudioParam) => {
  return (nativeOfflineAudioContext, audioParam, nativeAudioParam, trace) => {
    const audioParamRenderer = getAudioParamRenderer(audioParam);
    audioParamRenderer.replay(nativeAudioParam);
    return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam, trace);
  };
};

exports.createRenderAutomation = createRenderAutomation;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRenderInputsOfAudioNode = void 0;

const createRenderInputsOfAudioNode = (getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) => {
  return async (audioNode, nativeOfflineAudioContext, nativeAudioNode, trace) => {
    const audioNodeConnections = getAudioNodeConnections(audioNode);
    const nextTrace = [...trace, audioNode];
    await Promise.all(audioNodeConnections.activeInputs.map((connections, input) => Array.from(connections).filter(([source]) => !nextTrace.includes(source)).map(async ([source, output]) => {
      const audioNodeRenderer = getAudioNodeRenderer(source);
      const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, nextTrace);
      const destination = audioNode.context.destination;

      if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {
        renderedNativeAudioNode.connect(nativeAudioNode, output, input);
      }
    })).reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));
  };
};

exports.createRenderInputsOfAudioNode = createRenderInputsOfAudioNode;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-param.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRenderInputsOfAudioParam = void 0;

const createRenderInputsOfAudioParam = (getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) => {
  return async (audioParam, nativeOfflineAudioContext, nativeAudioParam, trace) => {
    const audioParamConnections = getAudioParamConnections(audioParam);
    await Promise.all(Array.from(audioParamConnections.activeInputs).map(async ([source, output]) => {
      const audioNodeRenderer = getAudioNodeRenderer(source);
      const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, trace);

      if (!isPartOfACycle(source)) {
        renderedNativeAudioNode.connect(nativeAudioParam, output);
      }
    }));
  };
};

exports.createRenderInputsOfAudioParam = createRenderInputsOfAudioParam;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/render-native-offline-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRenderNativeOfflineAudioContext = void 0;

var _testPromiseSupport = require("../helpers/test-promise-support");

const createRenderNativeOfflineAudioContext = (cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) => {
  return nativeOfflineAudioContext => {
    // Bug #21: Safari does not support promises yet.
    if (cacheTestResult(_testPromiseSupport.testPromiseSupport, () => (0, _testPromiseSupport.testPromiseSupport)(nativeOfflineAudioContext))) {
      // Bug #158: Chrome and Edge do not advance currentTime if it is not accessed while rendering the audio.
      return Promise.resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport)).then(isOfflineAudioContextCurrentTimeSupported => {
        if (!isOfflineAudioContextCurrentTimeSupported) {
          const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);

          nativeOfflineAudioContext.oncomplete = () => {
            scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation

            scriptProcessorNode.disconnect();
          };

          scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation


          scriptProcessorNode.connect(nativeOfflineAudioContext.destination);
        }

        return nativeOfflineAudioContext.startRendering();
      });
    }

    return new Promise(resolve => {
      // Bug #48: Safari does not render an OfflineAudioContext without any connected node.
      const gainNode = createNativeGainNode(nativeOfflineAudioContext, {
        channelCount: 1,
        channelCountMode: 'explicit',
        channelInterpretation: 'discrete',
        gain: 0
      });

      nativeOfflineAudioContext.oncomplete = event => {
        gainNode.disconnect();
        resolve(event.renderedBuffer);
      };

      gainNode.connect(nativeOfflineAudioContext.destination);
      nativeOfflineAudioContext.startRendering();
    });
  };
};

exports.createRenderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext;
},{"../helpers/test-promise-support":"node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js"}],"node_modules/standardized-audio-context/build/es2019/factories/set-active-audio-worklet-node-inputs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSetActiveAudioWorkletNodeInputs = void 0;

const createSetActiveAudioWorkletNodeInputs = activeAudioWorkletNodeInputsStore => {
  return (nativeAudioWorkletNode, activeInputs) => {
    activeAudioWorkletNodeInputsStore.set(nativeAudioWorkletNode, activeInputs);
  };
};

exports.createSetActiveAudioWorkletNodeInputs = createSetActiveAudioWorkletNodeInputs;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/set-audio-node-tail-time.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSetAudioNodeTailTime = void 0;

const createSetAudioNodeTailTime = audioNodeTailTimeStore => {
  return (audioNode, tailTime) => audioNodeTailTimeStore.set(audioNode, tailTime);
};

exports.createSetAudioNodeTailTime = createSetAudioNodeTailTime;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/start-rendering.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStartRendering = void 0;

var _wrapAudioBufferGetChannelDataMethod = require("../helpers/wrap-audio-buffer-get-channel-data-method");

const createStartRendering = (audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {
  const trace = [];
  return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination).render(destination, nativeOfflineAudioContext, trace)
  /*
   * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the
   * destination.
   */
  .then(() => Promise.all(Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map(audioWorkletNode => getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext, trace)))).then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext)).then(audioBuffer => {
    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.
    if (typeof audioBuffer.copyFromChannel !== 'function') {
      wrapAudioBufferCopyChannelMethods(audioBuffer);
      (0, _wrapAudioBufferGetChannelDataMethod.wrapAudioBufferGetChannelDataMethod)(audioBuffer); // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.
    } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {
      wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);
    }

    audioBufferStore.add(audioBuffer);
    return audioBuffer;
  });
};

exports.createStartRendering = createStartRendering;
},{"../helpers/wrap-audio-buffer-get-channel-data-method":"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js"}],"node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStereoPannerNodeConstructor = void 0;
const DEFAULT_OPTIONS = {
  channelCount: 2,

  /*
   * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent
   * behavior.
   */
  channelCountMode: 'explicit',
  channelInterpretation: 'speakers',
  pan: 0
};

const createStereoPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {
  return class StereoPannerNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const stereoPannerNodeRenderer = isOffline ? createStereoPannerNodeRenderer() : null;
      super(context, false, nativeStereoPannerNode, stereoPannerNodeRenderer);
      this._pan = createAudioParam(this, isOffline, nativeStereoPannerNode.pan);
    }

    get pan() {
      return this._pan;
    }

  };
};

exports.createStereoPannerNodeConstructor = createStereoPannerNodeConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStereoPannerNodeRendererFactory = void 0;

var _nativeAudioNodeFaker = require("../guards/native-audio-node-faker");

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeStereoPannerNodes = new WeakMap();

    const createStereoPannerNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeStereoPannerNode = getNativeAudioNode(proxy);
      /*
       * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created
       * again.
       */

      const nativeStereoPannerNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeStereoPannerNode, nativeOfflineAudioContext);

      if (!nativeStereoPannerNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeStereoPannerNode.channelCount,
          channelCountMode: nativeStereoPannerNode.channelCountMode,
          channelInterpretation: nativeStereoPannerNode.channelInterpretation,
          pan: nativeStereoPannerNode.pan.value
        };
        nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);
      }

      renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);

      if (!nativeStereoPannerNodeIsOwnedByContext) {
        await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);
      } else {
        await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);
      }

      if ((0, _nativeAudioNodeFaker.isNativeAudioNodeFaker)(nativeStereoPannerNode)) {
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0], trace);
      } else {
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode, trace);
      }

      return nativeStereoPannerNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);

        if (renderedNativeStereoPannerNode !== undefined) {
          return Promise.resolve(renderedNativeStereoPannerNode);
        }

        return createStereoPannerNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createStereoPannerNodeRendererFactory = createStereoPannerNodeRendererFactory;
},{"../guards/native-audio-node-faker":"node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js","../helpers/is-owned-by-context":"node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-constructor-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioBufferConstructorSupport = void 0;

// Bug #33: Safari exposes an AudioBuffer but it can't be used as a constructor.
const createTestAudioBufferConstructorSupport = nativeAudioBufferConstructor => {
  return () => {
    if (nativeAudioBufferConstructor === null) {
      return false;
    }

    try {
      new nativeAudioBufferConstructor({
        length: 1,
        sampleRate: 44100
      }); // tslint:disable-line:no-unused-expression
    } catch {
      return false;
    }

    return true;
  };
};

exports.createTestAudioBufferConstructorSupport = createTestAudioBufferConstructorSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-copy-channel-methods-subarray-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioBufferCopyChannelMethodsSubarraySupport = void 0;

/*
 * Firefox up to version 67 didn't fully support the copyFromChannel() and copyToChannel() methods. Therefore testing one of those methods
 * is enough to know if the other one is supported as well.
 */
const createTestAudioBufferCopyChannelMethodsSubarraySupport = nativeOfflineAudioContextConstructor => {
  return () => {
    if (nativeOfflineAudioContextConstructor === null) {
      return false;
    }

    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
    const nativeAudioBuffer = nativeOfflineAudioContext.createBuffer(1, 1, 44100); // Bug #5: Safari does not support copyFromChannel() and copyToChannel().

    if (nativeAudioBuffer.copyToChannel === undefined) {
      return true;
    }

    const source = new Float32Array(2);

    try {
      nativeAudioBuffer.copyFromChannel(source, 0, 0);
    } catch {
      return false;
    }

    return true;
  };
};

exports.createTestAudioBufferCopyChannelMethodsSubarraySupport = createTestAudioBufferCopyChannelMethodsSubarraySupport;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-close-method-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioContextCloseMethodSupport = void 0;

const createTestAudioContextCloseMethodSupport = nativeAudioContextConstructor => {
  return () => {
    if (nativeAudioContextConstructor === null) {
      return false;
    } // Try to check the prototype before constructing the AudioContext.


    if (nativeAudioContextConstructor.prototype !== undefined && nativeAudioContextConstructor.prototype.close !== undefined) {
      return true;
    }

    const audioContext = new nativeAudioContextConstructor();
    const isAudioContextClosable = audioContext.close !== undefined;

    try {
      audioContext.close();
    } catch {// Ignore errors.
    }

    return isAudioContextClosable;
  };
};

exports.createTestAudioContextCloseMethodSupport = createTestAudioContextCloseMethodSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-decode-audio-data-method-type-error-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioContextDecodeAudioDataMethodTypeErrorSupport = void 0;

/**
 * Edge up to version 14, Firefox up to version 52, Safari up to version 9 and maybe other browsers
 * did not refuse to decode invalid parameters with a TypeError.
 */
const createTestAudioContextDecodeAudioDataMethodTypeErrorSupport = nativeOfflineAudioContextConstructor => {
  return () => {
    if (nativeOfflineAudioContextConstructor === null) {
      return Promise.resolve(false);
    }

    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100); // Bug #21: Safari does not support promises yet.

    return new Promise(resolve => {
      let isPending = true;

      const resolvePromise = err => {
        if (isPending) {
          isPending = false;
          offlineAudioContext.startRendering();
          resolve(err instanceof TypeError);
        }
      };

      let promise; // Bug #26: Safari throws a synchronous error.

      try {
        promise = offlineAudioContext // Bug #1: Safari requires a successCallback.
        .decodeAudioData(null, () => {// Ignore the success callback.
        }, resolvePromise);
      } catch (err) {
        resolvePromise(err);
      } // Bug #21: Safari does not support promises yet.


      if (promise !== undefined) {
        // Bug #6: Chrome, Edge, Firefox and Opera do not call the errorCallback.
        promise.catch(resolvePromise);
      }
    });
  };
};

exports.createTestAudioContextDecodeAudioDataMethodTypeErrorSupport = createTestAudioContextDecodeAudioDataMethodTypeErrorSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-options-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioContextOptionsSupport = void 0;

const createTestAudioContextOptionsSupport = nativeAudioContextConstructor => {
  return () => {
    if (nativeAudioContextConstructor === null) {
      return false;
    }

    let audioContext;

    try {
      audioContext = new nativeAudioContextConstructor({
        latencyHint: 'balanced'
      });
    } catch {
      return false;
    }

    audioContext.close();
    return true;
  };
};

exports.createTestAudioContextOptionsSupport = createTestAudioContextOptionsSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/test-audio-node-connect-method-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioNodeConnectMethodSupport = void 0;

// Safari up to version 12.0 (but not v12.1) didn't return the destination in case it was an AudioNode.
const createTestAudioNodeConnectMethodSupport = nativeOfflineAudioContextConstructor => {
  return () => {
    if (nativeOfflineAudioContextConstructor === null) {
      return false;
    }

    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
    const nativeGainNode = nativeOfflineAudioContext.createGain();
    const isSupported = nativeGainNode.connect(nativeGainNode) === nativeGainNode;
    nativeGainNode.disconnect(nativeGainNode);
    return isSupported;
  };
};

exports.createTestAudioNodeConnectMethodSupport = createTestAudioNodeConnectMethodSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-no-outputs-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioWorkletProcessorNoOutputsSupport = void 0;

/**
 * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was
 * enabled by default in version 66.
 */
const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {
  return async () => {
    // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.
    if (nativeAudioWorkletNodeConstructor === null) {
      return true;
    }

    if (nativeOfflineAudioContextConstructor === null) {
      return false;
    }

    const blob = new Blob(['class A extends AudioWorkletProcessor{process(){this.port.postMessage(0)}}registerProcessor("a",A)'], {
      type: 'application/javascript; charset=utf-8'
    });
    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 8000);
    const url = URL.createObjectURL(blob);
    let isCallingProcess = false;

    try {
      await offlineAudioContext.audioWorklet.addModule(url);
      const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {
        numberOfOutputs: 0
      });
      const oscillator = offlineAudioContext.createOscillator();

      audioWorkletNode.port.onmessage = () => isCallingProcess = true;

      oscillator.connect(audioWorkletNode);
      oscillator.start(0);
      await offlineAudioContext.startRendering();

      if (!isCallingProcess) {
        await new Promise(resolve => setTimeout(resolve, 5));
      }
    } catch {// Ignore errors.
    } finally {
      URL.revokeObjectURL(url);
    }

    return isCallingProcess;
  };
};

exports.createTestAudioWorkletProcessorNoOutputsSupport = createTestAudioWorkletProcessorNoOutputsSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-post-message-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioWorkletProcessorPostMessageSupport = void 0;

// Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.
const createTestAudioWorkletProcessorPostMessageSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {
  return async () => {
    // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.
    if (nativeAudioWorkletNodeConstructor === null) {
      return true;
    }

    if (nativeOfflineAudioContextConstructor === null) {
      return false;
    }

    const blob = new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor("a",A)'], {
      type: 'application/javascript; charset=utf-8'
    });
    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 8000);
    const url = URL.createObjectURL(blob);
    let isEmittingMessageEvents = false;
    let isEmittingProcessorErrorEvents = false;

    try {
      await offlineAudioContext.audioWorklet.addModule(url);
      const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {
        numberOfOutputs: 0
      });
      const oscillator = offlineAudioContext.createOscillator();

      audioWorkletNode.port.onmessage = () => isEmittingMessageEvents = true;

      audioWorkletNode.onprocessorerror = () => isEmittingProcessorErrorEvents = true;

      oscillator.connect(audioWorkletNode);
      await offlineAudioContext.startRendering();
    } catch {// Ignore errors.
    } finally {
      URL.revokeObjectURL(url);
    }

    return isEmittingMessageEvents && !isEmittingProcessorErrorEvents;
  };
};

exports.createTestAudioWorkletProcessorPostMessageSupport = createTestAudioWorkletProcessorPostMessageSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/test-channel-merger-node-channel-count-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestChannelMergerNodeChannelCountSupport = void 0;

/**
 * Firefox up to version 69 did not throw an error when setting a different channelCount or channelCountMode.
 */
const createTestChannelMergerNodeChannelCountSupport = nativeOfflineAudioContextConstructor => {
  return () => {
    if (nativeOfflineAudioContextConstructor === null) {
      return false;
    }

    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
    const nativeChannelMergerNode = offlineAudioContext.createChannelMerger();
    /**
     * Bug #15: Safari does not return the default properties. It still needs to be patched. This test is supposed to test the support
     * in other browsers.
     */

    if (nativeChannelMergerNode.channelCountMode === 'max') {
      return true;
    }

    try {
      nativeChannelMergerNode.channelCount = 2;
    } catch {
      return true;
    }

    return false;
  };
};

exports.createTestChannelMergerNodeChannelCountSupport = createTestChannelMergerNodeChannelCountSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/test-constant-source-node-accurate-scheduling-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestConstantSourceNodeAccurateSchedulingSupport = void 0;

const createTestConstantSourceNodeAccurateSchedulingSupport = nativeOfflineAudioContextConstructor => {
  return () => {
    if (nativeOfflineAudioContextConstructor === null) {
      return false;
    }

    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100); // Bug #62: Safari does not support ConstantSourceNodes.

    if (nativeOfflineAudioContext.createConstantSource === undefined) {
      return true;
    }

    const nativeConstantSourceNode = nativeOfflineAudioContext.createConstantSource();
    /*
     * @todo This is using bug #75 to detect bug #70. That works because both bugs were unique to
     * the implementation of Firefox right now, but it could probably be done in a better way.
     */

    return nativeConstantSourceNode.offset.maxValue !== Number.POSITIVE_INFINITY;
  };
};

exports.createTestConstantSourceNodeAccurateSchedulingSupport = createTestConstantSourceNodeAccurateSchedulingSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-buffer-reassignability-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestConvolverNodeBufferReassignabilitySupport = void 0;

// Opera up to version 57 did not allow to reassign the buffer of a ConvolverNode.
const createTestConvolverNodeBufferReassignabilitySupport = nativeOfflineAudioContextConstructor => {
  return () => {
    if (nativeOfflineAudioContextConstructor === null) {
      return false;
    }

    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
    const nativeConvolverNode = offlineAudioContext.createConvolver();
    nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);

    try {
      nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);
    } catch {
      return false;
    }

    return true;
  };
};

exports.createTestConvolverNodeBufferReassignabilitySupport = createTestConvolverNodeBufferReassignabilitySupport;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-channel-count-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestConvolverNodeChannelCountSupport = void 0;

// Chrome up to version v80, Edge up to version v80 and Opera up to version v67 did not allow to set the channelCount property of a ConvolverNode to 1. They also did not allow to set the channelCountMode to 'explicit'.
const createTestConvolverNodeChannelCountSupport = nativeOfflineAudioContextConstructor => {
  return () => {
    if (nativeOfflineAudioContextConstructor === null) {
      return false;
    }

    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
    const nativeConvolverNode = offlineAudioContext.createConvolver();

    try {
      nativeConvolverNode.channelCount = 1;
    } catch {
      return false;
    }

    return true;
  };
};

exports.createTestConvolverNodeChannelCountSupport = createTestConvolverNodeChannelCountSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/test-is-secure-context-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestIsSecureContextSupport = void 0;

const createTestIsSecureContextSupport = window => {
  return () => window !== null && window.hasOwnProperty('isSecureContext');
};

exports.createTestIsSecureContextSupport = createTestIsSecureContextSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport = void 0;

// Firefox up to version 68 did not throw an error when creating a MediaStreamAudioSourceNode with a mediaStream that had no audio track.
const createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport = nativeAudioContextConstructor => {
  return () => {
    if (nativeAudioContextConstructor === null) {
      return false;
    }

    const audioContext = new nativeAudioContextConstructor();

    try {
      audioContext.createMediaStreamSource(new MediaStream());
      return false;
    } catch (err) {
      return true;
    }
  };
};

exports.createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport = createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/test-offline-audio-context-current-time-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestOfflineAudioContextCurrentTimeSupport = void 0;

const createTestOfflineAudioContextCurrentTimeSupport = (createNativeGainNode, nativeOfflineAudioContextConstructor) => {
  return () => {
    if (nativeOfflineAudioContextConstructor === null) {
      return Promise.resolve(false);
    }

    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100); // Bug #48: Safari does not render an OfflineAudioContext without any connected node.

    const gainNode = createNativeGainNode(nativeOfflineAudioContext, {
      channelCount: 1,
      channelCountMode: 'explicit',
      channelInterpretation: 'discrete',
      gain: 0
    }); // Bug #21: Safari does not support promises yet.

    return new Promise(resolve => {
      nativeOfflineAudioContext.oncomplete = () => {
        gainNode.disconnect();
        resolve(nativeOfflineAudioContext.currentTime !== 0);
      };

      nativeOfflineAudioContext.startRendering();
    });
  };
};

exports.createTestOfflineAudioContextCurrentTimeSupport = createTestOfflineAudioContextCurrentTimeSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/test-stereo-panner-node-default-value-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestStereoPannerNodeDefaultValueSupport = void 0;

/**
 * Firefox up to version 62 did not kick off the processing of the StereoPannerNode if the value of pan was zero.
 */
const createTestStereoPannerNodeDefaultValueSupport = nativeOfflineAudioContextConstructor => {
  return () => {
    if (nativeOfflineAudioContextConstructor === null) {
      return Promise.resolve(false);
    }

    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
    /*
     * Bug #105: Safari does not support the StereoPannerNode. Therefore the returned value should normally be false but the faker does
     * support the tested behaviour.
     */

    if (nativeOfflineAudioContext.createStereoPanner === undefined) {
      return Promise.resolve(true);
    } // Bug #62: Safari does not support ConstantSourceNodes.


    if (nativeOfflineAudioContext.createConstantSource === undefined) {
      return Promise.resolve(true);
    }

    const constantSourceNode = nativeOfflineAudioContext.createConstantSource();
    const stereoPanner = nativeOfflineAudioContext.createStereoPanner();
    constantSourceNode.channelCount = 1;
    constantSourceNode.offset.value = 1;
    stereoPanner.channelCount = 1;
    constantSourceNode.start();
    constantSourceNode.connect(stereoPanner).connect(nativeOfflineAudioContext.destination);
    return nativeOfflineAudioContext.startRendering().then(buffer => buffer.getChannelData(0)[0] !== 1);
  };
};

exports.createTestStereoPannerNodeDefaultValueSupport = createTestStereoPannerNodeDefaultValueSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/unknown-error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createUnknownError = void 0;

const createUnknownError = () => new DOMException('', 'UnknownError');

exports.createUnknownError = createUnknownError;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWaveShaperNodeConstructor = void 0;
const DEFAULT_OPTIONS = {
  channelCount: 2,
  channelCountMode: 'max',
  channelInterpretation: 'speakers',
  curve: null,
  oversample: 'none'
};

const createWaveShaperNodeConstructor = (audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {
  return class WaveShaperNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const waveShaperNodeRenderer = isOffline ? createWaveShaperNodeRenderer() : null; // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.

      super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);
      this._isCurveNullified = false;
      this._nativeWaveShaperNode = nativeWaveShaperNode; // @todo Determine a meaningful tail-time instead of just using one second.

      setAudioNodeTailTime(this, 1);
    }

    get curve() {
      if (this._isCurveNullified) {
        return null;
      }

      return this._nativeWaveShaperNode.curve;
    }

    set curve(value) {
      // Bug #103: Safari does not allow to set the curve to null.
      if (value === null) {
        this._isCurveNullified = true;
        this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);
      } else {
        // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.
        // Bug #104: Chrome, Edge and Opera will throw an InvalidAccessError when the curve has less than two samples.
        if (value.length < 2) {
          throw createInvalidStateError();
        }

        this._isCurveNullified = false;
        this._nativeWaveShaperNode.curve = value;
      }
    }

    get oversample() {
      return this._nativeWaveShaperNode.oversample;
    }

    set oversample(value) {
      this._nativeWaveShaperNode.oversample = value;
    }

  };
};

exports.createWaveShaperNodeConstructor = createWaveShaperNodeConstructor;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWaveShaperNodeRendererFactory = void 0;

var _nativeAudioNodeFaker = require("../guards/native-audio-node-faker");

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeWaveShaperNodes = new WeakMap();

    const createWaveShaperNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeWaveShaperNode = getNativeAudioNode(proxy); // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativeWaveShaperNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeWaveShaperNode, nativeOfflineAudioContext);

      if (!nativeWaveShaperNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeWaveShaperNode.channelCount,
          channelCountMode: nativeWaveShaperNode.channelCountMode,
          channelInterpretation: nativeWaveShaperNode.channelInterpretation,
          curve: nativeWaveShaperNode.curve,
          oversample: nativeWaveShaperNode.oversample
        };
        nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);
      }

      renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);

      if ((0, _nativeAudioNodeFaker.isNativeAudioNodeFaker)(nativeWaveShaperNode)) {
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0], trace);
      } else {
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode, trace);
      }

      return nativeWaveShaperNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);

        if (renderedNativeWaveShaperNode !== undefined) {
          return Promise.resolve(renderedNativeWaveShaperNode);
        }

        return createWaveShaperNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createWaveShaperNodeRendererFactory = createWaveShaperNodeRendererFactory;
},{"../guards/native-audio-node-faker":"node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js","../helpers/is-owned-by-context":"node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"node_modules/standardized-audio-context/build/es2019/factories/window.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWindow = void 0;

const createWindow = () => typeof window === 'undefined' ? null : window;

exports.createWindow = createWindow;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWrapAudioBufferCopyChannelMethods = void 0;

const createWrapAudioBufferCopyChannelMethods = (convertNumberToUnsignedLong, createIndexSizeError) => {
  return audioBuffer => {
    audioBuffer.copyFromChannel = (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {
      const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);
      const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);

      if (channelNumber >= audioBuffer.numberOfChannels) {
        throw createIndexSizeError();
      }

      const audioBufferLength = audioBuffer.length;
      const channelData = audioBuffer.getChannelData(channelNumber);
      const destinationLength = destination.length;

      for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {
        destination[i] = channelData[i + bufferOffset];
      }
    };

    audioBuffer.copyToChannel = (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {
      const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);
      const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);

      if (channelNumber >= audioBuffer.numberOfChannels) {
        throw createIndexSizeError();
      }

      const audioBufferLength = audioBuffer.length;
      const channelData = audioBuffer.getChannelData(channelNumber);
      const sourceLength = source.length;

      for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {
        channelData[i + bufferOffset] = source[i];
      }
    };
  };
};

exports.createWrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWrapAudioBufferCopyChannelMethodsOutOfBounds = void 0;

const createWrapAudioBufferCopyChannelMethodsOutOfBounds = convertNumberToUnsignedLong => {
  return audioBuffer => {
    audioBuffer.copyFromChannel = (copyFromChannel => {
      return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {
        const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);
        const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);

        if (bufferOffset < audioBuffer.length) {
          return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);
        }
      };
    })(audioBuffer.copyFromChannel);

    audioBuffer.copyToChannel = (copyToChannel => {
      return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {
        const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);
        const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);

        if (bufferOffset < audioBuffer.length) {
          return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);
        }
      };
    })(audioBuffer.copyToChannel);
  };
};

exports.createWrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer = void 0;

const createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer = overwriteAccessors => {
  return (nativeAudioBufferSourceNode, nativeContext) => {
    const nullifiedBuffer = nativeContext.createBuffer(1, 1, 44100);

    if (nativeAudioBufferSourceNode.buffer === null) {
      nativeAudioBufferSourceNode.buffer = nullifiedBuffer;
    }

    overwriteAccessors(nativeAudioBufferSourceNode, 'buffer', get => () => {
      const value = get.call(nativeAudioBufferSourceNode);
      return value === nullifiedBuffer ? null : value;
    }, set => value => {
      return set.call(nativeAudioBufferSourceNode, value === null ? nullifiedBuffer : value);
    });
  };
};

exports.createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer = createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer;
},{}],"node_modules/standardized-audio-context/build/es2019/factories/wrap-channel-merger-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWrapChannelMergerNode = void 0;

const createWrapChannelMergerNode = (createInvalidStateError, monitorConnections) => {
  return (nativeContext, channelMergerNode) => {
    // Bug #15: Safari does not return the default properties.
    channelMergerNode.channelCount = 1;
    channelMergerNode.channelCountMode = 'explicit'; // Bug #16: Safari does not throw an error when setting a different channelCount or channelCountMode.

    Object.defineProperty(channelMergerNode, 'channelCount', {
      get: () => 1,
      set: () => {
        throw createInvalidStateError();
      }
    });
    Object.defineProperty(channelMergerNode, 'channelCountMode', {
      get: () => 'explicit',
      set: () => {
        throw createInvalidStateError();
      }
    }); // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.

    const audioBufferSourceNode = nativeContext.createBufferSource();

    const whenConnected = () => {
      const length = channelMergerNode.numberOfInputs;

      for (let i = 0; i < length; i += 1) {
        audioBufferSourceNode.connect(channelMergerNode, 0, i);
      }
    };

    const whenDisconnected = () => audioBufferSourceNode.disconnect(channelMergerNode);

    monitorConnections(channelMergerNode, whenConnected, whenDisconnected);
  };
};

exports.createWrapChannelMergerNode = createWrapChannelMergerNode;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/is-dc-curve.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDCCurve = void 0;

const isDCCurve = curve => {
  if (curve === null) {
    return false;
  }

  const length = curve.length;

  if (length % 2 !== 0) {
    return curve[Math.floor(length / 2)] !== 0;
  }

  return curve[length / 2 - 1] + curve[length / 2] !== 0;
};

exports.isDCCurve = isDCCurve;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/overwrite-accessors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.overwriteAccessors = void 0;

const overwriteAccessors = (object, property, createGetter, createSetter) => {
  let prototype = Object.getPrototypeOf(object);

  while (!prototype.hasOwnProperty(property)) {
    prototype = Object.getPrototypeOf(prototype);
  }

  const {
    get,
    set
  } = Object.getOwnPropertyDescriptor(prototype, property);
  Object.defineProperty(object, property, {
    get: createGetter(get),
    set: createSetter(set)
  });
};

exports.overwriteAccessors = overwriteAccessors;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/sanitize-audio-worklet-node-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sanitizeAudioWorkletNodeOptions = void 0;

const sanitizeAudioWorkletNodeOptions = options => {
  return { ...options,
    outputChannelCount: options.outputChannelCount !== undefined ? options.outputChannelCount : options.numberOfInputs === 1 && options.numberOfOutputs === 1 ?
    /*
     * Bug #61: This should be the computedNumberOfChannels, but unfortunately that is almost impossible to fake. That's why
     * the channelCountMode is required to be 'explicit' as long as there is not a native implementation in every browser. That
     * makes sure the computedNumberOfChannels is equivilant to the channelCount which makes it much easier to compute.
     */
    [options.channelCount] : Array.from({
      length: options.numberOfOutputs
    }, () => 1)
  };
};

exports.sanitizeAudioWorkletNodeOptions = sanitizeAudioWorkletNodeOptions;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/sanitize-channel-splitter-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sanitizeChannelSplitterOptions = void 0;

const sanitizeChannelSplitterOptions = options => {
  return { ...options,
    channelCount: options.numberOfOutputs
  };
};

exports.sanitizeChannelSplitterOptions = sanitizeChannelSplitterOptions;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/sanitize-periodic-wave-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sanitizePeriodicWaveOptions = void 0;

const sanitizePeriodicWaveOptions = options => {
  const {
    imag,
    real
  } = options;

  if (imag === undefined) {
    if (real === undefined) {
      return { ...options,
        imag: [0, 0],
        real: [0, 0]
      };
    }

    return { ...options,
      imag: Array.from(real, () => 0),
      real
    };
  }

  if (real === undefined) {
    return { ...options,
      imag,
      real: Array.from(imag, () => 0)
    };
  }

  return { ...options,
    imag,
    real
  };
};

exports.sanitizePeriodicWaveOptions = sanitizePeriodicWaveOptions;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/set-value-at-time-until-possible.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setValueAtTimeUntilPossible = void 0;

const setValueAtTimeUntilPossible = (audioParam, value, startTime) => {
  try {
    audioParam.setValueAtTime(value, startTime);
  } catch (err) {
    if (err.code !== 9) {
      throw err;
    }

    setValueAtTimeUntilPossible(audioParam, value, startTime + 1e-7);
  }
};

exports.setValueAtTimeUntilPossible = setValueAtTimeUntilPossible;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = void 0;

const testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = nativeContext => {
  const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
  nativeAudioBufferSourceNode.start();

  try {
    nativeAudioBufferSourceNode.start();
  } catch {
    return true;
  }

  return false;
};

exports.testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-offset-clamping-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testAudioBufferSourceNodeStartMethodOffsetClampingSupport = void 0;

const testAudioBufferSourceNodeStartMethodOffsetClampingSupport = nativeContext => {
  const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
  const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);
  nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;

  try {
    nativeAudioBufferSourceNode.start(0, 1);
  } catch {
    return false;
  }

  return true;
};

exports.testAudioBufferSourceNodeStartMethodOffsetClampingSupport = testAudioBufferSourceNodeStartMethodOffsetClampingSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testAudioBufferSourceNodeStopMethodNullifiedBufferSupport = void 0;

const testAudioBufferSourceNodeStopMethodNullifiedBufferSupport = nativeContext => {
  const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
  nativeAudioBufferSourceNode.start();

  try {
    nativeAudioBufferSourceNode.stop();
  } catch {
    return false;
  }

  return true;
};

exports.testAudioBufferSourceNodeStopMethodNullifiedBufferSupport = testAudioBufferSourceNodeStopMethodNullifiedBufferSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = void 0;

const testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = nativeContext => {
  const nativeAudioBufferSourceNode = nativeContext.createOscillator();

  try {
    nativeAudioBufferSourceNode.start(-1);
  } catch (err) {
    return err instanceof RangeError;
  }

  return false;
};

exports.testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = testAudioScheduledSourceNodeStartMethodNegativeParametersSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = void 0;

const testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = nativeContext => {
  const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);
  const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
  nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;
  nativeAudioBufferSourceNode.start();
  nativeAudioBufferSourceNode.stop();

  try {
    nativeAudioBufferSourceNode.stop();
    return true;
  } catch {
    return false;
  }
};

exports.testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = void 0;

const testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = nativeContext => {
  const nativeAudioBufferSourceNode = nativeContext.createOscillator();

  try {
    nativeAudioBufferSourceNode.stop(-1);
  } catch (err) {
    return err instanceof RangeError;
  }

  return false;
};

exports.testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = testAudioScheduledSourceNodeStopMethodNegativeParametersSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/test-dom-exception-constructor-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testDomExceptionConstructorSupport = void 0;

/*
 * Bug #122: Edge up to version v18 did not allow to construct a DOMException'. It also had a couple more bugs but since this is easy to
 * test it's used here as a placeholder.
 *
 * Bug #27: Edge up to version v18 did reject an invalid arrayBuffer passed to decodeAudioData() with a DOMException.
 *
 * Bug #50: Edge up to version v18 did not allow to create AudioNodes on a closed context.
 *
 * Bug #57: Edge up to version v18 did not throw an error when assigning the type of an OscillatorNode to 'custom'.
 *
 * Bug #63: Edge up to version v18 did not expose the mediaElement property of a MediaElementAudioSourceNode.
 *
 * Bug #64: Edge up to version v18 did not support the MediaStreamAudioDestinationNode.
 *
 * Bug #71: Edge up to version v18 did not allow to set the buffer of an AudioBufferSourceNode to null.
 *
 * Bug #93: Edge up to version v18 did set the sampleRate of an AudioContext to zero when it was closed.
 *
 * Bug #101: Edge up to version v18 refused to execute decodeAudioData() on a closed context.
 *
 * Bug #106: Edge up to version v18 did not expose the maxValue and minValue properties of the pan AudioParam of a StereoPannerNode.
 *
 * Bug #110: Edge up to version v18 did not expose the maxValue and minValue properties of the attack, knee, ratio, release and threshold AudioParams of a DynamicsCompressorNode.
 *
 * Bug #123: Edge up to version v18 did not support HRTF as the panningModel for a PannerNode.
 *
 * Bug #145: Edge up to version v18 did throw an IndexSizeError when an OfflineAudioContext was created with a sampleRate of zero.
 *
 * Bug #161: Edge up to version v18 did not expose the maxValue and minValue properties of the delayTime AudioParam of a DelayNode.
 */
const testDomExceptionConstructorSupport = () => {
  try {
    new DOMException(); // tslint:disable-line:no-unused-expression
  } catch {
    return false;
  }

  return true;
};

exports.testDomExceptionConstructorSupport = testDomExceptionConstructorSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/test-transferables-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testTransferablesSupport = void 0;

// Safari at version 11 did not support transferables.
const testTransferablesSupport = () => new Promise(resolve => {
  const arrayBuffer = new ArrayBuffer(0);
  const {
    port1,
    port2
  } = new MessageChannel();

  port1.onmessage = ({
    data
  }) => resolve(data !== null);

  port2.postMessage(arrayBuffer, [arrayBuffer]);
});

exports.testTransferablesSupport = testTransferablesSupport;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAudioBufferSourceNodeStartMethodOffsetClamping = void 0;

const wrapAudioBufferSourceNodeStartMethodOffsetClamping = nativeAudioBufferSourceNode => {
  nativeAudioBufferSourceNode.start = (start => {
    return (when = 0, offset = 0, duration) => {
      const buffer = nativeAudioBufferSourceNode.buffer; // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.

      const clampedOffset = buffer === null ? offset : Math.min(buffer.duration, offset); // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.

      if (buffer !== null && clampedOffset > buffer.duration - 0.5 / nativeAudioBufferSourceNode.context.sampleRate) {
        start.call(nativeAudioBufferSourceNode, when, 0, 0);
      } else {
        start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);
      }
    };
  })(nativeAudioBufferSourceNode.start);
};

exports.wrapAudioBufferSourceNodeStartMethodOffsetClamping = wrapAudioBufferSourceNodeStartMethodOffsetClamping;
},{}],"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = void 0;

var _interceptConnections = require("./intercept-connections");

const wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = (nativeAudioScheduledSourceNode, nativeContext) => {
  const nativeGainNode = nativeContext.createGain();
  nativeAudioScheduledSourceNode.connect(nativeGainNode);

  const disconnectGainNode = (disconnect => {
    return () => {
      // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.
      disconnect.call(nativeAudioScheduledSourceNode, nativeGainNode);
      nativeAudioScheduledSourceNode.removeEventListener('ended', disconnectGainNode);
    };
  })(nativeAudioScheduledSourceNode.disconnect);

  nativeAudioScheduledSourceNode.addEventListener('ended', disconnectGainNode);
  (0, _interceptConnections.interceptConnections)(nativeAudioScheduledSourceNode, nativeGainNode);

  nativeAudioScheduledSourceNode.stop = (stop => {
    let isStopped = false;
    return (when = 0) => {
      if (isStopped) {
        try {
          stop.call(nativeAudioScheduledSourceNode, when);
        } catch {
          nativeGainNode.gain.setValueAtTime(0, when);
        }
      } else {
        stop.call(nativeAudioScheduledSourceNode, when);
        isStopped = true;
      }
    };
  })(nativeAudioScheduledSourceNode.stop);
};

exports.wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls;
},{"./intercept-connections":"node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js"}],"node_modules/standardized-audio-context/build/es2019/helpers/wrap-event-listener.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapEventListener = void 0;

const wrapEventListener = (target, eventListener) => {
  return event => {
    const descriptor = {
      value: target
    };
    Object.defineProperties(event, {
      currentTarget: descriptor,
      target: descriptor
    });

    if (typeof eventListener === 'function') {
      return eventListener.call(target, event);
    }

    return eventListener.handleEvent.call(target, event);
  };
};

exports.wrapEventListener = wrapEventListener;
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/analyser-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/analyser-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-node-renderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-context-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-destination-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-listener.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-node-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-node-renderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-param.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-param-descriptor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-param-renderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-scheduled-source-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-scheduled-source-node-event-map.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node-event-map.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-processor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-processor-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/automation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/base-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/biquad-filter-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/biquad-filter-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/channel-merger-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/channel-splitter-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/common-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/common-offline-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-node-renderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/convolver-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/convolver-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/delay-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/delay-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/dynamics-compressor-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/dynamics-compressor-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/gain-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/gain-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/iir-filter-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/iir-filter-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/media-element-audio-source-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/media-element-audio-source-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-destination-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-source-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-source-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-track-audio-source-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-track-audio-source-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/minimal-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context-event-map.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/minimal-offline-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/native-audio-node-faker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/native-audio-worklet-node-faker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/native-constant-source-node-faker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/native-convolver-node-faker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/native-iir-filter-node-faker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/native-panner-node-faker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/native-stereo-panner-node-faker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/native-wave-shaper-node-faker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-completion-event.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-node-renderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/panner-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/panner-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave-constraints.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/read-only-map.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/stereo-panner-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/stereo-panner-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/wave-shaper-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/wave-shaper-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/worklet-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/interfaces/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _analyserNode = require("./analyser-node");

Object.keys(_analyserNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _analyserNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _analyserNode[key];
    }
  });
});

var _analyserOptions = require("./analyser-options");

Object.keys(_analyserOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _analyserOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _analyserOptions[key];
    }
  });
});

var _audioBuffer = require("./audio-buffer");

Object.keys(_audioBuffer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioBuffer[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBuffer[key];
    }
  });
});

var _audioBufferOptions = require("./audio-buffer-options");

Object.keys(_audioBufferOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioBufferOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferOptions[key];
    }
  });
});

var _audioBufferSourceNode = require("./audio-buffer-source-node");

Object.keys(_audioBufferSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioBufferSourceNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferSourceNode[key];
    }
  });
});

var _audioBufferSourceNodeRenderer = require("./audio-buffer-source-node-renderer");

Object.keys(_audioBufferSourceNodeRenderer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioBufferSourceNodeRenderer[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferSourceNodeRenderer[key];
    }
  });
});

var _audioBufferSourceOptions = require("./audio-buffer-source-options");

Object.keys(_audioBufferSourceOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioBufferSourceOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferSourceOptions[key];
    }
  });
});

var _audioContext = require("./audio-context");

Object.keys(_audioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioContext[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioContext[key];
    }
  });
});

var _audioContextOptions = require("./audio-context-options");

Object.keys(_audioContextOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioContextOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioContextOptions[key];
    }
  });
});

var _audioDestinationNode = require("./audio-destination-node");

Object.keys(_audioDestinationNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioDestinationNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioDestinationNode[key];
    }
  });
});

var _audioListener = require("./audio-listener");

Object.keys(_audioListener).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioListener[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioListener[key];
    }
  });
});

var _audioNode = require("./audio-node");

Object.keys(_audioNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNode[key];
    }
  });
});

var _audioNodeOptions = require("./audio-node-options");

Object.keys(_audioNodeOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioNodeOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNodeOptions[key];
    }
  });
});

var _audioNodeRenderer = require("./audio-node-renderer");

Object.keys(_audioNodeRenderer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioNodeRenderer[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNodeRenderer[key];
    }
  });
});

var _audioParam = require("./audio-param");

Object.keys(_audioParam).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioParam[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParam[key];
    }
  });
});

var _audioParamDescriptor = require("./audio-param-descriptor");

Object.keys(_audioParamDescriptor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioParamDescriptor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamDescriptor[key];
    }
  });
});

var _audioParamRenderer = require("./audio-param-renderer");

Object.keys(_audioParamRenderer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioParamRenderer[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamRenderer[key];
    }
  });
});

var _audioScheduledSourceNode = require("./audio-scheduled-source-node");

Object.keys(_audioScheduledSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioScheduledSourceNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioScheduledSourceNode[key];
    }
  });
});

var _audioScheduledSourceNodeEventMap = require("./audio-scheduled-source-node-event-map");

Object.keys(_audioScheduledSourceNodeEventMap).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioScheduledSourceNodeEventMap[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioScheduledSourceNodeEventMap[key];
    }
  });
});

var _audioWorklet = require("./audio-worklet");

Object.keys(_audioWorklet).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioWorklet[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorklet[key];
    }
  });
});

var _audioWorkletNode = require("./audio-worklet-node");

Object.keys(_audioWorkletNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioWorkletNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorkletNode[key];
    }
  });
});

var _audioWorkletNodeEventMap = require("./audio-worklet-node-event-map");

Object.keys(_audioWorkletNodeEventMap).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioWorkletNodeEventMap[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorkletNodeEventMap[key];
    }
  });
});

var _audioWorkletNodeOptions = require("./audio-worklet-node-options");

Object.keys(_audioWorkletNodeOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioWorkletNodeOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorkletNodeOptions[key];
    }
  });
});

var _audioWorkletProcessor = require("./audio-worklet-processor");

Object.keys(_audioWorkletProcessor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioWorkletProcessor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorkletProcessor[key];
    }
  });
});

var _audioWorkletProcessorConstructor = require("./audio-worklet-processor-constructor");

Object.keys(_audioWorkletProcessorConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioWorkletProcessorConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorkletProcessorConstructor[key];
    }
  });
});

var _automation = require("./automation");

Object.keys(_automation).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _automation[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _automation[key];
    }
  });
});

var _baseAudioContext = require("./base-audio-context");

Object.keys(_baseAudioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _baseAudioContext[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _baseAudioContext[key];
    }
  });
});

var _biquadFilterNode = require("./biquad-filter-node");

Object.keys(_biquadFilterNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _biquadFilterNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _biquadFilterNode[key];
    }
  });
});

var _biquadFilterOptions = require("./biquad-filter-options");

Object.keys(_biquadFilterOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _biquadFilterOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _biquadFilterOptions[key];
    }
  });
});

var _channelMergerOptions = require("./channel-merger-options");

Object.keys(_channelMergerOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _channelMergerOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelMergerOptions[key];
    }
  });
});

var _channelSplitterOptions = require("./channel-splitter-options");

Object.keys(_channelSplitterOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _channelSplitterOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelSplitterOptions[key];
    }
  });
});

var _commonAudioContext = require("./common-audio-context");

Object.keys(_commonAudioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _commonAudioContext[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _commonAudioContext[key];
    }
  });
});

var _commonOfflineAudioContext = require("./common-offline-audio-context");

Object.keys(_commonOfflineAudioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _commonOfflineAudioContext[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _commonOfflineAudioContext[key];
    }
  });
});

var _constantSourceNode = require("./constant-source-node");

Object.keys(_constantSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _constantSourceNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constantSourceNode[key];
    }
  });
});

var _constantSourceNodeRenderer = require("./constant-source-node-renderer");

Object.keys(_constantSourceNodeRenderer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _constantSourceNodeRenderer[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constantSourceNodeRenderer[key];
    }
  });
});

var _constantSourceOptions = require("./constant-source-options");

Object.keys(_constantSourceOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _constantSourceOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constantSourceOptions[key];
    }
  });
});

var _convolverNode = require("./convolver-node");

Object.keys(_convolverNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _convolverNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _convolverNode[key];
    }
  });
});

var _convolverOptions = require("./convolver-options");

Object.keys(_convolverOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _convolverOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _convolverOptions[key];
    }
  });
});

var _delayNode = require("./delay-node");

Object.keys(_delayNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _delayNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _delayNode[key];
    }
  });
});

var _delayOptions = require("./delay-options");

Object.keys(_delayOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _delayOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _delayOptions[key];
    }
  });
});

var _dynamicsCompressorNode = require("./dynamics-compressor-node");

Object.keys(_dynamicsCompressorNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _dynamicsCompressorNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dynamicsCompressorNode[key];
    }
  });
});

var _dynamicsCompressorOptions = require("./dynamics-compressor-options");

Object.keys(_dynamicsCompressorOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _dynamicsCompressorOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dynamicsCompressorOptions[key];
    }
  });
});

var _gainNode = require("./gain-node");

Object.keys(_gainNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _gainNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _gainNode[key];
    }
  });
});

var _gainOptions = require("./gain-options");

Object.keys(_gainOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _gainOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _gainOptions[key];
    }
  });
});

var _iirFilterNode = require("./iir-filter-node");

Object.keys(_iirFilterNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _iirFilterNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _iirFilterNode[key];
    }
  });
});

var _iirFilterOptions = require("./iir-filter-options");

Object.keys(_iirFilterOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _iirFilterOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _iirFilterOptions[key];
    }
  });
});

var _mediaElementAudioSourceNode = require("./media-element-audio-source-node");

Object.keys(_mediaElementAudioSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _mediaElementAudioSourceNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaElementAudioSourceNode[key];
    }
  });
});

var _mediaElementAudioSourceOptions = require("./media-element-audio-source-options");

Object.keys(_mediaElementAudioSourceOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _mediaElementAudioSourceOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaElementAudioSourceOptions[key];
    }
  });
});

var _mediaStreamAudioDestinationNode = require("./media-stream-audio-destination-node");

Object.keys(_mediaStreamAudioDestinationNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _mediaStreamAudioDestinationNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamAudioDestinationNode[key];
    }
  });
});

var _mediaStreamAudioSourceNode = require("./media-stream-audio-source-node");

Object.keys(_mediaStreamAudioSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _mediaStreamAudioSourceNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamAudioSourceNode[key];
    }
  });
});

var _mediaStreamAudioSourceOptions = require("./media-stream-audio-source-options");

Object.keys(_mediaStreamAudioSourceOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _mediaStreamAudioSourceOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamAudioSourceOptions[key];
    }
  });
});

var _mediaStreamTrackAudioSourceNode = require("./media-stream-track-audio-source-node");

Object.keys(_mediaStreamTrackAudioSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _mediaStreamTrackAudioSourceNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamTrackAudioSourceNode[key];
    }
  });
});

var _mediaStreamTrackAudioSourceOptions = require("./media-stream-track-audio-source-options");

Object.keys(_mediaStreamTrackAudioSourceOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _mediaStreamTrackAudioSourceOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamTrackAudioSourceOptions[key];
    }
  });
});

var _minimalAudioContext = require("./minimal-audio-context");

Object.keys(_minimalAudioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _minimalAudioContext[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalAudioContext[key];
    }
  });
});

var _minimalBaseAudioContext = require("./minimal-base-audio-context");

Object.keys(_minimalBaseAudioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _minimalBaseAudioContext[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalBaseAudioContext[key];
    }
  });
});

var _minimalBaseAudioContextEventMap = require("./minimal-base-audio-context-event-map");

Object.keys(_minimalBaseAudioContextEventMap).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _minimalBaseAudioContextEventMap[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalBaseAudioContextEventMap[key];
    }
  });
});

var _minimalOfflineAudioContext = require("./minimal-offline-audio-context");

Object.keys(_minimalOfflineAudioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _minimalOfflineAudioContext[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalOfflineAudioContext[key];
    }
  });
});

var _nativeAudioNodeFaker = require("./native-audio-node-faker");

Object.keys(_nativeAudioNodeFaker).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioNodeFaker[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioNodeFaker[key];
    }
  });
});

var _nativeAudioWorkletNodeFaker = require("./native-audio-worklet-node-faker");

Object.keys(_nativeAudioWorkletNodeFaker).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioWorkletNodeFaker[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorkletNodeFaker[key];
    }
  });
});

var _nativeConstantSourceNodeFaker = require("./native-constant-source-node-faker");

Object.keys(_nativeConstantSourceNodeFaker).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeConstantSourceNodeFaker[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConstantSourceNodeFaker[key];
    }
  });
});

var _nativeConvolverNodeFaker = require("./native-convolver-node-faker");

Object.keys(_nativeConvolverNodeFaker).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeConvolverNodeFaker[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConvolverNodeFaker[key];
    }
  });
});

var _nativeIirFilterNodeFaker = require("./native-iir-filter-node-faker");

Object.keys(_nativeIirFilterNodeFaker).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeIirFilterNodeFaker[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeIirFilterNodeFaker[key];
    }
  });
});

var _nativePannerNodeFaker = require("./native-panner-node-faker");

Object.keys(_nativePannerNodeFaker).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativePannerNodeFaker[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativePannerNodeFaker[key];
    }
  });
});

var _nativeStereoPannerNodeFaker = require("./native-stereo-panner-node-faker");

Object.keys(_nativeStereoPannerNodeFaker).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeStereoPannerNodeFaker[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeStereoPannerNodeFaker[key];
    }
  });
});

var _nativeWaveShaperNodeFaker = require("./native-wave-shaper-node-faker");

Object.keys(_nativeWaveShaperNodeFaker).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeWaveShaperNodeFaker[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeWaveShaperNodeFaker[key];
    }
  });
});

var _offlineAudioCompletionEvent = require("./offline-audio-completion-event");

Object.keys(_offlineAudioCompletionEvent).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _offlineAudioCompletionEvent[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _offlineAudioCompletionEvent[key];
    }
  });
});

var _offlineAudioContext = require("./offline-audio-context");

Object.keys(_offlineAudioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _offlineAudioContext[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _offlineAudioContext[key];
    }
  });
});

var _offlineAudioContextConstructor = require("./offline-audio-context-constructor");

Object.keys(_offlineAudioContextConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _offlineAudioContextConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _offlineAudioContextConstructor[key];
    }
  });
});

var _offlineAudioContextOptions = require("./offline-audio-context-options");

Object.keys(_offlineAudioContextOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _offlineAudioContextOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _offlineAudioContextOptions[key];
    }
  });
});

var _oscillatorNode = require("./oscillator-node");

Object.keys(_oscillatorNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _oscillatorNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _oscillatorNode[key];
    }
  });
});

var _oscillatorNodeRenderer = require("./oscillator-node-renderer");

Object.keys(_oscillatorNodeRenderer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _oscillatorNodeRenderer[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _oscillatorNodeRenderer[key];
    }
  });
});

var _oscillatorOptions = require("./oscillator-options");

Object.keys(_oscillatorOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _oscillatorOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _oscillatorOptions[key];
    }
  });
});

var _pannerNode = require("./panner-node");

Object.keys(_pannerNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _pannerNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pannerNode[key];
    }
  });
});

var _pannerOptions = require("./panner-options");

Object.keys(_pannerOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _pannerOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pannerOptions[key];
    }
  });
});

var _periodicWave = require("./periodic-wave");

Object.keys(_periodicWave).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _periodicWave[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _periodicWave[key];
    }
  });
});

var _periodicWaveConstraints = require("./periodic-wave-constraints");

Object.keys(_periodicWaveConstraints).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _periodicWaveConstraints[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _periodicWaveConstraints[key];
    }
  });
});

var _periodicWaveOptions = require("./periodic-wave-options");

Object.keys(_periodicWaveOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _periodicWaveOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _periodicWaveOptions[key];
    }
  });
});

var _readOnlyMap = require("./read-only-map");

Object.keys(_readOnlyMap).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _readOnlyMap[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _readOnlyMap[key];
    }
  });
});

var _stereoPannerNode = require("./stereo-panner-node");

Object.keys(_stereoPannerNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _stereoPannerNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stereoPannerNode[key];
    }
  });
});

var _stereoPannerOptions = require("./stereo-panner-options");

Object.keys(_stereoPannerOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _stereoPannerOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stereoPannerOptions[key];
    }
  });
});

var _waveShaperNode = require("./wave-shaper-node");

Object.keys(_waveShaperNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _waveShaperNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _waveShaperNode[key];
    }
  });
});

var _waveShaperOptions = require("./wave-shaper-options");

Object.keys(_waveShaperOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _waveShaperOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _waveShaperOptions[key];
    }
  });
});

var _workletOptions = require("./worklet-options");

Object.keys(_workletOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _workletOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _workletOptions[key];
    }
  });
});
},{"./analyser-node":"node_modules/standardized-audio-context/build/es2019/interfaces/analyser-node.js","./analyser-options":"node_modules/standardized-audio-context/build/es2019/interfaces/analyser-options.js","./audio-buffer":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer.js","./audio-buffer-options":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-options.js","./audio-buffer-source-node":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-node.js","./audio-buffer-source-node-renderer":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-node-renderer.js","./audio-buffer-source-options":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-options.js","./audio-context":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-context.js","./audio-context-options":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-context-options.js","./audio-destination-node":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-destination-node.js","./audio-listener":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-listener.js","./audio-node":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-node.js","./audio-node-options":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-node-options.js","./audio-node-renderer":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-node-renderer.js","./audio-param":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-param.js","./audio-param-descriptor":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-param-descriptor.js","./audio-param-renderer":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-param-renderer.js","./audio-scheduled-source-node":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-scheduled-source-node.js","./audio-scheduled-source-node-event-map":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-scheduled-source-node-event-map.js","./audio-worklet":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet.js","./audio-worklet-node":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node.js","./audio-worklet-node-event-map":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node-event-map.js","./audio-worklet-node-options":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node-options.js","./audio-worklet-processor":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-processor.js","./audio-worklet-processor-constructor":"node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-processor-constructor.js","./automation":"node_modules/standardized-audio-context/build/es2019/interfaces/automation.js","./base-audio-context":"node_modules/standardized-audio-context/build/es2019/interfaces/base-audio-context.js","./biquad-filter-node":"node_modules/standardized-audio-context/build/es2019/interfaces/biquad-filter-node.js","./biquad-filter-options":"node_modules/standardized-audio-context/build/es2019/interfaces/biquad-filter-options.js","./channel-merger-options":"node_modules/standardized-audio-context/build/es2019/interfaces/channel-merger-options.js","./channel-splitter-options":"node_modules/standardized-audio-context/build/es2019/interfaces/channel-splitter-options.js","./common-audio-context":"node_modules/standardized-audio-context/build/es2019/interfaces/common-audio-context.js","./common-offline-audio-context":"node_modules/standardized-audio-context/build/es2019/interfaces/common-offline-audio-context.js","./constant-source-node":"node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-node.js","./constant-source-node-renderer":"node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-node-renderer.js","./constant-source-options":"node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-options.js","./convolver-node":"node_modules/standardized-audio-context/build/es2019/interfaces/convolver-node.js","./convolver-options":"node_modules/standardized-audio-context/build/es2019/interfaces/convolver-options.js","./delay-node":"node_modules/standardized-audio-context/build/es2019/interfaces/delay-node.js","./delay-options":"node_modules/standardized-audio-context/build/es2019/interfaces/delay-options.js","./dynamics-compressor-node":"node_modules/standardized-audio-context/build/es2019/interfaces/dynamics-compressor-node.js","./dynamics-compressor-options":"node_modules/standardized-audio-context/build/es2019/interfaces/dynamics-compressor-options.js","./gain-node":"node_modules/standardized-audio-context/build/es2019/interfaces/gain-node.js","./gain-options":"node_modules/standardized-audio-context/build/es2019/interfaces/gain-options.js","./iir-filter-node":"node_modules/standardized-audio-context/build/es2019/interfaces/iir-filter-node.js","./iir-filter-options":"node_modules/standardized-audio-context/build/es2019/interfaces/iir-filter-options.js","./media-element-audio-source-node":"node_modules/standardized-audio-context/build/es2019/interfaces/media-element-audio-source-node.js","./media-element-audio-source-options":"node_modules/standardized-audio-context/build/es2019/interfaces/media-element-audio-source-options.js","./media-stream-audio-destination-node":"node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-destination-node.js","./media-stream-audio-source-node":"node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-source-node.js","./media-stream-audio-source-options":"node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-source-options.js","./media-stream-track-audio-source-node":"node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-track-audio-source-node.js","./media-stream-track-audio-source-options":"node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-track-audio-source-options.js","./minimal-audio-context":"node_modules/standardized-audio-context/build/es2019/interfaces/minimal-audio-context.js","./minimal-base-audio-context":"node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context.js","./minimal-base-audio-context-event-map":"node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context-event-map.js","./minimal-offline-audio-context":"node_modules/standardized-audio-context/build/es2019/interfaces/minimal-offline-audio-context.js","./native-audio-node-faker":"node_modules/standardized-audio-context/build/es2019/interfaces/native-audio-node-faker.js","./native-audio-worklet-node-faker":"node_modules/standardized-audio-context/build/es2019/interfaces/native-audio-worklet-node-faker.js","./native-constant-source-node-faker":"node_modules/standardized-audio-context/build/es2019/interfaces/native-constant-source-node-faker.js","./native-convolver-node-faker":"node_modules/standardized-audio-context/build/es2019/interfaces/native-convolver-node-faker.js","./native-iir-filter-node-faker":"node_modules/standardized-audio-context/build/es2019/interfaces/native-iir-filter-node-faker.js","./native-panner-node-faker":"node_modules/standardized-audio-context/build/es2019/interfaces/native-panner-node-faker.js","./native-stereo-panner-node-faker":"node_modules/standardized-audio-context/build/es2019/interfaces/native-stereo-panner-node-faker.js","./native-wave-shaper-node-faker":"node_modules/standardized-audio-context/build/es2019/interfaces/native-wave-shaper-node-faker.js","./offline-audio-completion-event":"node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-completion-event.js","./offline-audio-context":"node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context.js","./offline-audio-context-constructor":"node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context-constructor.js","./offline-audio-context-options":"node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context-options.js","./oscillator-node":"node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-node.js","./oscillator-node-renderer":"node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-node-renderer.js","./oscillator-options":"node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-options.js","./panner-node":"node_modules/standardized-audio-context/build/es2019/interfaces/panner-node.js","./panner-options":"node_modules/standardized-audio-context/build/es2019/interfaces/panner-options.js","./periodic-wave":"node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave.js","./periodic-wave-constraints":"node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave-constraints.js","./periodic-wave-options":"node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave-options.js","./read-only-map":"node_modules/standardized-audio-context/build/es2019/interfaces/read-only-map.js","./stereo-panner-node":"node_modules/standardized-audio-context/build/es2019/interfaces/stereo-panner-node.js","./stereo-panner-options":"node_modules/standardized-audio-context/build/es2019/interfaces/stereo-panner-options.js","./wave-shaper-node":"node_modules/standardized-audio-context/build/es2019/interfaces/wave-shaper-node.js","./wave-shaper-options":"node_modules/standardized-audio-context/build/es2019/interfaces/wave-shaper-options.js","./worklet-options":"node_modules/standardized-audio-context/build/es2019/interfaces/worklet-options.js"}],"node_modules/standardized-audio-context/build/es2019/types/abort-error-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/active-audio-worklet-node-inputs-store.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/active-input-connection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/add-active-input-connection-to-audio-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/add-active-input-connection-to-audio-node-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/add-audio-node-connections-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/add-audio-node-connections-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/add-audio-param-connections-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/add-audio-param-connections-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/add-audio-worklet-module-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/add-audio-worklet-module-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/add-connection-to-audio-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/add-connection-to-audio-node-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/add-passive-input-connection-to-audio-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/add-passive-input-connection-to-audio-node-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/add-silent-connection-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/add-silent-connection-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/add-unrendered-audio-worklet-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/add-unrendered-audio-worklet-node-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/analyser-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/analyser-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/analyser-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/analyser-node-renderer-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/any-audio-buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/any-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-buffer-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-buffer-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-buffer-store.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-context-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-context-latency-category.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-context-state.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-listener-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-listener-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-node-connections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-node-connections-store.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-node-output-connection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-node-renderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-node-store.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-node-tail-time-store.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-param-audio-node-store.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-param-connections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-param-connections-store.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-param-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-param-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-param-map.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-param-output-connection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-param-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-param-store.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-renderer-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/backup-offline-audio-context-store.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/base-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/base-audio-context-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-renderer-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/biquad-filter-type.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/channel-count-mode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/channel-interpretation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-renderer-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-renderer-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/cache-test-result-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/cache-test-result-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/connect-audio-param-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/connect-audio-param-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/connect-multiple-outputs-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/connect-multiple-outputs-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/connect-native-audio-node-to-native-audio-node-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/connected-native-audio-buffer-source-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/connected-native-audio-buffer-source-node-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/constant-source-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/constant-source-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/context-store.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/convert-number-to-unsigned-long-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/convert-number-to-unsigned-long-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/convolver-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/convolver-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/convolver-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/convolver-node-renderer-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/create-native-offline-audio-context-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/create-native-offline-audio-context-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/cycle-counters.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/data-clone-error-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/decode-error-callback.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/decode-success-callback.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/decrement-cycle-counter-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/decrement-cycle-counter-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/delay-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/delay-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/delay-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/delay-node-renderer-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/delete-active-input-connection-to-audio-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/delete-active-input-connection-to-audio-node-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/delete-unrendered-audio-worklet-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/delete-unrendered-audio-worklet-node-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/detect-cycles-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/detect-cycles-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/disconnect-multiple-outputs-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/disconnect-multiple-outputs-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/disconnect-native-audio-node-from-native-audio-node-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/distance-model-type.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-renderer-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/encoding-error-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/error-event-handler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/evaluate-audio-worklet-global-scope-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/evaluate-source-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/evaluate-source-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/event-handler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/event-target-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/event-target-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/expose-current-frame-and-current-time-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/expose-current-frame-and-current-time-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/fetch-source-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/fetch-source-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/gain-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/gain-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/gain-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/gain-node-renderer-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-active-audio-worklet-node-inputs-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-active-audio-worklet-node-inputs-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-audio-node-connections-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-audio-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-audio-node-renderer-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-audio-node-tail-time-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-audio-node-tail-time-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-audio-param-connections-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-audio-param-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-audio-param-renderer-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-backup-offline-audio-context-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-backup-offline-audio-context-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-event-listeners-of-audio-node-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-native-audio-node-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-native-audio-param-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-native-context-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-native-context-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-or-create-backup-offline-audio-context-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-or-create-backup-offline-audio-context-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-unrendered-audio-worklet-nodes-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-unrendered-audio-worklet-nodes-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/get-value-for-key-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-renderer-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/index-size-error-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/insert-element-in-set-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/internal-state-event-listener.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/invalid-access-error-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/invalid-state-error-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-active-audio-node-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-any-audio-context-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-any-audio-context-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-any-audio-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-any-audio-node-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-any-audio-param-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-any-audio-param-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-any-offline-audio-context-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-any-offline-audio-context-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-dc-curve-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-native-audio-context-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-native-audio-context-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-native-audio-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-native-audio-node-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-native-audio-param-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-native-audio-param-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-native-context-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-native-context-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-native-offline-audio-context-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-native-offline-audio-context-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-part-of-a-cycle-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-passive-audio-node-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-secure-context-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/is-supported-promise-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/media-element-audio-source-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/media-element-audio-source-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-destination-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-destination-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-source-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-source-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/media-stream-track-audio-source-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/media-stream-track-audio-source-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/minimal-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/minimal-audio-context-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/minimal-base-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/minimal-base-audio-context-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/minimal-offline-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/minimal-offline-audio-context-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/monitor-connections-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/monitor-connections-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-analyser-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-analyser-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-analyser-node-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-context-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-listener.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-param.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-param-map.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-faker-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-faker-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-faker-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-faker-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-convolver-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-delay-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-delay-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-event-target.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-gain-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-gain-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-faker-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-faker-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-panner-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-panner-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-panner-node-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-panner-node-faker-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-panner-node-faker-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-faker-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-faker-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-faker-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-faker-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/not-supported-error-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/offline-audio-context-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/oscillator-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/oscillator-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/oscillator-type.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/output-connection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/over-sample-type.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/overwrite-accessors-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/panner-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/panner-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/panner-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/panner-node-renderer-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/panning-model-type.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/passive-audio-node-input-connection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/passive-audio-param-input-connection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/periodic-wave-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/periodic-wave-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/pick-element-from-set-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/render-automation-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/render-automation-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-node-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-param-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-param-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/render-native-offline-audio-context-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/render-native-offline-audio-context-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/sanitize-audio-worklet-node-options-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/sanitize-channel-splitter-options-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/sanitize-periodic-wave-options-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/set-active-audio-worklet-node-inputs-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/set-active-audio-worklet-node-inputs-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/set-audio-node-tail-time-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/set-audio-node-tail-time-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/set-value-at-time-until-possible-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/start-rendering-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/start-rendering-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-renderer-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-copy-channel-methods-subarray-support-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-constructor-support-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/test-audio-context-close-method-support-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/test-audio-context-decode-audio-data-method-type-error-support-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/test-audio-context-options-support-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/test-audio-node-connect-method-support-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-processor-no-outputs-support-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-processor-post-message-support-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/test-channel-merger-node-channel-count-support-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/test-constant-source-node-accurate-scheduling-support-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/test-convolver-node-buffer-reassignability-support-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/test-convolver-node-channel-count-support-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/test-is-secure-context-support-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/test-offline-audio-context-current-time-support-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/test-stereo-panner-node-default-value-support-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/unknown-error-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/unrendered-audio-worklet-node-store.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/unrendered-audio-worklet-nodes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-constructor-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-renderer-factory-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/window.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/window-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-start-method-offset-clamping-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-stop-method-nullified-buffer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-stop-method-nullified-buffer-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/wrap-audio-scheduled-source-node-stop-method-consecutive-calls-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/wrap-channel-merger-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/wrap-channel-merger-node-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/wrap-event-listener-function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/standardized-audio-context/build/es2019/types/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _abortErrorFactory = require("./abort-error-factory");

Object.keys(_abortErrorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _abortErrorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _abortErrorFactory[key];
    }
  });
});

var _activeAudioWorkletNodeInputsStore = require("./active-audio-worklet-node-inputs-store");

Object.keys(_activeAudioWorkletNodeInputsStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _activeAudioWorkletNodeInputsStore[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _activeAudioWorkletNodeInputsStore[key];
    }
  });
});

var _activeInputConnection = require("./active-input-connection");

Object.keys(_activeInputConnection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _activeInputConnection[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _activeInputConnection[key];
    }
  });
});

var _addActiveInputConnectionToAudioNodeFactory = require("./add-active-input-connection-to-audio-node-factory");

Object.keys(_addActiveInputConnectionToAudioNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _addActiveInputConnectionToAudioNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addActiveInputConnectionToAudioNodeFactory[key];
    }
  });
});

var _addActiveInputConnectionToAudioNodeFunction = require("./add-active-input-connection-to-audio-node-function");

Object.keys(_addActiveInputConnectionToAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _addActiveInputConnectionToAudioNodeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addActiveInputConnectionToAudioNodeFunction[key];
    }
  });
});

var _addAudioNodeConnectionsFactory = require("./add-audio-node-connections-factory");

Object.keys(_addAudioNodeConnectionsFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _addAudioNodeConnectionsFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addAudioNodeConnectionsFactory[key];
    }
  });
});

var _addAudioNodeConnectionsFunction = require("./add-audio-node-connections-function");

Object.keys(_addAudioNodeConnectionsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _addAudioNodeConnectionsFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addAudioNodeConnectionsFunction[key];
    }
  });
});

var _addAudioParamConnectionsFactory = require("./add-audio-param-connections-factory");

Object.keys(_addAudioParamConnectionsFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _addAudioParamConnectionsFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addAudioParamConnectionsFactory[key];
    }
  });
});

var _addAudioParamConnectionsFunction = require("./add-audio-param-connections-function");

Object.keys(_addAudioParamConnectionsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _addAudioParamConnectionsFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addAudioParamConnectionsFunction[key];
    }
  });
});

var _addAudioWorkletModuleFactory = require("./add-audio-worklet-module-factory");

Object.keys(_addAudioWorkletModuleFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _addAudioWorkletModuleFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addAudioWorkletModuleFactory[key];
    }
  });
});

var _addAudioWorkletModuleFunction = require("./add-audio-worklet-module-function");

Object.keys(_addAudioWorkletModuleFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _addAudioWorkletModuleFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addAudioWorkletModuleFunction[key];
    }
  });
});

var _addConnectionToAudioNodeFactory = require("./add-connection-to-audio-node-factory");

Object.keys(_addConnectionToAudioNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _addConnectionToAudioNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addConnectionToAudioNodeFactory[key];
    }
  });
});

var _addConnectionToAudioNodeFunction = require("./add-connection-to-audio-node-function");

Object.keys(_addConnectionToAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _addConnectionToAudioNodeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addConnectionToAudioNodeFunction[key];
    }
  });
});

var _addPassiveInputConnectionToAudioNodeFactory = require("./add-passive-input-connection-to-audio-node-factory");

Object.keys(_addPassiveInputConnectionToAudioNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _addPassiveInputConnectionToAudioNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addPassiveInputConnectionToAudioNodeFactory[key];
    }
  });
});

var _addPassiveInputConnectionToAudioNodeFunction = require("./add-passive-input-connection-to-audio-node-function");

Object.keys(_addPassiveInputConnectionToAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _addPassiveInputConnectionToAudioNodeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addPassiveInputConnectionToAudioNodeFunction[key];
    }
  });
});

var _addSilentConnectionFactory = require("./add-silent-connection-factory");

Object.keys(_addSilentConnectionFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _addSilentConnectionFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addSilentConnectionFactory[key];
    }
  });
});

var _addSilentConnectionFunction = require("./add-silent-connection-function");

Object.keys(_addSilentConnectionFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _addSilentConnectionFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addSilentConnectionFunction[key];
    }
  });
});

var _addUnrenderedAudioWorkletNodeFactory = require("./add-unrendered-audio-worklet-node-factory");

Object.keys(_addUnrenderedAudioWorkletNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _addUnrenderedAudioWorkletNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addUnrenderedAudioWorkletNodeFactory[key];
    }
  });
});

var _addUnrenderedAudioWorkletNodeFunction = require("./add-unrendered-audio-worklet-node-function");

Object.keys(_addUnrenderedAudioWorkletNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _addUnrenderedAudioWorkletNodeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addUnrenderedAudioWorkletNodeFunction[key];
    }
  });
});

var _analyserNodeConstructor = require("./analyser-node-constructor");

Object.keys(_analyserNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _analyserNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _analyserNodeConstructor[key];
    }
  });
});

var _analyserNodeConstructorFactory = require("./analyser-node-constructor-factory");

Object.keys(_analyserNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _analyserNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _analyserNodeConstructorFactory[key];
    }
  });
});

var _analyserNodeRendererFactory = require("./analyser-node-renderer-factory");

Object.keys(_analyserNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _analyserNodeRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _analyserNodeRendererFactory[key];
    }
  });
});

var _analyserNodeRendererFactoryFactory = require("./analyser-node-renderer-factory-factory");

Object.keys(_analyserNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _analyserNodeRendererFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _analyserNodeRendererFactoryFactory[key];
    }
  });
});

var _anyAudioBuffer = require("./any-audio-buffer");

Object.keys(_anyAudioBuffer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _anyAudioBuffer[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _anyAudioBuffer[key];
    }
  });
});

var _anyContext = require("./any-context");

Object.keys(_anyContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _anyContext[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _anyContext[key];
    }
  });
});

var _audioBufferConstructor = require("./audio-buffer-constructor");

Object.keys(_audioBufferConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioBufferConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferConstructor[key];
    }
  });
});

var _audioBufferConstructorFactory = require("./audio-buffer-constructor-factory");

Object.keys(_audioBufferConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioBufferConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferConstructorFactory[key];
    }
  });
});

var _audioBufferSourceNodeConstructor = require("./audio-buffer-source-node-constructor");

Object.keys(_audioBufferSourceNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioBufferSourceNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferSourceNodeConstructor[key];
    }
  });
});

var _audioBufferSourceNodeConstructorFactory = require("./audio-buffer-source-node-constructor-factory");

Object.keys(_audioBufferSourceNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioBufferSourceNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferSourceNodeConstructorFactory[key];
    }
  });
});

var _audioBufferSourceNodeRenderer = require("./audio-buffer-source-node-renderer");

Object.keys(_audioBufferSourceNodeRenderer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioBufferSourceNodeRenderer[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferSourceNodeRenderer[key];
    }
  });
});

var _audioBufferSourceNodeRendererFactory = require("./audio-buffer-source-node-renderer-factory");

Object.keys(_audioBufferSourceNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioBufferSourceNodeRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferSourceNodeRendererFactory[key];
    }
  });
});

var _audioBufferSourceNodeRendererFactoryFactory = require("./audio-buffer-source-node-renderer-factory-factory");

Object.keys(_audioBufferSourceNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioBufferSourceNodeRendererFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferSourceNodeRendererFactoryFactory[key];
    }
  });
});

var _audioBufferStore = require("./audio-buffer-store");

Object.keys(_audioBufferStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioBufferStore[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferStore[key];
    }
  });
});

var _audioContextConstructor = require("./audio-context-constructor");

Object.keys(_audioContextConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioContextConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioContextConstructor[key];
    }
  });
});

var _audioContextConstructorFactory = require("./audio-context-constructor-factory");

Object.keys(_audioContextConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioContextConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioContextConstructorFactory[key];
    }
  });
});

var _audioContextLatencyCategory = require("./audio-context-latency-category");

Object.keys(_audioContextLatencyCategory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioContextLatencyCategory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioContextLatencyCategory[key];
    }
  });
});

var _audioContextState = require("./audio-context-state");

Object.keys(_audioContextState).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioContextState[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioContextState[key];
    }
  });
});

var _audioDestinationNodeConstructor = require("./audio-destination-node-constructor");

Object.keys(_audioDestinationNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioDestinationNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioDestinationNodeConstructor[key];
    }
  });
});

var _audioDestinationNodeConstructorFactory = require("./audio-destination-node-constructor-factory");

Object.keys(_audioDestinationNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioDestinationNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioDestinationNodeConstructorFactory[key];
    }
  });
});

var _audioDestinationNodeRendererFactory = require("./audio-destination-node-renderer-factory");

Object.keys(_audioDestinationNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioDestinationNodeRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioDestinationNodeRendererFactory[key];
    }
  });
});

var _audioListenerFactory = require("./audio-listener-factory");

Object.keys(_audioListenerFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioListenerFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioListenerFactory[key];
    }
  });
});

var _audioListenerFactoryFactory = require("./audio-listener-factory-factory");

Object.keys(_audioListenerFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioListenerFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioListenerFactoryFactory[key];
    }
  });
});

var _audioNodeConnections = require("./audio-node-connections");

Object.keys(_audioNodeConnections).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioNodeConnections[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNodeConnections[key];
    }
  });
});

var _audioNodeConnectionsStore = require("./audio-node-connections-store");

Object.keys(_audioNodeConnectionsStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioNodeConnectionsStore[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNodeConnectionsStore[key];
    }
  });
});

var _audioNodeConstructor = require("./audio-node-constructor");

Object.keys(_audioNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNodeConstructor[key];
    }
  });
});

var _audioNodeConstructorFactory = require("./audio-node-constructor-factory");

Object.keys(_audioNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNodeConstructorFactory[key];
    }
  });
});

var _audioNodeOutputConnection = require("./audio-node-output-connection");

Object.keys(_audioNodeOutputConnection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioNodeOutputConnection[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNodeOutputConnection[key];
    }
  });
});

var _audioNodeRenderer = require("./audio-node-renderer");

Object.keys(_audioNodeRenderer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioNodeRenderer[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNodeRenderer[key];
    }
  });
});

var _audioNodeStore = require("./audio-node-store");

Object.keys(_audioNodeStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioNodeStore[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNodeStore[key];
    }
  });
});

var _audioNodeTailTimeStore = require("./audio-node-tail-time-store");

Object.keys(_audioNodeTailTimeStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioNodeTailTimeStore[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNodeTailTimeStore[key];
    }
  });
});

var _audioParamAudioNodeStore = require("./audio-param-audio-node-store");

Object.keys(_audioParamAudioNodeStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioParamAudioNodeStore[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamAudioNodeStore[key];
    }
  });
});

var _audioParamConnections = require("./audio-param-connections");

Object.keys(_audioParamConnections).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioParamConnections[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamConnections[key];
    }
  });
});

var _audioParamConnectionsStore = require("./audio-param-connections-store");

Object.keys(_audioParamConnectionsStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioParamConnectionsStore[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamConnectionsStore[key];
    }
  });
});

var _audioParamFactory = require("./audio-param-factory");

Object.keys(_audioParamFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioParamFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamFactory[key];
    }
  });
});

var _audioParamFactoryFactory = require("./audio-param-factory-factory");

Object.keys(_audioParamFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioParamFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamFactoryFactory[key];
    }
  });
});

var _audioParamMap = require("./audio-param-map");

Object.keys(_audioParamMap).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioParamMap[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamMap[key];
    }
  });
});

var _audioParamOutputConnection = require("./audio-param-output-connection");

Object.keys(_audioParamOutputConnection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioParamOutputConnection[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamOutputConnection[key];
    }
  });
});

var _audioParamRendererFactory = require("./audio-param-renderer-factory");

Object.keys(_audioParamRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioParamRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamRendererFactory[key];
    }
  });
});

var _audioParamStore = require("./audio-param-store");

Object.keys(_audioParamStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioParamStore[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamStore[key];
    }
  });
});

var _audioWorkletNodeConstructor = require("./audio-worklet-node-constructor");

Object.keys(_audioWorkletNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioWorkletNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorkletNodeConstructor[key];
    }
  });
});

var _audioWorkletNodeConstructorFactory = require("./audio-worklet-node-constructor-factory");

Object.keys(_audioWorkletNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioWorkletNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorkletNodeConstructorFactory[key];
    }
  });
});

var _audioWorkletNodeRendererFactory = require("./audio-worklet-node-renderer-factory");

Object.keys(_audioWorkletNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioWorkletNodeRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorkletNodeRendererFactory[key];
    }
  });
});

var _audioWorkletNodeRendererFactoryFactory = require("./audio-worklet-node-renderer-factory-factory");

Object.keys(_audioWorkletNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _audioWorkletNodeRendererFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorkletNodeRendererFactoryFactory[key];
    }
  });
});

var _backupOfflineAudioContextStore = require("./backup-offline-audio-context-store");

Object.keys(_backupOfflineAudioContextStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _backupOfflineAudioContextStore[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _backupOfflineAudioContextStore[key];
    }
  });
});

var _baseAudioContextConstructor = require("./base-audio-context-constructor");

Object.keys(_baseAudioContextConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _baseAudioContextConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _baseAudioContextConstructor[key];
    }
  });
});

var _baseAudioContextConstructorFactory = require("./base-audio-context-constructor-factory");

Object.keys(_baseAudioContextConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _baseAudioContextConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _baseAudioContextConstructorFactory[key];
    }
  });
});

var _biquadFilterNodeConstructor = require("./biquad-filter-node-constructor");

Object.keys(_biquadFilterNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _biquadFilterNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _biquadFilterNodeConstructor[key];
    }
  });
});

var _biquadFilterNodeConstructorFactory = require("./biquad-filter-node-constructor-factory");

Object.keys(_biquadFilterNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _biquadFilterNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _biquadFilterNodeConstructorFactory[key];
    }
  });
});

var _biquadFilterNodeRendererFactory = require("./biquad-filter-node-renderer-factory");

Object.keys(_biquadFilterNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _biquadFilterNodeRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _biquadFilterNodeRendererFactory[key];
    }
  });
});

var _biquadFilterNodeRendererFactoryFactory = require("./biquad-filter-node-renderer-factory-factory");

Object.keys(_biquadFilterNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _biquadFilterNodeRendererFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _biquadFilterNodeRendererFactoryFactory[key];
    }
  });
});

var _biquadFilterType = require("./biquad-filter-type");

Object.keys(_biquadFilterType).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _biquadFilterType[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _biquadFilterType[key];
    }
  });
});

var _channelCountMode = require("./channel-count-mode");

Object.keys(_channelCountMode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _channelCountMode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelCountMode[key];
    }
  });
});

var _channelInterpretation = require("./channel-interpretation");

Object.keys(_channelInterpretation).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _channelInterpretation[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelInterpretation[key];
    }
  });
});

var _channelMergerNodeConstructor = require("./channel-merger-node-constructor");

Object.keys(_channelMergerNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _channelMergerNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelMergerNodeConstructor[key];
    }
  });
});

var _channelMergerNodeConstructorFactory = require("./channel-merger-node-constructor-factory");

Object.keys(_channelMergerNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _channelMergerNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelMergerNodeConstructorFactory[key];
    }
  });
});

var _channelMergerNodeRendererFactory = require("./channel-merger-node-renderer-factory");

Object.keys(_channelMergerNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _channelMergerNodeRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelMergerNodeRendererFactory[key];
    }
  });
});

var _channelMergerNodeRendererFactoryFactory = require("./channel-merger-node-renderer-factory-factory");

Object.keys(_channelMergerNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _channelMergerNodeRendererFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelMergerNodeRendererFactoryFactory[key];
    }
  });
});

var _channelSplitterNodeConstructor = require("./channel-splitter-node-constructor");

Object.keys(_channelSplitterNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _channelSplitterNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelSplitterNodeConstructor[key];
    }
  });
});

var _channelSplitterNodeConstructorFactory = require("./channel-splitter-node-constructor-factory");

Object.keys(_channelSplitterNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _channelSplitterNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelSplitterNodeConstructorFactory[key];
    }
  });
});

var _channelSplitterNodeRendererFactory = require("./channel-splitter-node-renderer-factory");

Object.keys(_channelSplitterNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _channelSplitterNodeRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelSplitterNodeRendererFactory[key];
    }
  });
});

var _channelSplitterNodeRendererFactoryFactory = require("./channel-splitter-node-renderer-factory-factory");

Object.keys(_channelSplitterNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _channelSplitterNodeRendererFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelSplitterNodeRendererFactoryFactory[key];
    }
  });
});

var _cacheTestResultFactory = require("./cache-test-result-factory");

Object.keys(_cacheTestResultFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _cacheTestResultFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _cacheTestResultFactory[key];
    }
  });
});

var _cacheTestResultFunction = require("./cache-test-result-function");

Object.keys(_cacheTestResultFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _cacheTestResultFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _cacheTestResultFunction[key];
    }
  });
});

var _connectAudioParamFactory = require("./connect-audio-param-factory");

Object.keys(_connectAudioParamFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _connectAudioParamFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _connectAudioParamFactory[key];
    }
  });
});

var _connectAudioParamFunction = require("./connect-audio-param-function");

Object.keys(_connectAudioParamFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _connectAudioParamFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _connectAudioParamFunction[key];
    }
  });
});

var _connectMultipleOutputsFactory = require("./connect-multiple-outputs-factory");

Object.keys(_connectMultipleOutputsFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _connectMultipleOutputsFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _connectMultipleOutputsFactory[key];
    }
  });
});

var _connectMultipleOutputsFunction = require("./connect-multiple-outputs-function");

Object.keys(_connectMultipleOutputsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _connectMultipleOutputsFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _connectMultipleOutputsFunction[key];
    }
  });
});

var _connectNativeAudioNodeToNativeAudioNodeFunction = require("./connect-native-audio-node-to-native-audio-node-function");

Object.keys(_connectNativeAudioNodeToNativeAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _connectNativeAudioNodeToNativeAudioNodeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _connectNativeAudioNodeToNativeAudioNodeFunction[key];
    }
  });
});

var _connectedNativeAudioBufferSourceNodeFactory = require("./connected-native-audio-buffer-source-node-factory");

Object.keys(_connectedNativeAudioBufferSourceNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _connectedNativeAudioBufferSourceNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _connectedNativeAudioBufferSourceNodeFactory[key];
    }
  });
});

var _connectedNativeAudioBufferSourceNodeFactoryFactory = require("./connected-native-audio-buffer-source-node-factory-factory");

Object.keys(_connectedNativeAudioBufferSourceNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _connectedNativeAudioBufferSourceNodeFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _connectedNativeAudioBufferSourceNodeFactoryFactory[key];
    }
  });
});

var _constantSourceNodeConstructor = require("./constant-source-node-constructor");

Object.keys(_constantSourceNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _constantSourceNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constantSourceNodeConstructor[key];
    }
  });
});

var _constantSourceNodeConstructorFactory = require("./constant-source-node-constructor-factory");

Object.keys(_constantSourceNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _constantSourceNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constantSourceNodeConstructorFactory[key];
    }
  });
});

var _constantSourceNodeRenderer = require("./constant-source-node-renderer");

Object.keys(_constantSourceNodeRenderer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _constantSourceNodeRenderer[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constantSourceNodeRenderer[key];
    }
  });
});

var _constantSourceNodeRendererFactory = require("./constant-source-node-renderer-factory");

Object.keys(_constantSourceNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _constantSourceNodeRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constantSourceNodeRendererFactory[key];
    }
  });
});

var _constantSourceNodeRendererFactoryFactory = require("./constant-source-node-renderer-factory-factory");

Object.keys(_constantSourceNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _constantSourceNodeRendererFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constantSourceNodeRendererFactoryFactory[key];
    }
  });
});

var _constructor = require("./constructor");

Object.keys(_constructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _constructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constructor[key];
    }
  });
});

var _context = require("./context");

Object.keys(_context).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _context[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _context[key];
    }
  });
});

var _contextStore = require("./context-store");

Object.keys(_contextStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _contextStore[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _contextStore[key];
    }
  });
});

var _convertNumberToUnsignedLongFactory = require("./convert-number-to-unsigned-long-factory");

Object.keys(_convertNumberToUnsignedLongFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _convertNumberToUnsignedLongFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _convertNumberToUnsignedLongFactory[key];
    }
  });
});

var _convertNumberToUnsignedLongFunction = require("./convert-number-to-unsigned-long-function");

Object.keys(_convertNumberToUnsignedLongFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _convertNumberToUnsignedLongFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _convertNumberToUnsignedLongFunction[key];
    }
  });
});

var _convolverNodeConstructor = require("./convolver-node-constructor");

Object.keys(_convolverNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _convolverNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _convolverNodeConstructor[key];
    }
  });
});

var _convolverNodeConstructorFactory = require("./convolver-node-constructor-factory");

Object.keys(_convolverNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _convolverNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _convolverNodeConstructorFactory[key];
    }
  });
});

var _convolverNodeRendererFactory = require("./convolver-node-renderer-factory");

Object.keys(_convolverNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _convolverNodeRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _convolverNodeRendererFactory[key];
    }
  });
});

var _convolverNodeRendererFactoryFactory = require("./convolver-node-renderer-factory-factory");

Object.keys(_convolverNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _convolverNodeRendererFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _convolverNodeRendererFactoryFactory[key];
    }
  });
});

var _createNativeOfflineAudioContextFactory = require("./create-native-offline-audio-context-factory");

Object.keys(_createNativeOfflineAudioContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _createNativeOfflineAudioContextFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _createNativeOfflineAudioContextFactory[key];
    }
  });
});

var _createNativeOfflineAudioContextFunction = require("./create-native-offline-audio-context-function");

Object.keys(_createNativeOfflineAudioContextFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _createNativeOfflineAudioContextFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _createNativeOfflineAudioContextFunction[key];
    }
  });
});

var _cycleCounters = require("./cycle-counters");

Object.keys(_cycleCounters).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _cycleCounters[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _cycleCounters[key];
    }
  });
});

var _dataCloneErrorFactory = require("./data-clone-error-factory");

Object.keys(_dataCloneErrorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _dataCloneErrorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dataCloneErrorFactory[key];
    }
  });
});

var _decodeAudioDataFactory = require("./decode-audio-data-factory");

Object.keys(_decodeAudioDataFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _decodeAudioDataFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _decodeAudioDataFactory[key];
    }
  });
});

var _decodeAudioDataFunction = require("./decode-audio-data-function");

Object.keys(_decodeAudioDataFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _decodeAudioDataFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _decodeAudioDataFunction[key];
    }
  });
});

var _decodeErrorCallback = require("./decode-error-callback");

Object.keys(_decodeErrorCallback).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _decodeErrorCallback[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _decodeErrorCallback[key];
    }
  });
});

var _decodeSuccessCallback = require("./decode-success-callback");

Object.keys(_decodeSuccessCallback).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _decodeSuccessCallback[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _decodeSuccessCallback[key];
    }
  });
});

var _decrementCycleCounterFactory = require("./decrement-cycle-counter-factory");

Object.keys(_decrementCycleCounterFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _decrementCycleCounterFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _decrementCycleCounterFactory[key];
    }
  });
});

var _decrementCycleCounterFunction = require("./decrement-cycle-counter-function");

Object.keys(_decrementCycleCounterFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _decrementCycleCounterFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _decrementCycleCounterFunction[key];
    }
  });
});

var _delayNodeConstructor = require("./delay-node-constructor");

Object.keys(_delayNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _delayNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _delayNodeConstructor[key];
    }
  });
});

var _delayNodeConstructorFactory = require("./delay-node-constructor-factory");

Object.keys(_delayNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _delayNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _delayNodeConstructorFactory[key];
    }
  });
});

var _delayNodeRendererFactory = require("./delay-node-renderer-factory");

Object.keys(_delayNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _delayNodeRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _delayNodeRendererFactory[key];
    }
  });
});

var _delayNodeRendererFactoryFactory = require("./delay-node-renderer-factory-factory");

Object.keys(_delayNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _delayNodeRendererFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _delayNodeRendererFactoryFactory[key];
    }
  });
});

var _deleteActiveInputConnectionToAudioNodeFactory = require("./delete-active-input-connection-to-audio-node-factory");

Object.keys(_deleteActiveInputConnectionToAudioNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _deleteActiveInputConnectionToAudioNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _deleteActiveInputConnectionToAudioNodeFactory[key];
    }
  });
});

var _deleteActiveInputConnectionToAudioNodeFunction = require("./delete-active-input-connection-to-audio-node-function");

Object.keys(_deleteActiveInputConnectionToAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _deleteActiveInputConnectionToAudioNodeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _deleteActiveInputConnectionToAudioNodeFunction[key];
    }
  });
});

var _deleteUnrenderedAudioWorkletNodeFactory = require("./delete-unrendered-audio-worklet-node-factory");

Object.keys(_deleteUnrenderedAudioWorkletNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _deleteUnrenderedAudioWorkletNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _deleteUnrenderedAudioWorkletNodeFactory[key];
    }
  });
});

var _deleteUnrenderedAudioWorkletNodeFunction = require("./delete-unrendered-audio-worklet-node-function");

Object.keys(_deleteUnrenderedAudioWorkletNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _deleteUnrenderedAudioWorkletNodeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _deleteUnrenderedAudioWorkletNodeFunction[key];
    }
  });
});

var _detectCyclesFactory = require("./detect-cycles-factory");

Object.keys(_detectCyclesFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _detectCyclesFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _detectCyclesFactory[key];
    }
  });
});

var _detectCyclesFunction = require("./detect-cycles-function");

Object.keys(_detectCyclesFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _detectCyclesFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _detectCyclesFunction[key];
    }
  });
});

var _disconnectMultipleOutputsFactory = require("./disconnect-multiple-outputs-factory");

Object.keys(_disconnectMultipleOutputsFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _disconnectMultipleOutputsFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _disconnectMultipleOutputsFactory[key];
    }
  });
});

var _disconnectMultipleOutputsFunction = require("./disconnect-multiple-outputs-function");

Object.keys(_disconnectMultipleOutputsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _disconnectMultipleOutputsFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _disconnectMultipleOutputsFunction[key];
    }
  });
});

var _disconnectNativeAudioNodeFromNativeAudioNodeFunction = require("./disconnect-native-audio-node-from-native-audio-node-function");

Object.keys(_disconnectNativeAudioNodeFromNativeAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _disconnectNativeAudioNodeFromNativeAudioNodeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _disconnectNativeAudioNodeFromNativeAudioNodeFunction[key];
    }
  });
});

var _distanceModelType = require("./distance-model-type");

Object.keys(_distanceModelType).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _distanceModelType[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _distanceModelType[key];
    }
  });
});

var _dynamicsCompressorNodeConstructor = require("./dynamics-compressor-node-constructor");

Object.keys(_dynamicsCompressorNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _dynamicsCompressorNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dynamicsCompressorNodeConstructor[key];
    }
  });
});

var _dynamicsCompressorNodeConstructorFactory = require("./dynamics-compressor-node-constructor-factory");

Object.keys(_dynamicsCompressorNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _dynamicsCompressorNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dynamicsCompressorNodeConstructorFactory[key];
    }
  });
});

var _dynamicsCompressorNodeRendererFactory = require("./dynamics-compressor-node-renderer-factory");

Object.keys(_dynamicsCompressorNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _dynamicsCompressorNodeRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dynamicsCompressorNodeRendererFactory[key];
    }
  });
});

var _dynamicsCompressorNodeRendererFactoryFactory = require("./dynamics-compressor-node-renderer-factory-factory");

Object.keys(_dynamicsCompressorNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _dynamicsCompressorNodeRendererFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dynamicsCompressorNodeRendererFactoryFactory[key];
    }
  });
});

var _encodingErrorFactory = require("./encoding-error-factory");

Object.keys(_encodingErrorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _encodingErrorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _encodingErrorFactory[key];
    }
  });
});

var _errorEventHandler = require("./error-event-handler");

Object.keys(_errorEventHandler).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _errorEventHandler[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _errorEventHandler[key];
    }
  });
});

var _evaluateAudioWorkletGlobalScopeFunction = require("./evaluate-audio-worklet-global-scope-function");

Object.keys(_evaluateAudioWorkletGlobalScopeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _evaluateAudioWorkletGlobalScopeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _evaluateAudioWorkletGlobalScopeFunction[key];
    }
  });
});

var _evaluateSourceFactory = require("./evaluate-source-factory");

Object.keys(_evaluateSourceFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _evaluateSourceFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _evaluateSourceFactory[key];
    }
  });
});

var _evaluateSourceFunction = require("./evaluate-source-function");

Object.keys(_evaluateSourceFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _evaluateSourceFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _evaluateSourceFunction[key];
    }
  });
});

var _eventHandler = require("./event-handler");

Object.keys(_eventHandler).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _eventHandler[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _eventHandler[key];
    }
  });
});

var _eventTargetConstructor = require("./event-target-constructor");

Object.keys(_eventTargetConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _eventTargetConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _eventTargetConstructor[key];
    }
  });
});

var _eventTargetConstructorFactory = require("./event-target-constructor-factory");

Object.keys(_eventTargetConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _eventTargetConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _eventTargetConstructorFactory[key];
    }
  });
});

var _exposeCurrentFrameAndCurrentTimeFactory = require("./expose-current-frame-and-current-time-factory");

Object.keys(_exposeCurrentFrameAndCurrentTimeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _exposeCurrentFrameAndCurrentTimeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _exposeCurrentFrameAndCurrentTimeFactory[key];
    }
  });
});

var _exposeCurrentFrameAndCurrentTimeFunction = require("./expose-current-frame-and-current-time-function");

Object.keys(_exposeCurrentFrameAndCurrentTimeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _exposeCurrentFrameAndCurrentTimeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _exposeCurrentFrameAndCurrentTimeFunction[key];
    }
  });
});

var _fetchSourceFactory = require("./fetch-source-factory");

Object.keys(_fetchSourceFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _fetchSourceFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _fetchSourceFactory[key];
    }
  });
});

var _fetchSourceFunction = require("./fetch-source-function");

Object.keys(_fetchSourceFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _fetchSourceFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _fetchSourceFunction[key];
    }
  });
});

var _gainNodeConstructor = require("./gain-node-constructor");

Object.keys(_gainNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _gainNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _gainNodeConstructor[key];
    }
  });
});

var _gainNodeConstructorFactory = require("./gain-node-constructor-factory");

Object.keys(_gainNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _gainNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _gainNodeConstructorFactory[key];
    }
  });
});

var _gainNodeRendererFactory = require("./gain-node-renderer-factory");

Object.keys(_gainNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _gainNodeRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _gainNodeRendererFactory[key];
    }
  });
});

var _gainNodeRendererFactoryFactory = require("./gain-node-renderer-factory-factory");

Object.keys(_gainNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _gainNodeRendererFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _gainNodeRendererFactoryFactory[key];
    }
  });
});

var _getActiveAudioWorkletNodeInputsFactory = require("./get-active-audio-worklet-node-inputs-factory");

Object.keys(_getActiveAudioWorkletNodeInputsFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getActiveAudioWorkletNodeInputsFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getActiveAudioWorkletNodeInputsFactory[key];
    }
  });
});

var _getActiveAudioWorkletNodeInputsFunction = require("./get-active-audio-worklet-node-inputs-function");

Object.keys(_getActiveAudioWorkletNodeInputsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getActiveAudioWorkletNodeInputsFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getActiveAudioWorkletNodeInputsFunction[key];
    }
  });
});

var _getAudioNodeConnectionsFunction = require("./get-audio-node-connections-function");

Object.keys(_getAudioNodeConnectionsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getAudioNodeConnectionsFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getAudioNodeConnectionsFunction[key];
    }
  });
});

var _getAudioNodeRendererFactory = require("./get-audio-node-renderer-factory");

Object.keys(_getAudioNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getAudioNodeRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getAudioNodeRendererFactory[key];
    }
  });
});

var _getAudioNodeRendererFunction = require("./get-audio-node-renderer-function");

Object.keys(_getAudioNodeRendererFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getAudioNodeRendererFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getAudioNodeRendererFunction[key];
    }
  });
});

var _getAudioNodeTailTimeFactory = require("./get-audio-node-tail-time-factory");

Object.keys(_getAudioNodeTailTimeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getAudioNodeTailTimeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getAudioNodeTailTimeFactory[key];
    }
  });
});

var _getAudioNodeTailTimeFunction = require("./get-audio-node-tail-time-function");

Object.keys(_getAudioNodeTailTimeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getAudioNodeTailTimeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getAudioNodeTailTimeFunction[key];
    }
  });
});

var _getAudioParamConnectionsFunction = require("./get-audio-param-connections-function");

Object.keys(_getAudioParamConnectionsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getAudioParamConnectionsFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getAudioParamConnectionsFunction[key];
    }
  });
});

var _getAudioParamRendererFactory = require("./get-audio-param-renderer-factory");

Object.keys(_getAudioParamRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getAudioParamRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getAudioParamRendererFactory[key];
    }
  });
});

var _getAudioParamRendererFunction = require("./get-audio-param-renderer-function");

Object.keys(_getAudioParamRendererFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getAudioParamRendererFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getAudioParamRendererFunction[key];
    }
  });
});

var _getBackupOfflineAudioContextFactory = require("./get-backup-offline-audio-context-factory");

Object.keys(_getBackupOfflineAudioContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getBackupOfflineAudioContextFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getBackupOfflineAudioContextFactory[key];
    }
  });
});

var _getBackupOfflineAudioContextFunction = require("./get-backup-offline-audio-context-function");

Object.keys(_getBackupOfflineAudioContextFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getBackupOfflineAudioContextFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getBackupOfflineAudioContextFunction[key];
    }
  });
});

var _getEventListenersOfAudioNodeFunction = require("./get-event-listeners-of-audio-node-function");

Object.keys(_getEventListenersOfAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getEventListenersOfAudioNodeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getEventListenersOfAudioNodeFunction[key];
    }
  });
});

var _getNativeAudioNodeFunction = require("./get-native-audio-node-function");

Object.keys(_getNativeAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getNativeAudioNodeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getNativeAudioNodeFunction[key];
    }
  });
});

var _getNativeAudioParamFunction = require("./get-native-audio-param-function");

Object.keys(_getNativeAudioParamFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getNativeAudioParamFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getNativeAudioParamFunction[key];
    }
  });
});

var _getNativeContextFactory = require("./get-native-context-factory");

Object.keys(_getNativeContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getNativeContextFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getNativeContextFactory[key];
    }
  });
});

var _getNativeContextFunction = require("./get-native-context-function");

Object.keys(_getNativeContextFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getNativeContextFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getNativeContextFunction[key];
    }
  });
});

var _getOrCreateBackupOfflineAudioContextFactory = require("./get-or-create-backup-offline-audio-context-factory");

Object.keys(_getOrCreateBackupOfflineAudioContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getOrCreateBackupOfflineAudioContextFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getOrCreateBackupOfflineAudioContextFactory[key];
    }
  });
});

var _getOrCreateBackupOfflineAudioContextFunction = require("./get-or-create-backup-offline-audio-context-function");

Object.keys(_getOrCreateBackupOfflineAudioContextFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getOrCreateBackupOfflineAudioContextFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getOrCreateBackupOfflineAudioContextFunction[key];
    }
  });
});

var _getUnrenderedAudioWorkletNodesFactory = require("./get-unrendered-audio-worklet-nodes-factory");

Object.keys(_getUnrenderedAudioWorkletNodesFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getUnrenderedAudioWorkletNodesFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getUnrenderedAudioWorkletNodesFactory[key];
    }
  });
});

var _getUnrenderedAudioWorkletNodesFunction = require("./get-unrendered-audio-worklet-nodes-function");

Object.keys(_getUnrenderedAudioWorkletNodesFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getUnrenderedAudioWorkletNodesFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getUnrenderedAudioWorkletNodesFunction[key];
    }
  });
});

var _getValueForKeyFunction = require("./get-value-for-key-function");

Object.keys(_getValueForKeyFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getValueForKeyFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getValueForKeyFunction[key];
    }
  });
});

var _iirFilterNodeConstructor = require("./iir-filter-node-constructor");

Object.keys(_iirFilterNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _iirFilterNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _iirFilterNodeConstructor[key];
    }
  });
});

var _iirFilterNodeConstructorFactory = require("./iir-filter-node-constructor-factory");

Object.keys(_iirFilterNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _iirFilterNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _iirFilterNodeConstructorFactory[key];
    }
  });
});

var _iirFilterNodeRendererFactory = require("./iir-filter-node-renderer-factory");

Object.keys(_iirFilterNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _iirFilterNodeRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _iirFilterNodeRendererFactory[key];
    }
  });
});

var _iirFilterNodeRendererFactoryFactory = require("./iir-filter-node-renderer-factory-factory");

Object.keys(_iirFilterNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _iirFilterNodeRendererFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _iirFilterNodeRendererFactoryFactory[key];
    }
  });
});

var _incrementCycleCounterFactory = require("./increment-cycle-counter-factory");

Object.keys(_incrementCycleCounterFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _incrementCycleCounterFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _incrementCycleCounterFactory[key];
    }
  });
});

var _incrementCycleCounterFactoryFactory = require("./increment-cycle-counter-factory-factory");

Object.keys(_incrementCycleCounterFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _incrementCycleCounterFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _incrementCycleCounterFactoryFactory[key];
    }
  });
});

var _incrementCycleCounterFunction = require("./increment-cycle-counter-function");

Object.keys(_incrementCycleCounterFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _incrementCycleCounterFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _incrementCycleCounterFunction[key];
    }
  });
});

var _indexSizeErrorFactory = require("./index-size-error-factory");

Object.keys(_indexSizeErrorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _indexSizeErrorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _indexSizeErrorFactory[key];
    }
  });
});

var _insertElementInSetFunction = require("./insert-element-in-set-function");

Object.keys(_insertElementInSetFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _insertElementInSetFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _insertElementInSetFunction[key];
    }
  });
});

var _internalStateEventListener = require("./internal-state-event-listener");

Object.keys(_internalStateEventListener).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _internalStateEventListener[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _internalStateEventListener[key];
    }
  });
});

var _invalidAccessErrorFactory = require("./invalid-access-error-factory");

Object.keys(_invalidAccessErrorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _invalidAccessErrorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _invalidAccessErrorFactory[key];
    }
  });
});

var _invalidStateErrorFactory = require("./invalid-state-error-factory");

Object.keys(_invalidStateErrorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _invalidStateErrorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _invalidStateErrorFactory[key];
    }
  });
});

var _isActiveAudioNodeFunction = require("./is-active-audio-node-function");

Object.keys(_isActiveAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isActiveAudioNodeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isActiveAudioNodeFunction[key];
    }
  });
});

var _isAnyAudioContextFactory = require("./is-any-audio-context-factory");

Object.keys(_isAnyAudioContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isAnyAudioContextFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isAnyAudioContextFactory[key];
    }
  });
});

var _isAnyAudioContextFunction = require("./is-any-audio-context-function");

Object.keys(_isAnyAudioContextFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isAnyAudioContextFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isAnyAudioContextFunction[key];
    }
  });
});

var _isAnyAudioNodeFactory = require("./is-any-audio-node-factory");

Object.keys(_isAnyAudioNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isAnyAudioNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isAnyAudioNodeFactory[key];
    }
  });
});

var _isAnyAudioNodeFunction = require("./is-any-audio-node-function");

Object.keys(_isAnyAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isAnyAudioNodeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isAnyAudioNodeFunction[key];
    }
  });
});

var _isAnyAudioParamFactory = require("./is-any-audio-param-factory");

Object.keys(_isAnyAudioParamFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isAnyAudioParamFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isAnyAudioParamFactory[key];
    }
  });
});

var _isAnyAudioParamFunction = require("./is-any-audio-param-function");

Object.keys(_isAnyAudioParamFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isAnyAudioParamFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isAnyAudioParamFunction[key];
    }
  });
});

var _isAnyOfflineAudioContextFactory = require("./is-any-offline-audio-context-factory");

Object.keys(_isAnyOfflineAudioContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isAnyOfflineAudioContextFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isAnyOfflineAudioContextFactory[key];
    }
  });
});

var _isAnyOfflineAudioContextFunction = require("./is-any-offline-audio-context-function");

Object.keys(_isAnyOfflineAudioContextFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isAnyOfflineAudioContextFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isAnyOfflineAudioContextFunction[key];
    }
  });
});

var _isDcCurveFunction = require("./is-dc-curve-function");

Object.keys(_isDcCurveFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isDcCurveFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isDcCurveFunction[key];
    }
  });
});

var _isNativeAudioContextFactory = require("./is-native-audio-context-factory");

Object.keys(_isNativeAudioContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isNativeAudioContextFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeAudioContextFactory[key];
    }
  });
});

var _isNativeAudioContextFunction = require("./is-native-audio-context-function");

Object.keys(_isNativeAudioContextFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isNativeAudioContextFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeAudioContextFunction[key];
    }
  });
});

var _isNativeAudioNodeFactory = require("./is-native-audio-node-factory");

Object.keys(_isNativeAudioNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isNativeAudioNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeAudioNodeFactory[key];
    }
  });
});

var _isNativeAudioNodeFunction = require("./is-native-audio-node-function");

Object.keys(_isNativeAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isNativeAudioNodeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeAudioNodeFunction[key];
    }
  });
});

var _isNativeAudioParamFactory = require("./is-native-audio-param-factory");

Object.keys(_isNativeAudioParamFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isNativeAudioParamFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeAudioParamFactory[key];
    }
  });
});

var _isNativeAudioParamFunction = require("./is-native-audio-param-function");

Object.keys(_isNativeAudioParamFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isNativeAudioParamFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeAudioParamFunction[key];
    }
  });
});

var _isNativeContextFactory = require("./is-native-context-factory");

Object.keys(_isNativeContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isNativeContextFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeContextFactory[key];
    }
  });
});

var _isNativeContextFunction = require("./is-native-context-function");

Object.keys(_isNativeContextFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isNativeContextFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeContextFunction[key];
    }
  });
});

var _isNativeOfflineAudioContextFactory = require("./is-native-offline-audio-context-factory");

Object.keys(_isNativeOfflineAudioContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isNativeOfflineAudioContextFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeOfflineAudioContextFactory[key];
    }
  });
});

var _isNativeOfflineAudioContextFunction = require("./is-native-offline-audio-context-function");

Object.keys(_isNativeOfflineAudioContextFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isNativeOfflineAudioContextFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeOfflineAudioContextFunction[key];
    }
  });
});

var _isPartOfACycleFunction = require("./is-part-of-a-cycle-function");

Object.keys(_isPartOfACycleFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isPartOfACycleFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isPartOfACycleFunction[key];
    }
  });
});

var _isPassiveAudioNodeFunction = require("./is-passive-audio-node-function");

Object.keys(_isPassiveAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isPassiveAudioNodeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isPassiveAudioNodeFunction[key];
    }
  });
});

var _isSecureContextFactory = require("./is-secure-context-factory");

Object.keys(_isSecureContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isSecureContextFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isSecureContextFactory[key];
    }
  });
});

var _isSupportedPromiseFactory = require("./is-supported-promise-factory");

Object.keys(_isSupportedPromiseFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _isSupportedPromiseFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isSupportedPromiseFactory[key];
    }
  });
});

var _mediaElementAudioSourceNodeConstructor = require("./media-element-audio-source-node-constructor");

Object.keys(_mediaElementAudioSourceNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _mediaElementAudioSourceNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaElementAudioSourceNodeConstructor[key];
    }
  });
});

var _mediaElementAudioSourceNodeConstructorFactory = require("./media-element-audio-source-node-constructor-factory");

Object.keys(_mediaElementAudioSourceNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _mediaElementAudioSourceNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaElementAudioSourceNodeConstructorFactory[key];
    }
  });
});

var _mediaStreamAudioDestinationNodeConstructor = require("./media-stream-audio-destination-node-constructor");

Object.keys(_mediaStreamAudioDestinationNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _mediaStreamAudioDestinationNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamAudioDestinationNodeConstructor[key];
    }
  });
});

var _mediaStreamAudioDestinationNodeConstructorFactory = require("./media-stream-audio-destination-node-constructor-factory");

Object.keys(_mediaStreamAudioDestinationNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _mediaStreamAudioDestinationNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamAudioDestinationNodeConstructorFactory[key];
    }
  });
});

var _mediaStreamAudioSourceNodeConstructor = require("./media-stream-audio-source-node-constructor");

Object.keys(_mediaStreamAudioSourceNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _mediaStreamAudioSourceNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamAudioSourceNodeConstructor[key];
    }
  });
});

var _mediaStreamAudioSourceNodeConstructorFactory = require("./media-stream-audio-source-node-constructor-factory");

Object.keys(_mediaStreamAudioSourceNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _mediaStreamAudioSourceNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamAudioSourceNodeConstructorFactory[key];
    }
  });
});

var _mediaStreamTrackAudioSourceNodeConstructor = require("./media-stream-track-audio-source-node-constructor");

Object.keys(_mediaStreamTrackAudioSourceNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _mediaStreamTrackAudioSourceNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamTrackAudioSourceNodeConstructor[key];
    }
  });
});

var _mediaStreamTrackAudioSourceNodeConstructorFactory = require("./media-stream-track-audio-source-node-constructor-factory");

Object.keys(_mediaStreamTrackAudioSourceNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _mediaStreamTrackAudioSourceNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamTrackAudioSourceNodeConstructorFactory[key];
    }
  });
});

var _minimalAudioContextConstructor = require("./minimal-audio-context-constructor");

Object.keys(_minimalAudioContextConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _minimalAudioContextConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalAudioContextConstructor[key];
    }
  });
});

var _minimalAudioContextConstructorFactory = require("./minimal-audio-context-constructor-factory");

Object.keys(_minimalAudioContextConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _minimalAudioContextConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalAudioContextConstructorFactory[key];
    }
  });
});

var _minimalBaseAudioContextConstructor = require("./minimal-base-audio-context-constructor");

Object.keys(_minimalBaseAudioContextConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _minimalBaseAudioContextConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalBaseAudioContextConstructor[key];
    }
  });
});

var _minimalBaseAudioContextConstructorFactory = require("./minimal-base-audio-context-constructor-factory");

Object.keys(_minimalBaseAudioContextConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _minimalBaseAudioContextConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalBaseAudioContextConstructorFactory[key];
    }
  });
});

var _minimalOfflineAudioContextConstructor = require("./minimal-offline-audio-context-constructor");

Object.keys(_minimalOfflineAudioContextConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _minimalOfflineAudioContextConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalOfflineAudioContextConstructor[key];
    }
  });
});

var _minimalOfflineAudioContextConstructorFactory = require("./minimal-offline-audio-context-constructor-factory");

Object.keys(_minimalOfflineAudioContextConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _minimalOfflineAudioContextConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalOfflineAudioContextConstructorFactory[key];
    }
  });
});

var _monitorConnectionsFactory = require("./monitor-connections-factory");

Object.keys(_monitorConnectionsFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _monitorConnectionsFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _monitorConnectionsFactory[key];
    }
  });
});

var _monitorConnectionsFunction = require("./monitor-connections-function");

Object.keys(_monitorConnectionsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _monitorConnectionsFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _monitorConnectionsFunction[key];
    }
  });
});

var _nativeAnalyserNode = require("./native-analyser-node");

Object.keys(_nativeAnalyserNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAnalyserNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAnalyserNode[key];
    }
  });
});

var _nativeAnalyserNodeFactory = require("./native-analyser-node-factory");

Object.keys(_nativeAnalyserNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAnalyserNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAnalyserNodeFactory[key];
    }
  });
});

var _nativeAnalyserNodeFactoryFactory = require("./native-analyser-node-factory-factory");

Object.keys(_nativeAnalyserNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAnalyserNodeFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAnalyserNodeFactoryFactory[key];
    }
  });
});

var _nativeAudioBuffer = require("./native-audio-buffer");

Object.keys(_nativeAudioBuffer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioBuffer[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioBuffer[key];
    }
  });
});

var _nativeAudioBufferConstructor = require("./native-audio-buffer-constructor");

Object.keys(_nativeAudioBufferConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioBufferConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioBufferConstructor[key];
    }
  });
});

var _nativeAudioBufferConstructorFactory = require("./native-audio-buffer-constructor-factory");

Object.keys(_nativeAudioBufferConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioBufferConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioBufferConstructorFactory[key];
    }
  });
});

var _nativeAudioBufferSourceNode = require("./native-audio-buffer-source-node");

Object.keys(_nativeAudioBufferSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioBufferSourceNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioBufferSourceNode[key];
    }
  });
});

var _nativeAudioBufferSourceNodeFactory = require("./native-audio-buffer-source-node-factory");

Object.keys(_nativeAudioBufferSourceNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioBufferSourceNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioBufferSourceNodeFactory[key];
    }
  });
});

var _nativeAudioBufferSourceNodeFactoryFactory = require("./native-audio-buffer-source-node-factory-factory");

Object.keys(_nativeAudioBufferSourceNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioBufferSourceNodeFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioBufferSourceNodeFactoryFactory[key];
    }
  });
});

var _nativeAudioContext = require("./native-audio-context");

Object.keys(_nativeAudioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioContext[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioContext[key];
    }
  });
});

var _nativeAudioContextConstructor = require("./native-audio-context-constructor");

Object.keys(_nativeAudioContextConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioContextConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioContextConstructor[key];
    }
  });
});

var _nativeAudioContextConstructorFactory = require("./native-audio-context-constructor-factory");

Object.keys(_nativeAudioContextConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioContextConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioContextConstructorFactory[key];
    }
  });
});

var _nativeAudioDestinationNode = require("./native-audio-destination-node");

Object.keys(_nativeAudioDestinationNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioDestinationNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioDestinationNode[key];
    }
  });
});

var _nativeAudioDestinationNodeFactory = require("./native-audio-destination-node-factory");

Object.keys(_nativeAudioDestinationNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioDestinationNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioDestinationNodeFactory[key];
    }
  });
});

var _nativeAudioDestinationNodeFactoryFactory = require("./native-audio-destination-node-factory-factory");

Object.keys(_nativeAudioDestinationNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioDestinationNodeFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioDestinationNodeFactoryFactory[key];
    }
  });
});

var _nativeAudioListener = require("./native-audio-listener");

Object.keys(_nativeAudioListener).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioListener[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioListener[key];
    }
  });
});

var _nativeAudioNode = require("./native-audio-node");

Object.keys(_nativeAudioNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioNode[key];
    }
  });
});

var _nativeAudioParam = require("./native-audio-param");

Object.keys(_nativeAudioParam).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioParam[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioParam[key];
    }
  });
});

var _nativeAudioParamMap = require("./native-audio-param-map");

Object.keys(_nativeAudioParamMap).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioParamMap[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioParamMap[key];
    }
  });
});

var _nativeAudioWorklet = require("./native-audio-worklet");

Object.keys(_nativeAudioWorklet).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioWorklet[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorklet[key];
    }
  });
});

var _nativeAudioWorkletNode = require("./native-audio-worklet-node");

Object.keys(_nativeAudioWorkletNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioWorkletNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorkletNode[key];
    }
  });
});

var _nativeAudioWorkletNodeConstructor = require("./native-audio-worklet-node-constructor");

Object.keys(_nativeAudioWorkletNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioWorkletNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorkletNodeConstructor[key];
    }
  });
});

var _nativeAudioWorkletNodeConstructorFactory = require("./native-audio-worklet-node-constructor-factory");

Object.keys(_nativeAudioWorkletNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioWorkletNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorkletNodeConstructorFactory[key];
    }
  });
});

var _nativeAudioWorkletNodeFactory = require("./native-audio-worklet-node-factory");

Object.keys(_nativeAudioWorkletNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioWorkletNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorkletNodeFactory[key];
    }
  });
});

var _nativeAudioWorkletNodeFactoryFactory = require("./native-audio-worklet-node-factory-factory");

Object.keys(_nativeAudioWorkletNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioWorkletNodeFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorkletNodeFactoryFactory[key];
    }
  });
});

var _nativeAudioWorkletNodeFakerFactory = require("./native-audio-worklet-node-faker-factory");

Object.keys(_nativeAudioWorkletNodeFakerFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioWorkletNodeFakerFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorkletNodeFakerFactory[key];
    }
  });
});

var _nativeAudioWorkletNodeFakerFactoryFactory = require("./native-audio-worklet-node-faker-factory-factory");

Object.keys(_nativeAudioWorkletNodeFakerFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioWorkletNodeFakerFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorkletNodeFakerFactoryFactory[key];
    }
  });
});

var _nativeAudioWorkletNodeOptions = require("./native-audio-worklet-node-options");

Object.keys(_nativeAudioWorkletNodeOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeAudioWorkletNodeOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorkletNodeOptions[key];
    }
  });
});

var _nativeBiquadFilterNode = require("./native-biquad-filter-node");

Object.keys(_nativeBiquadFilterNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeBiquadFilterNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeBiquadFilterNode[key];
    }
  });
});

var _nativeBiquadFilterNodeFactory = require("./native-biquad-filter-node-factory");

Object.keys(_nativeBiquadFilterNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeBiquadFilterNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeBiquadFilterNodeFactory[key];
    }
  });
});

var _nativeChannelMergerNode = require("./native-channel-merger-node");

Object.keys(_nativeChannelMergerNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeChannelMergerNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeChannelMergerNode[key];
    }
  });
});

var _nativeChannelMergerNodeFactory = require("./native-channel-merger-node-factory");

Object.keys(_nativeChannelMergerNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeChannelMergerNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeChannelMergerNodeFactory[key];
    }
  });
});

var _nativeChannelMergerNodeFactoryFactory = require("./native-channel-merger-node-factory-factory");

Object.keys(_nativeChannelMergerNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeChannelMergerNodeFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeChannelMergerNodeFactoryFactory[key];
    }
  });
});

var _nativeChannelSplitterNode = require("./native-channel-splitter-node");

Object.keys(_nativeChannelSplitterNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeChannelSplitterNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeChannelSplitterNode[key];
    }
  });
});

var _nativeChannelSplitterNodeFactory = require("./native-channel-splitter-node-factory");

Object.keys(_nativeChannelSplitterNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeChannelSplitterNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeChannelSplitterNodeFactory[key];
    }
  });
});

var _nativeConstantSourceNode = require("./native-constant-source-node");

Object.keys(_nativeConstantSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeConstantSourceNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConstantSourceNode[key];
    }
  });
});

var _nativeConstantSourceNodeFactory = require("./native-constant-source-node-factory");

Object.keys(_nativeConstantSourceNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeConstantSourceNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConstantSourceNodeFactory[key];
    }
  });
});

var _nativeConstantSourceNodeFactoryFactory = require("./native-constant-source-node-factory-factory");

Object.keys(_nativeConstantSourceNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeConstantSourceNodeFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConstantSourceNodeFactoryFactory[key];
    }
  });
});

var _nativeConstantSourceNodeFakerFactory = require("./native-constant-source-node-faker-factory");

Object.keys(_nativeConstantSourceNodeFakerFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeConstantSourceNodeFakerFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConstantSourceNodeFakerFactory[key];
    }
  });
});

var _nativeConstantSourceNodeFakerFactoryFactory = require("./native-constant-source-node-faker-factory-factory");

Object.keys(_nativeConstantSourceNodeFakerFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeConstantSourceNodeFakerFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConstantSourceNodeFakerFactoryFactory[key];
    }
  });
});

var _nativeContext = require("./native-context");

Object.keys(_nativeContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeContext[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeContext[key];
    }
  });
});

var _nativeConvolverNode = require("./native-convolver-node");

Object.keys(_nativeConvolverNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeConvolverNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConvolverNode[key];
    }
  });
});

var _nativeConvolverNodeFactory = require("./native-convolver-node-factory");

Object.keys(_nativeConvolverNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeConvolverNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConvolverNodeFactory[key];
    }
  });
});

var _nativeConvolverNodeFactoryFactory = require("./native-convolver-node-factory-factory");

Object.keys(_nativeConvolverNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeConvolverNodeFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConvolverNodeFactoryFactory[key];
    }
  });
});

var _nativeDelayNodeFactory = require("./native-delay-node-factory");

Object.keys(_nativeDelayNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeDelayNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeDelayNodeFactory[key];
    }
  });
});

var _nativeDelayNode = require("./native-delay-node");

Object.keys(_nativeDelayNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeDelayNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeDelayNode[key];
    }
  });
});

var _nativeDynamicsCompressorNode = require("./native-dynamics-compressor-node");

Object.keys(_nativeDynamicsCompressorNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeDynamicsCompressorNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeDynamicsCompressorNode[key];
    }
  });
});

var _nativeDynamicsCompressorNodeFactory = require("./native-dynamics-compressor-node-factory");

Object.keys(_nativeDynamicsCompressorNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeDynamicsCompressorNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeDynamicsCompressorNodeFactory[key];
    }
  });
});

var _nativeDynamicsCompressorNodeFactoryFactory = require("./native-dynamics-compressor-node-factory-factory");

Object.keys(_nativeDynamicsCompressorNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeDynamicsCompressorNodeFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeDynamicsCompressorNodeFactoryFactory[key];
    }
  });
});

var _nativeEventTarget = require("./native-event-target");

Object.keys(_nativeEventTarget).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeEventTarget[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeEventTarget[key];
    }
  });
});

var _nativeGainNode = require("./native-gain-node");

Object.keys(_nativeGainNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeGainNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeGainNode[key];
    }
  });
});

var _nativeGainNodeFactory = require("./native-gain-node-factory");

Object.keys(_nativeGainNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeGainNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeGainNodeFactory[key];
    }
  });
});

var _nativeIirFilterNode = require("./native-iir-filter-node");

Object.keys(_nativeIirFilterNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeIirFilterNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeIirFilterNode[key];
    }
  });
});

var _nativeIirFilterNodeFactory = require("./native-iir-filter-node-factory");

Object.keys(_nativeIirFilterNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeIirFilterNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeIirFilterNodeFactory[key];
    }
  });
});

var _nativeIirFilterNodeFactoryFactory = require("./native-iir-filter-node-factory-factory");

Object.keys(_nativeIirFilterNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeIirFilterNodeFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeIirFilterNodeFactoryFactory[key];
    }
  });
});

var _nativeIirFilterNodeFakerFactory = require("./native-iir-filter-node-faker-factory");

Object.keys(_nativeIirFilterNodeFakerFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeIirFilterNodeFakerFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeIirFilterNodeFakerFactory[key];
    }
  });
});

var _nativeIirFilterNodeFakerFactoryFactory = require("./native-iir-filter-node-faker-factory-factory");

Object.keys(_nativeIirFilterNodeFakerFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeIirFilterNodeFakerFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeIirFilterNodeFakerFactoryFactory[key];
    }
  });
});

var _nativeMediaElementAudioSourceNode = require("./native-media-element-audio-source-node");

Object.keys(_nativeMediaElementAudioSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeMediaElementAudioSourceNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaElementAudioSourceNode[key];
    }
  });
});

var _nativeMediaElementAudioSourceNodeFactory = require("./native-media-element-audio-source-node-factory");

Object.keys(_nativeMediaElementAudioSourceNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeMediaElementAudioSourceNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaElementAudioSourceNodeFactory[key];
    }
  });
});

var _nativeMediaStreamAudioDestinationNode = require("./native-media-stream-audio-destination-node");

Object.keys(_nativeMediaStreamAudioDestinationNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeMediaStreamAudioDestinationNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaStreamAudioDestinationNode[key];
    }
  });
});

var _nativeMediaStreamAudioDestinationNodeFactory = require("./native-media-stream-audio-destination-node-factory");

Object.keys(_nativeMediaStreamAudioDestinationNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeMediaStreamAudioDestinationNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaStreamAudioDestinationNodeFactory[key];
    }
  });
});

var _nativeMediaStreamAudioSourceNode = require("./native-media-stream-audio-source-node");

Object.keys(_nativeMediaStreamAudioSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeMediaStreamAudioSourceNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaStreamAudioSourceNode[key];
    }
  });
});

var _nativeMediaStreamAudioSourceNodeFactory = require("./native-media-stream-audio-source-node-factory");

Object.keys(_nativeMediaStreamAudioSourceNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeMediaStreamAudioSourceNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaStreamAudioSourceNodeFactory[key];
    }
  });
});

var _nativeMediaStreamTrackAudioSourceNode = require("./native-media-stream-track-audio-source-node");

Object.keys(_nativeMediaStreamTrackAudioSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeMediaStreamTrackAudioSourceNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaStreamTrackAudioSourceNode[key];
    }
  });
});

var _nativeMediaStreamTrackAudioSourceNodeFactory = require("./native-media-stream-track-audio-source-node-factory");

Object.keys(_nativeMediaStreamTrackAudioSourceNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeMediaStreamTrackAudioSourceNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaStreamTrackAudioSourceNodeFactory[key];
    }
  });
});

var _nativeMediaStreamTrackAudioSourceNodeFactoryFactory = require("./native-media-stream-track-audio-source-node-factory-factory");

Object.keys(_nativeMediaStreamTrackAudioSourceNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeMediaStreamTrackAudioSourceNodeFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaStreamTrackAudioSourceNodeFactoryFactory[key];
    }
  });
});

var _nativeOfflineAudioContext = require("./native-offline-audio-context");

Object.keys(_nativeOfflineAudioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeOfflineAudioContext[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeOfflineAudioContext[key];
    }
  });
});

var _nativeOfflineAudioContextConstructor = require("./native-offline-audio-context-constructor");

Object.keys(_nativeOfflineAudioContextConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeOfflineAudioContextConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeOfflineAudioContextConstructor[key];
    }
  });
});

var _nativeOfflineAudioContextConstructorFactory = require("./native-offline-audio-context-constructor-factory");

Object.keys(_nativeOfflineAudioContextConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeOfflineAudioContextConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeOfflineAudioContextConstructorFactory[key];
    }
  });
});

var _nativeOscillatorNode = require("./native-oscillator-node");

Object.keys(_nativeOscillatorNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeOscillatorNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeOscillatorNode[key];
    }
  });
});

var _nativeOscillatorNodeFactory = require("./native-oscillator-node-factory");

Object.keys(_nativeOscillatorNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeOscillatorNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeOscillatorNodeFactory[key];
    }
  });
});

var _nativeOscillatorNodeFactoryFactory = require("./native-oscillator-node-factory-factory");

Object.keys(_nativeOscillatorNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeOscillatorNodeFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeOscillatorNodeFactoryFactory[key];
    }
  });
});

var _nativePannerNode = require("./native-panner-node");

Object.keys(_nativePannerNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativePannerNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativePannerNode[key];
    }
  });
});

var _nativePannerNodeFactory = require("./native-panner-node-factory");

Object.keys(_nativePannerNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativePannerNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativePannerNodeFactory[key];
    }
  });
});

var _nativePannerNodeFactoryFactory = require("./native-panner-node-factory-factory");

Object.keys(_nativePannerNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativePannerNodeFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativePannerNodeFactoryFactory[key];
    }
  });
});

var _nativePannerNodeFakerFactory = require("./native-panner-node-faker-factory");

Object.keys(_nativePannerNodeFakerFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativePannerNodeFakerFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativePannerNodeFakerFactory[key];
    }
  });
});

var _nativePannerNodeFakerFactoryFactory = require("./native-panner-node-faker-factory-factory");

Object.keys(_nativePannerNodeFakerFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativePannerNodeFakerFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativePannerNodeFakerFactoryFactory[key];
    }
  });
});

var _nativePeriodicWave = require("./native-periodic-wave");

Object.keys(_nativePeriodicWave).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativePeriodicWave[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativePeriodicWave[key];
    }
  });
});

var _nativePeriodicWaveFactory = require("./native-periodic-wave-factory");

Object.keys(_nativePeriodicWaveFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativePeriodicWaveFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativePeriodicWaveFactory[key];
    }
  });
});

var _nativePeriodicWaveFactoryFactory = require("./native-periodic-wave-factory-factory");

Object.keys(_nativePeriodicWaveFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativePeriodicWaveFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativePeriodicWaveFactoryFactory[key];
    }
  });
});

var _nativeScriptProcessorNode = require("./native-script-processor-node");

Object.keys(_nativeScriptProcessorNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeScriptProcessorNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeScriptProcessorNode[key];
    }
  });
});

var _nativeScriptProcessorNodeFactory = require("./native-script-processor-node-factory");

Object.keys(_nativeScriptProcessorNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeScriptProcessorNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeScriptProcessorNodeFactory[key];
    }
  });
});

var _nativeStereoPannerNode = require("./native-stereo-panner-node");

Object.keys(_nativeStereoPannerNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeStereoPannerNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeStereoPannerNode[key];
    }
  });
});

var _nativeStereoPannerNodeFactory = require("./native-stereo-panner-node-factory");

Object.keys(_nativeStereoPannerNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeStereoPannerNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeStereoPannerNodeFactory[key];
    }
  });
});

var _nativeStereoPannerNodeFactoryFactory = require("./native-stereo-panner-node-factory-factory");

Object.keys(_nativeStereoPannerNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeStereoPannerNodeFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeStereoPannerNodeFactoryFactory[key];
    }
  });
});

var _nativeStereoPannerNodeFakerFactory = require("./native-stereo-panner-node-faker-factory");

Object.keys(_nativeStereoPannerNodeFakerFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeStereoPannerNodeFakerFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeStereoPannerNodeFakerFactory[key];
    }
  });
});

var _nativeStereoPannerNodeFakerFactoryFactory = require("./native-stereo-panner-node-faker-factory-factory");

Object.keys(_nativeStereoPannerNodeFakerFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeStereoPannerNodeFakerFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeStereoPannerNodeFakerFactoryFactory[key];
    }
  });
});

var _nativeWaveShaperNode = require("./native-wave-shaper-node");

Object.keys(_nativeWaveShaperNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeWaveShaperNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeWaveShaperNode[key];
    }
  });
});

var _nativeWaveShaperNodeFactory = require("./native-wave-shaper-node-factory");

Object.keys(_nativeWaveShaperNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeWaveShaperNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeWaveShaperNodeFactory[key];
    }
  });
});

var _nativeWaveShaperNodeFactoryFactory = require("./native-wave-shaper-node-factory-factory");

Object.keys(_nativeWaveShaperNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeWaveShaperNodeFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeWaveShaperNodeFactoryFactory[key];
    }
  });
});

var _nativeWaveShaperNodeFakerFactory = require("./native-wave-shaper-node-faker-factory");

Object.keys(_nativeWaveShaperNodeFakerFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeWaveShaperNodeFakerFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeWaveShaperNodeFakerFactory[key];
    }
  });
});

var _nativeWaveShaperNodeFakerFactoryFactory = require("./native-wave-shaper-node-faker-factory-factory");

Object.keys(_nativeWaveShaperNodeFakerFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nativeWaveShaperNodeFakerFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeWaveShaperNodeFakerFactoryFactory[key];
    }
  });
});

var _notSupportedErrorFactory = require("./not-supported-error-factory");

Object.keys(_notSupportedErrorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _notSupportedErrorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _notSupportedErrorFactory[key];
    }
  });
});

var _offlineAudioContextConstructorFactory = require("./offline-audio-context-constructor-factory");

Object.keys(_offlineAudioContextConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _offlineAudioContextConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _offlineAudioContextConstructorFactory[key];
    }
  });
});

var _oscillatorNodeConstructor = require("./oscillator-node-constructor");

Object.keys(_oscillatorNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _oscillatorNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _oscillatorNodeConstructor[key];
    }
  });
});

var _oscillatorNodeConstructorFactory = require("./oscillator-node-constructor-factory");

Object.keys(_oscillatorNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _oscillatorNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _oscillatorNodeConstructorFactory[key];
    }
  });
});

var _oscillatorNodeRenderer = require("./oscillator-node-renderer");

Object.keys(_oscillatorNodeRenderer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _oscillatorNodeRenderer[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _oscillatorNodeRenderer[key];
    }
  });
});

var _oscillatorNodeRendererFactory = require("./oscillator-node-renderer-factory");

Object.keys(_oscillatorNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _oscillatorNodeRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _oscillatorNodeRendererFactory[key];
    }
  });
});

var _oscillatorNodeRendererFactoryFactory = require("./oscillator-node-renderer-factory-factory");

Object.keys(_oscillatorNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _oscillatorNodeRendererFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _oscillatorNodeRendererFactoryFactory[key];
    }
  });
});

var _oscillatorType = require("./oscillator-type");

Object.keys(_oscillatorType).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _oscillatorType[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _oscillatorType[key];
    }
  });
});

var _outputConnection = require("./output-connection");

Object.keys(_outputConnection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _outputConnection[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _outputConnection[key];
    }
  });
});

var _overSampleType = require("./over-sample-type");

Object.keys(_overSampleType).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _overSampleType[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _overSampleType[key];
    }
  });
});

var _overwriteAccessorsFunction = require("./overwrite-accessors-function");

Object.keys(_overwriteAccessorsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _overwriteAccessorsFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _overwriteAccessorsFunction[key];
    }
  });
});

var _pannerNodeConstructor = require("./panner-node-constructor");

Object.keys(_pannerNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _pannerNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pannerNodeConstructor[key];
    }
  });
});

var _pannerNodeConstructorFactory = require("./panner-node-constructor-factory");

Object.keys(_pannerNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _pannerNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pannerNodeConstructorFactory[key];
    }
  });
});

var _pannerNodeRendererFactory = require("./panner-node-renderer-factory");

Object.keys(_pannerNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _pannerNodeRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pannerNodeRendererFactory[key];
    }
  });
});

var _pannerNodeRendererFactoryFactory = require("./panner-node-renderer-factory-factory");

Object.keys(_pannerNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _pannerNodeRendererFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pannerNodeRendererFactoryFactory[key];
    }
  });
});

var _panningModelType = require("./panning-model-type");

Object.keys(_panningModelType).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _panningModelType[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _panningModelType[key];
    }
  });
});

var _passiveAudioNodeInputConnection = require("./passive-audio-node-input-connection");

Object.keys(_passiveAudioNodeInputConnection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _passiveAudioNodeInputConnection[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _passiveAudioNodeInputConnection[key];
    }
  });
});

var _passiveAudioParamInputConnection = require("./passive-audio-param-input-connection");

Object.keys(_passiveAudioParamInputConnection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _passiveAudioParamInputConnection[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _passiveAudioParamInputConnection[key];
    }
  });
});

var _periodicWaveConstructor = require("./periodic-wave-constructor");

Object.keys(_periodicWaveConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _periodicWaveConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _periodicWaveConstructor[key];
    }
  });
});

var _periodicWaveConstructorFactory = require("./periodic-wave-constructor-factory");

Object.keys(_periodicWaveConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _periodicWaveConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _periodicWaveConstructorFactory[key];
    }
  });
});

var _pickElementFromSetFunction = require("./pick-element-from-set-function");

Object.keys(_pickElementFromSetFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _pickElementFromSetFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pickElementFromSetFunction[key];
    }
  });
});

var _renderAutomationFactory = require("./render-automation-factory");

Object.keys(_renderAutomationFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _renderAutomationFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _renderAutomationFactory[key];
    }
  });
});

var _renderAutomationFunction = require("./render-automation-function");

Object.keys(_renderAutomationFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _renderAutomationFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _renderAutomationFunction[key];
    }
  });
});

var _renderInputsOfAudioNodeFactory = require("./render-inputs-of-audio-node-factory");

Object.keys(_renderInputsOfAudioNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _renderInputsOfAudioNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _renderInputsOfAudioNodeFactory[key];
    }
  });
});

var _renderInputsOfAudioNodeFunction = require("./render-inputs-of-audio-node-function");

Object.keys(_renderInputsOfAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _renderInputsOfAudioNodeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _renderInputsOfAudioNodeFunction[key];
    }
  });
});

var _renderInputsOfAudioParamFactory = require("./render-inputs-of-audio-param-factory");

Object.keys(_renderInputsOfAudioParamFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _renderInputsOfAudioParamFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _renderInputsOfAudioParamFactory[key];
    }
  });
});

var _renderInputsOfAudioParamFunction = require("./render-inputs-of-audio-param-function");

Object.keys(_renderInputsOfAudioParamFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _renderInputsOfAudioParamFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _renderInputsOfAudioParamFunction[key];
    }
  });
});

var _renderNativeOfflineAudioContextFactory = require("./render-native-offline-audio-context-factory");

Object.keys(_renderNativeOfflineAudioContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _renderNativeOfflineAudioContextFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _renderNativeOfflineAudioContextFactory[key];
    }
  });
});

var _renderNativeOfflineAudioContextFunction = require("./render-native-offline-audio-context-function");

Object.keys(_renderNativeOfflineAudioContextFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _renderNativeOfflineAudioContextFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _renderNativeOfflineAudioContextFunction[key];
    }
  });
});

var _sanitizeAudioWorkletNodeOptionsFunction = require("./sanitize-audio-worklet-node-options-function");

Object.keys(_sanitizeAudioWorkletNodeOptionsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _sanitizeAudioWorkletNodeOptionsFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _sanitizeAudioWorkletNodeOptionsFunction[key];
    }
  });
});

var _sanitizeChannelSplitterOptionsFunction = require("./sanitize-channel-splitter-options-function");

Object.keys(_sanitizeChannelSplitterOptionsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _sanitizeChannelSplitterOptionsFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _sanitizeChannelSplitterOptionsFunction[key];
    }
  });
});

var _sanitizePeriodicWaveOptionsFunction = require("./sanitize-periodic-wave-options-function");

Object.keys(_sanitizePeriodicWaveOptionsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _sanitizePeriodicWaveOptionsFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _sanitizePeriodicWaveOptionsFunction[key];
    }
  });
});

var _setActiveAudioWorkletNodeInputsFactory = require("./set-active-audio-worklet-node-inputs-factory");

Object.keys(_setActiveAudioWorkletNodeInputsFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _setActiveAudioWorkletNodeInputsFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _setActiveAudioWorkletNodeInputsFactory[key];
    }
  });
});

var _setActiveAudioWorkletNodeInputsFunction = require("./set-active-audio-worklet-node-inputs-function");

Object.keys(_setActiveAudioWorkletNodeInputsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _setActiveAudioWorkletNodeInputsFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _setActiveAudioWorkletNodeInputsFunction[key];
    }
  });
});

var _setAudioNodeTailTimeFactory = require("./set-audio-node-tail-time-factory");

Object.keys(_setAudioNodeTailTimeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _setAudioNodeTailTimeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _setAudioNodeTailTimeFactory[key];
    }
  });
});

var _setAudioNodeTailTimeFunction = require("./set-audio-node-tail-time-function");

Object.keys(_setAudioNodeTailTimeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _setAudioNodeTailTimeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _setAudioNodeTailTimeFunction[key];
    }
  });
});

var _setValueAtTimeUntilPossibleFunction = require("./set-value-at-time-until-possible-function");

Object.keys(_setValueAtTimeUntilPossibleFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _setValueAtTimeUntilPossibleFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _setValueAtTimeUntilPossibleFunction[key];
    }
  });
});

var _startRenderingFactory = require("./start-rendering-factory");

Object.keys(_startRenderingFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _startRenderingFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _startRenderingFactory[key];
    }
  });
});

var _startRenderingFunction = require("./start-rendering-function");

Object.keys(_startRenderingFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _startRenderingFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _startRenderingFunction[key];
    }
  });
});

var _stereoPannerNodeConstructor = require("./stereo-panner-node-constructor");

Object.keys(_stereoPannerNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _stereoPannerNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stereoPannerNodeConstructor[key];
    }
  });
});

var _stereoPannerNodeConstructorFactory = require("./stereo-panner-node-constructor-factory");

Object.keys(_stereoPannerNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _stereoPannerNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stereoPannerNodeConstructorFactory[key];
    }
  });
});

var _stereoPannerNodeRendererFactoryFactory = require("./stereo-panner-node-renderer-factory-factory");

Object.keys(_stereoPannerNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _stereoPannerNodeRendererFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stereoPannerNodeRendererFactoryFactory[key];
    }
  });
});

var _stereoPannerNodeRendererFactory = require("./stereo-panner-node-renderer-factory");

Object.keys(_stereoPannerNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _stereoPannerNodeRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stereoPannerNodeRendererFactory[key];
    }
  });
});

var _testAudioBufferCopyChannelMethodsSubarraySupportFactory = require("./test-audio-buffer-copy-channel-methods-subarray-support-factory");

Object.keys(_testAudioBufferCopyChannelMethodsSubarraySupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _testAudioBufferCopyChannelMethodsSubarraySupportFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioBufferCopyChannelMethodsSubarraySupportFactory[key];
    }
  });
});

var _testAudioBufferConstructorSupportFactory = require("./test-audio-buffer-constructor-support-factory");

Object.keys(_testAudioBufferConstructorSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _testAudioBufferConstructorSupportFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioBufferConstructorSupportFactory[key];
    }
  });
});

var _testAudioContextCloseMethodSupportFactory = require("./test-audio-context-close-method-support-factory");

Object.keys(_testAudioContextCloseMethodSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _testAudioContextCloseMethodSupportFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioContextCloseMethodSupportFactory[key];
    }
  });
});

var _testAudioContextDecodeAudioDataMethodTypeErrorSupportFactory = require("./test-audio-context-decode-audio-data-method-type-error-support-factory");

Object.keys(_testAudioContextDecodeAudioDataMethodTypeErrorSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _testAudioContextDecodeAudioDataMethodTypeErrorSupportFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioContextDecodeAudioDataMethodTypeErrorSupportFactory[key];
    }
  });
});

var _testAudioContextOptionsSupportFactory = require("./test-audio-context-options-support-factory");

Object.keys(_testAudioContextOptionsSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _testAudioContextOptionsSupportFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioContextOptionsSupportFactory[key];
    }
  });
});

var _testAudioNodeConnectMethodSupportFactory = require("./test-audio-node-connect-method-support-factory");

Object.keys(_testAudioNodeConnectMethodSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _testAudioNodeConnectMethodSupportFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioNodeConnectMethodSupportFactory[key];
    }
  });
});

var _testAudioWorkletProcessorNoOutputsSupportFactory = require("./test-audio-worklet-processor-no-outputs-support-factory");

Object.keys(_testAudioWorkletProcessorNoOutputsSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _testAudioWorkletProcessorNoOutputsSupportFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioWorkletProcessorNoOutputsSupportFactory[key];
    }
  });
});

var _testAudioWorkletProcessorPostMessageSupportFactory = require("./test-audio-worklet-processor-post-message-support-factory");

Object.keys(_testAudioWorkletProcessorPostMessageSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _testAudioWorkletProcessorPostMessageSupportFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioWorkletProcessorPostMessageSupportFactory[key];
    }
  });
});

var _testChannelMergerNodeChannelCountSupportFactory = require("./test-channel-merger-node-channel-count-support-factory");

Object.keys(_testChannelMergerNodeChannelCountSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _testChannelMergerNodeChannelCountSupportFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testChannelMergerNodeChannelCountSupportFactory[key];
    }
  });
});

var _testConstantSourceNodeAccurateSchedulingSupportFactory = require("./test-constant-source-node-accurate-scheduling-support-factory");

Object.keys(_testConstantSourceNodeAccurateSchedulingSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _testConstantSourceNodeAccurateSchedulingSupportFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testConstantSourceNodeAccurateSchedulingSupportFactory[key];
    }
  });
});

var _testConvolverNodeBufferReassignabilitySupportFactory = require("./test-convolver-node-buffer-reassignability-support-factory");

Object.keys(_testConvolverNodeBufferReassignabilitySupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _testConvolverNodeBufferReassignabilitySupportFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testConvolverNodeBufferReassignabilitySupportFactory[key];
    }
  });
});

var _testConvolverNodeChannelCountSupportFactory = require("./test-convolver-node-channel-count-support-factory");

Object.keys(_testConvolverNodeChannelCountSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _testConvolverNodeChannelCountSupportFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testConvolverNodeChannelCountSupportFactory[key];
    }
  });
});

var _testIsSecureContextSupportFactory = require("./test-is-secure-context-support-factory");

Object.keys(_testIsSecureContextSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _testIsSecureContextSupportFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testIsSecureContextSupportFactory[key];
    }
  });
});

var _testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport = require("./test-media-stream-audio-source-node-media-stream-without-audio-track-support");

Object.keys(_testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport[key];
    }
  });
});

var _testOfflineAudioContextCurrentTimeSupportFactory = require("./test-offline-audio-context-current-time-support-factory");

Object.keys(_testOfflineAudioContextCurrentTimeSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _testOfflineAudioContextCurrentTimeSupportFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testOfflineAudioContextCurrentTimeSupportFactory[key];
    }
  });
});

var _testStereoPannerNodeDefaultValueSupportFactory = require("./test-stereo-panner-node-default-value-support-factory");

Object.keys(_testStereoPannerNodeDefaultValueSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _testStereoPannerNodeDefaultValueSupportFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testStereoPannerNodeDefaultValueSupportFactory[key];
    }
  });
});

var _unknownErrorFactory = require("./unknown-error-factory");

Object.keys(_unknownErrorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _unknownErrorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _unknownErrorFactory[key];
    }
  });
});

var _unrenderedAudioWorkletNodeStore = require("./unrendered-audio-worklet-node-store");

Object.keys(_unrenderedAudioWorkletNodeStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _unrenderedAudioWorkletNodeStore[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _unrenderedAudioWorkletNodeStore[key];
    }
  });
});

var _unrenderedAudioWorkletNodes = require("./unrendered-audio-worklet-nodes");

Object.keys(_unrenderedAudioWorkletNodes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _unrenderedAudioWorkletNodes[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _unrenderedAudioWorkletNodes[key];
    }
  });
});

var _waveShaperNodeConstructor = require("./wave-shaper-node-constructor");

Object.keys(_waveShaperNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _waveShaperNodeConstructor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _waveShaperNodeConstructor[key];
    }
  });
});

var _waveShaperNodeConstructorFactory = require("./wave-shaper-node-constructor-factory");

Object.keys(_waveShaperNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _waveShaperNodeConstructorFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _waveShaperNodeConstructorFactory[key];
    }
  });
});

var _waveShaperNodeRendererFactoryFactory = require("./wave-shaper-node-renderer-factory-factory");

Object.keys(_waveShaperNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _waveShaperNodeRendererFactoryFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _waveShaperNodeRendererFactoryFactory[key];
    }
  });
});

var _waveShaperNodeRendererFactory = require("./wave-shaper-node-renderer-factory");

Object.keys(_waveShaperNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _waveShaperNodeRendererFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _waveShaperNodeRendererFactory[key];
    }
  });
});

var _window = require("./window");

Object.keys(_window).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _window[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _window[key];
    }
  });
});

var _windowFactory = require("./window-factory");

Object.keys(_windowFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _windowFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _windowFactory[key];
    }
  });
});

var _wrapAudioBufferCopyChannelMethodsFactory = require("./wrap-audio-buffer-copy-channel-methods-factory");

Object.keys(_wrapAudioBufferCopyChannelMethodsFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _wrapAudioBufferCopyChannelMethodsFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapAudioBufferCopyChannelMethodsFactory[key];
    }
  });
});

var _wrapAudioBufferCopyChannelMethodsFunction = require("./wrap-audio-buffer-copy-channel-methods-function");

Object.keys(_wrapAudioBufferCopyChannelMethodsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _wrapAudioBufferCopyChannelMethodsFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapAudioBufferCopyChannelMethodsFunction[key];
    }
  });
});

var _wrapAudioBufferCopyChannelMethodsOutOfBoundsFactory = require("./wrap-audio-buffer-copy-channel-methods-out-of-bounds-factory");

Object.keys(_wrapAudioBufferCopyChannelMethodsOutOfBoundsFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _wrapAudioBufferCopyChannelMethodsOutOfBoundsFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapAudioBufferCopyChannelMethodsOutOfBoundsFactory[key];
    }
  });
});

var _wrapAudioBufferCopyChannelMethodsOutOfBoundsFunction = require("./wrap-audio-buffer-copy-channel-methods-out-of-bounds-function");

Object.keys(_wrapAudioBufferCopyChannelMethodsOutOfBoundsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _wrapAudioBufferCopyChannelMethodsOutOfBoundsFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapAudioBufferCopyChannelMethodsOutOfBoundsFunction[key];
    }
  });
});

var _wrapAudioBufferSourceNodeStartMethodOffsetClampingFunction = require("./wrap-audio-buffer-source-node-start-method-offset-clamping-function");

Object.keys(_wrapAudioBufferSourceNodeStartMethodOffsetClampingFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _wrapAudioBufferSourceNodeStartMethodOffsetClampingFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapAudioBufferSourceNodeStartMethodOffsetClampingFunction[key];
    }
  });
});

var _wrapAudioBufferSourceNodeStopMethodNullifiedBufferFactory = require("./wrap-audio-buffer-source-node-stop-method-nullified-buffer-factory");

Object.keys(_wrapAudioBufferSourceNodeStopMethodNullifiedBufferFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _wrapAudioBufferSourceNodeStopMethodNullifiedBufferFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapAudioBufferSourceNodeStopMethodNullifiedBufferFactory[key];
    }
  });
});

var _wrapAudioBufferSourceNodeStopMethodNullifiedBufferFunction = require("./wrap-audio-buffer-source-node-stop-method-nullified-buffer-function");

Object.keys(_wrapAudioBufferSourceNodeStopMethodNullifiedBufferFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _wrapAudioBufferSourceNodeStopMethodNullifiedBufferFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapAudioBufferSourceNodeStopMethodNullifiedBufferFunction[key];
    }
  });
});

var _wrapAudioScheduledSourceNodeStopMethodConsecutiveCallsFunction = require("./wrap-audio-scheduled-source-node-stop-method-consecutive-calls-function");

Object.keys(_wrapAudioScheduledSourceNodeStopMethodConsecutiveCallsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _wrapAudioScheduledSourceNodeStopMethodConsecutiveCallsFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapAudioScheduledSourceNodeStopMethodConsecutiveCallsFunction[key];
    }
  });
});

var _wrapChannelMergerNodeFactory = require("./wrap-channel-merger-node-factory");

Object.keys(_wrapChannelMergerNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _wrapChannelMergerNodeFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapChannelMergerNodeFactory[key];
    }
  });
});

var _wrapChannelMergerNodeFunction = require("./wrap-channel-merger-node-function");

Object.keys(_wrapChannelMergerNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _wrapChannelMergerNodeFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapChannelMergerNodeFunction[key];
    }
  });
});

var _wrapEventListenerFunction = require("./wrap-event-listener-function");

Object.keys(_wrapEventListenerFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _wrapEventListenerFunction[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapEventListenerFunction[key];
    }
  });
});
},{"./abort-error-factory":"node_modules/standardized-audio-context/build/es2019/types/abort-error-factory.js","./active-audio-worklet-node-inputs-store":"node_modules/standardized-audio-context/build/es2019/types/active-audio-worklet-node-inputs-store.js","./active-input-connection":"node_modules/standardized-audio-context/build/es2019/types/active-input-connection.js","./add-active-input-connection-to-audio-node-factory":"node_modules/standardized-audio-context/build/es2019/types/add-active-input-connection-to-audio-node-factory.js","./add-active-input-connection-to-audio-node-function":"node_modules/standardized-audio-context/build/es2019/types/add-active-input-connection-to-audio-node-function.js","./add-audio-node-connections-factory":"node_modules/standardized-audio-context/build/es2019/types/add-audio-node-connections-factory.js","./add-audio-node-connections-function":"node_modules/standardized-audio-context/build/es2019/types/add-audio-node-connections-function.js","./add-audio-param-connections-factory":"node_modules/standardized-audio-context/build/es2019/types/add-audio-param-connections-factory.js","./add-audio-param-connections-function":"node_modules/standardized-audio-context/build/es2019/types/add-audio-param-connections-function.js","./add-audio-worklet-module-factory":"node_modules/standardized-audio-context/build/es2019/types/add-audio-worklet-module-factory.js","./add-audio-worklet-module-function":"node_modules/standardized-audio-context/build/es2019/types/add-audio-worklet-module-function.js","./add-connection-to-audio-node-factory":"node_modules/standardized-audio-context/build/es2019/types/add-connection-to-audio-node-factory.js","./add-connection-to-audio-node-function":"node_modules/standardized-audio-context/build/es2019/types/add-connection-to-audio-node-function.js","./add-passive-input-connection-to-audio-node-factory":"node_modules/standardized-audio-context/build/es2019/types/add-passive-input-connection-to-audio-node-factory.js","./add-passive-input-connection-to-audio-node-function":"node_modules/standardized-audio-context/build/es2019/types/add-passive-input-connection-to-audio-node-function.js","./add-silent-connection-factory":"node_modules/standardized-audio-context/build/es2019/types/add-silent-connection-factory.js","./add-silent-connection-function":"node_modules/standardized-audio-context/build/es2019/types/add-silent-connection-function.js","./add-unrendered-audio-worklet-node-factory":"node_modules/standardized-audio-context/build/es2019/types/add-unrendered-audio-worklet-node-factory.js","./add-unrendered-audio-worklet-node-function":"node_modules/standardized-audio-context/build/es2019/types/add-unrendered-audio-worklet-node-function.js","./analyser-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/analyser-node-constructor.js","./analyser-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/analyser-node-constructor-factory.js","./analyser-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/analyser-node-renderer-factory.js","./analyser-node-renderer-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/analyser-node-renderer-factory-factory.js","./any-audio-buffer":"node_modules/standardized-audio-context/build/es2019/types/any-audio-buffer.js","./any-context":"node_modules/standardized-audio-context/build/es2019/types/any-context.js","./audio-buffer-constructor":"node_modules/standardized-audio-context/build/es2019/types/audio-buffer-constructor.js","./audio-buffer-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/audio-buffer-constructor-factory.js","./audio-buffer-source-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor.js","./audio-buffer-source-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor-factory.js","./audio-buffer-source-node-renderer":"node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer.js","./audio-buffer-source-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer-factory.js","./audio-buffer-source-node-renderer-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer-factory-factory.js","./audio-buffer-store":"node_modules/standardized-audio-context/build/es2019/types/audio-buffer-store.js","./audio-context-constructor":"node_modules/standardized-audio-context/build/es2019/types/audio-context-constructor.js","./audio-context-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/audio-context-constructor-factory.js","./audio-context-latency-category":"node_modules/standardized-audio-context/build/es2019/types/audio-context-latency-category.js","./audio-context-state":"node_modules/standardized-audio-context/build/es2019/types/audio-context-state.js","./audio-destination-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-constructor.js","./audio-destination-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-constructor-factory.js","./audio-destination-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-renderer-factory.js","./audio-listener-factory":"node_modules/standardized-audio-context/build/es2019/types/audio-listener-factory.js","./audio-listener-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/audio-listener-factory-factory.js","./audio-node-connections":"node_modules/standardized-audio-context/build/es2019/types/audio-node-connections.js","./audio-node-connections-store":"node_modules/standardized-audio-context/build/es2019/types/audio-node-connections-store.js","./audio-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/audio-node-constructor.js","./audio-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/audio-node-constructor-factory.js","./audio-node-output-connection":"node_modules/standardized-audio-context/build/es2019/types/audio-node-output-connection.js","./audio-node-renderer":"node_modules/standardized-audio-context/build/es2019/types/audio-node-renderer.js","./audio-node-store":"node_modules/standardized-audio-context/build/es2019/types/audio-node-store.js","./audio-node-tail-time-store":"node_modules/standardized-audio-context/build/es2019/types/audio-node-tail-time-store.js","./audio-param-audio-node-store":"node_modules/standardized-audio-context/build/es2019/types/audio-param-audio-node-store.js","./audio-param-connections":"node_modules/standardized-audio-context/build/es2019/types/audio-param-connections.js","./audio-param-connections-store":"node_modules/standardized-audio-context/build/es2019/types/audio-param-connections-store.js","./audio-param-factory":"node_modules/standardized-audio-context/build/es2019/types/audio-param-factory.js","./audio-param-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/audio-param-factory-factory.js","./audio-param-map":"node_modules/standardized-audio-context/build/es2019/types/audio-param-map.js","./audio-param-output-connection":"node_modules/standardized-audio-context/build/es2019/types/audio-param-output-connection.js","./audio-param-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/audio-param-renderer-factory.js","./audio-param-store":"node_modules/standardized-audio-context/build/es2019/types/audio-param-store.js","./audio-worklet-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor.js","./audio-worklet-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor-factory.js","./audio-worklet-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-renderer-factory.js","./audio-worklet-node-renderer-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-renderer-factory-factory.js","./backup-offline-audio-context-store":"node_modules/standardized-audio-context/build/es2019/types/backup-offline-audio-context-store.js","./base-audio-context-constructor":"node_modules/standardized-audio-context/build/es2019/types/base-audio-context-constructor.js","./base-audio-context-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/base-audio-context-constructor-factory.js","./biquad-filter-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-constructor.js","./biquad-filter-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-constructor-factory.js","./biquad-filter-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-renderer-factory.js","./biquad-filter-node-renderer-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-renderer-factory-factory.js","./biquad-filter-type":"node_modules/standardized-audio-context/build/es2019/types/biquad-filter-type.js","./channel-count-mode":"node_modules/standardized-audio-context/build/es2019/types/channel-count-mode.js","./channel-interpretation":"node_modules/standardized-audio-context/build/es2019/types/channel-interpretation.js","./channel-merger-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-constructor.js","./channel-merger-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-constructor-factory.js","./channel-merger-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-renderer-factory.js","./channel-merger-node-renderer-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-renderer-factory-factory.js","./channel-splitter-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-constructor.js","./channel-splitter-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-constructor-factory.js","./channel-splitter-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-renderer-factory.js","./channel-splitter-node-renderer-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-renderer-factory-factory.js","./cache-test-result-factory":"node_modules/standardized-audio-context/build/es2019/types/cache-test-result-factory.js","./cache-test-result-function":"node_modules/standardized-audio-context/build/es2019/types/cache-test-result-function.js","./connect-audio-param-factory":"node_modules/standardized-audio-context/build/es2019/types/connect-audio-param-factory.js","./connect-audio-param-function":"node_modules/standardized-audio-context/build/es2019/types/connect-audio-param-function.js","./connect-multiple-outputs-factory":"node_modules/standardized-audio-context/build/es2019/types/connect-multiple-outputs-factory.js","./connect-multiple-outputs-function":"node_modules/standardized-audio-context/build/es2019/types/connect-multiple-outputs-function.js","./connect-native-audio-node-to-native-audio-node-function":"node_modules/standardized-audio-context/build/es2019/types/connect-native-audio-node-to-native-audio-node-function.js","./connected-native-audio-buffer-source-node-factory":"node_modules/standardized-audio-context/build/es2019/types/connected-native-audio-buffer-source-node-factory.js","./connected-native-audio-buffer-source-node-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/connected-native-audio-buffer-source-node-factory-factory.js","./constant-source-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/constant-source-node-constructor.js","./constant-source-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/constant-source-node-constructor-factory.js","./constant-source-node-renderer":"node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer.js","./constant-source-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer-factory.js","./constant-source-node-renderer-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer-factory-factory.js","./constructor":"node_modules/standardized-audio-context/build/es2019/types/constructor.js","./context":"node_modules/standardized-audio-context/build/es2019/types/context.js","./context-store":"node_modules/standardized-audio-context/build/es2019/types/context-store.js","./convert-number-to-unsigned-long-factory":"node_modules/standardized-audio-context/build/es2019/types/convert-number-to-unsigned-long-factory.js","./convert-number-to-unsigned-long-function":"node_modules/standardized-audio-context/build/es2019/types/convert-number-to-unsigned-long-function.js","./convolver-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/convolver-node-constructor.js","./convolver-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/convolver-node-constructor-factory.js","./convolver-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/convolver-node-renderer-factory.js","./convolver-node-renderer-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/convolver-node-renderer-factory-factory.js","./create-native-offline-audio-context-factory":"node_modules/standardized-audio-context/build/es2019/types/create-native-offline-audio-context-factory.js","./create-native-offline-audio-context-function":"node_modules/standardized-audio-context/build/es2019/types/create-native-offline-audio-context-function.js","./cycle-counters":"node_modules/standardized-audio-context/build/es2019/types/cycle-counters.js","./data-clone-error-factory":"node_modules/standardized-audio-context/build/es2019/types/data-clone-error-factory.js","./decode-audio-data-factory":"node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-factory.js","./decode-audio-data-function":"node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-function.js","./decode-error-callback":"node_modules/standardized-audio-context/build/es2019/types/decode-error-callback.js","./decode-success-callback":"node_modules/standardized-audio-context/build/es2019/types/decode-success-callback.js","./decrement-cycle-counter-factory":"node_modules/standardized-audio-context/build/es2019/types/decrement-cycle-counter-factory.js","./decrement-cycle-counter-function":"node_modules/standardized-audio-context/build/es2019/types/decrement-cycle-counter-function.js","./delay-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/delay-node-constructor.js","./delay-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/delay-node-constructor-factory.js","./delay-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/delay-node-renderer-factory.js","./delay-node-renderer-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/delay-node-renderer-factory-factory.js","./delete-active-input-connection-to-audio-node-factory":"node_modules/standardized-audio-context/build/es2019/types/delete-active-input-connection-to-audio-node-factory.js","./delete-active-input-connection-to-audio-node-function":"node_modules/standardized-audio-context/build/es2019/types/delete-active-input-connection-to-audio-node-function.js","./delete-unrendered-audio-worklet-node-factory":"node_modules/standardized-audio-context/build/es2019/types/delete-unrendered-audio-worklet-node-factory.js","./delete-unrendered-audio-worklet-node-function":"node_modules/standardized-audio-context/build/es2019/types/delete-unrendered-audio-worklet-node-function.js","./detect-cycles-factory":"node_modules/standardized-audio-context/build/es2019/types/detect-cycles-factory.js","./detect-cycles-function":"node_modules/standardized-audio-context/build/es2019/types/detect-cycles-function.js","./disconnect-multiple-outputs-factory":"node_modules/standardized-audio-context/build/es2019/types/disconnect-multiple-outputs-factory.js","./disconnect-multiple-outputs-function":"node_modules/standardized-audio-context/build/es2019/types/disconnect-multiple-outputs-function.js","./disconnect-native-audio-node-from-native-audio-node-function":"node_modules/standardized-audio-context/build/es2019/types/disconnect-native-audio-node-from-native-audio-node-function.js","./distance-model-type":"node_modules/standardized-audio-context/build/es2019/types/distance-model-type.js","./dynamics-compressor-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-constructor.js","./dynamics-compressor-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-constructor-factory.js","./dynamics-compressor-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-renderer-factory.js","./dynamics-compressor-node-renderer-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-renderer-factory-factory.js","./encoding-error-factory":"node_modules/standardized-audio-context/build/es2019/types/encoding-error-factory.js","./error-event-handler":"node_modules/standardized-audio-context/build/es2019/types/error-event-handler.js","./evaluate-audio-worklet-global-scope-function":"node_modules/standardized-audio-context/build/es2019/types/evaluate-audio-worklet-global-scope-function.js","./evaluate-source-factory":"node_modules/standardized-audio-context/build/es2019/types/evaluate-source-factory.js","./evaluate-source-function":"node_modules/standardized-audio-context/build/es2019/types/evaluate-source-function.js","./event-handler":"node_modules/standardized-audio-context/build/es2019/types/event-handler.js","./event-target-constructor":"node_modules/standardized-audio-context/build/es2019/types/event-target-constructor.js","./event-target-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/event-target-constructor-factory.js","./expose-current-frame-and-current-time-factory":"node_modules/standardized-audio-context/build/es2019/types/expose-current-frame-and-current-time-factory.js","./expose-current-frame-and-current-time-function":"node_modules/standardized-audio-context/build/es2019/types/expose-current-frame-and-current-time-function.js","./fetch-source-factory":"node_modules/standardized-audio-context/build/es2019/types/fetch-source-factory.js","./fetch-source-function":"node_modules/standardized-audio-context/build/es2019/types/fetch-source-function.js","./gain-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/gain-node-constructor.js","./gain-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/gain-node-constructor-factory.js","./gain-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/gain-node-renderer-factory.js","./gain-node-renderer-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/gain-node-renderer-factory-factory.js","./get-active-audio-worklet-node-inputs-factory":"node_modules/standardized-audio-context/build/es2019/types/get-active-audio-worklet-node-inputs-factory.js","./get-active-audio-worklet-node-inputs-function":"node_modules/standardized-audio-context/build/es2019/types/get-active-audio-worklet-node-inputs-function.js","./get-audio-node-connections-function":"node_modules/standardized-audio-context/build/es2019/types/get-audio-node-connections-function.js","./get-audio-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/get-audio-node-renderer-factory.js","./get-audio-node-renderer-function":"node_modules/standardized-audio-context/build/es2019/types/get-audio-node-renderer-function.js","./get-audio-node-tail-time-factory":"node_modules/standardized-audio-context/build/es2019/types/get-audio-node-tail-time-factory.js","./get-audio-node-tail-time-function":"node_modules/standardized-audio-context/build/es2019/types/get-audio-node-tail-time-function.js","./get-audio-param-connections-function":"node_modules/standardized-audio-context/build/es2019/types/get-audio-param-connections-function.js","./get-audio-param-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/get-audio-param-renderer-factory.js","./get-audio-param-renderer-function":"node_modules/standardized-audio-context/build/es2019/types/get-audio-param-renderer-function.js","./get-backup-offline-audio-context-factory":"node_modules/standardized-audio-context/build/es2019/types/get-backup-offline-audio-context-factory.js","./get-backup-offline-audio-context-function":"node_modules/standardized-audio-context/build/es2019/types/get-backup-offline-audio-context-function.js","./get-event-listeners-of-audio-node-function":"node_modules/standardized-audio-context/build/es2019/types/get-event-listeners-of-audio-node-function.js","./get-native-audio-node-function":"node_modules/standardized-audio-context/build/es2019/types/get-native-audio-node-function.js","./get-native-audio-param-function":"node_modules/standardized-audio-context/build/es2019/types/get-native-audio-param-function.js","./get-native-context-factory":"node_modules/standardized-audio-context/build/es2019/types/get-native-context-factory.js","./get-native-context-function":"node_modules/standardized-audio-context/build/es2019/types/get-native-context-function.js","./get-or-create-backup-offline-audio-context-factory":"node_modules/standardized-audio-context/build/es2019/types/get-or-create-backup-offline-audio-context-factory.js","./get-or-create-backup-offline-audio-context-function":"node_modules/standardized-audio-context/build/es2019/types/get-or-create-backup-offline-audio-context-function.js","./get-unrendered-audio-worklet-nodes-factory":"node_modules/standardized-audio-context/build/es2019/types/get-unrendered-audio-worklet-nodes-factory.js","./get-unrendered-audio-worklet-nodes-function":"node_modules/standardized-audio-context/build/es2019/types/get-unrendered-audio-worklet-nodes-function.js","./get-value-for-key-function":"node_modules/standardized-audio-context/build/es2019/types/get-value-for-key-function.js","./iir-filter-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-constructor.js","./iir-filter-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-constructor-factory.js","./iir-filter-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-renderer-factory.js","./iir-filter-node-renderer-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-renderer-factory-factory.js","./increment-cycle-counter-factory":"node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-factory.js","./increment-cycle-counter-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-factory-factory.js","./increment-cycle-counter-function":"node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-function.js","./index-size-error-factory":"node_modules/standardized-audio-context/build/es2019/types/index-size-error-factory.js","./insert-element-in-set-function":"node_modules/standardized-audio-context/build/es2019/types/insert-element-in-set-function.js","./internal-state-event-listener":"node_modules/standardized-audio-context/build/es2019/types/internal-state-event-listener.js","./invalid-access-error-factory":"node_modules/standardized-audio-context/build/es2019/types/invalid-access-error-factory.js","./invalid-state-error-factory":"node_modules/standardized-audio-context/build/es2019/types/invalid-state-error-factory.js","./is-active-audio-node-function":"node_modules/standardized-audio-context/build/es2019/types/is-active-audio-node-function.js","./is-any-audio-context-factory":"node_modules/standardized-audio-context/build/es2019/types/is-any-audio-context-factory.js","./is-any-audio-context-function":"node_modules/standardized-audio-context/build/es2019/types/is-any-audio-context-function.js","./is-any-audio-node-factory":"node_modules/standardized-audio-context/build/es2019/types/is-any-audio-node-factory.js","./is-any-audio-node-function":"node_modules/standardized-audio-context/build/es2019/types/is-any-audio-node-function.js","./is-any-audio-param-factory":"node_modules/standardized-audio-context/build/es2019/types/is-any-audio-param-factory.js","./is-any-audio-param-function":"node_modules/standardized-audio-context/build/es2019/types/is-any-audio-param-function.js","./is-any-offline-audio-context-factory":"node_modules/standardized-audio-context/build/es2019/types/is-any-offline-audio-context-factory.js","./is-any-offline-audio-context-function":"node_modules/standardized-audio-context/build/es2019/types/is-any-offline-audio-context-function.js","./is-dc-curve-function":"node_modules/standardized-audio-context/build/es2019/types/is-dc-curve-function.js","./is-native-audio-context-factory":"node_modules/standardized-audio-context/build/es2019/types/is-native-audio-context-factory.js","./is-native-audio-context-function":"node_modules/standardized-audio-context/build/es2019/types/is-native-audio-context-function.js","./is-native-audio-node-factory":"node_modules/standardized-audio-context/build/es2019/types/is-native-audio-node-factory.js","./is-native-audio-node-function":"node_modules/standardized-audio-context/build/es2019/types/is-native-audio-node-function.js","./is-native-audio-param-factory":"node_modules/standardized-audio-context/build/es2019/types/is-native-audio-param-factory.js","./is-native-audio-param-function":"node_modules/standardized-audio-context/build/es2019/types/is-native-audio-param-function.js","./is-native-context-factory":"node_modules/standardized-audio-context/build/es2019/types/is-native-context-factory.js","./is-native-context-function":"node_modules/standardized-audio-context/build/es2019/types/is-native-context-function.js","./is-native-offline-audio-context-factory":"node_modules/standardized-audio-context/build/es2019/types/is-native-offline-audio-context-factory.js","./is-native-offline-audio-context-function":"node_modules/standardized-audio-context/build/es2019/types/is-native-offline-audio-context-function.js","./is-part-of-a-cycle-function":"node_modules/standardized-audio-context/build/es2019/types/is-part-of-a-cycle-function.js","./is-passive-audio-node-function":"node_modules/standardized-audio-context/build/es2019/types/is-passive-audio-node-function.js","./is-secure-context-factory":"node_modules/standardized-audio-context/build/es2019/types/is-secure-context-factory.js","./is-supported-promise-factory":"node_modules/standardized-audio-context/build/es2019/types/is-supported-promise-factory.js","./media-element-audio-source-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/media-element-audio-source-node-constructor.js","./media-element-audio-source-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/media-element-audio-source-node-constructor-factory.js","./media-stream-audio-destination-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-destination-node-constructor.js","./media-stream-audio-destination-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-destination-node-constructor-factory.js","./media-stream-audio-source-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-source-node-constructor.js","./media-stream-audio-source-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-source-node-constructor-factory.js","./media-stream-track-audio-source-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/media-stream-track-audio-source-node-constructor.js","./media-stream-track-audio-source-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/media-stream-track-audio-source-node-constructor-factory.js","./minimal-audio-context-constructor":"node_modules/standardized-audio-context/build/es2019/types/minimal-audio-context-constructor.js","./minimal-audio-context-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/minimal-audio-context-constructor-factory.js","./minimal-base-audio-context-constructor":"node_modules/standardized-audio-context/build/es2019/types/minimal-base-audio-context-constructor.js","./minimal-base-audio-context-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/minimal-base-audio-context-constructor-factory.js","./minimal-offline-audio-context-constructor":"node_modules/standardized-audio-context/build/es2019/types/minimal-offline-audio-context-constructor.js","./minimal-offline-audio-context-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/minimal-offline-audio-context-constructor-factory.js","./monitor-connections-factory":"node_modules/standardized-audio-context/build/es2019/types/monitor-connections-factory.js","./monitor-connections-function":"node_modules/standardized-audio-context/build/es2019/types/monitor-connections-function.js","./native-analyser-node":"node_modules/standardized-audio-context/build/es2019/types/native-analyser-node.js","./native-analyser-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-analyser-node-factory.js","./native-analyser-node-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-analyser-node-factory-factory.js","./native-audio-buffer":"node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer.js","./native-audio-buffer-constructor":"node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-constructor.js","./native-audio-buffer-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-constructor-factory.js","./native-audio-buffer-source-node":"node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node.js","./native-audio-buffer-source-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node-factory.js","./native-audio-buffer-source-node-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node-factory-factory.js","./native-audio-context":"node_modules/standardized-audio-context/build/es2019/types/native-audio-context.js","./native-audio-context-constructor":"node_modules/standardized-audio-context/build/es2019/types/native-audio-context-constructor.js","./native-audio-context-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/native-audio-context-constructor-factory.js","./native-audio-destination-node":"node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node.js","./native-audio-destination-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node-factory.js","./native-audio-destination-node-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node-factory-factory.js","./native-audio-listener":"node_modules/standardized-audio-context/build/es2019/types/native-audio-listener.js","./native-audio-node":"node_modules/standardized-audio-context/build/es2019/types/native-audio-node.js","./native-audio-param":"node_modules/standardized-audio-context/build/es2019/types/native-audio-param.js","./native-audio-param-map":"node_modules/standardized-audio-context/build/es2019/types/native-audio-param-map.js","./native-audio-worklet":"node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet.js","./native-audio-worklet-node":"node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node.js","./native-audio-worklet-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-constructor.js","./native-audio-worklet-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-constructor-factory.js","./native-audio-worklet-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-factory.js","./native-audio-worklet-node-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-factory-factory.js","./native-audio-worklet-node-faker-factory":"node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-faker-factory.js","./native-audio-worklet-node-faker-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-faker-factory-factory.js","./native-audio-worklet-node-options":"node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-options.js","./native-biquad-filter-node":"node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node.js","./native-biquad-filter-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node-factory.js","./native-channel-merger-node":"node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node.js","./native-channel-merger-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node-factory.js","./native-channel-merger-node-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node-factory-factory.js","./native-channel-splitter-node":"node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node.js","./native-channel-splitter-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node-factory.js","./native-constant-source-node":"node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node.js","./native-constant-source-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-factory.js","./native-constant-source-node-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-factory-factory.js","./native-constant-source-node-faker-factory":"node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-faker-factory.js","./native-constant-source-node-faker-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-faker-factory-factory.js","./native-context":"node_modules/standardized-audio-context/build/es2019/types/native-context.js","./native-convolver-node":"node_modules/standardized-audio-context/build/es2019/types/native-convolver-node.js","./native-convolver-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-factory.js","./native-convolver-node-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-factory-factory.js","./native-delay-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-delay-node-factory.js","./native-delay-node":"node_modules/standardized-audio-context/build/es2019/types/native-delay-node.js","./native-dynamics-compressor-node":"node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node.js","./native-dynamics-compressor-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node-factory.js","./native-dynamics-compressor-node-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node-factory-factory.js","./native-event-target":"node_modules/standardized-audio-context/build/es2019/types/native-event-target.js","./native-gain-node":"node_modules/standardized-audio-context/build/es2019/types/native-gain-node.js","./native-gain-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-gain-node-factory.js","./native-iir-filter-node":"node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node.js","./native-iir-filter-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-factory.js","./native-iir-filter-node-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-factory-factory.js","./native-iir-filter-node-faker-factory":"node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-faker-factory.js","./native-iir-filter-node-faker-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-faker-factory-factory.js","./native-media-element-audio-source-node":"node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node.js","./native-media-element-audio-source-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node-factory.js","./native-media-stream-audio-destination-node":"node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node.js","./native-media-stream-audio-destination-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node-factory.js","./native-media-stream-audio-source-node":"node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node.js","./native-media-stream-audio-source-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node-factory.js","./native-media-stream-track-audio-source-node":"node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node.js","./native-media-stream-track-audio-source-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node-factory.js","./native-media-stream-track-audio-source-node-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node-factory-factory.js","./native-offline-audio-context":"node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context.js","./native-offline-audio-context-constructor":"node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context-constructor.js","./native-offline-audio-context-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context-constructor-factory.js","./native-oscillator-node":"node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node.js","./native-oscillator-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node-factory.js","./native-oscillator-node-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node-factory-factory.js","./native-panner-node":"node_modules/standardized-audio-context/build/es2019/types/native-panner-node.js","./native-panner-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-panner-node-factory.js","./native-panner-node-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-panner-node-factory-factory.js","./native-panner-node-faker-factory":"node_modules/standardized-audio-context/build/es2019/types/native-panner-node-faker-factory.js","./native-panner-node-faker-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-panner-node-faker-factory-factory.js","./native-periodic-wave":"node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave.js","./native-periodic-wave-factory":"node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave-factory.js","./native-periodic-wave-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave-factory-factory.js","./native-script-processor-node":"node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node.js","./native-script-processor-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node-factory.js","./native-stereo-panner-node":"node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node.js","./native-stereo-panner-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-factory.js","./native-stereo-panner-node-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-factory-factory.js","./native-stereo-panner-node-faker-factory":"node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-faker-factory.js","./native-stereo-panner-node-faker-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-faker-factory-factory.js","./native-wave-shaper-node":"node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node.js","./native-wave-shaper-node-factory":"node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-factory.js","./native-wave-shaper-node-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-factory-factory.js","./native-wave-shaper-node-faker-factory":"node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-faker-factory.js","./native-wave-shaper-node-faker-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-faker-factory-factory.js","./not-supported-error-factory":"node_modules/standardized-audio-context/build/es2019/types/not-supported-error-factory.js","./offline-audio-context-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/offline-audio-context-constructor-factory.js","./oscillator-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/oscillator-node-constructor.js","./oscillator-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/oscillator-node-constructor-factory.js","./oscillator-node-renderer":"node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer.js","./oscillator-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer-factory.js","./oscillator-node-renderer-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer-factory-factory.js","./oscillator-type":"node_modules/standardized-audio-context/build/es2019/types/oscillator-type.js","./output-connection":"node_modules/standardized-audio-context/build/es2019/types/output-connection.js","./over-sample-type":"node_modules/standardized-audio-context/build/es2019/types/over-sample-type.js","./overwrite-accessors-function":"node_modules/standardized-audio-context/build/es2019/types/overwrite-accessors-function.js","./panner-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/panner-node-constructor.js","./panner-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/panner-node-constructor-factory.js","./panner-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/panner-node-renderer-factory.js","./panner-node-renderer-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/panner-node-renderer-factory-factory.js","./panning-model-type":"node_modules/standardized-audio-context/build/es2019/types/panning-model-type.js","./passive-audio-node-input-connection":"node_modules/standardized-audio-context/build/es2019/types/passive-audio-node-input-connection.js","./passive-audio-param-input-connection":"node_modules/standardized-audio-context/build/es2019/types/passive-audio-param-input-connection.js","./periodic-wave-constructor":"node_modules/standardized-audio-context/build/es2019/types/periodic-wave-constructor.js","./periodic-wave-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/periodic-wave-constructor-factory.js","./pick-element-from-set-function":"node_modules/standardized-audio-context/build/es2019/types/pick-element-from-set-function.js","./render-automation-factory":"node_modules/standardized-audio-context/build/es2019/types/render-automation-factory.js","./render-automation-function":"node_modules/standardized-audio-context/build/es2019/types/render-automation-function.js","./render-inputs-of-audio-node-factory":"node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-node-factory.js","./render-inputs-of-audio-node-function":"node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-node-function.js","./render-inputs-of-audio-param-factory":"node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-param-factory.js","./render-inputs-of-audio-param-function":"node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-param-function.js","./render-native-offline-audio-context-factory":"node_modules/standardized-audio-context/build/es2019/types/render-native-offline-audio-context-factory.js","./render-native-offline-audio-context-function":"node_modules/standardized-audio-context/build/es2019/types/render-native-offline-audio-context-function.js","./sanitize-audio-worklet-node-options-function":"node_modules/standardized-audio-context/build/es2019/types/sanitize-audio-worklet-node-options-function.js","./sanitize-channel-splitter-options-function":"node_modules/standardized-audio-context/build/es2019/types/sanitize-channel-splitter-options-function.js","./sanitize-periodic-wave-options-function":"node_modules/standardized-audio-context/build/es2019/types/sanitize-periodic-wave-options-function.js","./set-active-audio-worklet-node-inputs-factory":"node_modules/standardized-audio-context/build/es2019/types/set-active-audio-worklet-node-inputs-factory.js","./set-active-audio-worklet-node-inputs-function":"node_modules/standardized-audio-context/build/es2019/types/set-active-audio-worklet-node-inputs-function.js","./set-audio-node-tail-time-factory":"node_modules/standardized-audio-context/build/es2019/types/set-audio-node-tail-time-factory.js","./set-audio-node-tail-time-function":"node_modules/standardized-audio-context/build/es2019/types/set-audio-node-tail-time-function.js","./set-value-at-time-until-possible-function":"node_modules/standardized-audio-context/build/es2019/types/set-value-at-time-until-possible-function.js","./start-rendering-factory":"node_modules/standardized-audio-context/build/es2019/types/start-rendering-factory.js","./start-rendering-function":"node_modules/standardized-audio-context/build/es2019/types/start-rendering-function.js","./stereo-panner-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-constructor.js","./stereo-panner-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-constructor-factory.js","./stereo-panner-node-renderer-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-renderer-factory-factory.js","./stereo-panner-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-renderer-factory.js","./test-audio-buffer-copy-channel-methods-subarray-support-factory":"node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-copy-channel-methods-subarray-support-factory.js","./test-audio-buffer-constructor-support-factory":"node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-constructor-support-factory.js","./test-audio-context-close-method-support-factory":"node_modules/standardized-audio-context/build/es2019/types/test-audio-context-close-method-support-factory.js","./test-audio-context-decode-audio-data-method-type-error-support-factory":"node_modules/standardized-audio-context/build/es2019/types/test-audio-context-decode-audio-data-method-type-error-support-factory.js","./test-audio-context-options-support-factory":"node_modules/standardized-audio-context/build/es2019/types/test-audio-context-options-support-factory.js","./test-audio-node-connect-method-support-factory":"node_modules/standardized-audio-context/build/es2019/types/test-audio-node-connect-method-support-factory.js","./test-audio-worklet-processor-no-outputs-support-factory":"node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-processor-no-outputs-support-factory.js","./test-audio-worklet-processor-post-message-support-factory":"node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-processor-post-message-support-factory.js","./test-channel-merger-node-channel-count-support-factory":"node_modules/standardized-audio-context/build/es2019/types/test-channel-merger-node-channel-count-support-factory.js","./test-constant-source-node-accurate-scheduling-support-factory":"node_modules/standardized-audio-context/build/es2019/types/test-constant-source-node-accurate-scheduling-support-factory.js","./test-convolver-node-buffer-reassignability-support-factory":"node_modules/standardized-audio-context/build/es2019/types/test-convolver-node-buffer-reassignability-support-factory.js","./test-convolver-node-channel-count-support-factory":"node_modules/standardized-audio-context/build/es2019/types/test-convolver-node-channel-count-support-factory.js","./test-is-secure-context-support-factory":"node_modules/standardized-audio-context/build/es2019/types/test-is-secure-context-support-factory.js","./test-media-stream-audio-source-node-media-stream-without-audio-track-support":"node_modules/standardized-audio-context/build/es2019/types/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js","./test-offline-audio-context-current-time-support-factory":"node_modules/standardized-audio-context/build/es2019/types/test-offline-audio-context-current-time-support-factory.js","./test-stereo-panner-node-default-value-support-factory":"node_modules/standardized-audio-context/build/es2019/types/test-stereo-panner-node-default-value-support-factory.js","./unknown-error-factory":"node_modules/standardized-audio-context/build/es2019/types/unknown-error-factory.js","./unrendered-audio-worklet-node-store":"node_modules/standardized-audio-context/build/es2019/types/unrendered-audio-worklet-node-store.js","./unrendered-audio-worklet-nodes":"node_modules/standardized-audio-context/build/es2019/types/unrendered-audio-worklet-nodes.js","./wave-shaper-node-constructor":"node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-constructor.js","./wave-shaper-node-constructor-factory":"node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-constructor-factory.js","./wave-shaper-node-renderer-factory-factory":"node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-renderer-factory-factory.js","./wave-shaper-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-renderer-factory.js","./window":"node_modules/standardized-audio-context/build/es2019/types/window.js","./window-factory":"node_modules/standardized-audio-context/build/es2019/types/window-factory.js","./wrap-audio-buffer-copy-channel-methods-factory":"node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-factory.js","./wrap-audio-buffer-copy-channel-methods-function":"node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-function.js","./wrap-audio-buffer-copy-channel-methods-out-of-bounds-factory":"node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-factory.js","./wrap-audio-buffer-copy-channel-methods-out-of-bounds-function":"node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-function.js","./wrap-audio-buffer-source-node-start-method-offset-clamping-function":"node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-start-method-offset-clamping-function.js","./wrap-audio-buffer-source-node-stop-method-nullified-buffer-factory":"node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-stop-method-nullified-buffer-factory.js","./wrap-audio-buffer-source-node-stop-method-nullified-buffer-function":"node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-stop-method-nullified-buffer-function.js","./wrap-audio-scheduled-source-node-stop-method-consecutive-calls-function":"node_modules/standardized-audio-context/build/es2019/types/wrap-audio-scheduled-source-node-stop-method-consecutive-calls-function.js","./wrap-channel-merger-node-factory":"node_modules/standardized-audio-context/build/es2019/types/wrap-channel-merger-node-factory.js","./wrap-channel-merger-node-function":"node_modules/standardized-audio-context/build/es2019/types/wrap-channel-merger-node-function.js","./wrap-event-listener-function":"node_modules/standardized-audio-context/build/es2019/types/wrap-event-listener-function.js"}],"node_modules/standardized-audio-context/build/es2019/module.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  AnalyserNode: true,
  AudioBuffer: true,
  AudioBufferSourceNode: true,
  addAudioWorkletModule: true,
  decodeAudioData: true,
  AudioContext: true,
  AudioWorkletNode: true,
  BiquadFilterNode: true,
  ChannelMergerNode: true,
  ChannelSplitterNode: true,
  ConvolverNode: true,
  ConstantSourceNode: true,
  DelayNode: true,
  DynamicsCompressorNode: true,
  GainNode: true,
  IIRFilterNode: true,
  MediaElementAudioSourceNode: true,
  MediaStreamAudioDestinationNode: true,
  MediaStreamAudioSourceNode: true,
  MediaStreamTrackAudioSourceNode: true,
  MinimalAudioContext: true,
  MinimalOfflineAudioContext: true,
  OfflineAudioContext: true,
  OscillatorNode: true,
  PannerNode: true,
  PeriodicWave: true,
  StereoPannerNode: true,
  WaveShaperNode: true,
  isAnyAudioContext: true,
  isAnyAudioNode: true,
  isAnyAudioParam: true,
  isAnyOfflineAudioContext: true,
  isSupported: true
};
exports.isSupported = exports.isAnyOfflineAudioContext = exports.isAnyAudioParam = exports.isAnyAudioNode = exports.isAnyAudioContext = exports.WaveShaperNode = exports.StereoPannerNode = exports.PeriodicWave = exports.PannerNode = exports.OscillatorNode = exports.OfflineAudioContext = exports.MinimalOfflineAudioContext = exports.MinimalAudioContext = exports.MediaStreamTrackAudioSourceNode = exports.MediaStreamAudioSourceNode = exports.MediaStreamAudioDestinationNode = exports.MediaElementAudioSourceNode = exports.IIRFilterNode = exports.GainNode = exports.DynamicsCompressorNode = exports.DelayNode = exports.ConstantSourceNode = exports.ConvolverNode = exports.ChannelSplitterNode = exports.ChannelMergerNode = exports.BiquadFilterNode = exports.AudioWorkletNode = exports.AudioContext = exports.decodeAudioData = exports.addAudioWorkletModule = exports.AudioBufferSourceNode = exports.AudioBuffer = exports.AnalyserNode = void 0;

var _automationEvents = require("automation-events");

var _abortError = require("./factories/abort-error");

var _addActiveInputConnectionToAudioNode = require("./factories/add-active-input-connection-to-audio-node");

var _addAudioNodeConnections = require("./factories/add-audio-node-connections");

var _addAudioParamConnections = require("./factories/add-audio-param-connections");

var _addAudioWorkletModule = require("./factories/add-audio-worklet-module");

var _addConnectionToAudioNode = require("./factories/add-connection-to-audio-node");

var _addPassiveInputConnectionToAudioNode = require("./factories/add-passive-input-connection-to-audio-node");

var _addSilentConnection = require("./factories/add-silent-connection");

var _addUnrenderedAudioWorkletNode = require("./factories/add-unrendered-audio-worklet-node");

var _analyserNodeConstructor = require("./factories/analyser-node-constructor");

var _analyserNodeRendererFactory = require("./factories/analyser-node-renderer-factory");

var _audioBufferConstructor = require("./factories/audio-buffer-constructor");

var _audioBufferSourceNodeConstructor = require("./factories/audio-buffer-source-node-constructor");

var _audioBufferSourceNodeRendererFactory = require("./factories/audio-buffer-source-node-renderer-factory");

var _audioContextConstructor = require("./factories/audio-context-constructor");

var _audioDestinationNodeConstructor = require("./factories/audio-destination-node-constructor");

var _audioDestinationNodeRendererFactory = require("./factories/audio-destination-node-renderer-factory");

var _audioListenerFactory = require("./factories/audio-listener-factory");

var _audioNodeConstructor = require("./factories/audio-node-constructor");

var _audioParamFactory = require("./factories/audio-param-factory");

var _audioParamRenderer = require("./factories/audio-param-renderer");

var _audioWorkletNodeConstructor = require("./factories/audio-worklet-node-constructor");

var _audioWorkletNodeRendererFactory = require("./factories/audio-worklet-node-renderer-factory");

var _baseAudioContextConstructor = require("./factories/base-audio-context-constructor");

var _biquadFilterNodeConstructor = require("./factories/biquad-filter-node-constructor");

var _biquadFilterNodeRendererFactory = require("./factories/biquad-filter-node-renderer-factory");

var _cacheTestResult = require("./factories/cache-test-result");

var _channelMergerNodeConstructor = require("./factories/channel-merger-node-constructor");

var _channelMergerNodeRendererFactory = require("./factories/channel-merger-node-renderer-factory");

var _channelSplitterNodeConstructor = require("./factories/channel-splitter-node-constructor");

var _channelSplitterNodeRendererFactory = require("./factories/channel-splitter-node-renderer-factory");

var _connectAudioParam = require("./factories/connect-audio-param");

var _connectMultipleOutputs = require("./factories/connect-multiple-outputs");

var _connectedNativeAudioBufferSourceNodeFactory = require("./factories/connected-native-audio-buffer-source-node-factory");

var _constantSourceNodeConstructor = require("./factories/constant-source-node-constructor");

var _constantSourceNodeRendererFactory = require("./factories/constant-source-node-renderer-factory");

var _convertNumberToUnsignedLong = require("./factories/convert-number-to-unsigned-long");

var _convolverNodeConstructor = require("./factories/convolver-node-constructor");

var _convolverNodeRendererFactory = require("./factories/convolver-node-renderer-factory");

var _createNativeOfflineAudioContext = require("./factories/create-native-offline-audio-context");

var _dataCloneError = require("./factories/data-clone-error");

var _decodeAudioData = require("./factories/decode-audio-data");

var _decrementCycleCounter = require("./factories/decrement-cycle-counter");

var _delayNodeConstructor = require("./factories/delay-node-constructor");

var _delayNodeRendererFactory = require("./factories/delay-node-renderer-factory");

var _deleteActiveInputConnectionToAudioNode = require("./factories/delete-active-input-connection-to-audio-node");

var _deleteUnrenderedAudioWorkletNode = require("./factories/delete-unrendered-audio-worklet-node");

var _detectCycles = require("./factories/detect-cycles");

var _disconnectMultipleOutputs = require("./factories/disconnect-multiple-outputs");

var _dynamicsCompressorNodeConstructor = require("./factories/dynamics-compressor-node-constructor");

var _dynamicsCompressorNodeRendererFactory = require("./factories/dynamics-compressor-node-renderer-factory");

var _encodingError = require("./factories/encoding-error");

var _evaluateSource = require("./factories/evaluate-source");

var _eventTargetConstructor = require("./factories/event-target-constructor");

var _exposeCurrentFrameAndCurrentTime = require("./factories/expose-current-frame-and-current-time");

var _fetchSource = require("./factories/fetch-source");

var _gainNodeConstructor = require("./factories/gain-node-constructor");

var _gainNodeRendererFactory = require("./factories/gain-node-renderer-factory");

var _getActiveAudioWorkletNodeInputs = require("./factories/get-active-audio-worklet-node-inputs");

var _getAudioNodeRenderer = require("./factories/get-audio-node-renderer");

var _getAudioNodeTailTime = require("./factories/get-audio-node-tail-time");

var _getAudioParamRenderer = require("./factories/get-audio-param-renderer");

var _getBackupOfflineAudioContext = require("./factories/get-backup-offline-audio-context");

var _getNativeContext = require("./factories/get-native-context");

var _getOrCreateBackupOfflineAudioContext = require("./factories/get-or-create-backup-offline-audio-context");

var _getUnrenderedAudioWorkletNodes = require("./factories/get-unrendered-audio-worklet-nodes");

var _iirFilterNodeConstructor = require("./factories/iir-filter-node-constructor");

var _iirFilterNodeRendererFactory = require("./factories/iir-filter-node-renderer-factory");

var _incrementCycleCounterFactory = require("./factories/increment-cycle-counter-factory");

var _indexSizeError = require("./factories/index-size-error");

var _invalidAccessError = require("./factories/invalid-access-error");

var _invalidStateError = require("./factories/invalid-state-error");

var _isAnyAudioContext = require("./factories/is-any-audio-context");

var _isAnyAudioNode = require("./factories/is-any-audio-node");

var _isAnyAudioParam = require("./factories/is-any-audio-param");

var _isAnyOfflineAudioContext = require("./factories/is-any-offline-audio-context");

var _isNativeAudioContext = require("./factories/is-native-audio-context");

var _isNativeAudioNode = require("./factories/is-native-audio-node");

var _isNativeAudioParam = require("./factories/is-native-audio-param");

var _isNativeContext = require("./factories/is-native-context");

var _isNativeOfflineAudioContext = require("./factories/is-native-offline-audio-context");

var _isSecureContext = require("./factories/is-secure-context");

var _isSupportedPromise = require("./factories/is-supported-promise");

var _mediaElementAudioSourceNodeConstructor = require("./factories/media-element-audio-source-node-constructor");

var _mediaStreamAudioDestinationNodeConstructor = require("./factories/media-stream-audio-destination-node-constructor");

var _mediaStreamAudioSourceNodeConstructor = require("./factories/media-stream-audio-source-node-constructor");

var _mediaStreamTrackAudioSourceNodeConstructor = require("./factories/media-stream-track-audio-source-node-constructor");

var _minimalAudioContextConstructor = require("./factories/minimal-audio-context-constructor");

var _minimalBaseAudioContextConstructor = require("./factories/minimal-base-audio-context-constructor");

var _minimalOfflineAudioContextConstructor = require("./factories/minimal-offline-audio-context-constructor");

var _monitorConnections = require("./factories/monitor-connections");

var _nativeAnalyserNodeFactory = require("./factories/native-analyser-node-factory");

var _nativeAudioBufferConstructor = require("./factories/native-audio-buffer-constructor");

var _nativeAudioBufferSourceNodeFactory = require("./factories/native-audio-buffer-source-node-factory");

var _nativeAudioContextConstructor = require("./factories/native-audio-context-constructor");

var _nativeAudioDestinationNode = require("./factories/native-audio-destination-node");

var _nativeAudioWorkletNodeConstructor = require("./factories/native-audio-worklet-node-constructor");

var _nativeAudioWorkletNodeFactory = require("./factories/native-audio-worklet-node-factory");

var _nativeAudioWorkletNodeFakerFactory = require("./factories/native-audio-worklet-node-faker-factory");

var _nativeBiquadFilterNode = require("./factories/native-biquad-filter-node");

var _nativeChannelMergerNodeFactory = require("./factories/native-channel-merger-node-factory");

var _nativeChannelSplitterNode = require("./factories/native-channel-splitter-node");

var _nativeConstantSourceNodeFactory = require("./factories/native-constant-source-node-factory");

var _nativeConstantSourceNodeFakerFactory = require("./factories/native-constant-source-node-faker-factory");

var _nativeConvolverNodeFactory = require("./factories/native-convolver-node-factory");

var _nativeDelayNode = require("./factories/native-delay-node");

var _nativeDynamicsCompressorNodeFactory = require("./factories/native-dynamics-compressor-node-factory");

var _nativeGainNode = require("./factories/native-gain-node");

var _nativeIirFilterNodeFactory = require("./factories/native-iir-filter-node-factory");

var _nativeIirFilterNodeFakerFactory = require("./factories/native-iir-filter-node-faker-factory");

var _nativeMediaElementAudioSourceNode = require("./factories/native-media-element-audio-source-node");

var _nativeMediaStreamAudioDestinationNode = require("./factories/native-media-stream-audio-destination-node");

var _nativeMediaStreamAudioSourceNode = require("./factories/native-media-stream-audio-source-node");

var _nativeMediaStreamTrackAudioSourceNodeFactory = require("./factories/native-media-stream-track-audio-source-node-factory");

var _nativeOfflineAudioContextConstructor = require("./factories/native-offline-audio-context-constructor");

var _nativeOscillatorNodeFactory = require("./factories/native-oscillator-node-factory");

var _nativePannerNodeFactory = require("./factories/native-panner-node-factory");

var _nativePannerNodeFakerFactory = require("./factories/native-panner-node-faker-factory");

var _nativePeriodicWaveFactory = require("./factories/native-periodic-wave-factory");

var _nativeScriptProcessorNode = require("./factories/native-script-processor-node");

var _nativeStereoPannerNodeFactory = require("./factories/native-stereo-panner-node-factory");

var _nativeStereoPannerNodeFakerFactory = require("./factories/native-stereo-panner-node-faker-factory");

var _nativeWaveShaperNodeFactory = require("./factories/native-wave-shaper-node-factory");

var _nativeWaveShaperNodeFakerFactory = require("./factories/native-wave-shaper-node-faker-factory");

var _notSupportedError = require("./factories/not-supported-error");

var _offlineAudioContextConstructor = require("./factories/offline-audio-context-constructor");

var _oscillatorNodeConstructor = require("./factories/oscillator-node-constructor");

var _oscillatorNodeRendererFactory = require("./factories/oscillator-node-renderer-factory");

var _pannerNodeConstructor = require("./factories/panner-node-constructor");

var _pannerNodeRendererFactory = require("./factories/panner-node-renderer-factory");

var _periodicWaveConstructor = require("./factories/periodic-wave-constructor");

var _renderAutomation = require("./factories/render-automation");

var _renderInputsOfAudioNode = require("./factories/render-inputs-of-audio-node");

var _renderInputsOfAudioParam = require("./factories/render-inputs-of-audio-param");

var _renderNativeOfflineAudioContext = require("./factories/render-native-offline-audio-context");

var _setActiveAudioWorkletNodeInputs = require("./factories/set-active-audio-worklet-node-inputs");

var _setAudioNodeTailTime = require("./factories/set-audio-node-tail-time");

var _startRendering = require("./factories/start-rendering");

var _stereoPannerNodeConstructor = require("./factories/stereo-panner-node-constructor");

var _stereoPannerNodeRendererFactory = require("./factories/stereo-panner-node-renderer-factory");

var _testAudioBufferConstructorSupport = require("./factories/test-audio-buffer-constructor-support");

var _testAudioBufferCopyChannelMethodsSubarraySupport = require("./factories/test-audio-buffer-copy-channel-methods-subarray-support");

var _testAudioContextCloseMethodSupport = require("./factories/test-audio-context-close-method-support");

var _testAudioContextDecodeAudioDataMethodTypeErrorSupport = require("./factories/test-audio-context-decode-audio-data-method-type-error-support");

var _testAudioContextOptionsSupport = require("./factories/test-audio-context-options-support");

var _testAudioNodeConnectMethodSupport = require("./factories/test-audio-node-connect-method-support");

var _testAudioWorkletProcessorNoOutputsSupport = require("./factories/test-audio-worklet-processor-no-outputs-support");

var _testAudioWorkletProcessorPostMessageSupport = require("./factories/test-audio-worklet-processor-post-message-support");

var _testChannelMergerNodeChannelCountSupport = require("./factories/test-channel-merger-node-channel-count-support");

var _testConstantSourceNodeAccurateSchedulingSupport = require("./factories/test-constant-source-node-accurate-scheduling-support");

var _testConvolverNodeBufferReassignabilitySupport = require("./factories/test-convolver-node-buffer-reassignability-support");

var _testConvolverNodeChannelCountSupport = require("./factories/test-convolver-node-channel-count-support");

var _testIsSecureContextSupport = require("./factories/test-is-secure-context-support");

var _testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport = require("./factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support");

var _testOfflineAudioContextCurrentTimeSupport = require("./factories/test-offline-audio-context-current-time-support");

var _testStereoPannerNodeDefaultValueSupport = require("./factories/test-stereo-panner-node-default-value-support");

var _unknownError = require("./factories/unknown-error");

var _waveShaperNodeConstructor = require("./factories/wave-shaper-node-constructor");

var _waveShaperNodeRendererFactory = require("./factories/wave-shaper-node-renderer-factory");

var _window = require("./factories/window");

var _wrapAudioBufferCopyChannelMethods = require("./factories/wrap-audio-buffer-copy-channel-methods");

var _wrapAudioBufferCopyChannelMethodsOutOfBounds = require("./factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds");

var _wrapAudioBufferSourceNodeStopMethodNullifiedBuffer = require("./factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer");

var _wrapChannelMergerNode = require("./factories/wrap-channel-merger-node");

var _globals = require("./globals");

var _connectNativeAudioNodeToNativeAudioNode = require("./helpers/connect-native-audio-node-to-native-audio-node");

var _disconnectNativeAudioNodeFromNativeAudioNode = require("./helpers/disconnect-native-audio-node-from-native-audio-node");

var _getAudioNodeConnections = require("./helpers/get-audio-node-connections");

var _getAudioParamConnections = require("./helpers/get-audio-param-connections");

var _getEventListenersOfAudioNode = require("./helpers/get-event-listeners-of-audio-node");

var _getNativeAudioNode = require("./helpers/get-native-audio-node");

var _getNativeAudioParam = require("./helpers/get-native-audio-param");

var _getValueForKey = require("./helpers/get-value-for-key");

var _insertElementInSet = require("./helpers/insert-element-in-set");

var _isActiveAudioNode = require("./helpers/is-active-audio-node");

var _isDcCurve = require("./helpers/is-dc-curve");

var _isPartOfACycle = require("./helpers/is-part-of-a-cycle");

var _isPassiveAudioNode = require("./helpers/is-passive-audio-node");

var _overwriteAccessors = require("./helpers/overwrite-accessors");

var _pickElementFromSet = require("./helpers/pick-element-from-set");

var _sanitizeAudioWorkletNodeOptions = require("./helpers/sanitize-audio-worklet-node-options");

var _sanitizeChannelSplitterOptions = require("./helpers/sanitize-channel-splitter-options");

var _sanitizePeriodicWaveOptions = require("./helpers/sanitize-periodic-wave-options");

var _setValueAtTimeUntilPossible = require("./helpers/set-value-at-time-until-possible");

var _testAudioBufferCopyChannelMethodsOutOfBoundsSupport = require("./helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support");

var _testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = require("./helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support");

var _testAudioBufferSourceNodeStartMethodOffsetClampingSupport = require("./helpers/test-audio-buffer-source-node-start-method-offset-clamping-support");

var _testAudioBufferSourceNodeStopMethodNullifiedBufferSupport = require("./helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support");

var _testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = require("./helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support");

var _testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = require("./helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support");

var _testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = require("./helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support");

var _testDomExceptionConstructorSupport = require("./helpers/test-dom-exception-constructor-support");

var _testPromiseSupport = require("./helpers/test-promise-support");

var _testTransferablesSupport = require("./helpers/test-transferables-support");

var _wrapAudioBufferSourceNodeStartMethodOffsetClamping = require("./helpers/wrap-audio-buffer-source-node-start-method-offset-clamping");

var _wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = require("./helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls");

var _wrapEventListener = require("./helpers/wrap-event-listener");

var _index = require("./interfaces/index");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});

var _index2 = require("./types/index");

Object.keys(_index2).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index2[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index2[key];
    }
  });
});

/*
 * @todo Explicitly referencing the barrel file seems to be necessary when enabling the
 * isolatedModules compiler option.
 */
const addActiveInputConnectionToAudioNode = (0, _addActiveInputConnectionToAudioNode.createAddActiveInputConnectionToAudioNode)(_insertElementInSet.insertElementInSet);
const addPassiveInputConnectionToAudioNode = (0, _addPassiveInputConnectionToAudioNode.createAddPassiveInputConnectionToAudioNode)(_insertElementInSet.insertElementInSet);
const deleteActiveInputConnectionToAudioNode = (0, _deleteActiveInputConnectionToAudioNode.createDeleteActiveInputConnectionToAudioNode)(_pickElementFromSet.pickElementFromSet);
const audioNodeTailTimeStore = new WeakMap();
const getAudioNodeTailTime = (0, _getAudioNodeTailTime.createGetAudioNodeTailTime)(audioNodeTailTimeStore);
const cacheTestResult = (0, _cacheTestResult.createCacheTestResult)(new Map(), new WeakMap());
const window = (0, _window.createWindow)();
const createNativeAnalyserNode = (0, _nativeAnalyserNodeFactory.createNativeAnalyserNodeFactory)(cacheTestResult, _indexSizeError.createIndexSizeError);
const getAudioNodeRenderer = (0, _getAudioNodeRenderer.createGetAudioNodeRenderer)(_getAudioNodeConnections.getAudioNodeConnections);
const renderInputsOfAudioNode = (0, _renderInputsOfAudioNode.createRenderInputsOfAudioNode)(_getAudioNodeConnections.getAudioNodeConnections, getAudioNodeRenderer, _isPartOfACycle.isPartOfACycle);
const createAnalyserNodeRenderer = (0, _analyserNodeRendererFactory.createAnalyserNodeRendererFactory)(createNativeAnalyserNode, _getNativeAudioNode.getNativeAudioNode, renderInputsOfAudioNode);
const getNativeContext = (0, _getNativeContext.createGetNativeContext)(_globals.CONTEXT_STORE);
const nativeOfflineAudioContextConstructor = (0, _nativeOfflineAudioContextConstructor.createNativeOfflineAudioContextConstructor)(window);
const isNativeOfflineAudioContext = (0, _isNativeOfflineAudioContext.createIsNativeOfflineAudioContext)(nativeOfflineAudioContextConstructor);
const audioParamAudioNodeStore = new WeakMap();
const eventTargetConstructor = (0, _eventTargetConstructor.createEventTargetConstructor)(_wrapEventListener.wrapEventListener);
const nativeAudioContextConstructor = (0, _nativeAudioContextConstructor.createNativeAudioContextConstructor)(window);
const isNativeAudioContext = (0, _isNativeAudioContext.createIsNativeAudioContext)(nativeAudioContextConstructor);
const isNativeAudioNode = (0, _isNativeAudioNode.createIsNativeAudioNode)(window);
const isNativeAudioParam = (0, _isNativeAudioParam.createIsNativeAudioParam)(window);
const audioNodeConstructor = (0, _audioNodeConstructor.createAudioNodeConstructor)((0, _addAudioNodeConnections.createAddAudioNodeConnections)(_globals.AUDIO_NODE_CONNECTIONS_STORE), (0, _addConnectionToAudioNode.createAddConnectionToAudioNode)(addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, _connectNativeAudioNodeToNativeAudioNode.connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, _disconnectNativeAudioNodeFromNativeAudioNode.disconnectNativeAudioNodeFromNativeAudioNode, _getAudioNodeConnections.getAudioNodeConnections, getAudioNodeTailTime, _getEventListenersOfAudioNode.getEventListenersOfAudioNode, _getNativeAudioNode.getNativeAudioNode, _insertElementInSet.insertElementInSet, _isActiveAudioNode.isActiveAudioNode, _isPartOfACycle.isPartOfACycle, _isPassiveAudioNode.isPassiveAudioNode), cacheTestResult, (0, _incrementCycleCounterFactory.createIncrementCycleCounterFactory)(_globals.CYCLE_COUNTERS, _disconnectNativeAudioNodeFromNativeAudioNode.disconnectNativeAudioNodeFromNativeAudioNode, _getAudioNodeConnections.getAudioNodeConnections, _getNativeAudioNode.getNativeAudioNode, _getNativeAudioParam.getNativeAudioParam, _isActiveAudioNode.isActiveAudioNode), _indexSizeError.createIndexSizeError, _invalidAccessError.createInvalidAccessError, _notSupportedError.createNotSupportedError, (0, _decrementCycleCounter.createDecrementCycleCounter)(_connectNativeAudioNodeToNativeAudioNode.connectNativeAudioNodeToNativeAudioNode, _globals.CYCLE_COUNTERS, _getAudioNodeConnections.getAudioNodeConnections, _getNativeAudioNode.getNativeAudioNode, _getNativeAudioParam.getNativeAudioParam, getNativeContext, _isActiveAudioNode.isActiveAudioNode, isNativeOfflineAudioContext), (0, _detectCycles.createDetectCycles)(audioParamAudioNodeStore, _getAudioNodeConnections.getAudioNodeConnections, _getValueForKey.getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext);
const analyserNodeConstructor = (0, _analyserNodeConstructor.createAnalyserNodeConstructor)(audioNodeConstructor, createAnalyserNodeRenderer, _indexSizeError.createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);
exports.AnalyserNode = analyserNodeConstructor;
const audioBufferStore = new WeakSet();
const nativeAudioBufferConstructor = (0, _nativeAudioBufferConstructor.createNativeAudioBufferConstructor)(window);
const convertNumberToUnsignedLong = (0, _convertNumberToUnsignedLong.createConvertNumberToUnsignedLong)(new Uint32Array(1));
const wrapAudioBufferCopyChannelMethods = (0, _wrapAudioBufferCopyChannelMethods.createWrapAudioBufferCopyChannelMethods)(convertNumberToUnsignedLong, _indexSizeError.createIndexSizeError);
const wrapAudioBufferCopyChannelMethodsOutOfBounds = (0, _wrapAudioBufferCopyChannelMethodsOutOfBounds.createWrapAudioBufferCopyChannelMethodsOutOfBounds)(convertNumberToUnsignedLong);
const audioBufferConstructor = (0, _audioBufferConstructor.createAudioBufferConstructor)(audioBufferStore, cacheTestResult, _notSupportedError.createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, (0, _testAudioBufferConstructorSupport.createTestAudioBufferConstructorSupport)(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);
exports.AudioBuffer = audioBufferConstructor;
const addSilentConnection = (0, _addSilentConnection.createAddSilentConnection)(_nativeGainNode.createNativeGainNode);
const renderInputsOfAudioParam = (0, _renderInputsOfAudioParam.createRenderInputsOfAudioParam)(getAudioNodeRenderer, _getAudioParamConnections.getAudioParamConnections, _isPartOfACycle.isPartOfACycle);
const connectAudioParam = (0, _connectAudioParam.createConnectAudioParam)(renderInputsOfAudioParam);
const createNativeAudioBufferSourceNode = (0, _nativeAudioBufferSourceNodeFactory.createNativeAudioBufferSourceNodeFactory)(addSilentConnection, cacheTestResult, _testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport.testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, _testAudioBufferSourceNodeStartMethodOffsetClampingSupport.testAudioBufferSourceNodeStartMethodOffsetClampingSupport, _testAudioBufferSourceNodeStopMethodNullifiedBufferSupport.testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, _testAudioScheduledSourceNodeStartMethodNegativeParametersSupport.testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, _testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport.testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, _testAudioScheduledSourceNodeStopMethodNegativeParametersSupport.testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, _wrapAudioBufferSourceNodeStartMethodOffsetClamping.wrapAudioBufferSourceNodeStartMethodOffsetClamping, (0, _wrapAudioBufferSourceNodeStopMethodNullifiedBuffer.createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer)(_overwriteAccessors.overwriteAccessors), _wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls.wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);
const renderAutomation = (0, _renderAutomation.createRenderAutomation)((0, _getAudioParamRenderer.createGetAudioParamRenderer)(_getAudioParamConnections.getAudioParamConnections), renderInputsOfAudioParam);
const createAudioBufferSourceNodeRenderer = (0, _audioBufferSourceNodeRendererFactory.createAudioBufferSourceNodeRendererFactory)(connectAudioParam, createNativeAudioBufferSourceNode, _getNativeAudioNode.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const createAudioParam = (0, _audioParamFactory.createAudioParamFactory)((0, _addAudioParamConnections.createAddAudioParamConnections)(_globals.AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, _globals.AUDIO_PARAM_STORE, _audioParamRenderer.createAudioParamRenderer, _automationEvents.createCancelAndHoldAutomationEvent, _automationEvents.createCancelScheduledValuesAutomationEvent, _automationEvents.createExponentialRampToValueAutomationEvent, _automationEvents.createLinearRampToValueAutomationEvent, _automationEvents.createSetTargetAutomationEvent, _automationEvents.createSetValueAutomationEvent, _automationEvents.createSetValueCurveAutomationEvent, nativeAudioContextConstructor, _setValueAtTimeUntilPossible.setValueAtTimeUntilPossible);
const audioBufferSourceNodeConstructor = (0, _audioBufferSourceNodeConstructor.createAudioBufferSourceNodeConstructor)(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, _invalidStateError.createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, _wrapEventListener.wrapEventListener);
exports.AudioBufferSourceNode = audioBufferSourceNodeConstructor;
const audioDestinationNodeConstructor = (0, _audioDestinationNodeConstructor.createAudioDestinationNodeConstructor)(audioNodeConstructor, _audioDestinationNodeRendererFactory.createAudioDestinationNodeRenderer, _indexSizeError.createIndexSizeError, _invalidStateError.createInvalidStateError, (0, _nativeAudioDestinationNode.createNativeAudioDestinationNodeFactory)(_nativeGainNode.createNativeGainNode, _overwriteAccessors.overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);
const createBiquadFilterNodeRenderer = (0, _biquadFilterNodeRendererFactory.createBiquadFilterNodeRendererFactory)(connectAudioParam, _nativeBiquadFilterNode.createNativeBiquadFilterNode, _getNativeAudioNode.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const setAudioNodeTailTime = (0, _setAudioNodeTailTime.createSetAudioNodeTailTime)(audioNodeTailTimeStore);
const biquadFilterNodeConstructor = (0, _biquadFilterNodeConstructor.createBiquadFilterNodeConstructor)(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, _invalidAccessError.createInvalidAccessError, _nativeBiquadFilterNode.createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
exports.BiquadFilterNode = biquadFilterNodeConstructor;
const monitorConnections = (0, _monitorConnections.createMonitorConnections)(_insertElementInSet.insertElementInSet, isNativeAudioNode);
const wrapChannelMergerNode = (0, _wrapChannelMergerNode.createWrapChannelMergerNode)(_invalidStateError.createInvalidStateError, monitorConnections);
const createNativeChannelMergerNode = (0, _nativeChannelMergerNodeFactory.createNativeChannelMergerNodeFactory)(nativeAudioContextConstructor, wrapChannelMergerNode);
const createChannelMergerNodeRenderer = (0, _channelMergerNodeRendererFactory.createChannelMergerNodeRendererFactory)(createNativeChannelMergerNode, _getNativeAudioNode.getNativeAudioNode, renderInputsOfAudioNode);
const channelMergerNodeConstructor = (0, _channelMergerNodeConstructor.createChannelMergerNodeConstructor)(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);
exports.ChannelMergerNode = channelMergerNodeConstructor;
const createChannelSplitterNodeRenderer = (0, _channelSplitterNodeRendererFactory.createChannelSplitterNodeRendererFactory)(_nativeChannelSplitterNode.createNativeChannelSplitterNode, _getNativeAudioNode.getNativeAudioNode, renderInputsOfAudioNode);
const channelSplitterNodeConstructor = (0, _channelSplitterNodeConstructor.createChannelSplitterNodeConstructor)(audioNodeConstructor, createChannelSplitterNodeRenderer, _nativeChannelSplitterNode.createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, _sanitizeChannelSplitterOptions.sanitizeChannelSplitterOptions);
exports.ChannelSplitterNode = channelSplitterNodeConstructor;
const createNativeConstantSourceNodeFaker = (0, _nativeConstantSourceNodeFakerFactory.createNativeConstantSourceNodeFakerFactory)(addSilentConnection, createNativeAudioBufferSourceNode, _nativeGainNode.createNativeGainNode, monitorConnections);
const createNativeConstantSourceNode = (0, _nativeConstantSourceNodeFactory.createNativeConstantSourceNodeFactory)(addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, _testAudioScheduledSourceNodeStartMethodNegativeParametersSupport.testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, _testAudioScheduledSourceNodeStopMethodNegativeParametersSupport.testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);
const createConstantSourceNodeRenderer = (0, _constantSourceNodeRendererFactory.createConstantSourceNodeRendererFactory)(connectAudioParam, createNativeConstantSourceNode, _getNativeAudioNode.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const constantSourceNodeConstructor = (0, _constantSourceNodeConstructor.createConstantSourceNodeConstructor)(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, _wrapEventListener.wrapEventListener);
exports.ConstantSourceNode = constantSourceNodeConstructor;
const createNativeConvolverNode = (0, _nativeConvolverNodeFactory.createNativeConvolverNodeFactory)(_notSupportedError.createNotSupportedError, _overwriteAccessors.overwriteAccessors);
const createConvolverNodeRenderer = (0, _convolverNodeRendererFactory.createConvolverNodeRendererFactory)(createNativeConvolverNode, _getNativeAudioNode.getNativeAudioNode, renderInputsOfAudioNode);
const convolverNodeConstructor = (0, _convolverNodeConstructor.createConvolverNodeConstructor)(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
exports.ConvolverNode = convolverNodeConstructor;
const createDelayNodeRenderer = (0, _delayNodeRendererFactory.createDelayNodeRendererFactory)(connectAudioParam, _nativeDelayNode.createNativeDelayNode, _getNativeAudioNode.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const delayNodeConstructor = (0, _delayNodeConstructor.createDelayNodeConstructor)(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, _nativeDelayNode.createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
exports.DelayNode = delayNodeConstructor;
const createNativeDynamicsCompressorNode = (0, _nativeDynamicsCompressorNodeFactory.createNativeDynamicsCompressorNodeFactory)(_notSupportedError.createNotSupportedError);
const createDynamicsCompressorNodeRenderer = (0, _dynamicsCompressorNodeRendererFactory.createDynamicsCompressorNodeRendererFactory)(connectAudioParam, createNativeDynamicsCompressorNode, _getNativeAudioNode.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const dynamicsCompressorNodeConstructor = (0, _dynamicsCompressorNodeConstructor.createDynamicsCompressorNodeConstructor)(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, _notSupportedError.createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
exports.DynamicsCompressorNode = dynamicsCompressorNodeConstructor;
const createGainNodeRenderer = (0, _gainNodeRendererFactory.createGainNodeRendererFactory)(connectAudioParam, _nativeGainNode.createNativeGainNode, _getNativeAudioNode.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const gainNodeConstructor = (0, _gainNodeConstructor.createGainNodeConstructor)(audioNodeConstructor, createAudioParam, createGainNodeRenderer, _nativeGainNode.createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);
exports.GainNode = gainNodeConstructor;
const createNativeIIRFilterNodeFaker = (0, _nativeIirFilterNodeFakerFactory.createNativeIIRFilterNodeFakerFactory)(_invalidAccessError.createInvalidAccessError, _invalidStateError.createInvalidStateError, _nativeScriptProcessorNode.createNativeScriptProcessorNode, _notSupportedError.createNotSupportedError);
const renderNativeOfflineAudioContext = (0, _renderNativeOfflineAudioContext.createRenderNativeOfflineAudioContext)(cacheTestResult, _nativeGainNode.createNativeGainNode, _nativeScriptProcessorNode.createNativeScriptProcessorNode, (0, _testOfflineAudioContextCurrentTimeSupport.createTestOfflineAudioContextCurrentTimeSupport)(_nativeGainNode.createNativeGainNode, nativeOfflineAudioContextConstructor));
const createIIRFilterNodeRenderer = (0, _iirFilterNodeRendererFactory.createIIRFilterNodeRendererFactory)(createNativeAudioBufferSourceNode, _getNativeAudioNode.getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);
const createNativeIIRFilterNode = (0, _nativeIirFilterNodeFactory.createNativeIIRFilterNodeFactory)(createNativeIIRFilterNodeFaker);
const iIRFilterNodeConstructor = (0, _iirFilterNodeConstructor.createIIRFilterNodeConstructor)(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
exports.IIRFilterNode = iIRFilterNodeConstructor;
const createAudioListener = (0, _audioListenerFactory.createAudioListenerFactory)(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, _nativeScriptProcessorNode.createNativeScriptProcessorNode, isNativeOfflineAudioContext);
const unrenderedAudioWorkletNodeStore = new WeakMap();
const minimalBaseAudioContextConstructor = (0, _minimalBaseAudioContextConstructor.createMinimalBaseAudioContextConstructor)(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, _wrapEventListener.wrapEventListener);
const createNativeOscillatorNode = (0, _nativeOscillatorNodeFactory.createNativeOscillatorNodeFactory)(addSilentConnection, cacheTestResult, _testAudioScheduledSourceNodeStartMethodNegativeParametersSupport.testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, _testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport.testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, _testAudioScheduledSourceNodeStopMethodNegativeParametersSupport.testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, _wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls.wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);
const createOscillatorNodeRenderer = (0, _oscillatorNodeRendererFactory.createOscillatorNodeRendererFactory)(connectAudioParam, createNativeOscillatorNode, _getNativeAudioNode.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const oscillatorNodeConstructor = (0, _oscillatorNodeConstructor.createOscillatorNodeConstructor)(audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, _wrapEventListener.wrapEventListener);
exports.OscillatorNode = oscillatorNodeConstructor;
const createConnectedNativeAudioBufferSourceNode = (0, _connectedNativeAudioBufferSourceNodeFactory.createConnectedNativeAudioBufferSourceNodeFactory)(createNativeAudioBufferSourceNode);
const createNativeWaveShaperNodeFaker = (0, _nativeWaveShaperNodeFakerFactory.createNativeWaveShaperNodeFakerFactory)(createConnectedNativeAudioBufferSourceNode, _invalidStateError.createInvalidStateError, _nativeGainNode.createNativeGainNode, _isDcCurve.isDCCurve, monitorConnections);
const createNativeWaveShaperNode = (0, _nativeWaveShaperNodeFactory.createNativeWaveShaperNodeFactory)(createConnectedNativeAudioBufferSourceNode, _invalidStateError.createInvalidStateError, createNativeWaveShaperNodeFaker, _isDcCurve.isDCCurve, monitorConnections, nativeAudioContextConstructor, _overwriteAccessors.overwriteAccessors);
const createNativePannerNodeFaker = (0, _nativePannerNodeFakerFactory.createNativePannerNodeFakerFactory)(_connectNativeAudioNodeToNativeAudioNode.connectNativeAudioNodeToNativeAudioNode, _invalidStateError.createInvalidStateError, createNativeChannelMergerNode, _nativeGainNode.createNativeGainNode, _nativeScriptProcessorNode.createNativeScriptProcessorNode, createNativeWaveShaperNode, _notSupportedError.createNotSupportedError, _disconnectNativeAudioNodeFromNativeAudioNode.disconnectNativeAudioNodeFromNativeAudioNode, monitorConnections);
const createNativePannerNode = (0, _nativePannerNodeFactory.createNativePannerNodeFactory)(createNativePannerNodeFaker);
const createPannerNodeRenderer = (0, _pannerNodeRendererFactory.createPannerNodeRendererFactory)(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, _nativeGainNode.createNativeGainNode, createNativePannerNode, _getNativeAudioNode.getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);
const pannerNodeConstructor = (0, _pannerNodeConstructor.createPannerNodeConstructor)(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
exports.PannerNode = pannerNodeConstructor;
const createNativePeriodicWave = (0, _nativePeriodicWaveFactory.createNativePeriodicWaveFactory)(_indexSizeError.createIndexSizeError);
const periodicWaveConstructor = (0, _periodicWaveConstructor.createPeriodicWaveConstructor)(createNativePeriodicWave, getNativeContext, new WeakSet(), _sanitizePeriodicWaveOptions.sanitizePeriodicWaveOptions);
exports.PeriodicWave = periodicWaveConstructor;
const nativeStereoPannerNodeFakerFactory = (0, _nativeStereoPannerNodeFakerFactory.createNativeStereoPannerNodeFakerFactory)(createNativeChannelMergerNode, _nativeChannelSplitterNode.createNativeChannelSplitterNode, _nativeGainNode.createNativeGainNode, createNativeWaveShaperNode, _notSupportedError.createNotSupportedError, monitorConnections);
const createNativeStereoPannerNode = (0, _nativeStereoPannerNodeFactory.createNativeStereoPannerNodeFactory)(nativeStereoPannerNodeFakerFactory, _notSupportedError.createNotSupportedError);
const createStereoPannerNodeRenderer = (0, _stereoPannerNodeRendererFactory.createStereoPannerNodeRendererFactory)(connectAudioParam, createNativeStereoPannerNode, _getNativeAudioNode.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const stereoPannerNodeConstructor = (0, _stereoPannerNodeConstructor.createStereoPannerNodeConstructor)(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);
exports.StereoPannerNode = stereoPannerNodeConstructor;
const createWaveShaperNodeRenderer = (0, _waveShaperNodeRendererFactory.createWaveShaperNodeRendererFactory)(createNativeWaveShaperNode, _getNativeAudioNode.getNativeAudioNode, renderInputsOfAudioNode);
const waveShaperNodeConstructor = (0, _waveShaperNodeConstructor.createWaveShaperNodeConstructor)(audioNodeConstructor, _invalidStateError.createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
exports.WaveShaperNode = waveShaperNodeConstructor;
const isSecureContext = (0, _isSecureContext.createIsSecureContext)(window);
const exposeCurrentFrameAndCurrentTime = (0, _exposeCurrentFrameAndCurrentTime.createExposeCurrentFrameAndCurrentTime)(window);
const backupOfflineAudioContextStore = new WeakMap();
const getOrCreateBackupOfflineAudioContext = (0, _getOrCreateBackupOfflineAudioContext.createGetOrCreateBackupOfflineAudioContext)(backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor);
const nativeAudioWorkletNodeConstructor = (0, _nativeAudioWorkletNodeConstructor.createNativeAudioWorkletNodeConstructor)(window); // The addAudioWorkletModule() function is only available in a SecureContext.

const addAudioWorkletModule = isSecureContext ? (0, _addAudioWorkletModule.createAddAudioWorkletModule)(cacheTestResult, _notSupportedError.createNotSupportedError, (0, _evaluateSource.createEvaluateSource)(window), exposeCurrentFrameAndCurrentTime, (0, _fetchSource.createFetchSource)(_abortError.createAbortError), getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, new WeakMap(), new WeakMap(), (0, _testAudioWorkletProcessorPostMessageSupport.createTestAudioWorkletProcessorPostMessageSupport)(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), // @todo window is guaranteed to be defined because isSecureContext checks that as well.
window) : undefined;
exports.addAudioWorkletModule = addAudioWorkletModule;
const isNativeContext = (0, _isNativeContext.createIsNativeContext)(isNativeAudioContext, isNativeOfflineAudioContext);
const decodeAudioData = (0, _decodeAudioData.createDecodeAudioData)(audioBufferStore, cacheTestResult, _dataCloneError.createDataCloneError, _encodingError.createEncodingError, new WeakSet(), getNativeContext, isNativeContext, _testAudioBufferCopyChannelMethodsOutOfBoundsSupport.testAudioBufferCopyChannelMethodsOutOfBoundsSupport, _testPromiseSupport.testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);
exports.decodeAudioData = decodeAudioData;
const baseAudioContextConstructor = (0, _baseAudioContextConstructor.createBaseAudioContextConstructor)(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);
const mediaElementAudioSourceNodeConstructor = (0, _mediaElementAudioSourceNodeConstructor.createMediaElementAudioSourceNodeConstructor)(audioNodeConstructor, _nativeMediaElementAudioSourceNode.createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);
exports.MediaElementAudioSourceNode = mediaElementAudioSourceNodeConstructor;
const mediaStreamAudioDestinationNodeConstructor = (0, _mediaStreamAudioDestinationNodeConstructor.createMediaStreamAudioDestinationNodeConstructor)(audioNodeConstructor, _nativeMediaStreamAudioDestinationNode.createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext);
exports.MediaStreamAudioDestinationNode = mediaStreamAudioDestinationNodeConstructor;
const mediaStreamAudioSourceNodeConstructor = (0, _mediaStreamAudioSourceNodeConstructor.createMediaStreamAudioSourceNodeConstructor)(audioNodeConstructor, _nativeMediaStreamAudioSourceNode.createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);
exports.MediaStreamAudioSourceNode = mediaStreamAudioSourceNodeConstructor;
const createNativeMediaStreamTrackAudioSourceNode = (0, _nativeMediaStreamTrackAudioSourceNodeFactory.createNativeMediaStreamTrackAudioSourceNodeFactory)(_invalidStateError.createInvalidStateError, isNativeOfflineAudioContext);
const mediaStreamTrackAudioSourceNodeConstructor = (0, _mediaStreamTrackAudioSourceNodeConstructor.createMediaStreamTrackAudioSourceNodeConstructor)(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);
exports.MediaStreamTrackAudioSourceNode = mediaStreamTrackAudioSourceNodeConstructor;
const audioContextConstructor = (0, _audioContextConstructor.createAudioContextConstructor)(baseAudioContextConstructor, _invalidStateError.createInvalidStateError, _notSupportedError.createNotSupportedError, _unknownError.createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);
exports.AudioContext = audioContextConstructor;
const getUnrenderedAudioWorkletNodes = (0, _getUnrenderedAudioWorkletNodes.createGetUnrenderedAudioWorkletNodes)(unrenderedAudioWorkletNodeStore);
const addUnrenderedAudioWorkletNode = (0, _addUnrenderedAudioWorkletNode.createAddUnrenderedAudioWorkletNode)(getUnrenderedAudioWorkletNodes);
const connectMultipleOutputs = (0, _connectMultipleOutputs.createConnectMultipleOutputs)(_indexSizeError.createIndexSizeError);
const deleteUnrenderedAudioWorkletNode = (0, _deleteUnrenderedAudioWorkletNode.createDeleteUnrenderedAudioWorkletNode)(getUnrenderedAudioWorkletNodes);
const disconnectMultipleOutputs = (0, _disconnectMultipleOutputs.createDisconnectMultipleOutputs)(_indexSizeError.createIndexSizeError);
const activeAudioWorkletNodeInputsStore = new WeakMap();
const getActiveAudioWorkletNodeInputs = (0, _getActiveAudioWorkletNodeInputs.createGetActiveAudioWorkletNodeInputs)(activeAudioWorkletNodeInputsStore, _getValueForKey.getValueForKey);
const createNativeAudioWorkletNodeFaker = (0, _nativeAudioWorkletNodeFakerFactory.createNativeAudioWorkletNodeFakerFactory)(connectMultipleOutputs, _indexSizeError.createIndexSizeError, _invalidStateError.createInvalidStateError, createNativeChannelMergerNode, _nativeChannelSplitterNode.createNativeChannelSplitterNode, createNativeConstantSourceNode, _nativeGainNode.createNativeGainNode, _nativeScriptProcessorNode.createNativeScriptProcessorNode, _notSupportedError.createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections);
const createNativeAudioWorkletNode = (0, _nativeAudioWorkletNodeFactory.createNativeAudioWorkletNodeFactory)(_invalidStateError.createInvalidStateError, createNativeAudioWorkletNodeFaker, _nativeGainNode.createNativeGainNode, _notSupportedError.createNotSupportedError, monitorConnections);
const createAudioWorkletNodeRenderer = (0, _audioWorkletNodeRendererFactory.createAudioWorkletNodeRendererFactory)(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, _nativeChannelSplitterNode.createNativeChannelSplitterNode, createNativeConstantSourceNode, _nativeGainNode.createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, _getNativeAudioNode.getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);
const getBackupOfflineAudioContext = (0, _getBackupOfflineAudioContext.createGetBackupOfflineAudioContext)(backupOfflineAudioContextStore);
const setActiveAudioWorkletNodeInputs = (0, _setActiveAudioWorkletNodeInputs.createSetActiveAudioWorkletNodeInputs)(activeAudioWorkletNodeInputsStore); // The AudioWorkletNode constructor is only available in a SecureContext.

const audioWorkletNodeConstructor = isSecureContext ? (0, _audioWorkletNodeConstructor.createAudioWorkletNodeConstructor)(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, _getAudioNodeConnections.getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, _sanitizeAudioWorkletNodeOptions.sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, _wrapEventListener.wrapEventListener) : undefined;
exports.AudioWorkletNode = audioWorkletNodeConstructor;
const minimalAudioContextConstructor = (0, _minimalAudioContextConstructor.createMinimalAudioContextConstructor)(_invalidStateError.createInvalidStateError, _notSupportedError.createNotSupportedError, _unknownError.createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);
exports.MinimalAudioContext = minimalAudioContextConstructor;
const createNativeOfflineAudioContext = (0, _createNativeOfflineAudioContext.createCreateNativeOfflineAudioContext)(_notSupportedError.createNotSupportedError, nativeOfflineAudioContextConstructor);
const startRendering = (0, _startRendering.createStartRendering)(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, _testAudioBufferCopyChannelMethodsOutOfBoundsSupport.testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);
const minimalOfflineAudioContextConstructor = (0, _minimalOfflineAudioContextConstructor.createMinimalOfflineAudioContextConstructor)(cacheTestResult, _invalidStateError.createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);
exports.MinimalOfflineAudioContext = minimalOfflineAudioContextConstructor;
const offlineAudioContextConstructor = (0, _offlineAudioContextConstructor.createOfflineAudioContextConstructor)(baseAudioContextConstructor, cacheTestResult, _invalidStateError.createInvalidStateError, createNativeOfflineAudioContext, startRendering);
exports.OfflineAudioContext = offlineAudioContextConstructor;
const isAnyAudioContext = (0, _isAnyAudioContext.createIsAnyAudioContext)(_globals.CONTEXT_STORE, isNativeAudioContext);
exports.isAnyAudioContext = isAnyAudioContext;
const isAnyAudioNode = (0, _isAnyAudioNode.createIsAnyAudioNode)(_globals.AUDIO_NODE_STORE, isNativeAudioNode);
exports.isAnyAudioNode = isAnyAudioNode;
const isAnyAudioParam = (0, _isAnyAudioParam.createIsAnyAudioParam)(_globals.AUDIO_PARAM_STORE, isNativeAudioParam);
exports.isAnyAudioParam = isAnyAudioParam;
const isAnyOfflineAudioContext = (0, _isAnyOfflineAudioContext.createIsAnyOfflineAudioContext)(_globals.CONTEXT_STORE, isNativeOfflineAudioContext);
exports.isAnyOfflineAudioContext = isAnyOfflineAudioContext;

const isSupported = () => (0, _isSupportedPromise.createIsSupportedPromise)(cacheTestResult, (0, _testAudioBufferCopyChannelMethodsSubarraySupport.createTestAudioBufferCopyChannelMethodsSubarraySupport)(nativeOfflineAudioContextConstructor), (0, _testAudioContextCloseMethodSupport.createTestAudioContextCloseMethodSupport)(nativeAudioContextConstructor), (0, _testAudioContextDecodeAudioDataMethodTypeErrorSupport.createTestAudioContextDecodeAudioDataMethodTypeErrorSupport)(nativeOfflineAudioContextConstructor), (0, _testAudioContextOptionsSupport.createTestAudioContextOptionsSupport)(nativeAudioContextConstructor), (0, _testAudioNodeConnectMethodSupport.createTestAudioNodeConnectMethodSupport)(nativeOfflineAudioContextConstructor), (0, _testAudioWorkletProcessorNoOutputsSupport.createTestAudioWorkletProcessorNoOutputsSupport)(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), (0, _testChannelMergerNodeChannelCountSupport.createTestChannelMergerNodeChannelCountSupport)(nativeOfflineAudioContextConstructor), (0, _testConstantSourceNodeAccurateSchedulingSupport.createTestConstantSourceNodeAccurateSchedulingSupport)(nativeOfflineAudioContextConstructor), (0, _testConvolverNodeBufferReassignabilitySupport.createTestConvolverNodeBufferReassignabilitySupport)(nativeOfflineAudioContextConstructor), (0, _testConvolverNodeChannelCountSupport.createTestConvolverNodeChannelCountSupport)(nativeOfflineAudioContextConstructor), _testDomExceptionConstructorSupport.testDomExceptionConstructorSupport, (0, _testIsSecureContextSupport.createTestIsSecureContextSupport)(window), (0, _testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport.createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport)(nativeAudioContextConstructor), (0, _testStereoPannerNodeDefaultValueSupport.createTestStereoPannerNodeDefaultValueSupport)(nativeOfflineAudioContextConstructor), _testTransferablesSupport.testTransferablesSupport);

exports.isSupported = isSupported;
},{"automation-events":"node_modules/automation-events/build/es5/bundle.js","./factories/abort-error":"node_modules/standardized-audio-context/build/es2019/factories/abort-error.js","./factories/add-active-input-connection-to-audio-node":"node_modules/standardized-audio-context/build/es2019/factories/add-active-input-connection-to-audio-node.js","./factories/add-audio-node-connections":"node_modules/standardized-audio-context/build/es2019/factories/add-audio-node-connections.js","./factories/add-audio-param-connections":"node_modules/standardized-audio-context/build/es2019/factories/add-audio-param-connections.js","./factories/add-audio-worklet-module":"node_modules/standardized-audio-context/build/es2019/factories/add-audio-worklet-module.js","./factories/add-connection-to-audio-node":"node_modules/standardized-audio-context/build/es2019/factories/add-connection-to-audio-node.js","./factories/add-passive-input-connection-to-audio-node":"node_modules/standardized-audio-context/build/es2019/factories/add-passive-input-connection-to-audio-node.js","./factories/add-silent-connection":"node_modules/standardized-audio-context/build/es2019/factories/add-silent-connection.js","./factories/add-unrendered-audio-worklet-node":"node_modules/standardized-audio-context/build/es2019/factories/add-unrendered-audio-worklet-node.js","./factories/analyser-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/analyser-node-constructor.js","./factories/analyser-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/factories/analyser-node-renderer-factory.js","./factories/audio-buffer-constructor":"node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-constructor.js","./factories/audio-buffer-source-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-constructor.js","./factories/audio-buffer-source-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-renderer-factory.js","./factories/audio-context-constructor":"node_modules/standardized-audio-context/build/es2019/factories/audio-context-constructor.js","./factories/audio-destination-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-constructor.js","./factories/audio-destination-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-renderer-factory.js","./factories/audio-listener-factory":"node_modules/standardized-audio-context/build/es2019/factories/audio-listener-factory.js","./factories/audio-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/audio-node-constructor.js","./factories/audio-param-factory":"node_modules/standardized-audio-context/build/es2019/factories/audio-param-factory.js","./factories/audio-param-renderer":"node_modules/standardized-audio-context/build/es2019/factories/audio-param-renderer.js","./factories/audio-worklet-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-constructor.js","./factories/audio-worklet-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-renderer-factory.js","./factories/base-audio-context-constructor":"node_modules/standardized-audio-context/build/es2019/factories/base-audio-context-constructor.js","./factories/biquad-filter-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-constructor.js","./factories/biquad-filter-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-renderer-factory.js","./factories/cache-test-result":"node_modules/standardized-audio-context/build/es2019/factories/cache-test-result.js","./factories/channel-merger-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-constructor.js","./factories/channel-merger-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-renderer-factory.js","./factories/channel-splitter-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-constructor.js","./factories/channel-splitter-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-renderer-factory.js","./factories/connect-audio-param":"node_modules/standardized-audio-context/build/es2019/factories/connect-audio-param.js","./factories/connect-multiple-outputs":"node_modules/standardized-audio-context/build/es2019/factories/connect-multiple-outputs.js","./factories/connected-native-audio-buffer-source-node-factory":"node_modules/standardized-audio-context/build/es2019/factories/connected-native-audio-buffer-source-node-factory.js","./factories/constant-source-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-constructor.js","./factories/constant-source-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-renderer-factory.js","./factories/convert-number-to-unsigned-long":"node_modules/standardized-audio-context/build/es2019/factories/convert-number-to-unsigned-long.js","./factories/convolver-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/convolver-node-constructor.js","./factories/convolver-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/factories/convolver-node-renderer-factory.js","./factories/create-native-offline-audio-context":"node_modules/standardized-audio-context/build/es2019/factories/create-native-offline-audio-context.js","./factories/data-clone-error":"node_modules/standardized-audio-context/build/es2019/factories/data-clone-error.js","./factories/decode-audio-data":"node_modules/standardized-audio-context/build/es2019/factories/decode-audio-data.js","./factories/decrement-cycle-counter":"node_modules/standardized-audio-context/build/es2019/factories/decrement-cycle-counter.js","./factories/delay-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/delay-node-constructor.js","./factories/delay-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/factories/delay-node-renderer-factory.js","./factories/delete-active-input-connection-to-audio-node":"node_modules/standardized-audio-context/build/es2019/factories/delete-active-input-connection-to-audio-node.js","./factories/delete-unrendered-audio-worklet-node":"node_modules/standardized-audio-context/build/es2019/factories/delete-unrendered-audio-worklet-node.js","./factories/detect-cycles":"node_modules/standardized-audio-context/build/es2019/factories/detect-cycles.js","./factories/disconnect-multiple-outputs":"node_modules/standardized-audio-context/build/es2019/factories/disconnect-multiple-outputs.js","./factories/dynamics-compressor-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-constructor.js","./factories/dynamics-compressor-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-renderer-factory.js","./factories/encoding-error":"node_modules/standardized-audio-context/build/es2019/factories/encoding-error.js","./factories/evaluate-source":"node_modules/standardized-audio-context/build/es2019/factories/evaluate-source.js","./factories/event-target-constructor":"node_modules/standardized-audio-context/build/es2019/factories/event-target-constructor.js","./factories/expose-current-frame-and-current-time":"node_modules/standardized-audio-context/build/es2019/factories/expose-current-frame-and-current-time.js","./factories/fetch-source":"node_modules/standardized-audio-context/build/es2019/factories/fetch-source.js","./factories/gain-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/gain-node-constructor.js","./factories/gain-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/factories/gain-node-renderer-factory.js","./factories/get-active-audio-worklet-node-inputs":"node_modules/standardized-audio-context/build/es2019/factories/get-active-audio-worklet-node-inputs.js","./factories/get-audio-node-renderer":"node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-renderer.js","./factories/get-audio-node-tail-time":"node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-tail-time.js","./factories/get-audio-param-renderer":"node_modules/standardized-audio-context/build/es2019/factories/get-audio-param-renderer.js","./factories/get-backup-offline-audio-context":"node_modules/standardized-audio-context/build/es2019/factories/get-backup-offline-audio-context.js","./factories/get-native-context":"node_modules/standardized-audio-context/build/es2019/factories/get-native-context.js","./factories/get-or-create-backup-offline-audio-context":"node_modules/standardized-audio-context/build/es2019/factories/get-or-create-backup-offline-audio-context.js","./factories/get-unrendered-audio-worklet-nodes":"node_modules/standardized-audio-context/build/es2019/factories/get-unrendered-audio-worklet-nodes.js","./factories/iir-filter-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-constructor.js","./factories/iir-filter-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-renderer-factory.js","./factories/increment-cycle-counter-factory":"node_modules/standardized-audio-context/build/es2019/factories/increment-cycle-counter-factory.js","./factories/index-size-error":"node_modules/standardized-audio-context/build/es2019/factories/index-size-error.js","./factories/invalid-access-error":"node_modules/standardized-audio-context/build/es2019/factories/invalid-access-error.js","./factories/invalid-state-error":"node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js","./factories/is-any-audio-context":"node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-context.js","./factories/is-any-audio-node":"node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-node.js","./factories/is-any-audio-param":"node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-param.js","./factories/is-any-offline-audio-context":"node_modules/standardized-audio-context/build/es2019/factories/is-any-offline-audio-context.js","./factories/is-native-audio-context":"node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-context.js","./factories/is-native-audio-node":"node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-node.js","./factories/is-native-audio-param":"node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-param.js","./factories/is-native-context":"node_modules/standardized-audio-context/build/es2019/factories/is-native-context.js","./factories/is-native-offline-audio-context":"node_modules/standardized-audio-context/build/es2019/factories/is-native-offline-audio-context.js","./factories/is-secure-context":"node_modules/standardized-audio-context/build/es2019/factories/is-secure-context.js","./factories/is-supported-promise":"node_modules/standardized-audio-context/build/es2019/factories/is-supported-promise.js","./factories/media-element-audio-source-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/media-element-audio-source-node-constructor.js","./factories/media-stream-audio-destination-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-destination-node-constructor.js","./factories/media-stream-audio-source-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-source-node-constructor.js","./factories/media-stream-track-audio-source-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/media-stream-track-audio-source-node-constructor.js","./factories/minimal-audio-context-constructor":"node_modules/standardized-audio-context/build/es2019/factories/minimal-audio-context-constructor.js","./factories/minimal-base-audio-context-constructor":"node_modules/standardized-audio-context/build/es2019/factories/minimal-base-audio-context-constructor.js","./factories/minimal-offline-audio-context-constructor":"node_modules/standardized-audio-context/build/es2019/factories/minimal-offline-audio-context-constructor.js","./factories/monitor-connections":"node_modules/standardized-audio-context/build/es2019/factories/monitor-connections.js","./factories/native-analyser-node-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-analyser-node-factory.js","./factories/native-audio-buffer-constructor":"node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-constructor.js","./factories/native-audio-buffer-source-node-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-source-node-factory.js","./factories/native-audio-context-constructor":"node_modules/standardized-audio-context/build/es2019/factories/native-audio-context-constructor.js","./factories/native-audio-destination-node":"node_modules/standardized-audio-context/build/es2019/factories/native-audio-destination-node.js","./factories/native-audio-worklet-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-constructor.js","./factories/native-audio-worklet-node-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-factory.js","./factories/native-audio-worklet-node-faker-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-faker-factory.js","./factories/native-biquad-filter-node":"node_modules/standardized-audio-context/build/es2019/factories/native-biquad-filter-node.js","./factories/native-channel-merger-node-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-channel-merger-node-factory.js","./factories/native-channel-splitter-node":"node_modules/standardized-audio-context/build/es2019/factories/native-channel-splitter-node.js","./factories/native-constant-source-node-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-factory.js","./factories/native-constant-source-node-faker-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-faker-factory.js","./factories/native-convolver-node-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-factory.js","./factories/native-delay-node":"node_modules/standardized-audio-context/build/es2019/factories/native-delay-node.js","./factories/native-dynamics-compressor-node-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-dynamics-compressor-node-factory.js","./factories/native-gain-node":"node_modules/standardized-audio-context/build/es2019/factories/native-gain-node.js","./factories/native-iir-filter-node-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-factory.js","./factories/native-iir-filter-node-faker-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-faker-factory.js","./factories/native-media-element-audio-source-node":"node_modules/standardized-audio-context/build/es2019/factories/native-media-element-audio-source-node.js","./factories/native-media-stream-audio-destination-node":"node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-destination-node.js","./factories/native-media-stream-audio-source-node":"node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-source-node.js","./factories/native-media-stream-track-audio-source-node-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-track-audio-source-node-factory.js","./factories/native-offline-audio-context-constructor":"node_modules/standardized-audio-context/build/es2019/factories/native-offline-audio-context-constructor.js","./factories/native-oscillator-node-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-oscillator-node-factory.js","./factories/native-panner-node-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-factory.js","./factories/native-panner-node-faker-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-faker-factory.js","./factories/native-periodic-wave-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-periodic-wave-factory.js","./factories/native-script-processor-node":"node_modules/standardized-audio-context/build/es2019/factories/native-script-processor-node.js","./factories/native-stereo-panner-node-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-factory.js","./factories/native-stereo-panner-node-faker-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-faker-factory.js","./factories/native-wave-shaper-node-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-factory.js","./factories/native-wave-shaper-node-faker-factory":"node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-faker-factory.js","./factories/not-supported-error":"node_modules/standardized-audio-context/build/es2019/factories/not-supported-error.js","./factories/offline-audio-context-constructor":"node_modules/standardized-audio-context/build/es2019/factories/offline-audio-context-constructor.js","./factories/oscillator-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-constructor.js","./factories/oscillator-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-renderer-factory.js","./factories/panner-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/panner-node-constructor.js","./factories/panner-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/factories/panner-node-renderer-factory.js","./factories/periodic-wave-constructor":"node_modules/standardized-audio-context/build/es2019/factories/periodic-wave-constructor.js","./factories/render-automation":"node_modules/standardized-audio-context/build/es2019/factories/render-automation.js","./factories/render-inputs-of-audio-node":"node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-node.js","./factories/render-inputs-of-audio-param":"node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-param.js","./factories/render-native-offline-audio-context":"node_modules/standardized-audio-context/build/es2019/factories/render-native-offline-audio-context.js","./factories/set-active-audio-worklet-node-inputs":"node_modules/standardized-audio-context/build/es2019/factories/set-active-audio-worklet-node-inputs.js","./factories/set-audio-node-tail-time":"node_modules/standardized-audio-context/build/es2019/factories/set-audio-node-tail-time.js","./factories/start-rendering":"node_modules/standardized-audio-context/build/es2019/factories/start-rendering.js","./factories/stereo-panner-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-constructor.js","./factories/stereo-panner-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-renderer-factory.js","./factories/test-audio-buffer-constructor-support":"node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-constructor-support.js","./factories/test-audio-buffer-copy-channel-methods-subarray-support":"node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-copy-channel-methods-subarray-support.js","./factories/test-audio-context-close-method-support":"node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-close-method-support.js","./factories/test-audio-context-decode-audio-data-method-type-error-support":"node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-decode-audio-data-method-type-error-support.js","./factories/test-audio-context-options-support":"node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-options-support.js","./factories/test-audio-node-connect-method-support":"node_modules/standardized-audio-context/build/es2019/factories/test-audio-node-connect-method-support.js","./factories/test-audio-worklet-processor-no-outputs-support":"node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-no-outputs-support.js","./factories/test-audio-worklet-processor-post-message-support":"node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-post-message-support.js","./factories/test-channel-merger-node-channel-count-support":"node_modules/standardized-audio-context/build/es2019/factories/test-channel-merger-node-channel-count-support.js","./factories/test-constant-source-node-accurate-scheduling-support":"node_modules/standardized-audio-context/build/es2019/factories/test-constant-source-node-accurate-scheduling-support.js","./factories/test-convolver-node-buffer-reassignability-support":"node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-buffer-reassignability-support.js","./factories/test-convolver-node-channel-count-support":"node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-channel-count-support.js","./factories/test-is-secure-context-support":"node_modules/standardized-audio-context/build/es2019/factories/test-is-secure-context-support.js","./factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support":"node_modules/standardized-audio-context/build/es2019/factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js","./factories/test-offline-audio-context-current-time-support":"node_modules/standardized-audio-context/build/es2019/factories/test-offline-audio-context-current-time-support.js","./factories/test-stereo-panner-node-default-value-support":"node_modules/standardized-audio-context/build/es2019/factories/test-stereo-panner-node-default-value-support.js","./factories/unknown-error":"node_modules/standardized-audio-context/build/es2019/factories/unknown-error.js","./factories/wave-shaper-node-constructor":"node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-constructor.js","./factories/wave-shaper-node-renderer-factory":"node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-renderer-factory.js","./factories/window":"node_modules/standardized-audio-context/build/es2019/factories/window.js","./factories/wrap-audio-buffer-copy-channel-methods":"node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods.js","./factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds":"node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js","./factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer":"node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer.js","./factories/wrap-channel-merger-node":"node_modules/standardized-audio-context/build/es2019/factories/wrap-channel-merger-node.js","./globals":"node_modules/standardized-audio-context/build/es2019/globals.js","./helpers/connect-native-audio-node-to-native-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js","./helpers/disconnect-native-audio-node-from-native-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js","./helpers/get-audio-node-connections":"node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js","./helpers/get-audio-param-connections":"node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js","./helpers/get-event-listeners-of-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js","./helpers/get-native-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js","./helpers/get-native-audio-param":"node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-param.js","./helpers/get-value-for-key":"node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js","./helpers/insert-element-in-set":"node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js","./helpers/is-active-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js","./helpers/is-dc-curve":"node_modules/standardized-audio-context/build/es2019/helpers/is-dc-curve.js","./helpers/is-part-of-a-cycle":"node_modules/standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle.js","./helpers/is-passive-audio-node":"node_modules/standardized-audio-context/build/es2019/helpers/is-passive-audio-node.js","./helpers/overwrite-accessors":"node_modules/standardized-audio-context/build/es2019/helpers/overwrite-accessors.js","./helpers/pick-element-from-set":"node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js","./helpers/sanitize-audio-worklet-node-options":"node_modules/standardized-audio-context/build/es2019/helpers/sanitize-audio-worklet-node-options.js","./helpers/sanitize-channel-splitter-options":"node_modules/standardized-audio-context/build/es2019/helpers/sanitize-channel-splitter-options.js","./helpers/sanitize-periodic-wave-options":"node_modules/standardized-audio-context/build/es2019/helpers/sanitize-periodic-wave-options.js","./helpers/set-value-at-time-until-possible":"node_modules/standardized-audio-context/build/es2019/helpers/set-value-at-time-until-possible.js","./helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support":"node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js","./helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support":"node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support.js","./helpers/test-audio-buffer-source-node-start-method-offset-clamping-support":"node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-offset-clamping-support.js","./helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support":"node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support.js","./helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support":"node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support.js","./helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support":"node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js","./helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support":"node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js","./helpers/test-dom-exception-constructor-support":"node_modules/standardized-audio-context/build/es2019/helpers/test-dom-exception-constructor-support.js","./helpers/test-promise-support":"node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js","./helpers/test-transferables-support":"node_modules/standardized-audio-context/build/es2019/helpers/test-transferables-support.js","./helpers/wrap-audio-buffer-source-node-start-method-offset-clamping":"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js","./helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls":"node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js","./helpers/wrap-event-listener":"node_modules/standardized-audio-context/build/es2019/helpers/wrap-event-listener.js","./interfaces/index":"node_modules/standardized-audio-context/build/es2019/interfaces/index.js","./types/index":"node_modules/standardized-audio-context/build/es2019/types/index.js"}],"node_modules/tone/build/esm/core/util/Debug.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assert = assert;
exports.assertRange = assertRange;
exports.assertContextRunning = assertContextRunning;
exports.setLogger = setLogger;
exports.log = log;
exports.warn = warn;

/**
 * Assert that the statement is true, otherwise invoke the error.
 * @param statement
 * @param error The message which is passed into an Error
 */
function assert(statement, error) {
  if (!statement) {
    throw new Error(error);
  }
}
/**
 * Make sure that the given value is within the range
 */


function assertRange(value, gte, lte = Infinity) {
  if (!(gte <= value && value <= lte)) {
    throw new RangeError(`Value must be within [${gte}, ${lte}], got: ${value}`);
  }
}
/**
 * Make sure that the given value is within the range
 */


function assertContextRunning(context) {
  // add a warning if the context is not started
  if (!context.isOffline && context.state !== "running") {
    warn("The AudioContext is \"suspended\". Invoke Tone.start() from a user action to start the audio.");
  }
}
/**
 * The default logger is the console
 */


let defaultLogger = console;
/**
 * Set the logging interface
 */

function setLogger(logger) {
  defaultLogger = logger;
}
/**
 * Log anything
 */


function log(...args) {
  defaultLogger.log(...args);
}
/**
 * Warn anything
 */


function warn(...args) {
  defaultLogger.warn(...args);
}
},{}],"node_modules/tone/build/esm/core/util/TypeCheck.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isUndef = isUndef;
exports.isDefined = isDefined;
exports.isFunction = isFunction;
exports.isNumber = isNumber;
exports.isObject = isObject;
exports.isBoolean = isBoolean;
exports.isArray = isArray;
exports.isString = isString;
exports.isNote = isNote;

/**
 * Test if the arg is undefined
 */
function isUndef(arg) {
  return typeof arg === "undefined";
}
/**
 * Test if the arg is not undefined
 */


function isDefined(arg) {
  return !isUndef(arg);
}
/**
 * Test if the arg is a function
 */


function isFunction(arg) {
  return typeof arg === "function";
}
/**
 * Test if the argument is a number.
 */


function isNumber(arg) {
  return typeof arg === "number";
}
/**
 * Test if the given argument is an object literal (i.e. `{}`);
 */


function isObject(arg) {
  return Object.prototype.toString.call(arg) === "[object Object]" && arg.constructor === Object;
}
/**
 * Test if the argument is a boolean.
 */


function isBoolean(arg) {
  return typeof arg === "boolean";
}
/**
 * Test if the argument is an Array
 */


function isArray(arg) {
  return Array.isArray(arg);
}
/**
 * Test if the argument is a string.
 */


function isString(arg) {
  return typeof arg === "string";
}
/**
 * Test if the argument is in the form of a note in scientific pitch notation.
 * e.g. "C4"
 */


function isNote(arg) {
  return isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);
}
},{}],"node_modules/tone/build/esm/core/context/AudioContext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioContext = createAudioContext;
exports.createOfflineAudioContext = createOfflineAudioContext;
exports.createAudioWorkletNode = createAudioWorkletNode;
Object.defineProperty(exports, "supported", {
  enumerable: true,
  get: function () {
    return _standardizedAudioContext.isSupported;
  }
});
exports.hasAudioContext = exports.theWindow = void 0;

var _standardizedAudioContext = require("standardized-audio-context");

var _Debug = require("../util/Debug");

var _TypeCheck = require("../util/TypeCheck");

/**
 * Create a new AudioContext
 */
function createAudioContext(options) {
  return new _standardizedAudioContext.AudioContext(options);
}
/**
 * Create a new OfflineAudioContext
 */


function createOfflineAudioContext(channels, length, sampleRate) {
  return new _standardizedAudioContext.OfflineAudioContext(channels, length, sampleRate);
}
/**
 * A reference to the window object
 * @hidden
 */


const theWindow = typeof self === "object" ? self : null;
/**
 * If the browser has a window object which has an AudioContext
 * @hidden
 */

exports.theWindow = theWindow;
const hasAudioContext = theWindow && (theWindow.hasOwnProperty("AudioContext") || theWindow.hasOwnProperty("webkitAudioContext"));
exports.hasAudioContext = hasAudioContext;

function createAudioWorkletNode(context, name, options) {
  (0, _Debug.assert)((0, _TypeCheck.isDefined)(_standardizedAudioContext.AudioWorkletNode), "This node only works in a secure context (https or localhost)"); // @ts-ignore

  return new _standardizedAudioContext.AudioWorkletNode(context, name, options);
}
/**
 * This promise resolves to a boolean which indicates if the
 * functionality is supported within the currently used browse.
 * Taken from [standardized-audio-context](https://github.com/chrisguttandin/standardized-audio-context#issupported)
 */
},{"standardized-audio-context":"node_modules/standardized-audio-context/build/es2019/module.js","../util/Debug":"node_modules/tone/build/esm/core/util/Debug.js","../util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js"}],"node_modules/tslib/tslib.es6.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__extends = __extends;
exports.__rest = __rest;
exports.__decorate = __decorate;
exports.__param = __param;
exports.__metadata = __metadata;
exports.__awaiter = __awaiter;
exports.__generator = __generator;
exports.__exportStar = __exportStar;
exports.__values = __values;
exports.__read = __read;
exports.__spread = __spread;
exports.__spreadArrays = __spreadArrays;
exports.__spreadArray = __spreadArray;
exports.__await = __await;
exports.__asyncGenerator = __asyncGenerator;
exports.__asyncDelegator = __asyncDelegator;
exports.__asyncValues = __asyncValues;
exports.__makeTemplateObject = __makeTemplateObject;
exports.__importStar = __importStar;
exports.__importDefault = __importDefault;
exports.__classPrivateFieldGet = __classPrivateFieldGet;
exports.__classPrivateFieldSet = __classPrivateFieldSet;
exports.__createBinding = exports.__assign = void 0;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  exports.__assign = __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

exports.__assign = __assign;

function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}

var __createBinding = Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
};

exports.__createBinding = __createBinding;

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}
/** @deprecated */


function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}
/** @deprecated */


function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
}

function __spreadArray(to, from) {
  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];

  return to;
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
}

;

var __setModuleDefault = Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

  __setModuleDefault(result, mod);

  return result;
}

function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}

function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }

  return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }

  privateMap.set(receiver, value);
  return value;
}
},{}],"node_modules/tone/build/esm/core/clock/Ticker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Ticker = void 0;

/**
 * A class which provides a reliable callback using either
 * a Web Worker, or if that isn't supported, falls back to setTimeout.
 */
class Ticker {
  constructor(callback, type, updateInterval) {
    this._callback = callback;
    this._type = type;
    this._updateInterval = updateInterval; // create the clock source for the first time

    this._createClock();
  }
  /**
   * Generate a web worker
   */


  _createWorker() {
    const blob = new Blob([
    /* javascript */
    `
			// the initial timeout time
			let timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};
			// onmessage callback
			self.onmessage = function(msg){
				timeoutTime = parseInt(msg.data);
			};
			// the tick function which posts a message
			// and schedules a new tick
			function tick(){
				setTimeout(tick, timeoutTime);
				self.postMessage('tick');
			}
			// call tick initially
			tick();
			`], {
      type: "text/javascript"
    });
    const blobUrl = URL.createObjectURL(blob);
    const worker = new Worker(blobUrl);
    worker.onmessage = this._callback.bind(this);
    this._worker = worker;
  }
  /**
   * Create a timeout loop
   */


  _createTimeout() {
    this._timeout = setTimeout(() => {
      this._createTimeout();

      this._callback();
    }, this._updateInterval * 1000);
  }
  /**
   * Create the clock source.
   */


  _createClock() {
    if (this._type === "worker") {
      try {
        this._createWorker();
      } catch (e) {
        // workers not supported, fallback to timeout
        this._type = "timeout";

        this._createClock();
      }
    } else if (this._type === "timeout") {
      this._createTimeout();
    }
  }
  /**
   * Clean up the current clock source
   */


  _disposeClock() {
    if (this._timeout) {
      clearTimeout(this._timeout);
      this._timeout = 0;
    }

    if (this._worker) {
      this._worker.terminate();

      this._worker.onmessage = null;
    }
  }
  /**
   * The rate in seconds the ticker will update
   */


  get updateInterval() {
    return this._updateInterval;
  }

  set updateInterval(interval) {
    this._updateInterval = Math.max(interval, 128 / 44100);

    if (this._type === "worker") {
      this._worker.postMessage(Math.max(interval * 1000, 1));
    }
  }
  /**
   * The type of the ticker, either a worker or a timeout
   */


  get type() {
    return this._type;
  }

  set type(type) {
    this._disposeClock();

    this._type = type;

    this._createClock();
  }
  /**
   * Clean up
   */


  dispose() {
    this._disposeClock();
  }

}

exports.Ticker = Ticker;
},{}],"node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAudioParam = isAudioParam;
exports.isAudioNode = isAudioNode;
exports.isOfflineAudioContext = isOfflineAudioContext;
exports.isAudioContext = isAudioContext;
exports.isAudioBuffer = isAudioBuffer;

var _standardizedAudioContext = require("standardized-audio-context");

/**
 * Test if the given value is an instanceof AudioParam
 */
function isAudioParam(arg) {
  return (0, _standardizedAudioContext.isAnyAudioParam)(arg);
}
/**
 * Test if the given value is an instanceof AudioNode
 */


function isAudioNode(arg) {
  return (0, _standardizedAudioContext.isAnyAudioNode)(arg);
}
/**
 * Test if the arg is instanceof an OfflineAudioContext
 */


function isOfflineAudioContext(arg) {
  return (0, _standardizedAudioContext.isAnyOfflineAudioContext)(arg);
}
/**
 * Test if the arg is an instanceof AudioContext
 */


function isAudioContext(arg) {
  return (0, _standardizedAudioContext.isAnyAudioContext)(arg);
}
/**
 * Test if the arg is instanceof an AudioBuffer
 */


function isAudioBuffer(arg) {
  return arg instanceof AudioBuffer;
}
},{"standardized-audio-context":"node_modules/standardized-audio-context/build/es2019/module.js"}],"node_modules/tone/build/esm/core/util/Defaults.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deepMerge = deepMerge;
exports.deepEquals = deepEquals;
exports.optionsFromArguments = optionsFromArguments;
exports.getDefaultsFromInstance = getDefaultsFromInstance;
exports.defaultArg = defaultArg;
exports.omitFromObject = omitFromObject;

var _AdvancedTypeCheck = require("./AdvancedTypeCheck");

var _TypeCheck = require("./TypeCheck");

/**
 * Some objects should not be merged
 */
function noCopy(key, arg) {
  return key === "value" || (0, _AdvancedTypeCheck.isAudioParam)(arg) || (0, _AdvancedTypeCheck.isAudioNode)(arg) || (0, _AdvancedTypeCheck.isAudioBuffer)(arg);
}

function deepMerge(target, ...sources) {
  if (!sources.length) {
    return target;
  }

  const source = sources.shift();

  if ((0, _TypeCheck.isObject)(target) && (0, _TypeCheck.isObject)(source)) {
    for (const key in source) {
      if (noCopy(key, source[key])) {
        target[key] = source[key];
      } else if ((0, _TypeCheck.isObject)(source[key])) {
        if (!target[key]) {
          Object.assign(target, {
            [key]: {}
          });
        }

        deepMerge(target[key], source[key]);
      } else {
        Object.assign(target, {
          [key]: source[key]
        });
      }
    }
  } // @ts-ignore


  return deepMerge(target, ...sources);
}
/**
 * Returns true if the two arrays have the same value for each of the elements
 */


function deepEquals(arrayA, arrayB) {
  return arrayA.length === arrayB.length && arrayA.every((element, index) => arrayB[index] === element);
}
/**
 * Convert an args array into an object.
 */


function optionsFromArguments(defaults, argsArray, keys = [], objKey) {
  const opts = {};
  const args = Array.from(argsArray); // if the first argument is an object and has an object key

  if ((0, _TypeCheck.isObject)(args[0]) && objKey && !Reflect.has(args[0], objKey)) {
    // if it's not part of the defaults
    const partOfDefaults = Object.keys(args[0]).some(key => Reflect.has(defaults, key));

    if (!partOfDefaults) {
      // merge that key
      deepMerge(opts, {
        [objKey]: args[0]
      }); // remove the obj key from the keys

      keys.splice(keys.indexOf(objKey), 1); // shift the first argument off

      args.shift();
    }
  }

  if (args.length === 1 && (0, _TypeCheck.isObject)(args[0])) {
    deepMerge(opts, args[0]);
  } else {
    for (let i = 0; i < keys.length; i++) {
      if ((0, _TypeCheck.isDefined)(args[i])) {
        opts[keys[i]] = args[i];
      }
    }
  }

  return deepMerge(defaults, opts);
}
/**
 * Return this instances default values by calling Constructor.getDefaults()
 */


function getDefaultsFromInstance(instance) {
  return instance.constructor.getDefaults();
}
/**
 * Returns the fallback if the given object is undefined.
 * Take an array of arguments and return a formatted options object.
 */


function defaultArg(given, fallback) {
  if ((0, _TypeCheck.isUndef)(given)) {
    return fallback;
  } else {
    return given;
  }
}
/**
 * Remove all of the properties belonging to omit from obj.
 */


function omitFromObject(obj, omit) {
  omit.forEach(prop => {
    if (Reflect.has(obj, prop)) {
      delete obj[prop];
    }
  });
  return obj;
}
},{"./AdvancedTypeCheck":"node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js","./TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js"}],"node_modules/tone/build/esm/core/Tone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tone = void 0;

var _version = require("../version");

var _AudioContext = require("./context/AudioContext");

var _Debug = require("./util/Debug");

/**
 * Tone.js
 * @author Yotam Mann
 * @license http://opensource.org/licenses/MIT MIT License
 * @copyright 2014-2019 Yotam Mann
 */

/**
 * @class  Tone is the base class of all other classes.
 * @category Core
 * @constructor
 */
class Tone {
  constructor() {
    //-------------------------------------
    // 	DEBUGGING
    //-------------------------------------

    /**
     * Set this debug flag to log all events that happen in this class.
     */
    this.debug = false; //-------------------------------------
    // 	DISPOSING
    //-------------------------------------

    /**
     * Indicates if the instance was disposed
     */

    this._wasDisposed = false;
  }
  /**
   * Returns all of the default options belonging to the class.
   */


  static getDefaults() {
    return {};
  }
  /**
   * Prints the outputs to the console log for debugging purposes.
   * Prints the contents only if either the object has a property
   * called `debug` set to true, or a variable called TONE_DEBUG_CLASS
   * is set to the name of the class.
   * @example
   * const osc = new Tone.Oscillator();
   * // prints all logs originating from this oscillator
   * osc.debug = true;
   * // calls to start/stop will print in the console
   * osc.start();
   */


  log(...args) {
    // if the object is either set to debug = true
    // or if there is a string on the Tone.global.with the class name
    if (this.debug || _AudioContext.theWindow && this.toString() === _AudioContext.theWindow.TONE_DEBUG_CLASS) {
      (0, _Debug.log)(this, ...args);
    }
  }
  /**
   * disconnect and dispose.
   */


  dispose() {
    this._wasDisposed = true;
    return this;
  }
  /**
   * Indicates if the instance was disposed. 'Disposing' an
   * instance means that all of the Web Audio nodes that were
   * created for the instance are disconnected and freed for garbage collection.
   */


  get disposed() {
    return this._wasDisposed;
  }
  /**
   * Convert the class to a string
   * @example
   * const osc = new Tone.Oscillator();
   * console.log(osc.toString());
   */


  toString() {
    return this.name;
  }

}
/**
 * The version number semver
 */


exports.Tone = Tone;
Tone.version = _version.version;
},{"../version":"node_modules/tone/build/esm/version.js","./context/AudioContext":"node_modules/tone/build/esm/core/context/AudioContext.js","./util/Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/core/util/Math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GT = GT;
exports.GTE = GTE;
exports.LT = LT;
exports.EQ = EQ;
exports.clamp = clamp;

/**
 * The threshold for correctness for operators. Less than one sample even
 * at very high sampling rates (e.g. `1e-6 < 1 / 192000`).
 */
const EPSILON = 1e-6;
/**
 * Test if A is greater than B
 */

function GT(a, b) {
  return a > b + EPSILON;
}
/**
 * Test if A is greater than or equal to B
 */


function GTE(a, b) {
  return GT(a, b) || EQ(a, b);
}
/**
 * Test if A is less than B
 */


function LT(a, b) {
  return a + EPSILON < b;
}
/**
 * Test if A is less than B
 */


function EQ(a, b) {
  return Math.abs(a - b) < EPSILON;
}
/**
 * Clamp the value within the given range
 */


function clamp(value, min, max) {
  return Math.max(Math.min(value, max), min);
}
},{}],"node_modules/tone/build/esm/core/util/Timeline.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Timeline = void 0;

var _Tone = require("../Tone");

var _Defaults = require("./Defaults");

var _Debug = require("./Debug");

var _Math = require("./Math");

/**
 * A Timeline class for scheduling and maintaining state
 * along a timeline. All events must have a "time" property.
 * Internally, events are stored in time order for fast
 * retrieval.
 */
class Timeline extends _Tone.Tone {
  constructor() {
    super();
    this.name = "Timeline";
    /**
     * The array of scheduled timeline events
     */

    this._timeline = [];
    const options = (0, _Defaults.optionsFromArguments)(Timeline.getDefaults(), arguments, ["memory"]);
    this.memory = options.memory;
    this.increasing = options.increasing;
  }

  static getDefaults() {
    return {
      memory: Infinity,
      increasing: false
    };
  }
  /**
   * The number of items in the timeline.
   */


  get length() {
    return this._timeline.length;
  }
  /**
   * Insert an event object onto the timeline. Events must have a "time" attribute.
   * @param event  The event object to insert into the timeline.
   */


  add(event) {
    // the event needs to have a time attribute
    (0, _Debug.assert)(Reflect.has(event, "time"), "Timeline: events must have a time attribute");
    event.time = event.time.valueOf();

    if (this.increasing && this.length) {
      const lastValue = this._timeline[this.length - 1];
      (0, _Debug.assert)((0, _Math.GTE)(event.time, lastValue.time), "The time must be greater than or equal to the last scheduled time");

      this._timeline.push(event);
    } else {
      const index = this._search(event.time);

      this._timeline.splice(index + 1, 0, event);
    } // if the length is more than the memory, remove the previous ones


    if (this.length > this.memory) {
      const diff = this.length - this.memory;

      this._timeline.splice(0, diff);
    }

    return this;
  }
  /**
   * Remove an event from the timeline.
   * @param  {Object}  event  The event object to remove from the list.
   * @returns {Timeline} this
   */


  remove(event) {
    const index = this._timeline.indexOf(event);

    if (index !== -1) {
      this._timeline.splice(index, 1);
    }

    return this;
  }
  /**
   * Get the nearest event whose time is less than or equal to the given time.
   * @param  time  The time to query.
   */


  get(time, param = "time") {
    const index = this._search(time, param);

    if (index !== -1) {
      return this._timeline[index];
    } else {
      return null;
    }
  }
  /**
   * Return the first event in the timeline without removing it
   * @returns {Object} The first event object
   */


  peek() {
    return this._timeline[0];
  }
  /**
   * Return the first event in the timeline and remove it
   */


  shift() {
    return this._timeline.shift();
  }
  /**
   * Get the event which is scheduled after the given time.
   * @param  time  The time to query.
   */


  getAfter(time, param = "time") {
    const index = this._search(time, param);

    if (index + 1 < this._timeline.length) {
      return this._timeline[index + 1];
    } else {
      return null;
    }
  }
  /**
   * Get the event before the event at the given time.
   * @param  time  The time to query.
   */


  getBefore(time) {
    const len = this._timeline.length; // if it's after the last item, return the last item

    if (len > 0 && this._timeline[len - 1].time < time) {
      return this._timeline[len - 1];
    }

    const index = this._search(time);

    if (index - 1 >= 0) {
      return this._timeline[index - 1];
    } else {
      return null;
    }
  }
  /**
   * Cancel events at and after the given time
   * @param  after  The time to query.
   */


  cancel(after) {
    if (this._timeline.length > 1) {
      let index = this._search(after);

      if (index >= 0) {
        if ((0, _Math.EQ)(this._timeline[index].time, after)) {
          // get the first item with that time
          for (let i = index; i >= 0; i--) {
            if ((0, _Math.EQ)(this._timeline[i].time, after)) {
              index = i;
            } else {
              break;
            }
          }

          this._timeline = this._timeline.slice(0, index);
        } else {
          this._timeline = this._timeline.slice(0, index + 1);
        }
      } else {
        this._timeline = [];
      }
    } else if (this._timeline.length === 1) {
      // the first item's time
      if ((0, _Math.GTE)(this._timeline[0].time, after)) {
        this._timeline = [];
      }
    }

    return this;
  }
  /**
   * Cancel events before or equal to the given time.
   * @param  time  The time to cancel before.
   */


  cancelBefore(time) {
    const index = this._search(time);

    if (index >= 0) {
      this._timeline = this._timeline.slice(index + 1);
    }

    return this;
  }
  /**
   * Returns the previous event if there is one. null otherwise
   * @param  event The event to find the previous one of
   * @return The event right before the given event
   */


  previousEvent(event) {
    const index = this._timeline.indexOf(event);

    if (index > 0) {
      return this._timeline[index - 1];
    } else {
      return null;
    }
  }
  /**
   * Does a binary search on the timeline array and returns the
   * nearest event index whose time is after or equal to the given time.
   * If a time is searched before the first index in the timeline, -1 is returned.
   * If the time is after the end, the index of the last item is returned.
   */


  _search(time, param = "time") {
    if (this._timeline.length === 0) {
      return -1;
    }

    let beginning = 0;
    const len = this._timeline.length;
    let end = len;

    if (len > 0 && this._timeline[len - 1][param] <= time) {
      return len - 1;
    }

    while (beginning < end) {
      // calculate the midpoint for roughly equal partition
      let midPoint = Math.floor(beginning + (end - beginning) / 2);
      const event = this._timeline[midPoint];
      const nextEvent = this._timeline[midPoint + 1];

      if ((0, _Math.EQ)(event[param], time)) {
        // choose the last one that has the same time
        for (let i = midPoint; i < this._timeline.length; i++) {
          const testEvent = this._timeline[i];

          if ((0, _Math.EQ)(testEvent[param], time)) {
            midPoint = i;
          } else {
            break;
          }
        }

        return midPoint;
      } else if ((0, _Math.LT)(event[param], time) && (0, _Math.GT)(nextEvent[param], time)) {
        return midPoint;
      } else if ((0, _Math.GT)(event[param], time)) {
        // search lower
        end = midPoint;
      } else {
        // search upper
        beginning = midPoint + 1;
      }
    }

    return -1;
  }
  /**
   * Internal iterator. Applies extra safety checks for
   * removing items from the array.
   */


  _iterate(callback, lowerBound = 0, upperBound = this._timeline.length - 1) {
    this._timeline.slice(lowerBound, upperBound + 1).forEach(callback);
  }
  /**
   * Iterate over everything in the array
   * @param  callback The callback to invoke with every item
   */


  forEach(callback) {
    this._iterate(callback);

    return this;
  }
  /**
   * Iterate over everything in the array at or before the given time.
   * @param  time The time to check if items are before
   * @param  callback The callback to invoke with every item
   */


  forEachBefore(time, callback) {
    // iterate over the items in reverse so that removing an item doesn't break things
    const upperBound = this._search(time);

    if (upperBound !== -1) {
      this._iterate(callback, 0, upperBound);
    }

    return this;
  }
  /**
   * Iterate over everything in the array after the given time.
   * @param  time The time to check if items are before
   * @param  callback The callback to invoke with every item
   */


  forEachAfter(time, callback) {
    // iterate over the items in reverse so that removing an item doesn't break things
    const lowerBound = this._search(time);

    this._iterate(callback, lowerBound + 1);

    return this;
  }
  /**
   * Iterate over everything in the array between the startTime and endTime.
   * The timerange is inclusive of the startTime, but exclusive of the endTime.
   * range = [startTime, endTime).
   * @param  startTime The time to check if items are before
   * @param  endTime The end of the test interval.
   * @param  callback The callback to invoke with every item
   */


  forEachBetween(startTime, endTime, callback) {
    let lowerBound = this._search(startTime);

    let upperBound = this._search(endTime);

    if (lowerBound !== -1 && upperBound !== -1) {
      if (this._timeline[lowerBound].time !== startTime) {
        lowerBound += 1;
      } // exclusive of the end time


      if (this._timeline[upperBound].time === endTime) {
        upperBound -= 1;
      }

      this._iterate(callback, lowerBound, upperBound);
    } else if (lowerBound === -1) {
      this._iterate(callback, 0, upperBound);
    }

    return this;
  }
  /**
   * Iterate over everything in the array at or after the given time. Similar to
   * forEachAfter, but includes the item(s) at the given time.
   * @param  time The time to check if items are before
   * @param  callback The callback to invoke with every item
   */


  forEachFrom(time, callback) {
    // iterate over the items in reverse so that removing an item doesn't break things
    let lowerBound = this._search(time); // work backwards until the event time is less than time


    while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {
      lowerBound--;
    }

    this._iterate(callback, lowerBound + 1);

    return this;
  }
  /**
   * Iterate over everything in the array at the given time
   * @param  time The time to check if items are before
   * @param  callback The callback to invoke with every item
   */


  forEachAtTime(time, callback) {
    // iterate over the items in reverse so that removing an item doesn't break things
    const upperBound = this._search(time);

    if (upperBound !== -1 && (0, _Math.EQ)(this._timeline[upperBound].time, time)) {
      let lowerBound = upperBound;

      for (let i = upperBound; i >= 0; i--) {
        if ((0, _Math.EQ)(this._timeline[i].time, time)) {
          lowerBound = i;
        } else {
          break;
        }
      }

      this._iterate(event => {
        callback(event);
      }, lowerBound, upperBound);
    }

    return this;
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();
    this._timeline = [];
    return this;
  }

}

exports.Timeline = Timeline;
},{"../Tone":"node_modules/tone/build/esm/core/Tone.js","./Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./Debug":"node_modules/tone/build/esm/core/util/Debug.js","./Math":"node_modules/tone/build/esm/core/util/Math.js"}],"node_modules/tone/build/esm/core/context/ContextInitialization.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onContextInit = onContextInit;
exports.initializeContext = initializeContext;
exports.onContextClose = onContextClose;
exports.closeContext = closeContext;
//-------------------------------------
// INITIALIZING NEW CONTEXT
//-------------------------------------

/**
 * Array of callbacks to invoke when a new context is created
 */
const notifyNewContext = [];
/**
 * Used internally to setup a new Context
 */

function onContextInit(cb) {
  notifyNewContext.push(cb);
}
/**
 * Invoke any classes which need to also be initialized when a new context is created.
 */


function initializeContext(ctx) {
  // add any additional modules
  notifyNewContext.forEach(cb => cb(ctx));
}
/**
 * Array of callbacks to invoke when a new context is created
 */


const notifyCloseContext = [];
/**
 * Used internally to tear down a Context
 */

function onContextClose(cb) {
  notifyCloseContext.push(cb);
}

function closeContext(ctx) {
  // add any additional modules
  notifyCloseContext.forEach(cb => cb(ctx));
}
},{}],"node_modules/tone/build/esm/core/util/Emitter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Emitter = void 0;

var _Tone = require("../Tone");

var _TypeCheck = require("./TypeCheck");

/**
 * Emitter gives classes which extend it
 * the ability to listen for and emit events.
 * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).
 * MIT (c) 2011 Jerome Etienne.
 * @category Core
 */
class Emitter extends _Tone.Tone {
  constructor() {
    super(...arguments);
    this.name = "Emitter";
  }
  /**
   * Bind a callback to a specific event.
   * @param  event     The name of the event to listen for.
   * @param  callback  The callback to invoke when the event is emitted
   */


  on(event, callback) {
    // split the event
    const events = event.split(/\W+/);
    events.forEach(eventName => {
      if ((0, _TypeCheck.isUndef)(this._events)) {
        this._events = {};
      }

      if (!this._events.hasOwnProperty(eventName)) {
        this._events[eventName] = [];
      }

      this._events[eventName].push(callback);
    });
    return this;
  }
  /**
   * Bind a callback which is only invoked once
   * @param  event     The name of the event to listen for.
   * @param  callback  The callback to invoke when the event is emitted
   */


  once(event, callback) {
    const boundCallback = (...args) => {
      // invoke the callback
      callback(...args); // remove the event

      this.off(event, boundCallback);
    };

    this.on(event, boundCallback);
    return this;
  }
  /**
   * Remove the event listener.
   * @param  event     The event to stop listening to.
   * @param  callback  The callback which was bound to the event with Emitter.on.
   *                   If no callback is given, all callbacks events are removed.
   */


  off(event, callback) {
    const events = event.split(/\W+/);
    events.forEach(eventName => {
      if ((0, _TypeCheck.isUndef)(this._events)) {
        this._events = {};
      }

      if (this._events.hasOwnProperty(event)) {
        if ((0, _TypeCheck.isUndef)(callback)) {
          this._events[event] = [];
        } else {
          const eventList = this._events[event];

          for (let i = eventList.length - 1; i >= 0; i--) {
            if (eventList[i] === callback) {
              eventList.splice(i, 1);
            }
          }
        }
      }
    });
    return this;
  }
  /**
   * Invoke all of the callbacks bound to the event
   * with any arguments passed in.
   * @param  event  The name of the event.
   * @param args The arguments to pass to the functions listening.
   */


  emit(event, ...args) {
    if (this._events) {
      if (this._events.hasOwnProperty(event)) {
        const eventList = this._events[event].slice(0);

        for (let i = 0, len = eventList.length; i < len; i++) {
          eventList[i].apply(this, args);
        }
      }
    }

    return this;
  }
  /**
   * Add Emitter functions (on/off/emit) to the object
   */


  static mixin(constr) {
    // instance._events = {};
    ["on", "once", "off", "emit"].forEach(name => {
      const property = Object.getOwnPropertyDescriptor(Emitter.prototype, name);
      Object.defineProperty(constr.prototype, name, property);
    });
  }
  /**
   * Clean up
   */


  dispose() {
    super.dispose();
    this._events = undefined;
    return this;
  }

}

exports.Emitter = Emitter;
},{"../Tone":"node_modules/tone/build/esm/core/Tone.js","./TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js"}],"node_modules/tone/build/esm/core/context/BaseContext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseContext = void 0;

var _Emitter = require("../util/Emitter");

class BaseContext extends _Emitter.Emitter {
  constructor() {
    super(...arguments);
    this.isOffline = false;
  }
  /*
   * This is a placeholder so that JSON.stringify does not throw an error
   * This matches what JSON.stringify(audioContext) returns on a native
   * audioContext instance.
   */


  toJSON() {
    return {};
  }

}

exports.BaseContext = BaseContext;
},{"../util/Emitter":"node_modules/tone/build/esm/core/util/Emitter.js"}],"node_modules/tone/build/esm/core/context/Context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Context = void 0;

var _tslib = require("tslib");

var _Ticker = require("../clock/Ticker");

var _AdvancedTypeCheck = require("../util/AdvancedTypeCheck");

var _Defaults = require("../util/Defaults");

var _Timeline = require("../util/Timeline");

var _TypeCheck = require("../util/TypeCheck");

var _AudioContext = require("./AudioContext");

var _ContextInitialization = require("./ContextInitialization");

var _BaseContext = require("./BaseContext");

var _Debug = require("../util/Debug");

/**
 * Wrapper around the native AudioContext.
 * @category Core
 */
class Context extends _BaseContext.BaseContext {
  constructor() {
    super();
    this.name = "Context";
    /**
     * An object containing all of the constants AudioBufferSourceNodes
     */

    this._constants = new Map();
    /**
     * All of the setTimeout events.
     */

    this._timeouts = new _Timeline.Timeline();
    /**
     * The timeout id counter
     */

    this._timeoutIds = 0;
    /**
     * Private indicator if the context has been initialized
     */

    this._initialized = false;
    /**
     * Indicates if the context is an OfflineAudioContext or an AudioContext
     */

    this.isOffline = false; //--------------------------------------------
    // AUDIO WORKLET
    //--------------------------------------------

    /**
     * Maps a module name to promise of the addModule method
     */

    this._workletModules = new Map();
    const options = (0, _Defaults.optionsFromArguments)(Context.getDefaults(), arguments, ["context"]);

    if (options.context) {
      this._context = options.context;
    } else {
      this._context = (0, _AudioContext.createAudioContext)({
        latencyHint: options.latencyHint
      });
    }

    this._ticker = new _Ticker.Ticker(this.emit.bind(this, "tick"), options.clockSource, options.updateInterval);
    this.on("tick", this._timeoutLoop.bind(this)); // fwd events from the context

    this._context.onstatechange = () => {
      this.emit("statechange", this.state);
    };

    this._setLatencyHint(options.latencyHint);

    this.lookAhead = options.lookAhead;
  }

  static getDefaults() {
    return {
      clockSource: "worker",
      latencyHint: "interactive",
      lookAhead: 0.1,
      updateInterval: 0.05
    };
  }
  /**
   * Finish setting up the context. **You usually do not need to do this manually.**
   */


  initialize() {
    if (!this._initialized) {
      // add any additional modules
      (0, _ContextInitialization.initializeContext)(this);
      this._initialized = true;
    }

    return this;
  } //---------------------------
  // BASE AUDIO CONTEXT METHODS
  //---------------------------


  createAnalyser() {
    return this._context.createAnalyser();
  }

  createOscillator() {
    return this._context.createOscillator();
  }

  createBufferSource() {
    return this._context.createBufferSource();
  }

  createBiquadFilter() {
    return this._context.createBiquadFilter();
  }

  createBuffer(numberOfChannels, length, sampleRate) {
    return this._context.createBuffer(numberOfChannels, length, sampleRate);
  }

  createChannelMerger(numberOfInputs) {
    return this._context.createChannelMerger(numberOfInputs);
  }

  createChannelSplitter(numberOfOutputs) {
    return this._context.createChannelSplitter(numberOfOutputs);
  }

  createConstantSource() {
    return this._context.createConstantSource();
  }

  createConvolver() {
    return this._context.createConvolver();
  }

  createDelay(maxDelayTime) {
    return this._context.createDelay(maxDelayTime);
  }

  createDynamicsCompressor() {
    return this._context.createDynamicsCompressor();
  }

  createGain() {
    return this._context.createGain();
  }

  createIIRFilter(feedForward, feedback) {
    // @ts-ignore
    return this._context.createIIRFilter(feedForward, feedback);
  }

  createPanner() {
    return this._context.createPanner();
  }

  createPeriodicWave(real, imag, constraints) {
    return this._context.createPeriodicWave(real, imag, constraints);
  }

  createStereoPanner() {
    return this._context.createStereoPanner();
  }

  createWaveShaper() {
    return this._context.createWaveShaper();
  }

  createMediaStreamSource(stream) {
    (0, _Debug.assert)((0, _AdvancedTypeCheck.isAudioContext)(this._context), "Not available if OfflineAudioContext");
    const context = this._context;
    return context.createMediaStreamSource(stream);
  }

  createMediaElementSource(element) {
    (0, _Debug.assert)((0, _AdvancedTypeCheck.isAudioContext)(this._context), "Not available if OfflineAudioContext");
    const context = this._context;
    return context.createMediaElementSource(element);
  }

  createMediaStreamDestination() {
    (0, _Debug.assert)((0, _AdvancedTypeCheck.isAudioContext)(this._context), "Not available if OfflineAudioContext");
    const context = this._context;
    return context.createMediaStreamDestination();
  }

  decodeAudioData(audioData) {
    return this._context.decodeAudioData(audioData);
  }
  /**
   * The current time in seconds of the AudioContext.
   */


  get currentTime() {
    return this._context.currentTime;
  }
  /**
   * The current time in seconds of the AudioContext.
   */


  get state() {
    return this._context.state;
  }
  /**
   * The current time in seconds of the AudioContext.
   */


  get sampleRate() {
    return this._context.sampleRate;
  }
  /**
   * The listener
   */


  get listener() {
    this.initialize();
    return this._listener;
  }

  set listener(l) {
    (0, _Debug.assert)(!this._initialized, "The listener cannot be set after initialization.");
    this._listener = l;
  }
  /**
   * There is only one Transport per Context. It is created on initialization.
   */


  get transport() {
    this.initialize();
    return this._transport;
  }

  set transport(t) {
    (0, _Debug.assert)(!this._initialized, "The transport cannot be set after initialization.");
    this._transport = t;
  }
  /**
   * This is the Draw object for the context which is useful for synchronizing the draw frame with the Tone.js clock.
   */


  get draw() {
    this.initialize();
    return this._draw;
  }

  set draw(d) {
    (0, _Debug.assert)(!this._initialized, "Draw cannot be set after initialization.");
    this._draw = d;
  }
  /**
   * A reference to the Context's destination node.
   */


  get destination() {
    this.initialize();
    return this._destination;
  }

  set destination(d) {
    (0, _Debug.assert)(!this._initialized, "The destination cannot be set after initialization.");
    this._destination = d;
  }
  /**
   * Create an audio worklet node from a name and options. The module
   * must first be loaded using [[addAudioWorkletModule]].
   */


  createAudioWorkletNode(name, options) {
    return (0, _AudioContext.createAudioWorkletNode)(this.rawContext, name, options);
  }
  /**
   * Add an AudioWorkletProcessor module
   * @param url The url of the module
   * @param name The name of the module
   */


  addAudioWorkletModule(url, name) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      (0, _Debug.assert)((0, _TypeCheck.isDefined)(this.rawContext.audioWorklet), "AudioWorkletNode is only available in a secure context (https or localhost)");

      if (!this._workletModules.has(name)) {
        this._workletModules.set(name, this.rawContext.audioWorklet.addModule(url));
      }

      yield this._workletModules.get(name);
    });
  }
  /**
   * Returns a promise which resolves when all of the worklets have been loaded on this context
   */


  workletsAreReady() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      const promises = [];

      this._workletModules.forEach(promise => promises.push(promise));

      yield Promise.all(promises);
    });
  } //---------------------------
  // TICKER
  //---------------------------

  /**
   * How often the interval callback is invoked.
   * This number corresponds to how responsive the scheduling
   * can be. context.updateInterval + context.lookAhead gives you the
   * total latency between scheduling an event and hearing it.
   */


  get updateInterval() {
    return this._ticker.updateInterval;
  }

  set updateInterval(interval) {
    this._ticker.updateInterval = interval;
  }
  /**
   * What the source of the clock is, either "worker" (default),
   * "timeout", or "offline" (none).
   */


  get clockSource() {
    return this._ticker.type;
  }

  set clockSource(type) {
    this._ticker.type = type;
  }
  /**
   * The type of playback, which affects tradeoffs between audio
   * output latency and responsiveness.
   * In addition to setting the value in seconds, the latencyHint also
   * accepts the strings "interactive" (prioritizes low latency),
   * "playback" (prioritizes sustained playback), "balanced" (balances
   * latency and performance).
   * @example
   * // prioritize sustained playback
   * const context = new Tone.Context({ latencyHint: "playback" });
   * // set this context as the global Context
   * Tone.setContext(context);
   * // the global context is gettable with Tone.getContext()
   * console.log(Tone.getContext().latencyHint);
   */


  get latencyHint() {
    return this._latencyHint;
  }
  /**
   * Update the lookAhead and updateInterval based on the latencyHint
   */


  _setLatencyHint(hint) {
    let lookAheadValue = 0;
    this._latencyHint = hint;

    if ((0, _TypeCheck.isString)(hint)) {
      switch (hint) {
        case "interactive":
          lookAheadValue = 0.1;
          break;

        case "playback":
          lookAheadValue = 0.5;
          break;

        case "balanced":
          lookAheadValue = 0.25;
          break;
      }
    }

    this.lookAhead = lookAheadValue;
    this.updateInterval = lookAheadValue / 2;
  }
  /**
   * The unwrapped AudioContext or OfflineAudioContext
   */


  get rawContext() {
    return this._context;
  }
  /**
   * The current audio context time plus a short [[lookAhead]].
   */


  now() {
    return this._context.currentTime + this.lookAhead;
  }
  /**
   * The current audio context time without the [[lookAhead]].
   * In most cases it is better to use [[now]] instead of [[immediate]] since
   * with [[now]] the [[lookAhead]] is applied equally to _all_ components including internal components,
   * to making sure that everything is scheduled in sync. Mixing [[now]] and [[immediate]]
   * can cause some timing issues. If no lookAhead is desired, you can set the [[lookAhead]] to `0`.
   */


  immediate() {
    return this._context.currentTime;
  }
  /**
   * Starts the audio context from a suspended state. This is required
   * to initially start the AudioContext. See [[Tone.start]]
   */


  resume() {
    if ((0, _AdvancedTypeCheck.isAudioContext)(this._context)) {
      return this._context.resume();
    } else {
      return Promise.resolve();
    }
  }
  /**
   * Close the context. Once closed, the context can no longer be used and
   * any AudioNodes created from the context will be silent.
   */


  close() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      if ((0, _AdvancedTypeCheck.isAudioContext)(this._context)) {
        yield this._context.close();
      }

      if (this._initialized) {
        (0, _ContextInitialization.closeContext)(this);
      }
    });
  }
  /**
   * **Internal** Generate a looped buffer at some constant value.
   */


  getConstant(val) {
    if (this._constants.has(val)) {
      return this._constants.get(val);
    } else {
      const buffer = this._context.createBuffer(1, 128, this._context.sampleRate);

      const arr = buffer.getChannelData(0);

      for (let i = 0; i < arr.length; i++) {
        arr[i] = val;
      }

      const constant = this._context.createBufferSource();

      constant.channelCount = 1;
      constant.channelCountMode = "explicit";
      constant.buffer = buffer;
      constant.loop = true;
      constant.start(0);

      this._constants.set(val, constant);

      return constant;
    }
  }
  /**
   * Clean up. Also closes the audio context.
   */


  dispose() {
    super.dispose();

    this._ticker.dispose();

    this._timeouts.dispose();

    Object.keys(this._constants).map(val => this._constants[val].disconnect());
    return this;
  } //---------------------------
  // TIMEOUTS
  //---------------------------

  /**
   * The private loop which keeps track of the context scheduled timeouts
   * Is invoked from the clock source
   */


  _timeoutLoop() {
    const now = this.now();

    let firstEvent = this._timeouts.peek();

    while (this._timeouts.length && firstEvent && firstEvent.time <= now) {
      // invoke the callback
      firstEvent.callback(); // shift the first event off

      this._timeouts.shift(); // get the next one


      firstEvent = this._timeouts.peek();
    }
  }
  /**
   * A setTimeout which is guaranteed by the clock source.
   * Also runs in the offline context.
   * @param  fn       The callback to invoke
   * @param  timeout  The timeout in seconds
   * @returns ID to use when invoking Context.clearTimeout
   */


  setTimeout(fn, timeout) {
    this._timeoutIds++;
    const now = this.now();

    this._timeouts.add({
      callback: fn,
      id: this._timeoutIds,
      time: now + timeout
    });

    return this._timeoutIds;
  }
  /**
   * Clears a previously scheduled timeout with Tone.context.setTimeout
   * @param  id  The ID returned from setTimeout
   */


  clearTimeout(id) {
    this._timeouts.forEach(event => {
      if (event.id === id) {
        this._timeouts.remove(event);
      }
    });

    return this;
  }
  /**
   * Clear the function scheduled by [[setInterval]]
   */


  clearInterval(id) {
    return this.clearTimeout(id);
  }
  /**
   * Adds a repeating event to the context's callback clock
   */


  setInterval(fn, interval) {
    const id = ++this._timeoutIds;

    const intervalFn = () => {
      const now = this.now();

      this._timeouts.add({
        callback: () => {
          // invoke the callback
          fn(); // invoke the event to repeat it

          intervalFn();
        },
        id,
        time: now + interval
      });
    }; // kick it off


    intervalFn();
    return id;
  }

}

exports.Context = Context;
},{"tslib":"node_modules/tslib/tslib.es6.js","../clock/Ticker":"node_modules/tone/build/esm/core/clock/Ticker.js","../util/AdvancedTypeCheck":"node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js","../util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../util/Timeline":"node_modules/tone/build/esm/core/util/Timeline.js","../util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","./AudioContext":"node_modules/tone/build/esm/core/context/AudioContext.js","./ContextInitialization":"node_modules/tone/build/esm/core/context/ContextInitialization.js","./BaseContext":"node_modules/tone/build/esm/core/context/BaseContext.js","../util/Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/core/context/DummyContext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DummyContext = void 0;

var _tslib = require("tslib");

var _BaseContext = require("./BaseContext");

class DummyContext extends _BaseContext.BaseContext {
  constructor() {
    super(...arguments);
    this.lookAhead = 0;
    this.latencyHint = 0;
    this.isOffline = false;
  } //---------------------------
  // BASE AUDIO CONTEXT METHODS
  //---------------------------


  createAnalyser() {
    return {};
  }

  createOscillator() {
    return {};
  }

  createBufferSource() {
    return {};
  }

  createBiquadFilter() {
    return {};
  }

  createBuffer(_numberOfChannels, _length, _sampleRate) {
    return {};
  }

  createChannelMerger(_numberOfInputs) {
    return {};
  }

  createChannelSplitter(_numberOfOutputs) {
    return {};
  }

  createConstantSource() {
    return {};
  }

  createConvolver() {
    return {};
  }

  createDelay(_maxDelayTime) {
    return {};
  }

  createDynamicsCompressor() {
    return {};
  }

  createGain() {
    return {};
  }

  createIIRFilter(_feedForward, _feedback) {
    return {};
  }

  createPanner() {
    return {};
  }

  createPeriodicWave(_real, _imag, _constraints) {
    return {};
  }

  createStereoPanner() {
    return {};
  }

  createWaveShaper() {
    return {};
  }

  createMediaStreamSource(_stream) {
    return {};
  }

  createMediaElementSource(_element) {
    return {};
  }

  createMediaStreamDestination() {
    return {};
  }

  decodeAudioData(_audioData) {
    return Promise.resolve({});
  } //---------------------------
  // TONE AUDIO CONTEXT METHODS
  //---------------------------


  createAudioWorkletNode(_name, _options) {
    return {};
  }

  get rawContext() {
    return {};
  }

  addAudioWorkletModule(_url, _name) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      return Promise.resolve();
    });
  }

  resume() {
    return Promise.resolve();
  }

  setTimeout(_fn, _timeout) {
    return 0;
  }

  clearTimeout(_id) {
    return this;
  }

  setInterval(_fn, _interval) {
    return 0;
  }

  clearInterval(_id) {
    return this;
  }

  getConstant(_val) {
    return {};
  }

  get currentTime() {
    return 0;
  }

  get state() {
    return {};
  }

  get sampleRate() {
    return 0;
  }

  get listener() {
    return {};
  }

  get transport() {
    return {};
  }

  get draw() {
    return {};
  }

  set draw(_d) {}

  get destination() {
    return {};
  }

  set destination(_d) {}

  now() {
    return 0;
  }

  immediate() {
    return 0;
  }

}

exports.DummyContext = DummyContext;
},{"tslib":"node_modules/tslib/tslib.es6.js","./BaseContext":"node_modules/tone/build/esm/core/context/BaseContext.js"}],"node_modules/tone/build/esm/core/util/Interface.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readOnly = readOnly;
exports.writable = writable;
exports.noOp = void 0;

var _TypeCheck = require("./TypeCheck");

/**
 * Make the property not writable using `defineProperty`. Internal use only.
 */
function readOnly(target, property) {
  if ((0, _TypeCheck.isArray)(property)) {
    property.forEach(str => readOnly(target, str));
  } else {
    Object.defineProperty(target, property, {
      enumerable: true,
      writable: false
    });
  }
}
/**
 * Make an attribute writeable. Internal use only.
 */


function writable(target, property) {
  if ((0, _TypeCheck.isArray)(property)) {
    property.forEach(str => writable(target, str));
  } else {
    Object.defineProperty(target, property, {
      writable: true
    });
  }
}

const noOp = () => {// no operation here!
};

exports.noOp = noOp;
},{"./TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js"}],"node_modules/tone/build/esm/core/context/ToneAudioBuffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToneAudioBuffer = void 0;

var _tslib = require("tslib");

var _Global = require("../Global");

var _Tone = require("../Tone");

var _AdvancedTypeCheck = require("../util/AdvancedTypeCheck");

var _Defaults = require("../util/Defaults");

var _Interface = require("../util/Interface");

var _TypeCheck = require("../util/TypeCheck");

var _Debug = require("../util/Debug");

/**
 * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all
 * classes that make requests for audio files such as Tone.Player,
 * Tone.Sampler and Tone.Convolver.
 * @example
 * const buffer = new Tone.ToneAudioBuffer("https://tonejs.github.io/audio/casio/A1.mp3", () => {
 * 	console.log("loaded");
 * });
 * @category Core
 */
class ToneAudioBuffer extends _Tone.Tone {
  constructor() {
    super();
    this.name = "ToneAudioBuffer";
    /**
     * Callback when the buffer is loaded.
     */

    this.onload = _Interface.noOp;
    const options = (0, _Defaults.optionsFromArguments)(ToneAudioBuffer.getDefaults(), arguments, ["url", "onload", "onerror"]);
    this.reverse = options.reverse;
    this.onload = options.onload;

    if (options.url && (0, _AdvancedTypeCheck.isAudioBuffer)(options.url) || options.url instanceof ToneAudioBuffer) {
      this.set(options.url);
    } else if ((0, _TypeCheck.isString)(options.url)) {
      // initiate the download
      this.load(options.url).catch(options.onerror);
    }
  }

  static getDefaults() {
    return {
      onerror: _Interface.noOp,
      onload: _Interface.noOp,
      reverse: false
    };
  }
  /**
   * The sample rate of the AudioBuffer
   */


  get sampleRate() {
    if (this._buffer) {
      return this._buffer.sampleRate;
    } else {
      return (0, _Global.getContext)().sampleRate;
    }
  }
  /**
   * Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.
   */


  set(buffer) {
    if (buffer instanceof ToneAudioBuffer) {
      // if it's loaded, set it
      if (buffer.loaded) {
        this._buffer = buffer.get();
      } else {
        // otherwise when it's loaded, invoke it's callback
        buffer.onload = () => {
          this.set(buffer);
          this.onload(this);
        };
      }
    } else {
      this._buffer = buffer;
    } // reverse it initially


    if (this._reversed) {
      this._reverse();
    }

    return this;
  }
  /**
   * The audio buffer stored in the object.
   */


  get() {
    return this._buffer;
  }
  /**
   * Makes an fetch request for the selected url then decodes the file as an audio buffer.
   * Invokes the callback once the audio buffer loads.
   * @param url The url of the buffer to load. filetype support depends on the browser.
   * @returns A Promise which resolves with this ToneAudioBuffer
   */


  load(url) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      const doneLoading = ToneAudioBuffer.load(url).then(audioBuffer => {
        this.set(audioBuffer); // invoke the onload method

        this.onload(this);
      });
      ToneAudioBuffer.downloads.push(doneLoading);

      try {
        yield doneLoading;
      } finally {
        // remove the downloaded file
        const index = ToneAudioBuffer.downloads.indexOf(doneLoading);
        ToneAudioBuffer.downloads.splice(index, 1);
      }

      return this;
    });
  }
  /**
   * clean up
   */


  dispose() {
    super.dispose();
    this._buffer = undefined;
    return this;
  }
  /**
   * Set the audio buffer from the array.
   * To create a multichannel AudioBuffer, pass in a multidimensional array.
   * @param array The array to fill the audio buffer
   */


  fromArray(array) {
    const isMultidimensional = (0, _TypeCheck.isArray)(array) && array[0].length > 0;
    const channels = isMultidimensional ? array.length : 1;
    const len = isMultidimensional ? array[0].length : array.length;
    const context = (0, _Global.getContext)();
    const buffer = context.createBuffer(channels, len, context.sampleRate);
    const multiChannelArray = !isMultidimensional && channels === 1 ? [array] : array;

    for (let c = 0; c < channels; c++) {
      buffer.copyToChannel(multiChannelArray[c], c);
    }

    this._buffer = buffer;
    return this;
  }
  /**
   * Sums multiple channels into 1 channel
   * @param chanNum Optionally only copy a single channel from the array.
   */


  toMono(chanNum) {
    if ((0, _TypeCheck.isNumber)(chanNum)) {
      this.fromArray(this.toArray(chanNum));
    } else {
      let outputArray = new Float32Array(this.length);
      const numChannels = this.numberOfChannels;

      for (let channel = 0; channel < numChannels; channel++) {
        const channelArray = this.toArray(channel);

        for (let i = 0; i < channelArray.length; i++) {
          outputArray[i] += channelArray[i];
        }
      } // divide by the number of channels


      outputArray = outputArray.map(sample => sample / numChannels);
      this.fromArray(outputArray);
    }

    return this;
  }
  /**
   * Get the buffer as an array. Single channel buffers will return a 1-dimensional
   * Float32Array, and multichannel buffers will return multidimensional arrays.
   * @param channel Optionally only copy a single channel from the array.
   */


  toArray(channel) {
    if ((0, _TypeCheck.isNumber)(channel)) {
      return this.getChannelData(channel);
    } else if (this.numberOfChannels === 1) {
      return this.toArray(0);
    } else {
      const ret = [];

      for (let c = 0; c < this.numberOfChannels; c++) {
        ret[c] = this.getChannelData(c);
      }

      return ret;
    }
  }
  /**
   * Returns the Float32Array representing the PCM audio data for the specific channel.
   * @param  channel  The channel number to return
   * @return The audio as a TypedArray
   */


  getChannelData(channel) {
    if (this._buffer) {
      return this._buffer.getChannelData(channel);
    } else {
      return new Float32Array(0);
    }
  }
  /**
   * Cut a subsection of the array and return a buffer of the
   * subsection. Does not modify the original buffer
   * @param start The time to start the slice
   * @param end The end time to slice. If none is given will default to the end of the buffer
   */


  slice(start, end = this.duration) {
    const startSamples = Math.floor(start * this.sampleRate);
    const endSamples = Math.floor(end * this.sampleRate);
    (0, _Debug.assert)(startSamples < endSamples, "The start time must be less than the end time");
    const length = endSamples - startSamples;
    const retBuffer = (0, _Global.getContext)().createBuffer(this.numberOfChannels, length, this.sampleRate);

    for (let channel = 0; channel < this.numberOfChannels; channel++) {
      retBuffer.copyToChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);
    }

    return new ToneAudioBuffer(retBuffer);
  }
  /**
   * Reverse the buffer.
   */


  _reverse() {
    if (this.loaded) {
      for (let i = 0; i < this.numberOfChannels; i++) {
        this.getChannelData(i).reverse();
      }
    }

    return this;
  }
  /**
   * If the buffer is loaded or not
   */


  get loaded() {
    return this.length > 0;
  }
  /**
   * The duration of the buffer in seconds.
   */


  get duration() {
    if (this._buffer) {
      return this._buffer.duration;
    } else {
      return 0;
    }
  }
  /**
   * The length of the buffer in samples
   */


  get length() {
    if (this._buffer) {
      return this._buffer.length;
    } else {
      return 0;
    }
  }
  /**
   * The number of discrete audio channels. Returns 0 if no buffer is loaded.
   */


  get numberOfChannels() {
    if (this._buffer) {
      return this._buffer.numberOfChannels;
    } else {
      return 0;
    }
  }
  /**
   * Reverse the buffer.
   */


  get reverse() {
    return this._reversed;
  }

  set reverse(rev) {
    if (this._reversed !== rev) {
      this._reversed = rev;

      this._reverse();
    }
  }
  /**
   * Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,
   * pass in a multidimensional array.
   * @param array The array to fill the audio buffer
   * @return A ToneAudioBuffer created from the array
   */


  static fromArray(array) {
    return new ToneAudioBuffer().fromArray(array);
  }
  /**
   * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer
   * @param  url The url to load.
   * @return A promise which resolves to a ToneAudioBuffer
   */


  static fromUrl(url) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      const buffer = new ToneAudioBuffer();
      return yield buffer.load(url);
    });
  }
  /**
   * Loads a url using fetch and returns the AudioBuffer.
   */


  static load(url) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      // test if the url contains multiple extensions
      const matches = url.match(/\[([^\]\[]+\|.+)\]$/);

      if (matches) {
        const extensions = matches[1].split("|");
        let extension = extensions[0];

        for (const ext of extensions) {
          if (ToneAudioBuffer.supportsType(ext)) {
            extension = ext;
            break;
          }
        }

        url = url.replace(matches[0], extension);
      } // make sure there is a slash between the baseUrl and the url


      const baseUrl = ToneAudioBuffer.baseUrl === "" || ToneAudioBuffer.baseUrl.endsWith("/") ? ToneAudioBuffer.baseUrl : ToneAudioBuffer.baseUrl + "/";
      const response = yield fetch(baseUrl + url);

      if (!response.ok) {
        throw new Error(`could not load url: ${url}`);
      }

      const arrayBuffer = yield response.arrayBuffer();
      const audioBuffer = yield (0, _Global.getContext)().decodeAudioData(arrayBuffer);
      return audioBuffer;
    });
  }
  /**
   * Checks a url's extension to see if the current browser can play that file type.
   * @param url The url/extension to test
   * @return If the file extension can be played
   * @static
   * @example
   * Tone.ToneAudioBuffer.supportsType("wav"); // returns true
   * Tone.ToneAudioBuffer.supportsType("path/to/file.wav"); // returns true
   */


  static supportsType(url) {
    const extensions = url.split(".");
    const extension = extensions[extensions.length - 1];
    const response = document.createElement("audio").canPlayType("audio/" + extension);
    return response !== "";
  }
  /**
   * Returns a Promise which resolves when all of the buffers have loaded
   */


  static loaded() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      // this makes sure that the function is always async
      yield Promise.resolve();

      while (ToneAudioBuffer.downloads.length) {
        yield ToneAudioBuffer.downloads[0];
      }
    });
  }

} //-------------------------------------
// STATIC METHODS
//-------------------------------------

/**
 * A path which is prefixed before every url.
 */


exports.ToneAudioBuffer = ToneAudioBuffer;
ToneAudioBuffer.baseUrl = "";
/**
 * All of the downloads
 */

ToneAudioBuffer.downloads = [];
},{"tslib":"node_modules/tslib/tslib.es6.js","../Global":"node_modules/tone/build/esm/core/Global.js","../Tone":"node_modules/tone/build/esm/core/Tone.js","../util/AdvancedTypeCheck":"node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js","../util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","../util/Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/core/context/OfflineContext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OfflineContext = void 0;

var _tslib = require("tslib");

var _AudioContext = require("../context/AudioContext");

var _Context = require("../context/Context");

var _AdvancedTypeCheck = require("../util/AdvancedTypeCheck");

var _ToneAudioBuffer = require("./ToneAudioBuffer");

/**
 * Wrapper around the OfflineAudioContext
 * @category Core
 * @example
 * // generate a single channel, 0.5 second buffer
 * const context = new Tone.OfflineContext(1, 0.5, 44100);
 * const osc = new Tone.Oscillator({ context });
 * context.render().then(buffer => {
 * 	console.log(buffer.numberOfChannels, buffer.duration);
 * });
 */
class OfflineContext extends _Context.Context {
  constructor() {
    super({
      clockSource: "offline",
      context: (0, _AdvancedTypeCheck.isOfflineAudioContext)(arguments[0]) ? arguments[0] : (0, _AudioContext.createOfflineAudioContext)(arguments[0], arguments[1] * arguments[2], arguments[2]),
      lookAhead: 0,
      updateInterval: (0, _AdvancedTypeCheck.isOfflineAudioContext)(arguments[0]) ? 128 / arguments[0].sampleRate : 128 / arguments[2]
    });
    this.name = "OfflineContext";
    /**
     * An artificial clock source
     */

    this._currentTime = 0;
    this.isOffline = true;
    this._duration = (0, _AdvancedTypeCheck.isOfflineAudioContext)(arguments[0]) ? arguments[0].length / arguments[0].sampleRate : arguments[1];
  }
  /**
   * Override the now method to point to the internal clock time
   */


  now() {
    return this._currentTime;
  }
  /**
   * Same as this.now()
   */


  get currentTime() {
    return this._currentTime;
  }
  /**
   * Render just the clock portion of the audio context.
   */


  _renderClock(asynchronous) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      let index = 0;

      while (this._duration - this._currentTime >= 0) {
        // invoke all the callbacks on that time
        this.emit("tick"); // increment the clock in block-sized chunks

        this._currentTime += 128 / this.sampleRate; // yield once a second of audio

        index++;
        const yieldEvery = Math.floor(this.sampleRate / 128);

        if (asynchronous && index % yieldEvery === 0) {
          yield new Promise(done => setTimeout(done, 1));
        }
      }
    });
  }
  /**
   * Render the output of the OfflineContext
   * @param asynchronous If the clock should be rendered asynchronously, which will not block the main thread, but be slightly slower.
   */


  render(asynchronous = true) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      yield this.workletsAreReady();
      yield this._renderClock(asynchronous);
      const buffer = yield this._context.startRendering();
      return new _ToneAudioBuffer.ToneAudioBuffer(buffer);
    });
  }
  /**
   * Close the context
   */


  close() {
    return Promise.resolve();
  }

}

exports.OfflineContext = OfflineContext;
},{"tslib":"node_modules/tslib/tslib.es6.js","../context/AudioContext":"node_modules/tone/build/esm/core/context/AudioContext.js","../context/Context":"node_modules/tone/build/esm/core/context/Context.js","../util/AdvancedTypeCheck":"node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js","./ToneAudioBuffer":"node_modules/tone/build/esm/core/context/ToneAudioBuffer.js"}],"node_modules/tone/build/esm/core/Global.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getContext = getContext;
exports.setContext = setContext;
exports.start = start;

var _version = require("../version");

var _AudioContext = require("./context/AudioContext");

var _Context = require("./context/Context");

var _DummyContext = require("./context/DummyContext");

var _OfflineContext = require("./context/OfflineContext");

var _AdvancedTypeCheck = require("./util/AdvancedTypeCheck");

/**
 * This dummy context is used to avoid throwing immediate errors when importing in Node.js
 */
const dummyContext = new _DummyContext.DummyContext();
/**
 * The global audio context which is getable and assignable through
 * getContext and setContext
 */

let globalContext = dummyContext;
/**
 * Returns the default system-wide [[Context]]
 * @category Core
 */

function getContext() {
  if (globalContext === dummyContext && _AudioContext.hasAudioContext) {
    setContext(new _Context.Context());
  }

  return globalContext;
}
/**
 * Set the default audio context
 * @category Core
 */


function setContext(context) {
  if ((0, _AdvancedTypeCheck.isAudioContext)(context)) {
    globalContext = new _Context.Context(context);
  } else if ((0, _AdvancedTypeCheck.isOfflineAudioContext)(context)) {
    globalContext = new _OfflineContext.OfflineContext(context);
  } else {
    globalContext = context;
  }
}
/**
 * Most browsers will not play _any_ audio until a user
 * clicks something (like a play button). Invoke this method
 * on a click or keypress event handler to start the audio context.
 * More about the Autoplay policy
 * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)
 * @example
 * document.querySelector("button").addEventListener("click", async () => {
 * 	await Tone.start();
 * 	console.log("context started");
 * });
 * @category Core
 */


function start() {
  return globalContext.resume();
}
/**
 * Log Tone.js + version in the console.
 */


if (_AudioContext.theWindow && !_AudioContext.theWindow.TONE_SILENCE_LOGGING) {
  let prefix = "v";

  if (_version.version === "dev") {
    prefix = "";
  }

  const printString = ` * Tone.js ${prefix}${_version.version} * `; // eslint-disable-next-line no-console

  console.log(`%c${printString}`, "background: #000; color: #fff");
}
},{"../version":"node_modules/tone/build/esm/version.js","./context/AudioContext":"node_modules/tone/build/esm/core/context/AudioContext.js","./context/Context":"node_modules/tone/build/esm/core/context/Context.js","./context/DummyContext":"node_modules/tone/build/esm/core/context/DummyContext.js","./context/OfflineContext":"node_modules/tone/build/esm/core/context/OfflineContext.js","./util/AdvancedTypeCheck":"node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js"}],"node_modules/tone/build/esm/core/type/Conversions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equalPowerScale = equalPowerScale;
exports.dbToGain = dbToGain;
exports.gainToDb = gainToDb;
exports.intervalToFrequencyRatio = intervalToFrequencyRatio;
exports.getA4 = getA4;
exports.setA4 = setA4;
exports.ftom = ftom;
exports.ftomf = ftomf;
exports.mtof = mtof;

/**
 * Equal power gain scale. Good for cross-fading.
 * @param  percent (0-1)
 */
function equalPowerScale(percent) {
  const piFactor = 0.5 * Math.PI;
  return Math.sin(percent * piFactor);
}
/**
 * Convert decibels into gain.
 */


function dbToGain(db) {
  return Math.pow(10, db / 20);
}
/**
 * Convert gain to decibels.
 */


function gainToDb(gain) {
  return 20 * (Math.log(gain) / Math.LN10);
}
/**
 * Convert an interval (in semitones) to a frequency ratio.
 * @param interval the number of semitones above the base note
 * @example
 * Tone.intervalToFrequencyRatio(0); // 1
 * Tone.intervalToFrequencyRatio(12); // 2
 * Tone.intervalToFrequencyRatio(-12); // 0.5
 */


function intervalToFrequencyRatio(interval) {
  return Math.pow(2, interval / 12);
}
/**
 * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used
 * to generate all the other pitch values from notes. A4's values in Hertz.
 */


let A4 = 440;

function getA4() {
  return A4;
}

function setA4(freq) {
  A4 = freq;
}
/**
 * Convert a frequency value to a MIDI note.
 * @param frequency The value to frequency value to convert.
 * @example
 * Tone.ftom(440); // returns 69
 */


function ftom(frequency) {
  return Math.round(ftomf(frequency));
}
/**
 * Convert a frequency to a floating point midi value
 */


function ftomf(frequency) {
  return 69 + 12 * Math.log2(frequency / A4);
}
/**
 * Convert a MIDI note to frequency value.
 * @param  midi The midi number to convert.
 * @return The corresponding frequency value
 * @example
 * Tone.mtof(69); // 440
 */


function mtof(midi) {
  return A4 * Math.pow(2, (midi - 69) / 12);
}
},{}],"node_modules/tone/build/esm/core/type/TimeBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimeBaseClass = void 0;

var _Tone = require("../Tone");

var _TypeCheck = require("../util/TypeCheck");

/**
 * TimeBase is a flexible encoding of time which can be evaluated to and from a string.
 */
class TimeBaseClass extends _Tone.Tone {
  /**
   * @param context The context associated with the time value. Used to compute
   * Transport and context-relative timing.
   * @param  value  The time value as a number, string or object
   * @param  units  Unit values
   */
  constructor(context, value, units) {
    super();
    /**
     * The default units
     */

    this.defaultUnits = "s";
    this._val = value;
    this._units = units;
    this.context = context;
    this._expressions = this._getExpressions();
  }
  /**
   * All of the time encoding expressions
   */


  _getExpressions() {
    return {
      hz: {
        method: value => {
          return this._frequencyToUnits(parseFloat(value));
        },
        regexp: /^(\d+(?:\.\d+)?)hz$/i
      },
      i: {
        method: value => {
          return this._ticksToUnits(parseInt(value, 10));
        },
        regexp: /^(\d+)i$/i
      },
      m: {
        method: value => {
          return this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());
        },
        regexp: /^(\d+)m$/i
      },
      n: {
        method: (value, dot) => {
          const numericValue = parseInt(value, 10);
          const scalar = dot === "." ? 1.5 : 1;

          if (numericValue === 1) {
            return this._beatsToUnits(this._getTimeSignature()) * scalar;
          } else {
            return this._beatsToUnits(4 / numericValue) * scalar;
          }
        },
        regexp: /^(\d+)n(\.?)$/i
      },
      number: {
        method: value => {
          return this._expressions[this.defaultUnits].method.call(this, value);
        },
        regexp: /^(\d+(?:\.\d+)?)$/
      },
      s: {
        method: value => {
          return this._secondsToUnits(parseFloat(value));
        },
        regexp: /^(\d+(?:\.\d+)?)s$/
      },
      samples: {
        method: value => {
          return parseInt(value, 10) / this.context.sampleRate;
        },
        regexp: /^(\d+)samples$/
      },
      t: {
        method: value => {
          const numericValue = parseInt(value, 10);
          return this._beatsToUnits(8 / (Math.floor(numericValue) * 3));
        },
        regexp: /^(\d+)t$/i
      },
      tr: {
        method: (m, q, s) => {
          let total = 0;

          if (m && m !== "0") {
            total += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));
          }

          if (q && q !== "0") {
            total += this._beatsToUnits(parseFloat(q));
          }

          if (s && s !== "0") {
            total += this._beatsToUnits(parseFloat(s) / 4);
          }

          return total;
        },
        regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?$/
      }
    };
  } //-------------------------------------
  // 	VALUE OF
  //-------------------------------------

  /**
   * Evaluate the time value. Returns the time in seconds.
   */


  valueOf() {
    if (this._val instanceof TimeBaseClass) {
      this.fromType(this._val);
    }

    if ((0, _TypeCheck.isUndef)(this._val)) {
      return this._noArg();
    } else if ((0, _TypeCheck.isString)(this._val) && (0, _TypeCheck.isUndef)(this._units)) {
      for (const units in this._expressions) {
        if (this._expressions[units].regexp.test(this._val.trim())) {
          this._units = units;
          break;
        }
      }
    } else if ((0, _TypeCheck.isObject)(this._val)) {
      let total = 0;

      for (const typeName in this._val) {
        if ((0, _TypeCheck.isDefined)(this._val[typeName])) {
          const quantity = this._val[typeName]; // @ts-ignore

          const time = new this.constructor(this.context, typeName).valueOf() * quantity;
          total += time;
        }
      }

      return total;
    }

    if ((0, _TypeCheck.isDefined)(this._units)) {
      const expr = this._expressions[this._units];

      const matching = this._val.toString().trim().match(expr.regexp);

      if (matching) {
        return expr.method.apply(this, matching.slice(1));
      } else {
        return expr.method.call(this, this._val);
      }
    } else if ((0, _TypeCheck.isString)(this._val)) {
      return parseFloat(this._val);
    } else {
      return this._val;
    }
  } //-------------------------------------
  // 	UNIT CONVERSIONS
  //-------------------------------------

  /**
   * Returns the value of a frequency in the current units
   */


  _frequencyToUnits(freq) {
    return 1 / freq;
  }
  /**
   * Return the value of the beats in the current units
   */


  _beatsToUnits(beats) {
    return 60 / this._getBpm() * beats;
  }
  /**
   * Returns the value of a second in the current units
   */


  _secondsToUnits(seconds) {
    return seconds;
  }
  /**
   * Returns the value of a tick in the current time units
   */


  _ticksToUnits(ticks) {
    return ticks * this._beatsToUnits(1) / this._getPPQ();
  }
  /**
   * With no arguments, return 'now'
   */


  _noArg() {
    return this._now();
  } //-------------------------------------
  // 	TEMPO CONVERSIONS
  //-------------------------------------

  /**
   * Return the bpm
   */


  _getBpm() {
    return this.context.transport.bpm.value;
  }
  /**
   * Return the timeSignature
   */


  _getTimeSignature() {
    return this.context.transport.timeSignature;
  }
  /**
   * Return the PPQ or 192 if Transport is not available
   */


  _getPPQ() {
    return this.context.transport.PPQ;
  } //-------------------------------------
  // 	CONVERSION INTERFACE
  //-------------------------------------

  /**
   * Coerce a time type into this units type.
   * @param type Any time type units
   */


  fromType(type) {
    this._units = undefined;

    switch (this.defaultUnits) {
      case "s":
        this._val = type.toSeconds();
        break;

      case "i":
        this._val = type.toTicks();
        break;

      case "hz":
        this._val = type.toFrequency();
        break;

      case "midi":
        this._val = type.toMidi();
        break;
    }

    return this;
  }
  /**
   * Return the value in hertz
   */


  toFrequency() {
    return 1 / this.toSeconds();
  }
  /**
   * Return the time in samples
   */


  toSamples() {
    return this.toSeconds() * this.context.sampleRate;
  }
  /**
   * Return the time in milliseconds.
   */


  toMilliseconds() {
    return this.toSeconds() * 1000;
  }

}

exports.TimeBaseClass = TimeBaseClass;
},{"../Tone":"node_modules/tone/build/esm/core/Tone.js","../util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js"}],"node_modules/tone/build/esm/core/type/Time.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Time = Time;
exports.TimeClass = void 0;

var _Global = require("../Global");

var _Conversions = require("./Conversions");

var _TimeBase = require("./TimeBase");

/**
 * TimeClass is a primitive type for encoding and decoding Time values.
 * TimeClass can be passed into the parameter of any method which takes time as an argument.
 * @param  val    The time value.
 * @param  units  The units of the value.
 * @example
 * const time = Tone.Time("4n"); // a quarter note
 * @category Unit
 */
class TimeClass extends _TimeBase.TimeBaseClass {
  constructor() {
    super(...arguments);
    this.name = "TimeClass";
  }

  _getExpressions() {
    return Object.assign(super._getExpressions(), {
      now: {
        method: capture => {
          return this._now() + new this.constructor(this.context, capture).valueOf();
        },
        regexp: /^\+(.+)/
      },
      quantize: {
        method: capture => {
          const quantTo = new TimeClass(this.context, capture).valueOf();
          return this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));
        },
        regexp: /^@(.+)/
      }
    });
  }
  /**
   * Quantize the time by the given subdivision. Optionally add a
   * percentage which will move the time value towards the ideal
   * quantized value by that percentage.
   * @param  subdiv    The subdivision to quantize to
   * @param  percent  Move the time value towards the quantized value by a percentage.
   * @example
   * Tone.Time(21).quantize(2); // returns 22
   * Tone.Time(0.6).quantize("4n", 0.5); // returns 0.55
   */


  quantize(subdiv, percent = 1) {
    const subdivision = new this.constructor(this.context, subdiv).valueOf();
    const value = this.valueOf();
    const multiple = Math.round(value / subdivision);
    const ideal = multiple * subdivision;
    const diff = ideal - value;
    return value + diff * percent;
  } //-------------------------------------
  // CONVERSIONS
  //-------------------------------------

  /**
   * Convert a Time to Notation. The notation values are will be the
   * closest representation between 1m to 128th note.
   * @return {Notation}
   * @example
   * // if the Transport is at 120bpm:
   * Tone.Time(2).toNotation(); // returns "1m"
   */


  toNotation() {
    const time = this.toSeconds();
    const testNotations = ["1m"];

    for (let power = 1; power < 9; power++) {
      const subdiv = Math.pow(2, power);
      testNotations.push(subdiv + "n.");
      testNotations.push(subdiv + "n");
      testNotations.push(subdiv + "t");
    }

    testNotations.push("0"); // find the closets notation representation

    let closest = testNotations[0];
    let closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();
    testNotations.forEach(notation => {
      const notationSeconds = new TimeClass(this.context, notation).toSeconds();

      if (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {
        closest = notation;
        closestSeconds = notationSeconds;
      }
    });
    return closest;
  }
  /**
   * Return the time encoded as Bars:Beats:Sixteenths.
   */


  toBarsBeatsSixteenths() {
    const quarterTime = this._beatsToUnits(1);

    let quarters = this.valueOf() / quarterTime;
    quarters = parseFloat(quarters.toFixed(4));
    const measures = Math.floor(quarters / this._getTimeSignature());
    let sixteenths = quarters % 1 * 4;
    quarters = Math.floor(quarters) % this._getTimeSignature();
    const sixteenthString = sixteenths.toString();

    if (sixteenthString.length > 3) {
      // the additional parseFloat removes insignificant trailing zeroes
      sixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));
    }

    const progress = [measures, quarters, sixteenths];
    return progress.join(":");
  }
  /**
   * Return the time in ticks.
   */


  toTicks() {
    const quarterTime = this._beatsToUnits(1);

    const quarters = this.valueOf() / quarterTime;
    return Math.round(quarters * this._getPPQ());
  }
  /**
   * Return the time in seconds.
   */


  toSeconds() {
    return this.valueOf();
  }
  /**
   * Return the value as a midi note.
   */


  toMidi() {
    return (0, _Conversions.ftom)(this.toFrequency());
  }

  _now() {
    return this.context.now();
  }

}
/**
 * Create a TimeClass from a time string or number. The time is computed against the
 * global Tone.Context. To use a specific context, use [[TimeClass]]
 * @param value A value which represents time
 * @param units The value's units if they can't be inferred by the value.
 * @category Unit
 * @example
 * const time = Tone.Time("4n").toSeconds();
 * console.log(time);
 * @example
 * const note = Tone.Time(1).toNotation();
 * console.log(note);
 * @example
 * const freq = Tone.Time(0.5).toFrequency();
 * console.log(freq);
 */


exports.TimeClass = TimeClass;

function Time(value, units) {
  return new TimeClass((0, _Global.getContext)(), value, units);
}
},{"../Global":"node_modules/tone/build/esm/core/Global.js","./Conversions":"node_modules/tone/build/esm/core/type/Conversions.js","./TimeBase":"node_modules/tone/build/esm/core/type/TimeBase.js"}],"node_modules/tone/build/esm/core/type/Frequency.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Frequency = Frequency;
exports.FrequencyClass = void 0;

var _Global = require("../Global");

var _Conversions = require("./Conversions");

var _Time = require("./Time");

/**
 * Frequency is a primitive type for encoding Frequency values.
 * Eventually all time values are evaluated to hertz using the `valueOf` method.
 * @example
 * Tone.Frequency("C3"); // 261
 * Tone.Frequency(38, "midi");
 * Tone.Frequency("C3").transpose(4);
 * @category Unit
 */
class FrequencyClass extends _Time.TimeClass {
  constructor() {
    super(...arguments);
    this.name = "Frequency";
    this.defaultUnits = "hz";
  }
  /**
   * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used
   * to generate all the other pitch values from notes. A4's values in Hertz.
   */


  static get A4() {
    return (0, _Conversions.getA4)();
  }

  static set A4(freq) {
    (0, _Conversions.setA4)(freq);
  } //-------------------------------------
  // 	AUGMENT BASE EXPRESSIONS
  //-------------------------------------


  _getExpressions() {
    return Object.assign({}, super._getExpressions(), {
      midi: {
        regexp: /^(\d+(?:\.\d+)?midi)/,

        method(value) {
          if (this.defaultUnits === "midi") {
            return value;
          } else {
            return FrequencyClass.mtof(value);
          }
        }

      },
      note: {
        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,

        method(pitch, octave) {
          const index = noteToScaleIndex[pitch.toLowerCase()];
          const noteNumber = index + (parseInt(octave, 10) + 1) * 12;

          if (this.defaultUnits === "midi") {
            return noteNumber;
          } else {
            return FrequencyClass.mtof(noteNumber);
          }
        }

      },
      tr: {
        regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,

        method(m, q, s) {
          let total = 1;

          if (m && m !== "0") {
            total *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));
          }

          if (q && q !== "0") {
            total *= this._beatsToUnits(parseFloat(q));
          }

          if (s && s !== "0") {
            total *= this._beatsToUnits(parseFloat(s) / 4);
          }

          return total;
        }

      }
    });
  } //-------------------------------------
  // 	EXPRESSIONS
  //-------------------------------------

  /**
   * Transposes the frequency by the given number of semitones.
   * @return  A new transposed frequency
   * @example
   * Tone.Frequency("A4").transpose(3); // "C5"
   */


  transpose(interval) {
    return new FrequencyClass(this.context, this.valueOf() * (0, _Conversions.intervalToFrequencyRatio)(interval));
  }
  /**
   * Takes an array of semitone intervals and returns
   * an array of frequencies transposed by those intervals.
   * @return  Returns an array of Frequencies
   * @example
   * Tone.Frequency("A4").harmonize([0, 3, 7]); // ["A4", "C5", "E5"]
   */


  harmonize(intervals) {
    return intervals.map(interval => {
      return this.transpose(interval);
    });
  } //-------------------------------------
  // 	UNIT CONVERSIONS
  //-------------------------------------

  /**
   * Return the value of the frequency as a MIDI note
   * @example
   * Tone.Frequency("C4").toMidi(); // 60
   */


  toMidi() {
    return (0, _Conversions.ftom)(this.valueOf());
  }
  /**
   * Return the value of the frequency in Scientific Pitch Notation
   * @example
   * Tone.Frequency(69, "midi").toNote(); // "A4"
   */


  toNote() {
    const freq = this.toFrequency();
    const log = Math.log2(freq / FrequencyClass.A4);
    let noteNumber = Math.round(12 * log) + 57;
    const octave = Math.floor(noteNumber / 12);

    if (octave < 0) {
      noteNumber += -12 * octave;
    }

    const noteName = scaleIndexToNote[noteNumber % 12];
    return noteName + octave.toString();
  }
  /**
   * Return the duration of one cycle in seconds.
   */


  toSeconds() {
    return 1 / super.toSeconds();
  }
  /**
   * Return the duration of one cycle in ticks
   */


  toTicks() {
    const quarterTime = this._beatsToUnits(1);

    const quarters = this.valueOf() / quarterTime;
    return Math.floor(quarters * this._getPPQ());
  } //-------------------------------------
  // 	UNIT CONVERSIONS HELPERS
  //-------------------------------------

  /**
   * With no arguments, return 0
   */


  _noArg() {
    return 0;
  }
  /**
   * Returns the value of a frequency in the current units
   */


  _frequencyToUnits(freq) {
    return freq;
  }
  /**
   * Returns the value of a tick in the current time units
   */


  _ticksToUnits(ticks) {
    return 1 / (ticks * 60 / (this._getBpm() * this._getPPQ()));
  }
  /**
   * Return the value of the beats in the current units
   */


  _beatsToUnits(beats) {
    return 1 / super._beatsToUnits(beats);
  }
  /**
   * Returns the value of a second in the current units
   */


  _secondsToUnits(seconds) {
    return 1 / seconds;
  }
  /**
   * Convert a MIDI note to frequency value.
   * @param  midi The midi number to convert.
   * @return The corresponding frequency value
   */


  static mtof(midi) {
    return (0, _Conversions.mtof)(midi);
  }
  /**
   * Convert a frequency value to a MIDI note.
   * @param frequency The value to frequency value to convert.
   */


  static ftom(frequency) {
    return (0, _Conversions.ftom)(frequency);
  }

} //-------------------------------------
// 	FREQUENCY CONVERSIONS
//-------------------------------------

/**
 * Note to scale index.
 * @hidden
 */


exports.FrequencyClass = FrequencyClass;
const noteToScaleIndex = {
  cbb: -2,
  cb: -1,
  c: 0,
  "c#": 1,
  cx: 2,
  dbb: 0,
  db: 1,
  d: 2,
  "d#": 3,
  dx: 4,
  ebb: 2,
  eb: 3,
  e: 4,
  "e#": 5,
  ex: 6,
  fbb: 3,
  fb: 4,
  f: 5,
  "f#": 6,
  fx: 7,
  gbb: 5,
  gb: 6,
  g: 7,
  "g#": 8,
  gx: 9,
  abb: 7,
  ab: 8,
  a: 9,
  "a#": 10,
  ax: 11,
  bbb: 9,
  bb: 10,
  b: 11,
  "b#": 12,
  bx: 13
};
/**
 * scale index to note (sharps)
 * @hidden
 */

const scaleIndexToNote = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];
/**
 * Convert a value into a FrequencyClass object.
 * @category Unit
 * @example
 * const midi = Tone.Frequency("C3").toMidi();
 * console.log(midi);
 * @example
 * const hertz = Tone.Frequency(38, "midi").toFrequency();
 * console.log(hertz);
 */

function Frequency(value, units) {
  return new FrequencyClass((0, _Global.getContext)(), value, units);
}
},{"../Global":"node_modules/tone/build/esm/core/Global.js","./Conversions":"node_modules/tone/build/esm/core/type/Conversions.js","./Time":"node_modules/tone/build/esm/core/type/Time.js"}],"node_modules/tone/build/esm/core/type/TransportTime.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransportTime = TransportTime;
exports.TransportTimeClass = void 0;

var _Global = require("../Global");

var _Time = require("./Time");

/**
 * TransportTime is a the time along the Transport's
 * timeline. It is similar to Tone.Time, but instead of evaluating
 * against the AudioContext's clock, it is evaluated against
 * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).
 * @category Unit
 */
class TransportTimeClass extends _Time.TimeClass {
  constructor() {
    super(...arguments);
    this.name = "TransportTime";
  }
  /**
   * Return the current time in whichever context is relevant
   */


  _now() {
    return this.context.transport.seconds;
  }

}
/**
 * TransportTime is a the time along the Transport's
 * timeline. It is similar to [[Time]], but instead of evaluating
 * against the AudioContext's clock, it is evaluated against
 * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).
 * @category Unit
 */


exports.TransportTimeClass = TransportTimeClass;

function TransportTime(value, units) {
  return new TransportTimeClass((0, _Global.getContext)(), value, units);
}
},{"../Global":"node_modules/tone/build/esm/core/Global.js","./Time":"node_modules/tone/build/esm/core/type/Time.js"}],"node_modules/tone/build/esm/core/context/ToneWithContext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToneWithContext = void 0;

var _Global = require("../Global");

var _Tone = require("../Tone");

var _Frequency = require("../type/Frequency");

var _Time = require("../type/Time");

var _TransportTime = require("../type/TransportTime");

var _Defaults = require("../util/Defaults");

var _TypeCheck = require("../util/TypeCheck");

/**
 * The Base class for all nodes that have an AudioContext.
 */
class ToneWithContext extends _Tone.Tone {
  constructor() {
    super();
    const options = (0, _Defaults.optionsFromArguments)(ToneWithContext.getDefaults(), arguments, ["context"]);

    if (this.defaultContext) {
      this.context = this.defaultContext;
    } else {
      this.context = options.context;
    }
  }

  static getDefaults() {
    return {
      context: (0, _Global.getContext)()
    };
  }
  /**
   * Return the current time of the Context clock plus the lookAhead.
   * @example
   * setInterval(() => {
   * 	console.log(Tone.now());
   * }, 100);
   */


  now() {
    return this.context.currentTime + this.context.lookAhead;
  }
  /**
   * Return the current time of the Context clock without any lookAhead.
   * @example
   * setInterval(() => {
   * 	console.log(Tone.immediate());
   * }, 100);
   */


  immediate() {
    return this.context.currentTime;
  }
  /**
   * The duration in seconds of one sample.
   * @example
   * console.log(Tone.Transport.sampleTime);
   */


  get sampleTime() {
    return 1 / this.context.sampleRate;
  }
  /**
   * The number of seconds of 1 processing block (128 samples)
   * @example
   * console.log(Tone.Destination.blockTime);
   */


  get blockTime() {
    return 128 / this.context.sampleRate;
  }
  /**
   * Convert the incoming time to seconds.
   * This is calculated against the current [[Tone.Transport]] bpm
   * @example
   * const gain = new Tone.Gain();
   * setInterval(() => console.log(gain.toSeconds("4n")), 100);
   * // ramp the tempo to 60 bpm over 30 seconds
   * Tone.getTransport().bpm.rampTo(60, 30);
   */


  toSeconds(time) {
    return new _Time.TimeClass(this.context, time).toSeconds();
  }
  /**
   * Convert the input to a frequency number
   * @example
   * const gain = new Tone.Gain();
   * console.log(gain.toFrequency("4n"));
   */


  toFrequency(freq) {
    return new _Frequency.FrequencyClass(this.context, freq).toFrequency();
  }
  /**
   * Convert the input time into ticks
   * @example
   * const gain = new Tone.Gain();
   * console.log(gain.toTicks("4n"));
   */


  toTicks(time) {
    return new _TransportTime.TransportTimeClass(this.context, time).toTicks();
  } //-------------------------------------
  // 	GET/SET
  //-------------------------------------

  /**
   * Get a subset of the properties which are in the partial props
   */


  _getPartialProperties(props) {
    const options = this.get(); // remove attributes from the prop that are not in the partial

    Object.keys(options).forEach(name => {
      if ((0, _TypeCheck.isUndef)(props[name])) {
        delete options[name];
      }
    });
    return options;
  }
  /**
   * Get the object's attributes.
   * @example
   * const osc = new Tone.Oscillator();
   * console.log(osc.get());
   */


  get() {
    const defaults = (0, _Defaults.getDefaultsFromInstance)(this);
    Object.keys(defaults).forEach(attribute => {
      if (Reflect.has(this, attribute)) {
        const member = this[attribute];

        if ((0, _TypeCheck.isDefined)(member) && (0, _TypeCheck.isDefined)(member.value) && (0, _TypeCheck.isDefined)(member.setValueAtTime)) {
          defaults[attribute] = member.value;
        } else if (member instanceof ToneWithContext) {
          defaults[attribute] = member._getPartialProperties(defaults[attribute]); // otherwise make sure it's a serializable type
        } else if ((0, _TypeCheck.isArray)(member) || (0, _TypeCheck.isNumber)(member) || (0, _TypeCheck.isString)(member) || (0, _TypeCheck.isBoolean)(member)) {
          defaults[attribute] = member;
        } else {
          // remove all undefined and unserializable attributes
          delete defaults[attribute];
        }
      }
    });
    return defaults;
  }
  /**
   * Set multiple properties at once with an object.
   * @example
   * const filter = new Tone.Filter().toDestination();
   * // set values using an object
   * filter.set({
   * 	frequency: "C6",
   * 	type: "highpass"
   * });
   * const player = new Tone.Player("https://tonejs.github.io/audio/berklee/Analogsynth_octaves_highmid.mp3").connect(filter);
   * player.autostart = true;
   */


  set(props) {
    Object.keys(props).forEach(attribute => {
      if (Reflect.has(this, attribute) && (0, _TypeCheck.isDefined)(this[attribute])) {
        if (this[attribute] && (0, _TypeCheck.isDefined)(this[attribute].value) && (0, _TypeCheck.isDefined)(this[attribute].setValueAtTime)) {
          // small optimization
          if (this[attribute].value !== props[attribute]) {
            this[attribute].value = props[attribute];
          }
        } else if (this[attribute] instanceof ToneWithContext) {
          this[attribute].set(props[attribute]);
        } else {
          this[attribute] = props[attribute];
        }
      }
    });
    return this;
  }

}

exports.ToneWithContext = ToneWithContext;
},{"../Global":"node_modules/tone/build/esm/core/Global.js","../Tone":"node_modules/tone/build/esm/core/Tone.js","../type/Frequency":"node_modules/tone/build/esm/core/type/Frequency.js","../type/Time":"node_modules/tone/build/esm/core/type/Time.js","../type/TransportTime":"node_modules/tone/build/esm/core/type/TransportTime.js","../util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js"}],"node_modules/tone/build/esm/core/util/StateTimeline.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StateTimeline = void 0;

var _Timeline = require("./Timeline");

var _Debug = require("./Debug");

/**
 * A Timeline State. Provides the methods: `setStateAtTime("state", time)` and `getValueAtTime(time)`
 * @param initial The initial state of the StateTimeline.  Defaults to `undefined`
 */
class StateTimeline extends _Timeline.Timeline {
  constructor(initial = "stopped") {
    super();
    this.name = "StateTimeline";
    this._initial = initial;
    this.setStateAtTime(this._initial, 0);
  }
  /**
   * Returns the scheduled state scheduled before or at
   * the given time.
   * @param  time  The time to query.
   * @return  The name of the state input in setStateAtTime.
   */


  getValueAtTime(time) {
    const event = this.get(time);

    if (event !== null) {
      return event.state;
    } else {
      return this._initial;
    }
  }
  /**
   * Add a state to the timeline.
   * @param  state The name of the state to set.
   * @param  time  The time to query.
   * @param options Any additional options that are needed in the timeline.
   */


  setStateAtTime(state, time, options) {
    (0, _Debug.assertRange)(time, 0);
    this.add(Object.assign({}, options, {
      state,
      time
    }));
    return this;
  }
  /**
   * Return the event before the time with the given state
   * @param  state The state to look for
   * @param  time  When to check before
   * @return  The event with the given state before the time
   */


  getLastState(state, time) {
    // time = this.toSeconds(time);
    const index = this._search(time);

    for (let i = index; i >= 0; i--) {
      const event = this._timeline[i];

      if (event.state === state) {
        return event;
      }
    }
  }
  /**
   * Return the event after the time with the given state
   * @param  state The state to look for
   * @param  time  When to check from
   * @return  The event with the given state after the time
   */


  getNextState(state, time) {
    // time = this.toSeconds(time);
    const index = this._search(time);

    if (index !== -1) {
      for (let i = index; i < this._timeline.length; i++) {
        const event = this._timeline[i];

        if (event.state === state) {
          return event;
        }
      }
    }
  }

}

exports.StateTimeline = StateTimeline;
},{"./Timeline":"node_modules/tone/build/esm/core/util/Timeline.js","./Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/core/context/Param.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Param = void 0;

var _Conversions = require("../type/Conversions");

var _AdvancedTypeCheck = require("../util/AdvancedTypeCheck");

var _Defaults = require("../util/Defaults");

var _Timeline = require("../util/Timeline");

var _TypeCheck = require("../util/TypeCheck");

var _ToneWithContext = require("./ToneWithContext");

var _Math = require("../util/Math");

var _Debug = require("../util/Debug");

/**
 * Param wraps the native Web Audio's AudioParam to provide
 * additional unit conversion functionality. It also
 * serves as a base-class for classes which have a single,
 * automatable parameter.
 * @category Core
 */
class Param extends _ToneWithContext.ToneWithContext {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Param.getDefaults(), arguments, ["param", "units", "convert"]));
    this.name = "Param";
    this.overridden = false;
    /**
     * The minimum output value
     */

    this._minOutput = 1e-7;
    const options = (0, _Defaults.optionsFromArguments)(Param.getDefaults(), arguments, ["param", "units", "convert"]);
    (0, _Debug.assert)((0, _TypeCheck.isDefined)(options.param) && ((0, _AdvancedTypeCheck.isAudioParam)(options.param) || options.param instanceof Param), "param must be an AudioParam");

    while (!(0, _AdvancedTypeCheck.isAudioParam)(options.param)) {
      options.param = options.param._param;
    }

    this._swappable = (0, _TypeCheck.isDefined)(options.swappable) ? options.swappable : false;

    if (this._swappable) {
      this.input = this.context.createGain(); // initialize

      this._param = options.param;
      this.input.connect(this._param);
    } else {
      this._param = this.input = options.param;
    }

    this._events = new _Timeline.Timeline(1000);
    this._initialValue = this._param.defaultValue;
    this.units = options.units;
    this.convert = options.convert;
    this._minValue = options.minValue;
    this._maxValue = options.maxValue; // if the value is defined, set it immediately

    if ((0, _TypeCheck.isDefined)(options.value) && options.value !== this._toType(this._initialValue)) {
      this.setValueAtTime(options.value, 0);
    }
  }

  static getDefaults() {
    return Object.assign(_ToneWithContext.ToneWithContext.getDefaults(), {
      convert: true,
      units: "number"
    });
  }

  get value() {
    const now = this.now();
    return this.getValueAtTime(now);
  }

  set value(value) {
    this.cancelScheduledValues(this.now());
    this.setValueAtTime(value, this.now());
  }

  get minValue() {
    // if it's not the default minValue, return it
    if ((0, _TypeCheck.isDefined)(this._minValue)) {
      return this._minValue;
    } else if (this.units === "time" || this.units === "frequency" || this.units === "normalRange" || this.units === "positive" || this.units === "transportTime" || this.units === "ticks" || this.units === "bpm" || this.units === "hertz" || this.units === "samples") {
      return 0;
    } else if (this.units === "audioRange") {
      return -1;
    } else if (this.units === "decibels") {
      return -Infinity;
    } else {
      return this._param.minValue;
    }
  }

  get maxValue() {
    if ((0, _TypeCheck.isDefined)(this._maxValue)) {
      return this._maxValue;
    } else if (this.units === "normalRange" || this.units === "audioRange") {
      return 1;
    } else {
      return this._param.maxValue;
    }
  }
  /**
   * Type guard based on the unit name
   */


  _is(arg, type) {
    return this.units === type;
  }
  /**
   * Make sure the value is always in the defined range
   */


  _assertRange(value) {
    if ((0, _TypeCheck.isDefined)(this.maxValue) && (0, _TypeCheck.isDefined)(this.minValue)) {
      (0, _Debug.assertRange)(value, this._fromType(this.minValue), this._fromType(this.maxValue));
    }

    return value;
  }
  /**
   * Convert the given value from the type specified by Param.units
   * into the destination value (such as Gain or Frequency).
   */


  _fromType(val) {
    if (this.convert && !this.overridden) {
      if (this._is(val, "time")) {
        return this.toSeconds(val);
      } else if (this._is(val, "decibels")) {
        return (0, _Conversions.dbToGain)(val);
      } else if (this._is(val, "frequency")) {
        return this.toFrequency(val);
      } else {
        return val;
      }
    } else if (this.overridden) {
      // if it's overridden, should only schedule 0s
      return 0;
    } else {
      return val;
    }
  }
  /**
   * Convert the parameters value into the units specified by Param.units.
   */


  _toType(val) {
    if (this.convert && this.units === "decibels") {
      return (0, _Conversions.gainToDb)(val);
    } else {
      return val;
    }
  } //-------------------------------------
  // ABSTRACT PARAM INTERFACE
  // all docs are generated from ParamInterface.ts
  //-------------------------------------


  setValueAtTime(value, time) {
    const computedTime = this.toSeconds(time);

    const numericValue = this._fromType(value);

    (0, _Debug.assert)(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to setValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(time)}`);

    this._assertRange(numericValue);

    this.log(this.units, "setValueAtTime", value, computedTime);

    this._events.add({
      time: computedTime,
      type: "setValueAtTime",
      value: numericValue
    });

    this._param.setValueAtTime(numericValue, computedTime);

    return this;
  }

  getValueAtTime(time) {
    const computedTime = Math.max(this.toSeconds(time), 0);

    const after = this._events.getAfter(computedTime);

    const before = this._events.get(computedTime);

    let value = this._initialValue; // if it was set by

    if (before === null) {
      value = this._initialValue;
    } else if (before.type === "setTargetAtTime" && (after === null || after.type === "setValueAtTime")) {
      const previous = this._events.getBefore(before.time);

      let previousVal;

      if (previous === null) {
        previousVal = this._initialValue;
      } else {
        previousVal = previous.value;
      }

      if (before.type === "setTargetAtTime") {
        value = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);
      }
    } else if (after === null) {
      value = before.value;
    } else if (after.type === "linearRampToValueAtTime" || after.type === "exponentialRampToValueAtTime") {
      let beforeValue = before.value;

      if (before.type === "setTargetAtTime") {
        const previous = this._events.getBefore(before.time);

        if (previous === null) {
          beforeValue = this._initialValue;
        } else {
          beforeValue = previous.value;
        }
      }

      if (after.type === "linearRampToValueAtTime") {
        value = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);
      } else {
        value = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);
      }
    } else {
      value = before.value;
    }

    return this._toType(value);
  }

  setRampPoint(time) {
    time = this.toSeconds(time);
    let currentVal = this.getValueAtTime(time);
    this.cancelAndHoldAtTime(time);

    if (this._fromType(currentVal) === 0) {
      currentVal = this._toType(this._minOutput);
    }

    this.setValueAtTime(currentVal, time);
    return this;
  }

  linearRampToValueAtTime(value, endTime) {
    const numericValue = this._fromType(value);

    const computedTime = this.toSeconds(endTime);
    (0, _Debug.assert)(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);

    this._assertRange(numericValue);

    this._events.add({
      time: computedTime,
      type: "linearRampToValueAtTime",
      value: numericValue
    });

    this.log(this.units, "linearRampToValueAtTime", value, computedTime);

    this._param.linearRampToValueAtTime(numericValue, computedTime);

    return this;
  }

  exponentialRampToValueAtTime(value, endTime) {
    let numericValue = this._fromType(value); // the value can't be 0


    numericValue = (0, _Math.EQ)(numericValue, 0) ? this._minOutput : numericValue;

    this._assertRange(numericValue);

    const computedTime = this.toSeconds(endTime);
    (0, _Debug.assert)(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`); // store the event

    this._events.add({
      time: computedTime,
      type: "exponentialRampToValueAtTime",
      value: numericValue
    });

    this.log(this.units, "exponentialRampToValueAtTime", value, computedTime);

    this._param.exponentialRampToValueAtTime(numericValue, computedTime);

    return this;
  }

  exponentialRampTo(value, rampTime, startTime) {
    startTime = this.toSeconds(startTime);
    this.setRampPoint(startTime);
    this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));
    return this;
  }

  linearRampTo(value, rampTime, startTime) {
    startTime = this.toSeconds(startTime);
    this.setRampPoint(startTime);
    this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));
    return this;
  }

  targetRampTo(value, rampTime, startTime) {
    startTime = this.toSeconds(startTime);
    this.setRampPoint(startTime);
    this.exponentialApproachValueAtTime(value, startTime, rampTime);
    return this;
  }

  exponentialApproachValueAtTime(value, time, rampTime) {
    time = this.toSeconds(time);
    rampTime = this.toSeconds(rampTime);
    const timeConstant = Math.log(rampTime + 1) / Math.log(200);
    this.setTargetAtTime(value, time, timeConstant); // at 90% start a linear ramp to the final value

    this.cancelAndHoldAtTime(time + rampTime * 0.9);
    this.linearRampToValueAtTime(value, time + rampTime);
    return this;
  }

  setTargetAtTime(value, startTime, timeConstant) {
    const numericValue = this._fromType(value); // The value will never be able to approach without timeConstant > 0.


    (0, _Debug.assert)(isFinite(timeConstant) && timeConstant > 0, "timeConstant must be a number greater than 0");
    const computedTime = this.toSeconds(startTime);

    this._assertRange(numericValue);

    (0, _Debug.assert)(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to setTargetAtTime: ${JSON.stringify(value)}, ${JSON.stringify(startTime)}`);

    this._events.add({
      constant: timeConstant,
      time: computedTime,
      type: "setTargetAtTime",
      value: numericValue
    });

    this.log(this.units, "setTargetAtTime", value, computedTime, timeConstant);

    this._param.setTargetAtTime(numericValue, computedTime, timeConstant);

    return this;
  }

  setValueCurveAtTime(values, startTime, duration, scaling = 1) {
    duration = this.toSeconds(duration);
    startTime = this.toSeconds(startTime);
    const startingValue = this._fromType(values[0]) * scaling;
    this.setValueAtTime(this._toType(startingValue), startTime);
    const segTime = duration / (values.length - 1);

    for (let i = 1; i < values.length; i++) {
      const numericValue = this._fromType(values[i]) * scaling;
      this.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);
    }

    return this;
  }

  cancelScheduledValues(time) {
    const computedTime = this.toSeconds(time);
    (0, _Debug.assert)(isFinite(computedTime), `Invalid argument to cancelScheduledValues: ${JSON.stringify(time)}`);

    this._events.cancel(computedTime);

    this._param.cancelScheduledValues(computedTime);

    this.log(this.units, "cancelScheduledValues", computedTime);
    return this;
  }

  cancelAndHoldAtTime(time) {
    const computedTime = this.toSeconds(time);

    const valueAtTime = this._fromType(this.getValueAtTime(computedTime)); // remove the schedule events


    (0, _Debug.assert)(isFinite(computedTime), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(time)}`);
    this.log(this.units, "cancelAndHoldAtTime", computedTime, "value=" + valueAtTime); // if there is an event at the given computedTime
    // and that even is not a "set"

    const before = this._events.get(computedTime);

    const after = this._events.getAfter(computedTime);

    if (before && (0, _Math.EQ)(before.time, computedTime)) {
      // remove everything after
      if (after) {
        this._param.cancelScheduledValues(after.time);

        this._events.cancel(after.time);
      } else {
        this._param.cancelAndHoldAtTime(computedTime);

        this._events.cancel(computedTime + this.sampleTime);
      }
    } else if (after) {
      this._param.cancelScheduledValues(after.time); // cancel the next event(s)


      this._events.cancel(after.time);

      if (after.type === "linearRampToValueAtTime") {
        this.linearRampToValueAtTime(this._toType(valueAtTime), computedTime);
      } else if (after.type === "exponentialRampToValueAtTime") {
        this.exponentialRampToValueAtTime(this._toType(valueAtTime), computedTime);
      }
    } // set the value at the given time


    this._events.add({
      time: computedTime,
      type: "setValueAtTime",
      value: valueAtTime
    });

    this._param.setValueAtTime(valueAtTime, computedTime);

    return this;
  }

  rampTo(value, rampTime = 0.1, startTime) {
    if (this.units === "frequency" || this.units === "bpm" || this.units === "decibels") {
      this.exponentialRampTo(value, rampTime, startTime);
    } else {
      this.linearRampTo(value, rampTime, startTime);
    }

    return this;
  }
  /**
   * Apply all of the previously scheduled events to the passed in Param or AudioParam.
   * The applied values will start at the context's current time and schedule
   * all of the events which are scheduled on this Param onto the passed in param.
   */


  apply(param) {
    const now = this.context.currentTime; // set the param's value at the current time and schedule everything else

    param.setValueAtTime(this.getValueAtTime(now), now); // if the previous event was a curve, then set the rest of it

    const previousEvent = this._events.get(now);

    if (previousEvent && previousEvent.type === "setTargetAtTime") {
      // approx it until the next event with linear ramps
      const nextEvent = this._events.getAfter(previousEvent.time); // or for 2 seconds if there is no event


      const endTime = nextEvent ? nextEvent.time : now + 2;
      const subdivisions = (endTime - now) / 10;

      for (let i = now; i < endTime; i += subdivisions) {
        param.linearRampToValueAtTime(this.getValueAtTime(i), i);
      }
    }

    this._events.forEachAfter(this.context.currentTime, event => {
      if (event.type === "cancelScheduledValues") {
        param.cancelScheduledValues(event.time);
      } else if (event.type === "setTargetAtTime") {
        param.setTargetAtTime(event.value, event.time, event.constant);
      } else {
        param[event.type](event.value, event.time);
      }
    });

    return this;
  }
  /**
   * Replace the Param's internal AudioParam. Will apply scheduled curves
   * onto the parameter and replace the connections.
   */


  setParam(param) {
    (0, _Debug.assert)(this._swappable, "The Param must be assigned as 'swappable' in the constructor");
    const input = this.input;
    input.disconnect(this._param);
    this.apply(param);
    this._param = param;
    input.connect(this._param);
    return this;
  }

  dispose() {
    super.dispose();

    this._events.dispose();

    return this;
  }

  get defaultValue() {
    return this._toType(this._param.defaultValue);
  } //-------------------------------------
  // 	AUTOMATION CURVE CALCULATIONS
  // 	MIT License, copyright (c) 2014 Jordan Santell
  //-------------------------------------
  // Calculates the the value along the curve produced by setTargetAtTime


  _exponentialApproach(t0, v0, v1, timeConstant, t) {
    return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);
  } // Calculates the the value along the curve produced by linearRampToValueAtTime


  _linearInterpolate(t0, v0, t1, v1, t) {
    return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));
  } // Calculates the the value along the curve produced by exponentialRampToValueAtTime


  _exponentialInterpolate(t0, v0, t1, v1, t) {
    return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));
  }

}

exports.Param = Param;
},{"../type/Conversions":"node_modules/tone/build/esm/core/type/Conversions.js","../util/AdvancedTypeCheck":"node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js","../util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../util/Timeline":"node_modules/tone/build/esm/core/util/Timeline.js","../util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","./ToneWithContext":"node_modules/tone/build/esm/core/context/ToneWithContext.js","../util/Math":"node_modules/tone/build/esm/core/util/Math.js","../util/Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/core/context/ToneAudioNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectSeries = connectSeries;
exports.connect = connect;
exports.disconnect = disconnect;
exports.ToneAudioNode = void 0;

var _AdvancedTypeCheck = require("../util/AdvancedTypeCheck");

var _TypeCheck = require("../util/TypeCheck");

var _Param = require("./Param");

var _ToneWithContext = require("./ToneWithContext");

var _Debug = require("../util/Debug");

/**
 * ToneAudioNode is the base class for classes which process audio.
 */
class ToneAudioNode extends _ToneWithContext.ToneWithContext {
  constructor() {
    super(...arguments);
    /**
     * The name of the class
     */

    this.name = "ToneAudioNode";
    /**
     * List all of the node that must be set to match the ChannelProperties
     */

    this._internalChannels = [];
  }
  /**
   * The number of inputs feeding into the AudioNode.
   * For source nodes, this will be 0.
   * @example
   * const node = new Tone.Gain();
   * console.log(node.numberOfInputs);
   */


  get numberOfInputs() {
    if ((0, _TypeCheck.isDefined)(this.input)) {
      if ((0, _AdvancedTypeCheck.isAudioParam)(this.input) || this.input instanceof _Param.Param) {
        return 1;
      } else {
        return this.input.numberOfInputs;
      }
    } else {
      return 0;
    }
  }
  /**
   * The number of outputs of the AudioNode.
   * @example
   * const node = new Tone.Gain();
   * console.log(node.numberOfOutputs);
   */


  get numberOfOutputs() {
    if ((0, _TypeCheck.isDefined)(this.output)) {
      return this.output.numberOfOutputs;
    } else {
      return 0;
    }
  } //-------------------------------------
  // AUDIO PROPERTIES
  //-------------------------------------

  /**
   * Used to decide which nodes to get/set properties on
   */


  _isAudioNode(node) {
    return (0, _TypeCheck.isDefined)(node) && (node instanceof ToneAudioNode || (0, _AdvancedTypeCheck.isAudioNode)(node));
  }
  /**
   * Get all of the audio nodes (either internal or input/output) which together
   * make up how the class node responds to channel input/output
   */


  _getInternalNodes() {
    const nodeList = this._internalChannels.slice(0);

    if (this._isAudioNode(this.input)) {
      nodeList.push(this.input);
    }

    if (this._isAudioNode(this.output)) {
      if (this.input !== this.output) {
        nodeList.push(this.output);
      }
    }

    return nodeList;
  }
  /**
   * Set the audio options for this node such as channelInterpretation
   * channelCount, etc.
   * @param options
   */


  _setChannelProperties(options) {
    const nodeList = this._getInternalNodes();

    nodeList.forEach(node => {
      node.channelCount = options.channelCount;
      node.channelCountMode = options.channelCountMode;
      node.channelInterpretation = options.channelInterpretation;
    });
  }
  /**
   * Get the current audio options for this node such as channelInterpretation
   * channelCount, etc.
   */


  _getChannelProperties() {
    const nodeList = this._getInternalNodes();

    (0, _Debug.assert)(nodeList.length > 0, "ToneAudioNode does not have any internal nodes"); // use the first node to get properties
    // they should all be the same

    const node = nodeList[0];
    return {
      channelCount: node.channelCount,
      channelCountMode: node.channelCountMode,
      channelInterpretation: node.channelInterpretation
    };
  }
  /**
   * channelCount is the number of channels used when up-mixing and down-mixing
   * connections to any inputs to the node. The default value is 2 except for
   * specific nodes where its value is specially determined.
   */


  get channelCount() {
    return this._getChannelProperties().channelCount;
  }

  set channelCount(channelCount) {
    const props = this._getChannelProperties(); // merge it with the other properties


    this._setChannelProperties(Object.assign(props, {
      channelCount
    }));
  }
  /**
   * channelCountMode determines how channels will be counted when up-mixing and
   * down-mixing connections to any inputs to the node.
   * The default value is "max". This attribute has no effect for nodes with no inputs.
   * * "max" - computedNumberOfChannels is the maximum of the number of channels of all connections to an input. In this mode channelCount is ignored.
   * * "clamped-max" - computedNumberOfChannels is determined as for "max" and then clamped to a maximum value of the given channelCount.
   * * "explicit" - computedNumberOfChannels is the exact value as specified by the channelCount.
   */


  get channelCountMode() {
    return this._getChannelProperties().channelCountMode;
  }

  set channelCountMode(channelCountMode) {
    const props = this._getChannelProperties(); // merge it with the other properties


    this._setChannelProperties(Object.assign(props, {
      channelCountMode
    }));
  }
  /**
   * channelInterpretation determines how individual channels will be treated
   * when up-mixing and down-mixing connections to any inputs to the node.
   * The default value is "speakers".
   */


  get channelInterpretation() {
    return this._getChannelProperties().channelInterpretation;
  }

  set channelInterpretation(channelInterpretation) {
    const props = this._getChannelProperties(); // merge it with the other properties


    this._setChannelProperties(Object.assign(props, {
      channelInterpretation
    }));
  } //-------------------------------------
  // CONNECTIONS
  //-------------------------------------

  /**
   * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode
   * @param destination The output to connect to
   * @param outputNum The output to connect from
   * @param inputNum The input to connect to
   */


  connect(destination, outputNum = 0, inputNum = 0) {
    connect(this, destination, outputNum, inputNum);
    return this;
  }
  /**
   * Connect the output to the context's destination node.
   * @example
   * const osc = new Tone.Oscillator("C2").start();
   * osc.toDestination();
   */


  toDestination() {
    this.connect(this.context.destination);
    return this;
  }
  /**
   * Connect the output to the context's destination node.
   * See [[toDestination]]
   * @deprecated
   */


  toMaster() {
    (0, _Debug.warn)("toMaster() has been renamed toDestination()");
    return this.toDestination();
  }
  /**
   * disconnect the output
   */


  disconnect(destination, outputNum = 0, inputNum = 0) {
    disconnect(this, destination, outputNum, inputNum);
    return this;
  }
  /**
   * Connect the output of this node to the rest of the nodes in series.
   * @example
   * const player = new Tone.Player("https://tonejs.github.io/audio/drum-samples/handdrum-loop.mp3");
   * player.autostart = true;
   * const filter = new Tone.AutoFilter(4).start();
   * const distortion = new Tone.Distortion(0.5);
   * // connect the player to the filter, distortion and then to the master output
   * player.chain(filter, distortion, Tone.Destination);
   */


  chain(...nodes) {
    connectSeries(this, ...nodes);
    return this;
  }
  /**
   * connect the output of this node to the rest of the nodes in parallel.
   * @example
   * const player = new Tone.Player("https://tonejs.github.io/audio/drum-samples/conga-rhythm.mp3");
   * player.autostart = true;
   * const pitchShift = new Tone.PitchShift(4).toDestination();
   * const filter = new Tone.Filter("G5").toDestination();
   * // connect a node to the pitch shift and filter in parallel
   * player.fan(pitchShift, filter);
   */


  fan(...nodes) {
    nodes.forEach(node => this.connect(node));
    return this;
  }
  /**
   * Dispose and disconnect
   */


  dispose() {
    super.dispose();

    if ((0, _TypeCheck.isDefined)(this.input)) {
      if (this.input instanceof ToneAudioNode) {
        this.input.dispose();
      } else if ((0, _AdvancedTypeCheck.isAudioNode)(this.input)) {
        this.input.disconnect();
      }
    }

    if ((0, _TypeCheck.isDefined)(this.output)) {
      if (this.output instanceof ToneAudioNode) {
        this.output.dispose();
      } else if ((0, _AdvancedTypeCheck.isAudioNode)(this.output)) {
        this.output.disconnect();
      }
    }

    this._internalChannels = [];
    return this;
  }

} //-------------------------------------
// CONNECTIONS
//-------------------------------------

/**
 * connect together all of the arguments in series
 * @param nodes
 */


exports.ToneAudioNode = ToneAudioNode;

function connectSeries(...nodes) {
  const first = nodes.shift();
  nodes.reduce((prev, current) => {
    if (prev instanceof ToneAudioNode) {
      prev.connect(current);
    } else if ((0, _AdvancedTypeCheck.isAudioNode)(prev)) {
      connect(prev, current);
    }

    return current;
  }, first);
}
/**
 * Connect two nodes together so that signal flows from the
 * first node to the second. Optionally specify the input and output channels.
 * @param srcNode The source node
 * @param dstNode The destination node
 * @param outputNumber The output channel of the srcNode
 * @param inputNumber The input channel of the dstNode
 */


function connect(srcNode, dstNode, outputNumber = 0, inputNumber = 0) {
  (0, _Debug.assert)((0, _TypeCheck.isDefined)(srcNode), "Cannot connect from undefined node");
  (0, _Debug.assert)((0, _TypeCheck.isDefined)(dstNode), "Cannot connect to undefined node");

  if (dstNode instanceof ToneAudioNode || (0, _AdvancedTypeCheck.isAudioNode)(dstNode)) {
    (0, _Debug.assert)(dstNode.numberOfInputs > 0, "Cannot connect to node with no inputs");
  }

  (0, _Debug.assert)(srcNode.numberOfOutputs > 0, "Cannot connect from node with no outputs"); // resolve the input of the dstNode

  while (dstNode instanceof ToneAudioNode || dstNode instanceof _Param.Param) {
    if ((0, _TypeCheck.isDefined)(dstNode.input)) {
      dstNode = dstNode.input;
    }
  }

  while (srcNode instanceof ToneAudioNode) {
    if ((0, _TypeCheck.isDefined)(srcNode.output)) {
      srcNode = srcNode.output;
    }
  } // make the connection


  if ((0, _AdvancedTypeCheck.isAudioParam)(dstNode)) {
    srcNode.connect(dstNode, outputNumber);
  } else {
    srcNode.connect(dstNode, outputNumber, inputNumber);
  }
}
/**
 * Disconnect a node from all nodes or optionally include a destination node and input/output channels.
 * @param srcNode The source node
 * @param dstNode The destination node
 * @param outputNumber The output channel of the srcNode
 * @param inputNumber The input channel of the dstNode
 */


function disconnect(srcNode, dstNode, outputNumber = 0, inputNumber = 0) {
  // resolve the destination node
  if ((0, _TypeCheck.isDefined)(dstNode)) {
    while (dstNode instanceof ToneAudioNode) {
      dstNode = dstNode.input;
    }
  } // resolve the src node


  while (!(0, _AdvancedTypeCheck.isAudioNode)(srcNode)) {
    if ((0, _TypeCheck.isDefined)(srcNode.output)) {
      srcNode = srcNode.output;
    }
  }

  if ((0, _AdvancedTypeCheck.isAudioParam)(dstNode)) {
    srcNode.disconnect(dstNode, outputNumber);
  } else if ((0, _AdvancedTypeCheck.isAudioNode)(dstNode)) {
    srcNode.disconnect(dstNode, outputNumber, inputNumber);
  } else {
    srcNode.disconnect();
  }
}
},{"../util/AdvancedTypeCheck":"node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js","../util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","./Param":"node_modules/tone/build/esm/core/context/Param.js","./ToneWithContext":"node_modules/tone/build/esm/core/context/ToneWithContext.js","../util/Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/core/context/Gain.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Gain = void 0;

var _Param = require("../context/Param");

var _Defaults = require("../util/Defaults");

var _Interface = require("../util/Interface");

var _ToneAudioNode = require("./ToneAudioNode");

/**
 * A thin wrapper around the Native Web Audio GainNode.
 * The GainNode is a basic building block of the Web Audio
 * API and is useful for routing audio and adjusting gains.
 * @category Core
 * @example
 * return Tone.Offline(() => {
 * 	const gainNode = new Tone.Gain(0).toDestination();
 * 	const osc = new Tone.Oscillator(30).connect(gainNode).start();
 * 	gainNode.gain.rampTo(1, 0.1);
 * 	gainNode.gain.rampTo(0, 0.4, 0.2);
 * }, 0.7, 1);
 */
class Gain extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Gain.getDefaults(), arguments, ["gain", "units"]));
    this.name = "Gain";
    /**
     * The wrapped GainNode.
     */

    this._gainNode = this.context.createGain(); // input = output

    this.input = this._gainNode;
    this.output = this._gainNode;
    const options = (0, _Defaults.optionsFromArguments)(Gain.getDefaults(), arguments, ["gain", "units"]);
    this.gain = new _Param.Param({
      context: this.context,
      convert: options.convert,
      param: this._gainNode.gain,
      units: options.units,
      value: options.gain,
      minValue: options.minValue,
      maxValue: options.maxValue
    });
    (0, _Interface.readOnly)(this, "gain");
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      convert: true,
      gain: 1,
      units: "gain"
    });
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    this._gainNode.disconnect();

    this.gain.dispose();
    return this;
  }

}

exports.Gain = Gain;
},{"../context/Param":"node_modules/tone/build/esm/core/context/Param.js","../util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","./ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js"}],"node_modules/tone/build/esm/source/OneShotSource.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OneShotSource = void 0;

var _Gain = require("../core/context/Gain");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Interface = require("../core/util/Interface");

var _Debug = require("../core/util/Debug");

/**
 * Base class for fire-and-forget nodes
 */
class OneShotSource extends _ToneAudioNode.ToneAudioNode {
  constructor(options) {
    super(options);
    /**
     * The callback to invoke after the
     * source is done playing.
     */

    this.onended = _Interface.noOp;
    /**
     * The start time
     */

    this._startTime = -1;
    /**
     * The stop time
     */

    this._stopTime = -1;
    /**
     * The id of the timeout
     */

    this._timeout = -1;
    /**
     * The public output node
     */

    this.output = new _Gain.Gain({
      context: this.context,
      gain: 0
    });
    /**
     * The output gain node.
     */

    this._gainNode = this.output;
    /**
     * Get the playback state at the given time
     */

    this.getStateAtTime = function (time) {
      const computedTime = this.toSeconds(time);

      if (this._startTime !== -1 && computedTime >= this._startTime && (this._stopTime === -1 || computedTime <= this._stopTime)) {
        return "started";
      } else {
        return "stopped";
      }
    };

    this._fadeIn = options.fadeIn;
    this._fadeOut = options.fadeOut;
    this._curve = options.curve;
    this.onended = options.onended;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      curve: "linear",
      fadeIn: 0,
      fadeOut: 0,
      onended: _Interface.noOp
    });
  }
  /**
   * Start the source at the given time
   * @param  time When to start the source
   */


  _startGain(time, gain = 1) {
    (0, _Debug.assert)(this._startTime === -1, "Source cannot be started more than once"); // apply a fade in envelope

    const fadeInTime = this.toSeconds(this._fadeIn); // record the start time

    this._startTime = time + fadeInTime;
    this._startTime = Math.max(this._startTime, this.context.currentTime); // schedule the envelope

    if (fadeInTime > 0) {
      this._gainNode.gain.setValueAtTime(0, time);

      if (this._curve === "linear") {
        this._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);
      } else {
        this._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);
      }
    } else {
      this._gainNode.gain.setValueAtTime(gain, time);
    }

    return this;
  }
  /**
   * Stop the source node at the given time.
   * @param time When to stop the source
   */


  stop(time) {
    this.log("stop", time);

    this._stopGain(this.toSeconds(time));

    return this;
  }
  /**
   * Stop the source at the given time
   * @param  time When to stop the source
   */


  _stopGain(time) {
    (0, _Debug.assert)(this._startTime !== -1, "'start' must be called before 'stop'"); // cancel the previous stop

    this.cancelStop(); // the fadeOut time

    const fadeOutTime = this.toSeconds(this._fadeOut); // schedule the stop callback

    this._stopTime = this.toSeconds(time) + fadeOutTime;
    this._stopTime = Math.max(this._stopTime, this.context.currentTime);

    if (fadeOutTime > 0) {
      // start the fade out curve at the given time
      if (this._curve === "linear") {
        this._gainNode.gain.linearRampTo(0, fadeOutTime, time);
      } else {
        this._gainNode.gain.targetRampTo(0, fadeOutTime, time);
      }
    } else {
      // stop any ongoing ramps, and set the value to 0
      this._gainNode.gain.cancelAndHoldAtTime(time);

      this._gainNode.gain.setValueAtTime(0, time);
    }

    this.context.clearTimeout(this._timeout);
    this._timeout = this.context.setTimeout(() => {
      // allow additional time for the exponential curve to fully decay
      const additionalTail = this._curve === "exponential" ? fadeOutTime * 2 : 0;

      this._stopSource(this.now() + additionalTail);

      this._onended();
    }, this._stopTime - this.context.currentTime);
    return this;
  }
  /**
   * Invoke the onended callback
   */


  _onended() {
    if (this.onended !== _Interface.noOp) {
      this.onended(this); // overwrite onended to make sure it only is called once

      this.onended = _Interface.noOp; // dispose when it's ended to free up for garbage collection only in the online context

      if (!this.context.isOffline) {
        const disposeCallback = () => this.dispose(); // @ts-ignore


        if (typeof window.requestIdleCallback !== "undefined") {
          // @ts-ignore
          window.requestIdleCallback(disposeCallback);
        } else {
          setTimeout(disposeCallback, 1000);
        }
      }
    }
  }
  /**
   * Get the playback state at the current time
   */


  get state() {
    return this.getStateAtTime(this.now());
  }
  /**
   * Cancel a scheduled stop event
   */


  cancelStop() {
    this.log("cancelStop");
    (0, _Debug.assert)(this._startTime !== -1, "Source is not started"); // cancel the stop envelope

    this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);

    this.context.clearTimeout(this._timeout);
    this._stopTime = -1;
    return this;
  }

  dispose() {
    super.dispose();

    this._gainNode.disconnect();

    return this;
  }

}

exports.OneShotSource = OneShotSource;
},{"../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/signal/ToneConstantSource.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToneConstantSource = void 0;

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Param = require("../core/context/Param");

var _Defaults = require("../core/util/Defaults");

var _OneShotSource = require("../source/OneShotSource");

/**
 * Wrapper around the native fire-and-forget ConstantSource.
 * Adds the ability to reschedule the stop method.
 * @category Signal
 */
class ToneConstantSource extends _OneShotSource.OneShotSource {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(ToneConstantSource.getDefaults(), arguments, ["offset"]));
    this.name = "ToneConstantSource";
    /**
     * The signal generator
     */

    this._source = this.context.createConstantSource();
    const options = (0, _Defaults.optionsFromArguments)(ToneConstantSource.getDefaults(), arguments, ["offset"]);
    (0, _ToneAudioNode.connect)(this._source, this._gainNode);
    this.offset = new _Param.Param({
      context: this.context,
      convert: options.convert,
      param: this._source.offset,
      units: options.units,
      value: options.offset,
      minValue: options.minValue,
      maxValue: options.maxValue
    });
  }

  static getDefaults() {
    return Object.assign(_OneShotSource.OneShotSource.getDefaults(), {
      convert: true,
      offset: 1,
      units: "number"
    });
  }
  /**
   * Start the source node at the given time
   * @param  time When to start the source
   */


  start(time) {
    const computedTime = this.toSeconds(time);
    this.log("start", computedTime);

    this._startGain(computedTime);

    this._source.start(computedTime);

    return this;
  }

  _stopSource(time) {
    this._source.stop(time);
  }

  dispose() {
    super.dispose();

    if (this.state === "started") {
      this.stop();
    }

    this._source.disconnect();

    this.offset.dispose();
    return this;
  }

}

exports.ToneConstantSource = ToneConstantSource;
},{"../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/context/Param":"node_modules/tone/build/esm/core/context/Param.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../source/OneShotSource":"node_modules/tone/build/esm/source/OneShotSource.js"}],"node_modules/tone/build/esm/signal/Signal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectSignal = connectSignal;
exports.Signal = void 0;

var _Param = require("../core/context/Param");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _AdvancedTypeCheck = require("../core/util/AdvancedTypeCheck");

var _Defaults = require("../core/util/Defaults");

var _ToneConstantSource = require("./ToneConstantSource");

/**
 * A signal is an audio-rate value. Tone.Signal is a core component of the library.
 * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal
 * has all of the methods available to native Web Audio
 * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)
 * as well as additional conveniences. Read more about working with signals
 * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).
 *
 * @example
 * const osc = new Tone.Oscillator().toDestination().start();
 * // a scheduleable signal which can be connected to control an AudioParam or another Signal
 * const signal = new Tone.Signal({
 * 	value: "C4",
 * 	units: "frequency"
 * }).connect(osc.frequency);
 * // the scheduled ramp controls the connected signal
 * signal.rampTo("C2", 4, "+0.5");
 * @category Signal
 */
class Signal extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Signal.getDefaults(), arguments, ["value", "units"]));
    this.name = "Signal";
    /**
     * Indicates if the value should be overridden on connection.
     */

    this.override = true;
    const options = (0, _Defaults.optionsFromArguments)(Signal.getDefaults(), arguments, ["value", "units"]);
    this.output = this._constantSource = new _ToneConstantSource.ToneConstantSource({
      context: this.context,
      convert: options.convert,
      offset: options.value,
      units: options.units,
      minValue: options.minValue,
      maxValue: options.maxValue
    });

    this._constantSource.start(0);

    this.input = this._param = this._constantSource.offset;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      convert: true,
      units: "number",
      value: 0
    });
  }

  connect(destination, outputNum = 0, inputNum = 0) {
    // start it only when connected to something
    connectSignal(this, destination, outputNum, inputNum);
    return this;
  }

  dispose() {
    super.dispose();

    this._param.dispose();

    this._constantSource.dispose();

    return this;
  } //-------------------------------------
  // ABSTRACT PARAM INTERFACE
  // just a proxy for the ConstantSourceNode's offset AudioParam
  // all docs are generated from AbstractParam.ts
  //-------------------------------------


  setValueAtTime(value, time) {
    this._param.setValueAtTime(value, time);

    return this;
  }

  getValueAtTime(time) {
    return this._param.getValueAtTime(time);
  }

  setRampPoint(time) {
    this._param.setRampPoint(time);

    return this;
  }

  linearRampToValueAtTime(value, time) {
    this._param.linearRampToValueAtTime(value, time);

    return this;
  }

  exponentialRampToValueAtTime(value, time) {
    this._param.exponentialRampToValueAtTime(value, time);

    return this;
  }

  exponentialRampTo(value, rampTime, startTime) {
    this._param.exponentialRampTo(value, rampTime, startTime);

    return this;
  }

  linearRampTo(value, rampTime, startTime) {
    this._param.linearRampTo(value, rampTime, startTime);

    return this;
  }

  targetRampTo(value, rampTime, startTime) {
    this._param.targetRampTo(value, rampTime, startTime);

    return this;
  }

  exponentialApproachValueAtTime(value, time, rampTime) {
    this._param.exponentialApproachValueAtTime(value, time, rampTime);

    return this;
  }

  setTargetAtTime(value, startTime, timeConstant) {
    this._param.setTargetAtTime(value, startTime, timeConstant);

    return this;
  }

  setValueCurveAtTime(values, startTime, duration, scaling) {
    this._param.setValueCurveAtTime(values, startTime, duration, scaling);

    return this;
  }

  cancelScheduledValues(time) {
    this._param.cancelScheduledValues(time);

    return this;
  }

  cancelAndHoldAtTime(time) {
    this._param.cancelAndHoldAtTime(time);

    return this;
  }

  rampTo(value, rampTime, startTime) {
    this._param.rampTo(value, rampTime, startTime);

    return this;
  }

  get value() {
    return this._param.value;
  }

  set value(value) {
    this._param.value = value;
  }

  get convert() {
    return this._param.convert;
  }

  set convert(convert) {
    this._param.convert = convert;
  }

  get units() {
    return this._param.units;
  }

  get overridden() {
    return this._param.overridden;
  }

  set overridden(overridden) {
    this._param.overridden = overridden;
  }

  get maxValue() {
    return this._param.maxValue;
  }

  get minValue() {
    return this._param.minValue;
  }
  /**
   * See [[Param.apply]].
   */


  apply(param) {
    this._param.apply(param);

    return this;
  }

}
/**
 * When connecting from a signal, it's necessary to zero out the node destination
 * node if that node is also a signal. If the destination is not 0, then the values
 * will be summed. This method insures that the output of the destination signal will
 * be the same as the source signal, making the destination signal a pass through node.
 * @param signal The output signal to connect from
 * @param destination the destination to connect to
 * @param outputNum the optional output number
 * @param inputNum the input number
 */


exports.Signal = Signal;

function connectSignal(signal, destination, outputNum, inputNum) {
  if (destination instanceof _Param.Param || (0, _AdvancedTypeCheck.isAudioParam)(destination) || destination instanceof Signal && destination.override) {
    // cancel changes
    destination.cancelScheduledValues(0); // reset the value

    destination.setValueAtTime(0, 0); // mark the value as overridden

    if (destination instanceof Signal) {
      destination.overridden = true;
    }
  }

  (0, _ToneAudioNode.connect)(signal, destination, outputNum, inputNum);
}
},{"../core/context/Param":"node_modules/tone/build/esm/core/context/Param.js","../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/util/AdvancedTypeCheck":"node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./ToneConstantSource":"node_modules/tone/build/esm/signal/ToneConstantSource.js"}],"node_modules/tone/build/esm/core/clock/TickParam.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TickParam = void 0;

var _Param = require("../context/Param");

var _Defaults = require("../util/Defaults");

var _Timeline = require("../util/Timeline");

var _TypeCheck = require("../util/TypeCheck");

/**
 * A Param class just for computing ticks. Similar to the [[Param]] class,
 * but offers conversion to BPM values as well as ability to compute tick
 * duration and elapsed ticks
 */
class TickParam extends _Param.Param {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(TickParam.getDefaults(), arguments, ["value"]));
    this.name = "TickParam";
    /**
     * The timeline which tracks all of the automations.
     */

    this._events = new _Timeline.Timeline(Infinity);
    /**
     * The internal holder for the multiplier value
     */

    this._multiplier = 1;
    const options = (0, _Defaults.optionsFromArguments)(TickParam.getDefaults(), arguments, ["value"]); // set the multiplier

    this._multiplier = options.multiplier; // clear the ticks from the beginning

    this._events.cancel(0); // set an initial event


    this._events.add({
      ticks: 0,
      time: 0,
      type: "setValueAtTime",
      value: this._fromType(options.value)
    });

    this.setValueAtTime(options.value, 0);
  }

  static getDefaults() {
    return Object.assign(_Param.Param.getDefaults(), {
      multiplier: 1,
      units: "hertz",
      value: 1
    });
  }

  setTargetAtTime(value, time, constant) {
    // approximate it with multiple linear ramps
    time = this.toSeconds(time);
    this.setRampPoint(time);

    const computedValue = this._fromType(value); // start from previously scheduled value


    const prevEvent = this._events.get(time);

    const segments = Math.round(Math.max(1 / constant, 1));

    for (let i = 0; i <= segments; i++) {
      const segTime = constant * i + time;

      const rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);

      this.linearRampToValueAtTime(this._toType(rampVal), segTime);
    }

    return this;
  }

  setValueAtTime(value, time) {
    const computedTime = this.toSeconds(time);
    super.setValueAtTime(value, time);

    const event = this._events.get(computedTime);

    const previousEvent = this._events.previousEvent(event);

    const ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);

    event.ticks = Math.max(ticksUntilTime, 0);
    return this;
  }

  linearRampToValueAtTime(value, time) {
    const computedTime = this.toSeconds(time);
    super.linearRampToValueAtTime(value, time);

    const event = this._events.get(computedTime);

    const previousEvent = this._events.previousEvent(event);

    const ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);

    event.ticks = Math.max(ticksUntilTime, 0);
    return this;
  }

  exponentialRampToValueAtTime(value, time) {
    // aproximate it with multiple linear ramps
    time = this.toSeconds(time);

    const computedVal = this._fromType(value); // start from previously scheduled value


    const prevEvent = this._events.get(time); // approx 10 segments per second


    const segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));
    const segmentDur = (time - prevEvent.time) / segments;

    for (let i = 0; i <= segments; i++) {
      const segTime = segmentDur * i + prevEvent.time;

      const rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);

      this.linearRampToValueAtTime(this._toType(rampVal), segTime);
    }

    return this;
  }
  /**
   * Returns the tick value at the time. Takes into account
   * any automation curves scheduled on the signal.
   * @param  event The time to get the tick count at
   * @return The number of ticks which have elapsed at the time given any automations.
   */


  _getTicksUntilEvent(event, time) {
    if (event === null) {
      event = {
        ticks: 0,
        time: 0,
        type: "setValueAtTime",
        value: 0
      };
    } else if ((0, _TypeCheck.isUndef)(event.ticks)) {
      const previousEvent = this._events.previousEvent(event);

      event.ticks = this._getTicksUntilEvent(previousEvent, event.time);
    }

    const val0 = this._fromType(this.getValueAtTime(event.time));

    let val1 = this._fromType(this.getValueAtTime(time)); // if it's right on the line, take the previous value


    const onTheLineEvent = this._events.get(time);

    if (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === "setValueAtTime") {
      val1 = this._fromType(this.getValueAtTime(time - this.sampleTime));
    }

    return 0.5 * (time - event.time) * (val0 + val1) + event.ticks;
  }
  /**
   * Returns the tick value at the time. Takes into account
   * any automation curves scheduled on the signal.
   * @param  time The time to get the tick count at
   * @return The number of ticks which have elapsed at the time given any automations.
   */


  getTicksAtTime(time) {
    const computedTime = this.toSeconds(time);

    const event = this._events.get(computedTime);

    return Math.max(this._getTicksUntilEvent(event, computedTime), 0);
  }
  /**
   * Return the elapsed time of the number of ticks from the given time
   * @param ticks The number of ticks to calculate
   * @param  time The time to get the next tick from
   * @return The duration of the number of ticks from the given time in seconds
   */


  getDurationOfTicks(ticks, time) {
    const computedTime = this.toSeconds(time);
    const currentTick = this.getTicksAtTime(time);
    return this.getTimeOfTick(currentTick + ticks) - computedTime;
  }
  /**
   * Given a tick, returns the time that tick occurs at.
   * @return The time that the tick occurs.
   */


  getTimeOfTick(tick) {
    const before = this._events.get(tick, "ticks");

    const after = this._events.getAfter(tick, "ticks");

    if (before && before.ticks === tick) {
      return before.time;
    } else if (before && after && after.type === "linearRampToValueAtTime" && before.value !== after.value) {
      const val0 = this._fromType(this.getValueAtTime(before.time));

      const val1 = this._fromType(this.getValueAtTime(after.time));

      const delta = (val1 - val0) / (after.time - before.time);
      const k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));
      const sol1 = (-val0 + k) / delta;
      const sol2 = (-val0 - k) / delta;
      return (sol1 > 0 ? sol1 : sol2) + before.time;
    } else if (before) {
      if (before.value === 0) {
        return Infinity;
      } else {
        return before.time + (tick - before.ticks) / before.value;
      }
    } else {
      return tick / this._initialValue;
    }
  }
  /**
   * Convert some number of ticks their the duration in seconds accounting
   * for any automation curves starting at the given time.
   * @param  ticks The number of ticks to convert to seconds.
   * @param  when  When along the automation timeline to convert the ticks.
   * @return The duration in seconds of the ticks.
   */


  ticksToTime(ticks, when) {
    return this.getDurationOfTicks(ticks, when);
  }
  /**
   * The inverse of [[ticksToTime]]. Convert a duration in
   * seconds to the corresponding number of ticks accounting for any
   * automation curves starting at the given time.
   * @param  duration The time interval to convert to ticks.
   * @param  when When along the automation timeline to convert the ticks.
   * @return The duration in ticks.
   */


  timeToTicks(duration, when) {
    const computedTime = this.toSeconds(when);
    const computedDuration = this.toSeconds(duration);
    const startTicks = this.getTicksAtTime(computedTime);
    const endTicks = this.getTicksAtTime(computedTime + computedDuration);
    return endTicks - startTicks;
  }
  /**
   * Convert from the type when the unit value is BPM
   */


  _fromType(val) {
    if (this.units === "bpm" && this.multiplier) {
      return 1 / (60 / val / this.multiplier);
    } else {
      return super._fromType(val);
    }
  }
  /**
   * Special case of type conversion where the units === "bpm"
   */


  _toType(val) {
    if (this.units === "bpm" && this.multiplier) {
      return val / this.multiplier * 60;
    } else {
      return super._toType(val);
    }
  }
  /**
   * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.
   */


  get multiplier() {
    return this._multiplier;
  }

  set multiplier(m) {
    // get and reset the current value with the new multiplier
    // might be necessary to clear all the previous values
    const currentVal = this.value;
    this._multiplier = m;
    this.cancelScheduledValues(0);
    this.setValueAtTime(currentVal, 0);
  }

}

exports.TickParam = TickParam;
},{"../context/Param":"node_modules/tone/build/esm/core/context/Param.js","../util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../util/Timeline":"node_modules/tone/build/esm/core/util/Timeline.js","../util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js"}],"node_modules/tone/build/esm/core/clock/TickSignal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TickSignal = void 0;

var _Signal = require("../../signal/Signal");

var _Defaults = require("../util/Defaults");

var _TickParam = require("./TickParam");

/**
 * TickSignal extends Tone.Signal, but adds the capability
 * to calculate the number of elapsed ticks. exponential and target curves
 * are approximated with multiple linear ramps.
 *
 * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,
 * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)
 * describing integrating timing functions for tempo calculations.
 */
class TickSignal extends _Signal.Signal {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(TickSignal.getDefaults(), arguments, ["value"]));
    this.name = "TickSignal";
    const options = (0, _Defaults.optionsFromArguments)(TickSignal.getDefaults(), arguments, ["value"]);
    this.input = this._param = new _TickParam.TickParam({
      context: this.context,
      convert: options.convert,
      multiplier: options.multiplier,
      param: this._constantSource.offset,
      units: options.units,
      value: options.value
    });
  }

  static getDefaults() {
    return Object.assign(_Signal.Signal.getDefaults(), {
      multiplier: 1,
      units: "hertz",
      value: 1
    });
  }

  ticksToTime(ticks, when) {
    return this._param.ticksToTime(ticks, when);
  }

  timeToTicks(duration, when) {
    return this._param.timeToTicks(duration, when);
  }

  getTimeOfTick(tick) {
    return this._param.getTimeOfTick(tick);
  }

  getDurationOfTicks(ticks, time) {
    return this._param.getDurationOfTicks(ticks, time);
  }

  getTicksAtTime(time) {
    return this._param.getTicksAtTime(time);
  }
  /**
   * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.
   */


  get multiplier() {
    return this._param.multiplier;
  }

  set multiplier(m) {
    this._param.multiplier = m;
  }

  dispose() {
    super.dispose();

    this._param.dispose();

    return this;
  }

}

exports.TickSignal = TickSignal;
},{"../../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./TickParam":"node_modules/tone/build/esm/core/clock/TickParam.js"}],"node_modules/tone/build/esm/core/clock/TickSource.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TickSource = void 0;

var _ToneWithContext = require("../context/ToneWithContext");

var _Defaults = require("../util/Defaults");

var _Interface = require("../util/Interface");

var _StateTimeline = require("../util/StateTimeline");

var _Timeline = require("../util/Timeline");

var _TypeCheck = require("../util/TypeCheck");

var _TickSignal = require("./TickSignal");

var _Math = require("../util/Math");

/**
 * Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.
 */
class TickSource extends _ToneWithContext.ToneWithContext {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(TickSource.getDefaults(), arguments, ["frequency"]));
    this.name = "TickSource";
    /**
     * The state timeline
     */

    this._state = new _StateTimeline.StateTimeline();
    /**
     * The offset values of the ticks
     */

    this._tickOffset = new _Timeline.Timeline();
    const options = (0, _Defaults.optionsFromArguments)(TickSource.getDefaults(), arguments, ["frequency"]);
    this.frequency = new _TickSignal.TickSignal({
      context: this.context,
      units: options.units,
      value: options.frequency
    });
    (0, _Interface.readOnly)(this, "frequency"); // set the initial state

    this._state.setStateAtTime("stopped", 0); // add the first event


    this.setTicksAtTime(0, 0);
  }

  static getDefaults() {
    return Object.assign({
      frequency: 1,
      units: "hertz"
    }, _ToneWithContext.ToneWithContext.getDefaults());
  }
  /**
   * Returns the playback state of the source, either "started", "stopped" or "paused".
   */


  get state() {
    return this.getStateAtTime(this.now());
  }
  /**
   * Start the clock at the given time. Optionally pass in an offset
   * of where to start the tick counter from.
   * @param  time    The time the clock should start
   * @param offset The number of ticks to start the source at
   */


  start(time, offset) {
    const computedTime = this.toSeconds(time);

    if (this._state.getValueAtTime(computedTime) !== "started") {
      this._state.setStateAtTime("started", computedTime);

      if ((0, _TypeCheck.isDefined)(offset)) {
        this.setTicksAtTime(offset, computedTime);
      }
    }

    return this;
  }
  /**
   * Stop the clock. Stopping the clock resets the tick counter to 0.
   * @param time The time when the clock should stop.
   */


  stop(time) {
    const computedTime = this.toSeconds(time); // cancel the previous stop

    if (this._state.getValueAtTime(computedTime) === "stopped") {
      const event = this._state.get(computedTime);

      if (event && event.time > 0) {
        this._tickOffset.cancel(event.time);

        this._state.cancel(event.time);
      }
    }

    this._state.cancel(computedTime);

    this._state.setStateAtTime("stopped", computedTime);

    this.setTicksAtTime(0, computedTime);
    return this;
  }
  /**
   * Pause the clock. Pausing does not reset the tick counter.
   * @param time The time when the clock should stop.
   */


  pause(time) {
    const computedTime = this.toSeconds(time);

    if (this._state.getValueAtTime(computedTime) === "started") {
      this._state.setStateAtTime("paused", computedTime);
    }

    return this;
  }
  /**
   * Cancel start/stop/pause and setTickAtTime events scheduled after the given time.
   * @param time When to clear the events after
   */


  cancel(time) {
    time = this.toSeconds(time);

    this._state.cancel(time);

    this._tickOffset.cancel(time);

    return this;
  }
  /**
   * Get the elapsed ticks at the given time
   * @param  time  When to get the tick value
   * @return The number of ticks
   */


  getTicksAtTime(time) {
    const computedTime = this.toSeconds(time);

    const stopEvent = this._state.getLastState("stopped", computedTime); // this event allows forEachBetween to iterate until the current time


    const tmpEvent = {
      state: "paused",
      time: computedTime
    };

    this._state.add(tmpEvent); // keep track of the previous offset event


    let lastState = stopEvent;
    let elapsedTicks = 0; // iterate through all the events since the last stop

    this._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {
      let periodStartTime = lastState.time; // if there is an offset event in this period use that

      const offsetEvent = this._tickOffset.get(e.time);

      if (offsetEvent && offsetEvent.time >= lastState.time) {
        elapsedTicks = offsetEvent.ticks;
        periodStartTime = offsetEvent.time;
      }

      if (lastState.state === "started" && e.state !== "started") {
        elapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);
      }

      lastState = e;
    }); // remove the temporary event


    this._state.remove(tmpEvent); // return the ticks


    return elapsedTicks;
  }
  /**
   * The number of times the callback was invoked. Starts counting at 0
   * and increments after the callback was invoked. Returns -1 when stopped.
   */


  get ticks() {
    return this.getTicksAtTime(this.now());
  }

  set ticks(t) {
    this.setTicksAtTime(t, this.now());
  }
  /**
   * The time since ticks=0 that the TickSource has been running. Accounts
   * for tempo curves
   */


  get seconds() {
    return this.getSecondsAtTime(this.now());
  }

  set seconds(s) {
    const now = this.now();
    const ticks = this.frequency.timeToTicks(s, now);
    this.setTicksAtTime(ticks, now);
  }
  /**
   * Return the elapsed seconds at the given time.
   * @param  time  When to get the elapsed seconds
   * @return  The number of elapsed seconds
   */


  getSecondsAtTime(time) {
    time = this.toSeconds(time);

    const stopEvent = this._state.getLastState("stopped", time); // this event allows forEachBetween to iterate until the current time


    const tmpEvent = {
      state: "paused",
      time
    };

    this._state.add(tmpEvent); // keep track of the previous offset event


    let lastState = stopEvent;
    let elapsedSeconds = 0; // iterate through all the events since the last stop

    this._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {
      let periodStartTime = lastState.time; // if there is an offset event in this period use that

      const offsetEvent = this._tickOffset.get(e.time);

      if (offsetEvent && offsetEvent.time >= lastState.time) {
        elapsedSeconds = offsetEvent.seconds;
        periodStartTime = offsetEvent.time;
      }

      if (lastState.state === "started" && e.state !== "started") {
        elapsedSeconds += e.time - periodStartTime;
      }

      lastState = e;
    }); // remove the temporary event


    this._state.remove(tmpEvent); // return the ticks


    return elapsedSeconds;
  }
  /**
   * Set the clock's ticks at the given time.
   * @param  ticks The tick value to set
   * @param  time  When to set the tick value
   */


  setTicksAtTime(ticks, time) {
    time = this.toSeconds(time);

    this._tickOffset.cancel(time);

    this._tickOffset.add({
      seconds: this.frequency.getDurationOfTicks(ticks, time),
      ticks,
      time
    });

    return this;
  }
  /**
   * Returns the scheduled state at the given time.
   * @param  time  The time to query.
   */


  getStateAtTime(time) {
    time = this.toSeconds(time);
    return this._state.getValueAtTime(time);
  }
  /**
   * Get the time of the given tick. The second argument
   * is when to test before. Since ticks can be set (with setTicksAtTime)
   * there may be multiple times for a given tick value.
   * @param  tick The tick number.
   * @param  before When to measure the tick value from.
   * @return The time of the tick
   */


  getTimeOfTick(tick, before = this.now()) {
    const offset = this._tickOffset.get(before);

    const event = this._state.get(before);

    const startTime = Math.max(offset.time, event.time);
    const absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;
    return this.frequency.getTimeOfTick(absoluteTicks);
  }
  /**
   * Invoke the callback event at all scheduled ticks between the
   * start time and the end time
   * @param  startTime  The beginning of the search range
   * @param  endTime    The end of the search range
   * @param  callback   The callback to invoke with each tick
   */


  forEachTickBetween(startTime, endTime, callback) {
    // only iterate through the sections where it is "started"
    let lastStateEvent = this._state.get(startTime);

    this._state.forEachBetween(startTime, endTime, event => {
      if (lastStateEvent && lastStateEvent.state === "started" && event.state !== "started") {
        this.forEachTickBetween(Math.max(lastStateEvent.time, startTime), event.time - this.sampleTime, callback);
      }

      lastStateEvent = event;
    });

    let error = null;

    if (lastStateEvent && lastStateEvent.state === "started") {
      const maxStartTime = Math.max(lastStateEvent.time, startTime); // figure out the difference between the frequency ticks and the

      const startTicks = this.frequency.getTicksAtTime(maxStartTime);
      const ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);
      const diff = startTicks - ticksAtStart;
      let offset = Math.ceil(diff) - diff; // guard against floating point issues

      offset = (0, _Math.EQ)(offset, 1) ? 0 : offset;
      let nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);

      while (nextTickTime < endTime) {
        try {
          callback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));
        } catch (e) {
          error = e;
          break;
        }

        nextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);
      }
    }

    if (error) {
      throw error;
    }

    return this;
  }
  /**
   * Clean up
   */


  dispose() {
    super.dispose();

    this._state.dispose();

    this._tickOffset.dispose();

    this.frequency.dispose();
    return this;
  }

}

exports.TickSource = TickSource;
},{"../context/ToneWithContext":"node_modules/tone/build/esm/core/context/ToneWithContext.js","../util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../util/StateTimeline":"node_modules/tone/build/esm/core/util/StateTimeline.js","../util/Timeline":"node_modules/tone/build/esm/core/util/Timeline.js","../util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","./TickSignal":"node_modules/tone/build/esm/core/clock/TickSignal.js","../util/Math":"node_modules/tone/build/esm/core/util/Math.js"}],"node_modules/tone/build/esm/core/clock/Clock.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Clock = void 0;

var _ToneWithContext = require("../context/ToneWithContext");

var _Defaults = require("../util/Defaults");

var _Emitter = require("../util/Emitter");

var _Interface = require("../util/Interface");

var _StateTimeline = require("../util/StateTimeline");

var _TickSource = require("./TickSource");

var _Debug = require("../util/Debug");

/**
 * A sample accurate clock which provides a callback at the given rate.
 * While the callback is not sample-accurate (it is still susceptible to
 * loose JS timing), the time passed in as the argument to the callback
 * is precise. For most applications, it is better to use Tone.Transport
 * instead of the Clock by itself since you can synchronize multiple callbacks.
 * @example
 * // the callback will be invoked approximately once a second
 * // and will print the time exactly once a second apart.
 * const clock = new Tone.Clock(time => {
 * 	console.log(time);
 * }, 1);
 * clock.start();
 * @category Core
 */
class Clock extends _ToneWithContext.ToneWithContext {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Clock.getDefaults(), arguments, ["callback", "frequency"]));
    this.name = "Clock";
    /**
     * The callback function to invoke at the scheduled tick.
     */

    this.callback = _Interface.noOp;
    /**
     * The last time the loop callback was invoked
     */

    this._lastUpdate = 0;
    /**
     * Keep track of the playback state
     */

    this._state = new _StateTimeline.StateTimeline("stopped");
    /**
     * Context bound reference to the _loop method
     * This is necessary to remove the event in the end.
     */

    this._boundLoop = this._loop.bind(this);
    const options = (0, _Defaults.optionsFromArguments)(Clock.getDefaults(), arguments, ["callback", "frequency"]);
    this.callback = options.callback;
    this._tickSource = new _TickSource.TickSource({
      context: this.context,
      frequency: options.frequency,
      units: options.units
    });
    this._lastUpdate = 0;
    this.frequency = this._tickSource.frequency;
    (0, _Interface.readOnly)(this, "frequency"); // add an initial state

    this._state.setStateAtTime("stopped", 0); // bind a callback to the worker thread


    this.context.on("tick", this._boundLoop);
  }

  static getDefaults() {
    return Object.assign(_ToneWithContext.ToneWithContext.getDefaults(), {
      callback: _Interface.noOp,
      frequency: 1,
      units: "hertz"
    });
  }
  /**
   * Returns the playback state of the source, either "started", "stopped" or "paused".
   */


  get state() {
    return this._state.getValueAtTime(this.now());
  }
  /**
   * Start the clock at the given time. Optionally pass in an offset
   * of where to start the tick counter from.
   * @param  time    The time the clock should start
   * @param offset  Where the tick counter starts counting from.
   */


  start(time, offset) {
    // make sure the context is running
    (0, _Debug.assertContextRunning)(this.context); // start the loop

    const computedTime = this.toSeconds(time);
    this.log("start", computedTime);

    if (this._state.getValueAtTime(computedTime) !== "started") {
      this._state.setStateAtTime("started", computedTime);

      this._tickSource.start(computedTime, offset);

      if (computedTime < this._lastUpdate) {
        this.emit("start", computedTime, offset);
      }
    }

    return this;
  }
  /**
   * Stop the clock. Stopping the clock resets the tick counter to 0.
   * @param time The time when the clock should stop.
   * @example
   * const clock = new Tone.Clock(time => {
   * 	console.log(time);
   * }, 1);
   * clock.start();
   * // stop the clock after 10 seconds
   * clock.stop("+10");
   */


  stop(time) {
    const computedTime = this.toSeconds(time);
    this.log("stop", computedTime);

    this._state.cancel(computedTime);

    this._state.setStateAtTime("stopped", computedTime);

    this._tickSource.stop(computedTime);

    if (computedTime < this._lastUpdate) {
      this.emit("stop", computedTime);
    }

    return this;
  }
  /**
   * Pause the clock. Pausing does not reset the tick counter.
   * @param time The time when the clock should stop.
   */


  pause(time) {
    const computedTime = this.toSeconds(time);

    if (this._state.getValueAtTime(computedTime) === "started") {
      this._state.setStateAtTime("paused", computedTime);

      this._tickSource.pause(computedTime);

      if (computedTime < this._lastUpdate) {
        this.emit("pause", computedTime);
      }
    }

    return this;
  }
  /**
   * The number of times the callback was invoked. Starts counting at 0
   * and increments after the callback was invoked.
   */


  get ticks() {
    return Math.ceil(this.getTicksAtTime(this.now()));
  }

  set ticks(t) {
    this._tickSource.ticks = t;
  }
  /**
   * The time since ticks=0 that the Clock has been running. Accounts for tempo curves
   */


  get seconds() {
    return this._tickSource.seconds;
  }

  set seconds(s) {
    this._tickSource.seconds = s;
  }
  /**
   * Return the elapsed seconds at the given time.
   * @param  time  When to get the elapsed seconds
   * @return  The number of elapsed seconds
   */


  getSecondsAtTime(time) {
    return this._tickSource.getSecondsAtTime(time);
  }
  /**
   * Set the clock's ticks at the given time.
   * @param  ticks The tick value to set
   * @param  time  When to set the tick value
   */


  setTicksAtTime(ticks, time) {
    this._tickSource.setTicksAtTime(ticks, time);

    return this;
  }
  /**
   * Get the time of the given tick. The second argument
   * is when to test before. Since ticks can be set (with setTicksAtTime)
   * there may be multiple times for a given tick value.
   * @param  tick The tick number.
   * @param  before When to measure the tick value from.
   * @return The time of the tick
   */


  getTimeOfTick(tick, before = this.now()) {
    return this._tickSource.getTimeOfTick(tick, before);
  }
  /**
   * Get the clock's ticks at the given time.
   * @param  time  When to get the tick value
   * @return The tick value at the given time.
   */


  getTicksAtTime(time) {
    return this._tickSource.getTicksAtTime(time);
  }
  /**
   * Get the time of the next tick
   * @param  offset The tick number.
   */


  nextTickTime(offset, when) {
    const computedTime = this.toSeconds(when);
    const currentTick = this.getTicksAtTime(computedTime);
    return this._tickSource.getTimeOfTick(currentTick + offset, computedTime);
  }
  /**
   * The scheduling loop.
   */


  _loop() {
    const startTime = this._lastUpdate;
    const endTime = this.now();
    this._lastUpdate = endTime;
    this.log("loop", startTime, endTime);

    if (startTime !== endTime) {
      // the state change events
      this._state.forEachBetween(startTime, endTime, e => {
        switch (e.state) {
          case "started":
            const offset = this._tickSource.getTicksAtTime(e.time);

            this.emit("start", e.time, offset);
            break;

          case "stopped":
            if (e.time !== 0) {
              this.emit("stop", e.time);
            }

            break;

          case "paused":
            this.emit("pause", e.time);
            break;
        }
      }); // the tick callbacks


      this._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {
        this.callback(time, ticks);
      });
    }
  }
  /**
   * Returns the scheduled state at the given time.
   * @param  time  The time to query.
   * @return  The name of the state input in setStateAtTime.
   * @example
   * const clock = new Tone.Clock();
   * clock.start("+0.1");
   * clock.getStateAtTime("+0.1"); // returns "started"
   */


  getStateAtTime(time) {
    const computedTime = this.toSeconds(time);
    return this._state.getValueAtTime(computedTime);
  }
  /**
   * Clean up
   */


  dispose() {
    super.dispose();
    this.context.off("tick", this._boundLoop);

    this._tickSource.dispose();

    this._state.dispose();

    return this;
  }

}

exports.Clock = Clock;

_Emitter.Emitter.mixin(Clock);
},{"../context/ToneWithContext":"node_modules/tone/build/esm/core/context/ToneWithContext.js","../util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../util/Emitter":"node_modules/tone/build/esm/core/util/Emitter.js","../util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../util/StateTimeline":"node_modules/tone/build/esm/core/util/StateTimeline.js","./TickSource":"node_modules/tone/build/esm/core/clock/TickSource.js","../util/Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/core/context/Delay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Delay = void 0;

var _Param = require("../context/Param");

var _Defaults = require("../util/Defaults");

var _Interface = require("../util/Interface");

var _ToneAudioNode = require("./ToneAudioNode");

/**
 * Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).
 * @category Core
 * @example
 * return Tone.Offline(() => {
 * 	const delay = new Tone.Delay(0.1).toDestination();
 * 	// connect the signal to both the delay and the destination
 * 	const pulse = new Tone.PulseOscillator().connect(delay).toDestination();
 * 	// start and stop the pulse
 * 	pulse.start(0).stop(0.01);
 * }, 0.5, 1);
 */
class Delay extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Delay.getDefaults(), arguments, ["delayTime", "maxDelay"]));
    this.name = "Delay";
    const options = (0, _Defaults.optionsFromArguments)(Delay.getDefaults(), arguments, ["delayTime", "maxDelay"]);
    const maxDelayInSeconds = this.toSeconds(options.maxDelay);
    this._maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));
    this._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);
    this.delayTime = new _Param.Param({
      context: this.context,
      param: this._delayNode.delayTime,
      units: "time",
      value: options.delayTime,
      minValue: 0,
      maxValue: this.maxDelay
    });
    (0, _Interface.readOnly)(this, "delayTime");
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      delayTime: 0,
      maxDelay: 1
    });
  }
  /**
   * The maximum delay time. This cannot be changed after
   * the value is passed into the constructor.
   */


  get maxDelay() {
    return this._maxDelay;
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    this._delayNode.disconnect();

    this.delayTime.dispose();
    return this;
  }

}

exports.Delay = Delay;
},{"../context/Param":"node_modules/tone/build/esm/core/context/Param.js","../util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","./ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js"}],"node_modules/tone/build/esm/core/context/Offline.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Offline = Offline;

var _tslib = require("tslib");

var _Global = require("../Global");

var _OfflineContext = require("./OfflineContext");

var _ToneAudioBuffer = require("./ToneAudioBuffer");

/**
 * Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.
 * The OfflineAudioContext is capable of rendering much faster than real time in many cases.
 * The callback function also passes in an offline instance of [[Context]] which can be used
 * to schedule events along the Transport.
 * @param  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.
 * @param  duration     the amount of time to record for.
 * @return  The promise which is invoked with the ToneAudioBuffer of the recorded output.
 * @example
 * // render 2 seconds of the oscillator
 * Tone.Offline(() => {
 * 	// only nodes created in this callback will be recorded
 * 	const oscillator = new Tone.Oscillator().toDestination().start(0);
 * }, 2).then((buffer) => {
 * 	// do something with the output buffer
 * 	console.log(buffer);
 * });
 * @example
 * // can also schedule events along the Transport
 * // using the passed in Offline Transport
 * Tone.Offline(({ transport }) => {
 * 	const osc = new Tone.Oscillator().toDestination();
 * 	transport.schedule(time => {
 * 		osc.start(time).stop(time + 0.1);
 * 	}, 1);
 * 	// make sure to start the transport
 * 	transport.start(0.2);
 * }, 4).then((buffer) => {
 * 	// do something with the output buffer
 * 	console.log(buffer);
 * });
 * @category Core
 */
function Offline(callback, duration, channels = 2, sampleRate = (0, _Global.getContext)().sampleRate) {
  return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
    // set the OfflineAudioContext based on the current context
    const originalContext = (0, _Global.getContext)();
    const context = new _OfflineContext.OfflineContext(channels, duration, sampleRate);
    (0, _Global.setContext)(context); // invoke the callback/scheduling

    yield callback(context); // then render the audio

    const bufferPromise = context.render(); // return the original AudioContext

    (0, _Global.setContext)(originalContext); // await the rendering

    const buffer = yield bufferPromise; // return the audio

    return new _ToneAudioBuffer.ToneAudioBuffer(buffer);
  });
}
},{"tslib":"node_modules/tslib/tslib.es6.js","../Global":"node_modules/tone/build/esm/core/Global.js","./OfflineContext":"node_modules/tone/build/esm/core/context/OfflineContext.js","./ToneAudioBuffer":"node_modules/tone/build/esm/core/context/ToneAudioBuffer.js"}],"node_modules/tone/build/esm/core/context/ToneAudioBuffers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToneAudioBuffers = void 0;

var _Tone = require("../Tone");

var _Defaults = require("../util/Defaults");

var _Interface = require("../util/Interface");

var _TypeCheck = require("../util/TypeCheck");

var _ToneAudioBuffer = require("./ToneAudioBuffer");

var _Debug = require("../util/Debug");

/**
 * A data structure for holding multiple buffers in a Map-like datastructure.
 *
 * @example
 * const pianoSamples = new Tone.ToneAudioBuffers({
 * 	A1: "https://tonejs.github.io/audio/casio/A1.mp3",
 * 	A2: "https://tonejs.github.io/audio/casio/A2.mp3",
 * }, () => {
 * 	const player = new Tone.Player().toDestination();
 * 	// play one of the samples when they all load
 * 	player.buffer = pianoSamples.get("A2");
 * 	player.start();
 * });
 * @example
 * // To pass in additional parameters in the second parameter
 * const buffers = new Tone.ToneAudioBuffers({
 * 	 urls: {
 * 		 A1: "A1.mp3",
 * 		 A2: "A2.mp3",
 * 	 },
 * 	 onload: () => console.log("loaded"),
 * 	 baseUrl: "https://tonejs.github.io/audio/casio/"
 * });
 * @category Core
 */
class ToneAudioBuffers extends _Tone.Tone {
  constructor() {
    super();
    this.name = "ToneAudioBuffers";
    /**
     * All of the buffers
     */

    this._buffers = new Map();
    /**
     * Keep track of the number of loaded buffers
     */

    this._loadingCount = 0;
    const options = (0, _Defaults.optionsFromArguments)(ToneAudioBuffers.getDefaults(), arguments, ["urls", "onload", "baseUrl"], "urls");
    this.baseUrl = options.baseUrl; // add each one

    Object.keys(options.urls).forEach(name => {
      this._loadingCount++;
      const url = options.urls[name];
      this.add(name, url, this._bufferLoaded.bind(this, options.onload), options.onerror);
    });
  }

  static getDefaults() {
    return {
      baseUrl: "",
      onerror: _Interface.noOp,
      onload: _Interface.noOp,
      urls: {}
    };
  }
  /**
   * True if the buffers object has a buffer by that name.
   * @param  name  The key or index of the buffer.
   */


  has(name) {
    return this._buffers.has(name.toString());
  }
  /**
   * Get a buffer by name. If an array was loaded,
   * then use the array index.
   * @param  name  The key or index of the buffer.
   */


  get(name) {
    (0, _Debug.assert)(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);
    return this._buffers.get(name.toString());
  }
  /**
   * A buffer was loaded. decrement the counter.
   */


  _bufferLoaded(callback) {
    this._loadingCount--;

    if (this._loadingCount === 0 && callback) {
      callback();
    }
  }
  /**
   * If the buffers are loaded or not
   */


  get loaded() {
    return Array.from(this._buffers).every(([_, buffer]) => buffer.loaded);
  }
  /**
   * Add a buffer by name and url to the Buffers
   * @param  name      A unique name to give the buffer
   * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.
   * @param  callback  The callback to invoke when the url is loaded.
   * @param  onerror  Invoked if the buffer can't be loaded
   */


  add(name, url, callback = _Interface.noOp, onerror = _Interface.noOp) {
    if ((0, _TypeCheck.isString)(url)) {
      this._buffers.set(name.toString(), new _ToneAudioBuffer.ToneAudioBuffer(this.baseUrl + url, callback, onerror));
    } else {
      this._buffers.set(name.toString(), new _ToneAudioBuffer.ToneAudioBuffer(url, callback, onerror));
    }

    return this;
  }

  dispose() {
    super.dispose();

    this._buffers.forEach(buffer => buffer.dispose());

    this._buffers.clear();

    return this;
  }

}

exports.ToneAudioBuffers = ToneAudioBuffers;
},{"../Tone":"node_modules/tone/build/esm/core/Tone.js","../util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","./ToneAudioBuffer":"node_modules/tone/build/esm/core/context/ToneAudioBuffer.js","../util/Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/core/type/Midi.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Midi = Midi;
exports.MidiClass = void 0;

var _Global = require("../Global");

var _Conversions = require("./Conversions");

var _Frequency = require("./Frequency");

/**
 * Midi is a primitive type for encoding Time values.
 * Midi can be constructed with or without the `new` keyword. Midi can be passed
 * into the parameter of any method which takes time as an argument.
 * @category Unit
 */
class MidiClass extends _Frequency.FrequencyClass {
  constructor() {
    super(...arguments);
    this.name = "MidiClass";
    this.defaultUnits = "midi";
  }
  /**
   * Returns the value of a frequency in the current units
   */


  _frequencyToUnits(freq) {
    return (0, _Conversions.ftom)(super._frequencyToUnits(freq));
  }
  /**
   * Returns the value of a tick in the current time units
   */


  _ticksToUnits(ticks) {
    return (0, _Conversions.ftom)(super._ticksToUnits(ticks));
  }
  /**
   * Return the value of the beats in the current units
   */


  _beatsToUnits(beats) {
    return (0, _Conversions.ftom)(super._beatsToUnits(beats));
  }
  /**
   * Returns the value of a second in the current units
   */


  _secondsToUnits(seconds) {
    return (0, _Conversions.ftom)(super._secondsToUnits(seconds));
  }
  /**
   * Return the value of the frequency as a MIDI note
   * @example
   * Tone.Midi(60).toMidi(); // 60
   */


  toMidi() {
    return this.valueOf();
  }
  /**
   * Return the value of the frequency as a MIDI note
   * @example
   * Tone.Midi(60).toFrequency(); // 261.6255653005986
   */


  toFrequency() {
    return (0, _Conversions.mtof)(this.toMidi());
  }
  /**
   * Transposes the frequency by the given number of semitones.
   * @return A new transposed MidiClass
   * @example
   * Tone.Midi("A4").transpose(3); // "C5"
   */


  transpose(interval) {
    return new MidiClass(this.context, this.toMidi() + interval);
  }

}
/**
 * Convert a value into a FrequencyClass object.
 * @category Unit
 */


exports.MidiClass = MidiClass;

function Midi(value, units) {
  return new MidiClass((0, _Global.getContext)(), value, units);
}
},{"../Global":"node_modules/tone/build/esm/core/Global.js","./Conversions":"node_modules/tone/build/esm/core/type/Conversions.js","./Frequency":"node_modules/tone/build/esm/core/type/Frequency.js"}],"node_modules/tone/build/esm/core/type/Ticks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Ticks = Ticks;
exports.TicksClass = void 0;

var _Global = require("../Global");

var _TransportTime = require("./TransportTime");

/**
 * Ticks is a primitive type for encoding Time values.
 * Ticks can be constructed with or without the `new` keyword. Ticks can be passed
 * into the parameter of any method which takes time as an argument.
 * @example
 * const t = Tone.Ticks("4n"); // a quarter note as ticks
 * @category Unit
 */
class TicksClass extends _TransportTime.TransportTimeClass {
  constructor() {
    super(...arguments);
    this.name = "Ticks";
    this.defaultUnits = "i";
  }
  /**
   * Get the current time in the given units
   */


  _now() {
    return this.context.transport.ticks;
  }
  /**
   * Return the value of the beats in the current units
   */


  _beatsToUnits(beats) {
    return this._getPPQ() * beats;
  }
  /**
   * Returns the value of a second in the current units
   */


  _secondsToUnits(seconds) {
    return Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());
  }
  /**
   * Returns the value of a tick in the current time units
   */


  _ticksToUnits(ticks) {
    return ticks;
  }
  /**
   * Return the time in ticks
   */


  toTicks() {
    return this.valueOf();
  }
  /**
   * Return the time in seconds
   */


  toSeconds() {
    return this.valueOf() / this._getPPQ() * (60 / this._getBpm());
  }

}
/**
 * Convert a time representation to ticks
 * @category Unit
 */


exports.TicksClass = TicksClass;

function Ticks(value, units) {
  return new TicksClass((0, _Global.getContext)(), value, units);
}
},{"../Global":"node_modules/tone/build/esm/core/Global.js","./TransportTime":"node_modules/tone/build/esm/core/type/TransportTime.js"}],"node_modules/tone/build/esm/core/util/Draw.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Draw = void 0;

var _ToneWithContext = require("../context/ToneWithContext");

var _Timeline = require("./Timeline");

var _ContextInitialization = require("../context/ContextInitialization");

/**
 * Draw is useful for synchronizing visuals and audio events.
 * Callbacks from Tone.Transport or any of the Tone.Event classes
 * always happen _before_ the scheduled time and are not synchronized
 * to the animation frame so they are not good for triggering tightly
 * synchronized visuals and sound. Draw makes it easy to schedule
 * callbacks using the AudioContext time and uses requestAnimationFrame.
 * @example
 * Tone.Transport.schedule((time) => {
 * 	// use the time argument to schedule a callback with Draw
 * 	Tone.Draw.schedule(() => {
 * 		// do drawing or DOM manipulation here
 * 		console.log(time);
 * 	}, time);
 * }, "+0.5");
 * Tone.Transport.start();
 * @category Core
 */
class Draw extends _ToneWithContext.ToneWithContext {
  constructor() {
    super(...arguments);
    this.name = "Draw";
    /**
     * The duration after which events are not invoked.
     */

    this.expiration = 0.25;
    /**
     * The amount of time before the scheduled time
     * that the callback can be invoked. Default is
     * half the time of an animation frame (0.008 seconds).
     */

    this.anticipation = 0.008;
    /**
     * All of the events.
     */

    this._events = new _Timeline.Timeline();
    /**
     * The draw loop
     */

    this._boundDrawLoop = this._drawLoop.bind(this);
    /**
     * The animation frame id
     */

    this._animationFrame = -1;
  }
  /**
   * Schedule a function at the given time to be invoked
   * on the nearest animation frame.
   * @param  callback  Callback is invoked at the given time.
   * @param  time      The time relative to the AudioContext time to invoke the callback.
   * @example
   * Tone.Transport.scheduleRepeat(time => {
   * 	Tone.Draw.schedule(() => console.log(time), time);
   * }, 1);
   * Tone.Transport.start();
   */


  schedule(callback, time) {
    this._events.add({
      callback,
      time: this.toSeconds(time)
    }); // start the draw loop on the first event


    if (this._events.length === 1) {
      this._animationFrame = requestAnimationFrame(this._boundDrawLoop);
    }

    return this;
  }
  /**
   * Cancel events scheduled after the given time
   * @param  after  Time after which scheduled events will be removed from the scheduling timeline.
   */


  cancel(after) {
    this._events.cancel(this.toSeconds(after));

    return this;
  }
  /**
   * The draw loop
   */


  _drawLoop() {
    const now = this.context.currentTime;

    while (this._events.length && this._events.peek().time - this.anticipation <= now) {
      const event = this._events.shift();

      if (event && now - event.time <= this.expiration) {
        event.callback();
      }
    }

    if (this._events.length > 0) {
      this._animationFrame = requestAnimationFrame(this._boundDrawLoop);
    }
  }

  dispose() {
    super.dispose();

    this._events.dispose();

    cancelAnimationFrame(this._animationFrame);
    return this;
  }

} //-------------------------------------
// 	INITIALIZATION
//-------------------------------------


exports.Draw = Draw;
(0, _ContextInitialization.onContextInit)(context => {
  context.draw = new Draw({
    context
  });
});
(0, _ContextInitialization.onContextClose)(context => {
  context.draw.dispose();
});
},{"../context/ToneWithContext":"node_modules/tone/build/esm/core/context/ToneWithContext.js","./Timeline":"node_modules/tone/build/esm/core/util/Timeline.js","../context/ContextInitialization":"node_modules/tone/build/esm/core/context/ContextInitialization.js"}],"node_modules/tone/build/esm/core/util/IntervalTimeline.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IntervalTimeline = void 0;

var _Tone = require("../Tone");

var _TypeCheck = require("./TypeCheck");

var _Debug = require("./Debug");

/**
 * Similar to Tone.Timeline, but all events represent
 * intervals with both "time" and "duration" times. The
 * events are placed in a tree structure optimized
 * for querying an intersection point with the timeline
 * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)
 * to represent the data.
 */
class IntervalTimeline extends _Tone.Tone {
  constructor() {
    super(...arguments);
    this.name = "IntervalTimeline";
    /**
     * The root node of the inteval tree
     */

    this._root = null;
    /**
     * Keep track of the length of the timeline.
     */

    this._length = 0;
  }
  /**
   * The event to add to the timeline. All events must
   * have a time and duration value
   * @param  event  The event to add to the timeline
   */


  add(event) {
    (0, _Debug.assert)((0, _TypeCheck.isDefined)(event.time), "Events must have a time property");
    (0, _Debug.assert)((0, _TypeCheck.isDefined)(event.duration), "Events must have a duration parameter");
    event.time = event.time.valueOf();
    let node = new IntervalNode(event.time, event.time + event.duration, event);

    if (this._root === null) {
      this._root = node;
    } else {
      this._root.insert(node);
    }

    this._length++; // Restructure tree to be balanced

    while (node !== null) {
      node.updateHeight();
      node.updateMax();

      this._rebalance(node);

      node = node.parent;
    }

    return this;
  }
  /**
   * Remove an event from the timeline.
   * @param  event  The event to remove from the timeline
   */


  remove(event) {
    if (this._root !== null) {
      const results = [];

      this._root.search(event.time, results);

      for (const node of results) {
        if (node.event === event) {
          this._removeNode(node);

          this._length--;
          break;
        }
      }
    }

    return this;
  }
  /**
   * The number of items in the timeline.
   * @readOnly
   */


  get length() {
    return this._length;
  }
  /**
   * Remove events whose time time is after the given time
   * @param  after  The time to query.
   */


  cancel(after) {
    this.forEachFrom(after, event => this.remove(event));
    return this;
  }
  /**
   * Set the root node as the given node
   */


  _setRoot(node) {
    this._root = node;

    if (this._root !== null) {
      this._root.parent = null;
    }
  }
  /**
   * Replace the references to the node in the node's parent
   * with the replacement node.
   */


  _replaceNodeInParent(node, replacement) {
    if (node.parent !== null) {
      if (node.isLeftChild()) {
        node.parent.left = replacement;
      } else {
        node.parent.right = replacement;
      }

      this._rebalance(node.parent);
    } else {
      this._setRoot(replacement);
    }
  }
  /**
   * Remove the node from the tree and replace it with
   * a successor which follows the schema.
   */


  _removeNode(node) {
    if (node.left === null && node.right === null) {
      this._replaceNodeInParent(node, null);
    } else if (node.right === null) {
      this._replaceNodeInParent(node, node.left);
    } else if (node.left === null) {
      this._replaceNodeInParent(node, node.right);
    } else {
      const balance = node.getBalance();
      let replacement;
      let temp = null;

      if (balance > 0) {
        if (node.left.right === null) {
          replacement = node.left;
          replacement.right = node.right;
          temp = replacement;
        } else {
          replacement = node.left.right;

          while (replacement.right !== null) {
            replacement = replacement.right;
          }

          if (replacement.parent) {
            replacement.parent.right = replacement.left;
            temp = replacement.parent;
            replacement.left = node.left;
            replacement.right = node.right;
          }
        }
      } else if (node.right.left === null) {
        replacement = node.right;
        replacement.left = node.left;
        temp = replacement;
      } else {
        replacement = node.right.left;

        while (replacement.left !== null) {
          replacement = replacement.left;
        }

        if (replacement.parent) {
          replacement.parent.left = replacement.right;
          temp = replacement.parent;
          replacement.left = node.left;
          replacement.right = node.right;
        }
      }

      if (node.parent !== null) {
        if (node.isLeftChild()) {
          node.parent.left = replacement;
        } else {
          node.parent.right = replacement;
        }
      } else {
        this._setRoot(replacement);
      }

      if (temp) {
        this._rebalance(temp);
      }
    }

    node.dispose();
  }
  /**
   * Rotate the tree to the left
   */


  _rotateLeft(node) {
    const parent = node.parent;
    const isLeftChild = node.isLeftChild(); // Make node.right the new root of this sub tree (instead of node)

    const pivotNode = node.right;

    if (pivotNode) {
      node.right = pivotNode.left;
      pivotNode.left = node;
    }

    if (parent !== null) {
      if (isLeftChild) {
        parent.left = pivotNode;
      } else {
        parent.right = pivotNode;
      }
    } else {
      this._setRoot(pivotNode);
    }
  }
  /**
   * Rotate the tree to the right
   */


  _rotateRight(node) {
    const parent = node.parent;
    const isLeftChild = node.isLeftChild(); // Make node.left the new root of this sub tree (instead of node)

    const pivotNode = node.left;

    if (pivotNode) {
      node.left = pivotNode.right;
      pivotNode.right = node;
    }

    if (parent !== null) {
      if (isLeftChild) {
        parent.left = pivotNode;
      } else {
        parent.right = pivotNode;
      }
    } else {
      this._setRoot(pivotNode);
    }
  }
  /**
   * Balance the BST
   */


  _rebalance(node) {
    const balance = node.getBalance();

    if (balance > 1 && node.left) {
      if (node.left.getBalance() < 0) {
        this._rotateLeft(node.left);
      } else {
        this._rotateRight(node);
      }
    } else if (balance < -1 && node.right) {
      if (node.right.getBalance() > 0) {
        this._rotateRight(node.right);
      } else {
        this._rotateLeft(node);
      }
    }
  }
  /**
   * Get an event whose time and duration span the give time. Will
   * return the match whose "time" value is closest to the given time.
   * @return  The event which spans the desired time
   */


  get(time) {
    if (this._root !== null) {
      const results = [];

      this._root.search(time, results);

      if (results.length > 0) {
        let max = results[0];

        for (let i = 1; i < results.length; i++) {
          if (results[i].low > max.low) {
            max = results[i];
          }
        }

        return max.event;
      }
    }

    return null;
  }
  /**
   * Iterate over everything in the timeline.
   * @param  callback The callback to invoke with every item
   */


  forEach(callback) {
    if (this._root !== null) {
      const allNodes = [];

      this._root.traverse(node => allNodes.push(node));

      allNodes.forEach(node => {
        if (node.event) {
          callback(node.event);
        }
      });
    }

    return this;
  }
  /**
   * Iterate over everything in the array in which the given time
   * overlaps with the time and duration time of the event.
   * @param  time The time to check if items are overlapping
   * @param  callback The callback to invoke with every item
   */


  forEachAtTime(time, callback) {
    if (this._root !== null) {
      const results = [];

      this._root.search(time, results);

      results.forEach(node => {
        if (node.event) {
          callback(node.event);
        }
      });
    }

    return this;
  }
  /**
   * Iterate over everything in the array in which the time is greater
   * than or equal to the given time.
   * @param  time The time to check if items are before
   * @param  callback The callback to invoke with every item
   */


  forEachFrom(time, callback) {
    if (this._root !== null) {
      const results = [];

      this._root.searchAfter(time, results);

      results.forEach(node => {
        if (node.event) {
          callback(node.event);
        }
      });
    }

    return this;
  }
  /**
   * Clean up
   */


  dispose() {
    super.dispose();

    if (this._root !== null) {
      this._root.traverse(node => node.dispose());
    }

    this._root = null;
    return this;
  }

} //-------------------------------------
// 	INTERVAL NODE HELPER
//-------------------------------------

/**
 * Represents a node in the binary search tree, with the addition
 * of a "high" value which keeps track of the highest value of
 * its children.
 * References:
 * https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/
 * http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf
 * @param low
 * @param high
 */


exports.IntervalTimeline = IntervalTimeline;

class IntervalNode {
  constructor(low, high, event) {
    // the nodes to the left
    this._left = null; // the nodes to the right

    this._right = null; // the parent node

    this.parent = null; // the number of child nodes

    this.height = 0;
    this.event = event; // the low value

    this.low = low; // the high value

    this.high = high; // the high value for this and all child nodes

    this.max = this.high;
  }
  /**
   * Insert a node into the correct spot in the tree
   */


  insert(node) {
    if (node.low <= this.low) {
      if (this.left === null) {
        this.left = node;
      } else {
        this.left.insert(node);
      }
    } else if (this.right === null) {
      this.right = node;
    } else {
      this.right.insert(node);
    }
  }
  /**
   * Search the tree for nodes which overlap
   * with the given point
   * @param  point  The point to query
   * @param  results  The array to put the results
   */


  search(point, results) {
    // If p is to the right of the rightmost point of any interval
    // in this node and all children, there won't be any matches.
    if (point > this.max) {
      return;
    } // Search left children


    if (this.left !== null) {
      this.left.search(point, results);
    } // Check this node


    if (this.low <= point && this.high > point) {
      results.push(this);
    } // If p is to the left of the time of this interval,
    // then it can't be in any child to the right.


    if (this.low > point) {
      return;
    } // Search right children


    if (this.right !== null) {
      this.right.search(point, results);
    }
  }
  /**
   * Search the tree for nodes which are less
   * than the given point
   * @param  point  The point to query
   * @param  results  The array to put the results
   */


  searchAfter(point, results) {
    // Check this node
    if (this.low >= point) {
      results.push(this);

      if (this.left !== null) {
        this.left.searchAfter(point, results);
      }
    } // search the right side


    if (this.right !== null) {
      this.right.searchAfter(point, results);
    }
  }
  /**
   * Invoke the callback on this element and both it's branches
   * @param  {Function}  callback
   */


  traverse(callback) {
    callback(this);

    if (this.left !== null) {
      this.left.traverse(callback);
    }

    if (this.right !== null) {
      this.right.traverse(callback);
    }
  }
  /**
   * Update the height of the node
   */


  updateHeight() {
    if (this.left !== null && this.right !== null) {
      this.height = Math.max(this.left.height, this.right.height) + 1;
    } else if (this.right !== null) {
      this.height = this.right.height + 1;
    } else if (this.left !== null) {
      this.height = this.left.height + 1;
    } else {
      this.height = 0;
    }
  }
  /**
   * Update the height of the node
   */


  updateMax() {
    this.max = this.high;

    if (this.left !== null) {
      this.max = Math.max(this.max, this.left.max);
    }

    if (this.right !== null) {
      this.max = Math.max(this.max, this.right.max);
    }
  }
  /**
   * The balance is how the leafs are distributed on the node
   * @return  Negative numbers are balanced to the right
   */


  getBalance() {
    let balance = 0;

    if (this.left !== null && this.right !== null) {
      balance = this.left.height - this.right.height;
    } else if (this.left !== null) {
      balance = this.left.height + 1;
    } else if (this.right !== null) {
      balance = -(this.right.height + 1);
    }

    return balance;
  }
  /**
   * @returns true if this node is the left child of its parent
   */


  isLeftChild() {
    return this.parent !== null && this.parent.left === this;
  }
  /**
   * get/set the left node
   */


  get left() {
    return this._left;
  }

  set left(node) {
    this._left = node;

    if (node !== null) {
      node.parent = this;
    }

    this.updateHeight();
    this.updateMax();
  }
  /**
   * get/set the right node
   */


  get right() {
    return this._right;
  }

  set right(node) {
    this._right = node;

    if (node !== null) {
      node.parent = this;
    }

    this.updateHeight();
    this.updateMax();
  }
  /**
   * null out references.
   */


  dispose() {
    this.parent = null;
    this._left = null;
    this._right = null;
    this.event = null;
  }

}
},{"../Tone":"node_modules/tone/build/esm/core/Tone.js","./TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","./Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/core/type/NoteUnits.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/tone/build/esm/core/type/Units.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _NoteUnits = require("./NoteUnits");

Object.keys(_NoteUnits).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _NoteUnits[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _NoteUnits[key];
    }
  });
});
},{"./NoteUnits":"node_modules/tone/build/esm/core/type/NoteUnits.js"}],"node_modules/tone/build/esm/core/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  dbToGain: true,
  gainToDb: true,
  intervalToFrequencyRatio: true,
  ftom: true,
  mtof: true,
  optionsFromArguments: true,
  defaultArg: true,
  Unit: true,
  debug: true
};
Object.defineProperty(exports, "dbToGain", {
  enumerable: true,
  get: function () {
    return _Conversions.dbToGain;
  }
});
Object.defineProperty(exports, "gainToDb", {
  enumerable: true,
  get: function () {
    return _Conversions.gainToDb;
  }
});
Object.defineProperty(exports, "intervalToFrequencyRatio", {
  enumerable: true,
  get: function () {
    return _Conversions.intervalToFrequencyRatio;
  }
});
Object.defineProperty(exports, "ftom", {
  enumerable: true,
  get: function () {
    return _Conversions.ftom;
  }
});
Object.defineProperty(exports, "mtof", {
  enumerable: true,
  get: function () {
    return _Conversions.mtof;
  }
});
Object.defineProperty(exports, "optionsFromArguments", {
  enumerable: true,
  get: function () {
    return _Defaults.optionsFromArguments;
  }
});
Object.defineProperty(exports, "defaultArg", {
  enumerable: true,
  get: function () {
    return _Defaults.defaultArg;
  }
});
exports.debug = exports.Unit = void 0;

var _Clock = require("./clock/Clock");

Object.keys(_Clock).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Clock[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Clock[key];
    }
  });
});

var _Context = require("./context/Context");

Object.keys(_Context).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Context[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Context[key];
    }
  });
});

var _BaseContext = require("./context/BaseContext");

Object.keys(_BaseContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _BaseContext[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BaseContext[key];
    }
  });
});

var _Delay = require("./context/Delay");

Object.keys(_Delay).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Delay[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Delay[key];
    }
  });
});

var _Gain = require("./context/Gain");

Object.keys(_Gain).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Gain[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Gain[key];
    }
  });
});

var _Offline = require("./context/Offline");

Object.keys(_Offline).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Offline[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Offline[key];
    }
  });
});

var _OfflineContext = require("./context/OfflineContext");

Object.keys(_OfflineContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _OfflineContext[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _OfflineContext[key];
    }
  });
});

var _Param = require("./context/Param");

Object.keys(_Param).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Param[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Param[key];
    }
  });
});

var _ToneAudioBuffer = require("./context/ToneAudioBuffer");

Object.keys(_ToneAudioBuffer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _ToneAudioBuffer[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ToneAudioBuffer[key];
    }
  });
});

var _ToneAudioBuffers = require("./context/ToneAudioBuffers");

Object.keys(_ToneAudioBuffers).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _ToneAudioBuffers[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ToneAudioBuffers[key];
    }
  });
});

var _ToneAudioNode = require("./context/ToneAudioNode");

Object.keys(_ToneAudioNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _ToneAudioNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ToneAudioNode[key];
    }
  });
});

var _Frequency = require("./type/Frequency");

Object.keys(_Frequency).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Frequency[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Frequency[key];
    }
  });
});

var _Midi = require("./type/Midi");

Object.keys(_Midi).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Midi[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Midi[key];
    }
  });
});

var _Time = require("./type/Time");

Object.keys(_Time).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Time[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Time[key];
    }
  });
});

var _Ticks = require("./type/Ticks");

Object.keys(_Ticks).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Ticks[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Ticks[key];
    }
  });
});

var _TransportTime = require("./type/TransportTime");

Object.keys(_TransportTime).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _TransportTime[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _TransportTime[key];
    }
  });
});

require("./util/Draw");

var _Emitter = require("./util/Emitter");

Object.keys(_Emitter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Emitter[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Emitter[key];
    }
  });
});

var _IntervalTimeline = require("./util/IntervalTimeline");

Object.keys(_IntervalTimeline).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _IntervalTimeline[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _IntervalTimeline[key];
    }
  });
});

var _StateTimeline = require("./util/StateTimeline");

Object.keys(_StateTimeline).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _StateTimeline[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _StateTimeline[key];
    }
  });
});

var _Timeline = require("./util/Timeline");

Object.keys(_Timeline).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Timeline[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Timeline[key];
    }
  });
});

var _TypeCheck = require("./util/TypeCheck");

Object.keys(_TypeCheck).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _TypeCheck[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _TypeCheck[key];
    }
  });
});

var _Conversions = require("./type/Conversions");

var _Defaults = require("./util/Defaults");

var Unit = _interopRequireWildcard(require("./type/Units"));

exports.Unit = Unit;

var debug = _interopRequireWildcard(require("./util/Debug"));

exports.debug = debug;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./clock/Clock":"node_modules/tone/build/esm/core/clock/Clock.js","./context/Context":"node_modules/tone/build/esm/core/context/Context.js","./context/BaseContext":"node_modules/tone/build/esm/core/context/BaseContext.js","./context/Delay":"node_modules/tone/build/esm/core/context/Delay.js","./context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","./context/Offline":"node_modules/tone/build/esm/core/context/Offline.js","./context/OfflineContext":"node_modules/tone/build/esm/core/context/OfflineContext.js","./context/Param":"node_modules/tone/build/esm/core/context/Param.js","./context/ToneAudioBuffer":"node_modules/tone/build/esm/core/context/ToneAudioBuffer.js","./context/ToneAudioBuffers":"node_modules/tone/build/esm/core/context/ToneAudioBuffers.js","./context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","./type/Frequency":"node_modules/tone/build/esm/core/type/Frequency.js","./type/Midi":"node_modules/tone/build/esm/core/type/Midi.js","./type/Time":"node_modules/tone/build/esm/core/type/Time.js","./type/Ticks":"node_modules/tone/build/esm/core/type/Ticks.js","./type/TransportTime":"node_modules/tone/build/esm/core/type/TransportTime.js","./util/Draw":"node_modules/tone/build/esm/core/util/Draw.js","./util/Emitter":"node_modules/tone/build/esm/core/util/Emitter.js","./util/IntervalTimeline":"node_modules/tone/build/esm/core/util/IntervalTimeline.js","./util/StateTimeline":"node_modules/tone/build/esm/core/util/StateTimeline.js","./util/Timeline":"node_modules/tone/build/esm/core/util/Timeline.js","./util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","./type/Conversions":"node_modules/tone/build/esm/core/type/Conversions.js","./util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./type/Units":"node_modules/tone/build/esm/core/type/Units.js","./util/Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/component/channel/Volume.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Volume = void 0;

var _Gain = require("../../core/context/Gain");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

/**
 * Volume is a simple volume node, useful for creating a volume fader.
 *
 * @example
 * const vol = new Tone.Volume(-12).toDestination();
 * const osc = new Tone.Oscillator().connect(vol).start();
 * @category Component
 */
class Volume extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Volume.getDefaults(), arguments, ["volume"]));
    this.name = "Volume";
    const options = (0, _Defaults.optionsFromArguments)(Volume.getDefaults(), arguments, ["volume"]);
    this.input = this.output = new _Gain.Gain({
      context: this.context,
      gain: options.volume,
      units: "decibels"
    });
    this.volume = this.output.gain;
    (0, _Interface.readOnly)(this, "volume");
    this._unmutedVolume = options.volume; // set the mute initially

    this.mute = options.mute;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      mute: false,
      volume: 0
    });
  }
  /**
   * Mute the output.
   * @example
   * const vol = new Tone.Volume(-12).toDestination();
   * const osc = new Tone.Oscillator().connect(vol).start();
   * // mute the output
   * vol.mute = true;
   */


  get mute() {
    return this.volume.value === -Infinity;
  }

  set mute(mute) {
    if (!this.mute && mute) {
      this._unmutedVolume = this.volume.value; // maybe it should ramp here?

      this.volume.value = -Infinity;
    } else if (this.mute && !mute) {
      this.volume.value = this._unmutedVolume;
    }
  }
  /**
   * clean up
   */


  dispose() {
    super.dispose();
    this.input.dispose();
    this.volume.dispose();
    return this;
  }

}

exports.Volume = Volume;
},{"../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/core/context/Destination.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Destination = void 0;

var _Volume = require("../../component/channel/Volume");

var _Defaults = require("../util/Defaults");

var _ContextInitialization = require("./ContextInitialization");

var _Gain = require("./Gain");

var _ToneAudioNode = require("./ToneAudioNode");

/**
 * A single master output which is connected to the
 * AudioDestinationNode (aka your speakers).
 * It provides useful conveniences such as the ability
 * to set the volume and mute the entire application.
 * It also gives you the ability to apply master effects to your application.
 *
 * @example
 * const oscillator = new Tone.Oscillator().start();
 * // the audio will go from the oscillator to the speakers
 * oscillator.connect(Tone.getDestination());
 * // a convenience for connecting to the master output is also provided:
 * oscillator.toDestination();
 * @category Core
 */
class Destination extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Destination.getDefaults(), arguments));
    this.name = "Destination";
    this.input = new _Volume.Volume({
      context: this.context
    });
    this.output = new _Gain.Gain({
      context: this.context
    });
    /**
     * The volume of the master output in decibels. -Infinity is silent, and 0 is no change.
     * @example
     * const osc = new Tone.Oscillator().toDestination();
     * osc.start();
     * // ramp the volume down to silent over 10 seconds
     * Tone.getDestination().volume.rampTo(-Infinity, 10);
     */

    this.volume = this.input.volume;
    const options = (0, _Defaults.optionsFromArguments)(Destination.getDefaults(), arguments);
    (0, _ToneAudioNode.connectSeries)(this.input, this.output, this.context.rawContext.destination);
    this.mute = options.mute;
    this._internalChannels = [this.input, this.context.rawContext.destination, this.output];
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      mute: false,
      volume: 0
    });
  }
  /**
   * Mute the output.
   * @example
   * const oscillator = new Tone.Oscillator().start().toDestination();
   * setTimeout(() => {
   * 	// mute the output
   * 	Tone.Destination.mute = true;
   * }, 1000);
   */


  get mute() {
    return this.input.mute;
  }

  set mute(mute) {
    this.input.mute = mute;
  }
  /**
   * Add a master effects chain. NOTE: this will disconnect any nodes which were previously
   * chained in the master effects chain.
   * @param args All arguments will be connected in a row and the Master will be routed through it.
   * @example
   * // route all audio through a filter and compressor
   * const lowpass = new Tone.Filter(800, "lowpass");
   * const compressor = new Tone.Compressor(-18);
   * Tone.Destination.chain(lowpass, compressor);
   */


  chain(...args) {
    this.input.disconnect();
    args.unshift(this.input);
    args.push(this.output);
    (0, _ToneAudioNode.connectSeries)(...args);
    return this;
  }
  /**
   * The maximum number of channels the system can output
   * @example
   * console.log(Tone.Destination.maxChannelCount);
   */


  get maxChannelCount() {
    return this.context.rawContext.destination.maxChannelCount;
  }
  /**
   * Clean up
   */


  dispose() {
    super.dispose();
    this.volume.dispose();
    return this;
  }

} //-------------------------------------
// 	INITIALIZATION
//-------------------------------------


exports.Destination = Destination;
(0, _ContextInitialization.onContextInit)(context => {
  context.destination = new Destination({
    context
  });
});
(0, _ContextInitialization.onContextClose)(context => {
  context.destination.dispose();
});
},{"../../component/channel/Volume":"node_modules/tone/build/esm/component/channel/Volume.js","../util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./ContextInitialization":"node_modules/tone/build/esm/core/context/ContextInitialization.js","./Gain":"node_modules/tone/build/esm/core/context/Gain.js","./ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js"}],"node_modules/tone/build/esm/core/util/TimelineValue.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimelineValue = void 0;

var _Timeline = require("./Timeline");

var _Tone = require("../Tone");

/**
 * Represents a single value which is gettable and settable in a timed way
 */
class TimelineValue extends _Tone.Tone {
  /**
   * @param initialValue The value to return if there is no scheduled values
   */
  constructor(initialValue) {
    super();
    this.name = "TimelineValue";
    /**
     * The timeline which stores the values
     */

    this._timeline = new _Timeline.Timeline({
      memory: 10
    });
    this._initialValue = initialValue;
  }
  /**
   * Set the value at the given time
   */


  set(value, time) {
    this._timeline.add({
      value,
      time
    });

    return this;
  }
  /**
   * Get the value at the given time
   */


  get(time) {
    const event = this._timeline.get(time);

    if (event) {
      return event.value;
    } else {
      return this._initialValue;
    }
  }

}

exports.TimelineValue = TimelineValue;
},{"./Timeline":"node_modules/tone/build/esm/core/util/Timeline.js","../Tone":"node_modules/tone/build/esm/core/Tone.js"}],"node_modules/tone/build/esm/core/clock/TransportEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransportEvent = void 0;

var _Interface = require("../util/Interface");

/**
 * TransportEvent is an internal class used by [[Transport]]
 * to schedule events. Do no invoke this class directly, it is
 * handled from within Tone.Transport.
 */
class TransportEvent {
  /**
   * @param transport The transport object which the event belongs to
   */
  constructor(transport, opts) {
    /**
     * The unique id of the event
     */
    this.id = TransportEvent._eventId++;
    const options = Object.assign(TransportEvent.getDefaults(), opts);
    this.transport = transport;
    this.callback = options.callback;
    this._once = options.once;
    this.time = options.time;
  }

  static getDefaults() {
    return {
      callback: _Interface.noOp,
      once: false,
      time: 0
    };
  }
  /**
   * Invoke the event callback.
   * @param  time  The AudioContext time in seconds of the event
   */


  invoke(time) {
    if (this.callback) {
      this.callback(time);

      if (this._once) {
        this.transport.clear(this.id);
      }
    }
  }
  /**
   * Clean up
   */


  dispose() {
    this.callback = undefined;
    return this;
  }

}
/**
 * Current ID counter
 */


exports.TransportEvent = TransportEvent;
TransportEvent._eventId = 0;
},{"../util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/core/clock/TransportRepeatEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransportRepeatEvent = void 0;

var _Ticks = require("../type/Ticks");

var _TransportEvent = require("./TransportEvent");

/**
 * TransportRepeatEvent is an internal class used by Tone.Transport
 * to schedule repeat events. This class should not be instantiated directly.
 */
class TransportRepeatEvent extends _TransportEvent.TransportEvent {
  /**
   * @param transport The transport object which the event belongs to
   */
  constructor(transport, opts) {
    super(transport, opts);
    /**
     * The ID of the current timeline event
     */

    this._currentId = -1;
    /**
     * The ID of the next timeline event
     */

    this._nextId = -1;
    /**
     * The time of the next event
     */

    this._nextTick = this.time;
    /**
     * a reference to the bound start method
     */

    this._boundRestart = this._restart.bind(this);
    const options = Object.assign(TransportRepeatEvent.getDefaults(), opts);
    this.duration = new _Ticks.TicksClass(transport.context, options.duration).valueOf();
    this._interval = new _Ticks.TicksClass(transport.context, options.interval).valueOf();
    this._nextTick = options.time;
    this.transport.on("start", this._boundRestart);
    this.transport.on("loopStart", this._boundRestart);
    this.context = this.transport.context;

    this._restart();
  }

  static getDefaults() {
    return Object.assign({}, _TransportEvent.TransportEvent.getDefaults(), {
      duration: Infinity,
      interval: 1,
      once: false
    });
  }
  /**
   * Invoke the callback. Returns the tick time which
   * the next event should be scheduled at.
   * @param  time  The AudioContext time in seconds of the event
   */


  invoke(time) {
    // create more events if necessary
    this._createEvents(time); // call the super class


    super.invoke(time);
  }
  /**
   * Push more events onto the timeline to keep up with the position of the timeline
   */


  _createEvents(time) {
    // schedule the next event
    const ticks = this.transport.getTicksAtTime(time);

    if (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {
      this._nextTick += this._interval;
      this._currentId = this._nextId;
      this._nextId = this.transport.scheduleOnce(this.invoke.bind(this), new _Ticks.TicksClass(this.context, this._nextTick).toSeconds());
    }
  }
  /**
   * Push more events onto the timeline to keep up with the position of the timeline
   */


  _restart(time) {
    this.transport.clear(this._currentId);
    this.transport.clear(this._nextId);
    this._nextTick = this.time;
    const ticks = this.transport.getTicksAtTime(time);

    if (ticks > this.time) {
      this._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;
    }

    this._currentId = this.transport.scheduleOnce(this.invoke.bind(this), new _Ticks.TicksClass(this.context, this._nextTick).toSeconds());
    this._nextTick += this._interval;
    this._nextId = this.transport.scheduleOnce(this.invoke.bind(this), new _Ticks.TicksClass(this.context, this._nextTick).toSeconds());
  }
  /**
   * Clean up
   */


  dispose() {
    super.dispose();
    this.transport.clear(this._currentId);
    this.transport.clear(this._nextId);
    this.transport.off("start", this._boundRestart);
    this.transport.off("loopStart", this._boundRestart);
    return this;
  }

}

exports.TransportRepeatEvent = TransportRepeatEvent;
},{"../type/Ticks":"node_modules/tone/build/esm/core/type/Ticks.js","./TransportEvent":"node_modules/tone/build/esm/core/clock/TransportEvent.js"}],"node_modules/tone/build/esm/core/clock/Transport.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transport = void 0;

var _Time = require("../../core/type/Time");

var _TimelineValue = require("../../core/util/TimelineValue");

var _ContextInitialization = require("../context/ContextInitialization");

var _Gain = require("../context/Gain");

var _ToneWithContext = require("../context/ToneWithContext");

var _Ticks = require("../type/Ticks");

var _TransportTime = require("../type/TransportTime");

var _Defaults = require("../util/Defaults");

var _Emitter = require("../util/Emitter");

var _Interface = require("../util/Interface");

var _IntervalTimeline = require("../util/IntervalTimeline");

var _Timeline = require("../util/Timeline");

var _TypeCheck = require("../util/TypeCheck");

var _Clock = require("./Clock");

var _TransportEvent = require("./TransportEvent");

var _TransportRepeatEvent = require("./TransportRepeatEvent");

/**
 * Transport for timing musical events.
 * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)
 * Transport timing events pass in the exact time of the scheduled event
 * in the argument of the callback function. Pass that time value to the object
 * you're scheduling. <br><br>
 * A single transport is created for you when the library is initialized.
 * <br><br>
 * The transport emits the events: "start", "stop", "pause", and "loop" which are
 * called with the time of that event as the argument.
 *
 * @example
 * const osc = new Tone.Oscillator().toDestination();
 * // repeated event every 8th note
 * Tone.Transport.scheduleRepeat((time) => {
 * 	// use the callback time to schedule events
 * 	osc.start(time).stop(time + 0.1);
 * }, "8n");
 * // transport must be started before it starts invoking events
 * Tone.Transport.start();
 * @category Core
 */
class Transport extends _ToneWithContext.ToneWithContext {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Transport.getDefaults(), arguments));
    this.name = "Transport"; //-------------------------------------
    // 	LOOPING
    //-------------------------------------

    /**
     * If the transport loops or not.
     */

    this._loop = new _TimelineValue.TimelineValue(false);
    /**
     * The loop start position in ticks
     */

    this._loopStart = 0;
    /**
     * The loop end position in ticks
     */

    this._loopEnd = 0; //-------------------------------------
    // 	TIMELINE EVENTS
    //-------------------------------------

    /**
     * All the events in an object to keep track by ID
     */

    this._scheduledEvents = {};
    /**
     * The scheduled events.
     */

    this._timeline = new _Timeline.Timeline();
    /**
     * Repeated events
     */

    this._repeatedEvents = new _IntervalTimeline.IntervalTimeline();
    /**
     * All of the synced Signals
     */

    this._syncedSignals = [];
    /**
     * The swing amount
     */

    this._swingAmount = 0;
    const options = (0, _Defaults.optionsFromArguments)(Transport.getDefaults(), arguments); // CLOCK/TEMPO

    this._ppq = options.ppq;
    this._clock = new _Clock.Clock({
      callback: this._processTick.bind(this),
      context: this.context,
      frequency: 0,
      units: "bpm"
    });

    this._bindClockEvents();

    this.bpm = this._clock.frequency;
    this._clock.frequency.multiplier = options.ppq;
    this.bpm.setValueAtTime(options.bpm, 0);
    (0, _Interface.readOnly)(this, "bpm");
    this._timeSignature = options.timeSignature; // SWING

    this._swingTicks = options.ppq / 2; // 8n
  }

  static getDefaults() {
    return Object.assign(_ToneWithContext.ToneWithContext.getDefaults(), {
      bpm: 120,
      loopEnd: "4m",
      loopStart: 0,
      ppq: 192,
      swing: 0,
      swingSubdivision: "8n",
      timeSignature: 4
    });
  } //-------------------------------------
  // 	TICKS
  //-------------------------------------

  /**
   * called on every tick
   * @param  tickTime clock relative tick time
   */


  _processTick(tickTime, ticks) {
    // do the loop test
    if (this._loop.get(tickTime)) {
      if (ticks >= this._loopEnd) {
        this.emit("loopEnd", tickTime);

        this._clock.setTicksAtTime(this._loopStart, tickTime);

        ticks = this._loopStart;
        this.emit("loopStart", tickTime, this._clock.getSecondsAtTime(tickTime));
        this.emit("loop", tickTime);
      }
    } // handle swing


    if (this._swingAmount > 0 && ticks % this._ppq !== 0 && // not on a downbeat
    ticks % (this._swingTicks * 2) !== 0) {
      // add some swing
      const progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);

      const amount = Math.sin(progress * Math.PI) * this._swingAmount;

      tickTime += new _Ticks.TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;
    } // invoke the timeline events scheduled on this tick


    this._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));
  } //-------------------------------------
  // 	SCHEDULABLE EVENTS
  //-------------------------------------

  /**
   * Schedule an event along the timeline.
   * @param callback The callback to be invoked at the time.
   * @param time The time to invoke the callback at.
   * @return The id of the event which can be used for canceling the event.
   * @example
   * // schedule an event on the 16th measure
   * Tone.Transport.schedule((time) => {
   * 	// invoked on measure 16
   * 	console.log("measure 16!");
   * }, "16:0:0");
   */


  schedule(callback, time) {
    const event = new _TransportEvent.TransportEvent(this, {
      callback,
      time: new _TransportTime.TransportTimeClass(this.context, time).toTicks()
    });
    return this._addEvent(event, this._timeline);
  }
  /**
   * Schedule a repeated event along the timeline. The event will fire
   * at the `interval` starting at the `startTime` and for the specified
   * `duration`.
   * @param  callback   The callback to invoke.
   * @param  interval   The duration between successive callbacks. Must be a positive number.
   * @param  startTime  When along the timeline the events should start being invoked.
   * @param  duration How long the event should repeat.
   * @return  The ID of the scheduled event. Use this to cancel the event.
   * @example
   * const osc = new Tone.Oscillator().toDestination().start();
   * // a callback invoked every eighth note after the first measure
   * Tone.Transport.scheduleRepeat((time) => {
   * 	osc.start(time).stop(time + 0.1);
   * }, "8n", "1m");
   */


  scheduleRepeat(callback, interval, startTime, duration = Infinity) {
    const event = new _TransportRepeatEvent.TransportRepeatEvent(this, {
      callback,
      duration: new _Time.TimeClass(this.context, duration).toTicks(),
      interval: new _Time.TimeClass(this.context, interval).toTicks(),
      time: new _TransportTime.TransportTimeClass(this.context, startTime).toTicks()
    }); // kick it off if the Transport is started
    // @ts-ignore

    return this._addEvent(event, this._repeatedEvents);
  }
  /**
   * Schedule an event that will be removed after it is invoked.
   * @param callback The callback to invoke once.
   * @param time The time the callback should be invoked.
   * @returns The ID of the scheduled event.
   */


  scheduleOnce(callback, time) {
    const event = new _TransportEvent.TransportEvent(this, {
      callback,
      once: true,
      time: new _TransportTime.TransportTimeClass(this.context, time).toTicks()
    });
    return this._addEvent(event, this._timeline);
  }
  /**
   * Clear the passed in event id from the timeline
   * @param eventId The id of the event.
   */


  clear(eventId) {
    if (this._scheduledEvents.hasOwnProperty(eventId)) {
      const item = this._scheduledEvents[eventId.toString()];

      item.timeline.remove(item.event);
      item.event.dispose();
      delete this._scheduledEvents[eventId.toString()];
    }

    return this;
  }
  /**
   * Add an event to the correct timeline. Keep track of the
   * timeline it was added to.
   * @returns the event id which was just added
   */


  _addEvent(event, timeline) {
    this._scheduledEvents[event.id.toString()] = {
      event,
      timeline
    };
    timeline.add(event);
    return event.id;
  }
  /**
   * Remove scheduled events from the timeline after
   * the given time. Repeated events will be removed
   * if their startTime is after the given time
   * @param after Clear all events after this time.
   */


  cancel(after = 0) {
    const computedAfter = this.toTicks(after);

    this._timeline.forEachFrom(computedAfter, event => this.clear(event.id));

    this._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));

    return this;
  } //-------------------------------------
  // 	START/STOP/PAUSE
  //-------------------------------------

  /**
   * Bind start/stop/pause events from the clock and emit them.
   */


  _bindClockEvents() {
    this._clock.on("start", (time, offset) => {
      offset = new _Ticks.TicksClass(this.context, offset).toSeconds();
      this.emit("start", time, offset);
    });

    this._clock.on("stop", time => {
      this.emit("stop", time);
    });

    this._clock.on("pause", time => {
      this.emit("pause", time);
    });
  }
  /**
   * Returns the playback state of the source, either "started", "stopped", or "paused"
   */


  get state() {
    return this._clock.getStateAtTime(this.now());
  }
  /**
   * Start the transport and all sources synced to the transport.
   * @param  time The time when the transport should start.
   * @param  offset The timeline offset to start the transport.
   * @example
   * // start the transport in one second starting at beginning of the 5th measure.
   * Tone.Transport.start("+1", "4:0:0");
   */


  start(time, offset) {
    let offsetTicks;

    if ((0, _TypeCheck.isDefined)(offset)) {
      offsetTicks = this.toTicks(offset);
    } // start the clock


    this._clock.start(time, offsetTicks);

    return this;
  }
  /**
   * Stop the transport and all sources synced to the transport.
   * @param time The time when the transport should stop.
   * @example
   * Tone.Transport.stop();
   */


  stop(time) {
    this._clock.stop(time);

    return this;
  }
  /**
   * Pause the transport and all sources synced to the transport.
   */


  pause(time) {
    this._clock.pause(time);

    return this;
  }
  /**
   * Toggle the current state of the transport. If it is
   * started, it will stop it, otherwise it will start the Transport.
   * @param  time The time of the event
   */


  toggle(time) {
    time = this.toSeconds(time);

    if (this._clock.getStateAtTime(time) !== "started") {
      this.start(time);
    } else {
      this.stop(time);
    }

    return this;
  } //-------------------------------------
  // 	SETTERS/GETTERS
  //-------------------------------------

  /**
   * The time signature as just the numerator over 4.
   * For example 4/4 would be just 4 and 6/8 would be 3.
   * @example
   * // common time
   * Tone.Transport.timeSignature = 4;
   * // 7/8
   * Tone.Transport.timeSignature = [7, 8];
   * // this will be reduced to a single number
   * Tone.Transport.timeSignature; // returns 3.5
   */


  get timeSignature() {
    return this._timeSignature;
  }

  set timeSignature(timeSig) {
    if ((0, _TypeCheck.isArray)(timeSig)) {
      timeSig = timeSig[0] / timeSig[1] * 4;
    }

    this._timeSignature = timeSig;
  }
  /**
   * When the Transport.loop = true, this is the starting position of the loop.
   */


  get loopStart() {
    return new _Time.TimeClass(this.context, this._loopStart, "i").toSeconds();
  }

  set loopStart(startPosition) {
    this._loopStart = this.toTicks(startPosition);
  }
  /**
   * When the Transport.loop = true, this is the ending position of the loop.
   */


  get loopEnd() {
    return new _Time.TimeClass(this.context, this._loopEnd, "i").toSeconds();
  }

  set loopEnd(endPosition) {
    this._loopEnd = this.toTicks(endPosition);
  }
  /**
   * If the transport loops or not.
   */


  get loop() {
    return this._loop.get(this.now());
  }

  set loop(loop) {
    this._loop.set(loop, this.now());
  }
  /**
   * Set the loop start and stop at the same time.
   * @example
   * // loop over the first measure
   * Tone.Transport.setLoopPoints(0, "1m");
   * Tone.Transport.loop = true;
   */


  setLoopPoints(startPosition, endPosition) {
    this.loopStart = startPosition;
    this.loopEnd = endPosition;
    return this;
  }
  /**
   * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.
   */


  get swing() {
    return this._swingAmount;
  }

  set swing(amount) {
    // scale the values to a normal range
    this._swingAmount = amount;
  }
  /**
   * Set the subdivision which the swing will be applied to.
   * The default value is an 8th note. Value must be less
   * than a quarter note.
   */


  get swingSubdivision() {
    return new _Ticks.TicksClass(this.context, this._swingTicks).toNotation();
  }

  set swingSubdivision(subdivision) {
    this._swingTicks = this.toTicks(subdivision);
  }
  /**
   * The Transport's position in Bars:Beats:Sixteenths.
   * Setting the value will jump to that position right away.
   */


  get position() {
    const now = this.now();

    const ticks = this._clock.getTicksAtTime(now);

    return new _Ticks.TicksClass(this.context, ticks).toBarsBeatsSixteenths();
  }

  set position(progress) {
    const ticks = this.toTicks(progress);
    this.ticks = ticks;
  }
  /**
   * The Transport's position in seconds
   * Setting the value will jump to that position right away.
   */


  get seconds() {
    return this._clock.seconds;
  }

  set seconds(s) {
    const now = this.now();

    const ticks = this._clock.frequency.timeToTicks(s, now);

    this.ticks = ticks;
  }
  /**
   * The Transport's loop position as a normalized value. Always
   * returns 0 if the transport if loop is not true.
   */


  get progress() {
    if (this.loop) {
      const now = this.now();

      const ticks = this._clock.getTicksAtTime(now);

      return (ticks - this._loopStart) / (this._loopEnd - this._loopStart);
    } else {
      return 0;
    }
  }
  /**
   * The transports current tick position.
   */


  get ticks() {
    return this._clock.ticks;
  }

  set ticks(t) {
    if (this._clock.ticks !== t) {
      const now = this.now(); // stop everything synced to the transport

      if (this.state === "started") {
        const ticks = this._clock.getTicksAtTime(now); // schedule to start on the next tick, #573


        const remainingTick = this._clock.frequency.getDurationOfTicks(Math.ceil(ticks) - ticks, now);

        const time = now + remainingTick;
        this.emit("stop", time);

        this._clock.setTicksAtTime(t, time); // restart it with the new time


        this.emit("start", time, this._clock.getSecondsAtTime(time));
      } else {
        this._clock.setTicksAtTime(t, now);
      }
    }
  }
  /**
   * Get the clock's ticks at the given time.
   * @param  time  When to get the tick value
   * @return The tick value at the given time.
   */


  getTicksAtTime(time) {
    return Math.round(this._clock.getTicksAtTime(time));
  }
  /**
   * Return the elapsed seconds at the given time.
   * @param  time  When to get the elapsed seconds
   * @return  The number of elapsed seconds
   */


  getSecondsAtTime(time) {
    return this._clock.getSecondsAtTime(time);
  }
  /**
   * Pulses Per Quarter note. This is the smallest resolution
   * the Transport timing supports. This should be set once
   * on initialization and not set again. Changing this value
   * after other objects have been created can cause problems.
   */


  get PPQ() {
    return this._clock.frequency.multiplier;
  }

  set PPQ(ppq) {
    this._clock.frequency.multiplier = ppq;
  } //-------------------------------------
  // 	SYNCING
  //-------------------------------------

  /**
   * Returns the time aligned to the next subdivision
   * of the Transport. If the Transport is not started,
   * it will return 0.
   * Note: this will not work precisely during tempo ramps.
   * @param  subdivision  The subdivision to quantize to
   * @return  The context time of the next subdivision.
   * @example
   * // the transport must be started, otherwise returns 0
   * Tone.Transport.start();
   * Tone.Transport.nextSubdivision("4n");
   */


  nextSubdivision(subdivision) {
    subdivision = this.toTicks(subdivision);

    if (this.state !== "started") {
      // if the transport's not started, return 0
      return 0;
    } else {
      const now = this.now(); // the remainder of the current ticks and the subdivision

      const transportPos = this.getTicksAtTime(now);
      const remainingTicks = subdivision - transportPos % subdivision;
      return this._clock.nextTickTime(remainingTicks, now);
    }
  }
  /**
   * Attaches the signal to the tempo control signal so that
   * any changes in the tempo will change the signal in the same
   * ratio.
   *
   * @param signal
   * @param ratio Optionally pass in the ratio between the two signals.
   * 			Otherwise it will be computed based on their current values.
   */


  syncSignal(signal, ratio) {
    if (!ratio) {
      // get the sync ratio
      const now = this.now();

      if (signal.getValueAtTime(now) !== 0) {
        const bpm = this.bpm.getValueAtTime(now);
        const computedFreq = 1 / (60 / bpm / this.PPQ);
        ratio = signal.getValueAtTime(now) / computedFreq;
      } else {
        ratio = 0;
      }
    }

    const ratioSignal = new _Gain.Gain(ratio); // @ts-ignore

    this.bpm.connect(ratioSignal); // @ts-ignore

    ratioSignal.connect(signal._param);

    this._syncedSignals.push({
      initial: signal.value,
      ratio: ratioSignal,
      signal
    });

    signal.value = 0;
    return this;
  }
  /**
   * Unsyncs a previously synced signal from the transport's control.
   * See Transport.syncSignal.
   */


  unsyncSignal(signal) {
    for (let i = this._syncedSignals.length - 1; i >= 0; i--) {
      const syncedSignal = this._syncedSignals[i];

      if (syncedSignal.signal === signal) {
        syncedSignal.ratio.dispose();
        syncedSignal.signal.value = syncedSignal.initial;

        this._syncedSignals.splice(i, 1);
      }
    }

    return this;
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    this._clock.dispose();

    (0, _Interface.writable)(this, "bpm");

    this._timeline.dispose();

    this._repeatedEvents.dispose();

    return this;
  }

}

exports.Transport = Transport;

_Emitter.Emitter.mixin(Transport); //-------------------------------------
// 	INITIALIZATION
//-------------------------------------


(0, _ContextInitialization.onContextInit)(context => {
  context.transport = new Transport({
    context
  });
});
(0, _ContextInitialization.onContextClose)(context => {
  context.transport.dispose();
});
},{"../../core/type/Time":"node_modules/tone/build/esm/core/type/Time.js","../../core/util/TimelineValue":"node_modules/tone/build/esm/core/util/TimelineValue.js","../context/ContextInitialization":"node_modules/tone/build/esm/core/context/ContextInitialization.js","../context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../context/ToneWithContext":"node_modules/tone/build/esm/core/context/ToneWithContext.js","../type/Ticks":"node_modules/tone/build/esm/core/type/Ticks.js","../type/TransportTime":"node_modules/tone/build/esm/core/type/TransportTime.js","../util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../util/Emitter":"node_modules/tone/build/esm/core/util/Emitter.js","../util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../util/IntervalTimeline":"node_modules/tone/build/esm/core/util/IntervalTimeline.js","../util/Timeline":"node_modules/tone/build/esm/core/util/Timeline.js","../util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","./Clock":"node_modules/tone/build/esm/core/clock/Clock.js","./TransportEvent":"node_modules/tone/build/esm/core/clock/TransportEvent.js","./TransportRepeatEvent":"node_modules/tone/build/esm/core/clock/TransportRepeatEvent.js"}],"node_modules/tone/build/esm/source/Source.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Source = void 0;

var _Volume = require("../component/channel/Volume");

require("../core/context/Destination");

require("../core/clock/Transport");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _StateTimeline = require("../core/util/StateTimeline");

var _TypeCheck = require("../core/util/TypeCheck");

var _Debug = require("../core/util/Debug");

var _Math = require("../core/util/Math");

/**
 * Base class for sources.
 * start/stop of this.context.transport.
 *
 * ```
 * // Multiple state change events can be chained together,
 * // but must be set in the correct order and with ascending times
 * // OK
 * state.start().stop("+0.2");
 * // OK
 * state.start().stop("+0.2").start("+0.4").stop("+0.7")
 * // BAD
 * state.stop("+0.2").start();
 * // BAD
 * state.start("+0.3").stop("+0.2");
 * ```
 */
class Source extends _ToneAudioNode.ToneAudioNode {
  constructor(options) {
    super(options);
    /**
     * Sources have no inputs
     */

    this.input = undefined;
    /**
     * Keep track of the scheduled state.
     */

    this._state = new _StateTimeline.StateTimeline("stopped");
    /**
     * The synced `start` callback function from the transport
     */

    this._synced = false;
    /**
     * Keep track of all of the scheduled event ids
     */

    this._scheduled = [];
    /**
     * Placeholder functions for syncing/unsyncing to transport
     */

    this._syncedStart = _Interface.noOp;
    this._syncedStop = _Interface.noOp;
    this._state.memory = 100;
    this._state.increasing = true;
    this._volume = this.output = new _Volume.Volume({
      context: this.context,
      mute: options.mute,
      volume: options.volume
    });
    this.volume = this._volume.volume;
    (0, _Interface.readOnly)(this, "volume");
    this.onstop = options.onstop;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      mute: false,
      onstop: _Interface.noOp,
      volume: 0
    });
  }
  /**
   * Returns the playback state of the source, either "started" or "stopped".
   * @example
   * const player = new Tone.Player("https://tonejs.github.io/audio/berklee/ahntone_c3.mp3", () => {
   * 	player.start();
   * 	console.log(player.state);
   * }).toDestination();
   */


  get state() {
    if (this._synced) {
      if (this.context.transport.state === "started") {
        return this._state.getValueAtTime(this.context.transport.seconds);
      } else {
        return "stopped";
      }
    } else {
      return this._state.getValueAtTime(this.now());
    }
  }
  /**
   * Mute the output.
   * @example
   * const osc = new Tone.Oscillator().toDestination().start();
   * // mute the output
   * osc.mute = true;
   */


  get mute() {
    return this._volume.mute;
  }

  set mute(mute) {
    this._volume.mute = mute;
  }
  /**
   * Ensure that the scheduled time is not before the current time.
   * Should only be used when scheduled unsynced.
   */


  _clampToCurrentTime(time) {
    if (this._synced) {
      return time;
    } else {
      return Math.max(time, this.context.currentTime);
    }
  }
  /**
   * Start the source at the specified time. If no time is given,
   * start the source now.
   * @param  time When the source should be started.
   * @example
   * const source = new Tone.Oscillator().toDestination();
   * source.start("+0.5"); // starts the source 0.5 seconds from now
   */


  start(time, offset, duration) {
    let computedTime = (0, _TypeCheck.isUndef)(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);
    computedTime = this._clampToCurrentTime(computedTime); // if it's started, stop it and restart it

    if (!this._synced && this._state.getValueAtTime(computedTime) === "started") {
      // time should be strictly greater than the previous start time
      (0, _Debug.assert)((0, _Math.GT)(computedTime, this._state.get(computedTime).time), "Start time must be strictly greater than previous start time");

      this._state.cancel(computedTime);

      this._state.setStateAtTime("started", computedTime);

      this.log("restart", computedTime);
      this.restart(computedTime, offset, duration);
    } else {
      this.log("start", computedTime);

      this._state.setStateAtTime("started", computedTime);

      if (this._synced) {
        // add the offset time to the event
        const event = this._state.get(computedTime);

        if (event) {
          event.offset = this.toSeconds((0, _Defaults.defaultArg)(offset, 0));
          event.duration = duration ? this.toSeconds(duration) : undefined;
        }

        const sched = this.context.transport.schedule(t => {
          this._start(t, offset, duration);
        }, computedTime);

        this._scheduled.push(sched); // if the transport is already started
        // and the time is greater than where the transport is


        if (this.context.transport.state === "started" && this.context.transport.getSecondsAtTime(this.immediate()) > computedTime) {
          this._syncedStart(this.now(), this.context.transport.seconds);
        }
      } else {
        (0, _Debug.assertContextRunning)(this.context);

        this._start(computedTime, offset, duration);
      }
    }

    return this;
  }
  /**
   * Stop the source at the specified time. If no time is given,
   * stop the source now.
   * @param  time When the source should be stopped.
   * @example
   * const source = new Tone.Oscillator().toDestination();
   * source.start();
   * source.stop("+0.5"); // stops the source 0.5 seconds from now
   */


  stop(time) {
    let computedTime = (0, _TypeCheck.isUndef)(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);
    computedTime = this._clampToCurrentTime(computedTime);

    if (this._state.getValueAtTime(computedTime) === "started" || (0, _TypeCheck.isDefined)(this._state.getNextState("started", computedTime))) {
      this.log("stop", computedTime);

      if (!this._synced) {
        this._stop(computedTime);
      } else {
        const sched = this.context.transport.schedule(this._stop.bind(this), computedTime);

        this._scheduled.push(sched);
      }

      this._state.cancel(computedTime);

      this._state.setStateAtTime("stopped", computedTime);
    }

    return this;
  }
  /**
   * Restart the source.
   */


  restart(time, offset, duration) {
    time = this.toSeconds(time);

    if (this._state.getValueAtTime(time) === "started") {
      this._state.cancel(time);

      this._restart(time, offset, duration);
    }

    return this;
  }
  /**
   * Sync the source to the Transport so that all subsequent
   * calls to `start` and `stop` are synced to the TransportTime
   * instead of the AudioContext time.
   *
   * @example
   * const osc = new Tone.Oscillator().toDestination();
   * // sync the source so that it plays between 0 and 0.3 on the Transport's timeline
   * osc.sync().start(0).stop(0.3);
   * // start the transport.
   * Tone.Transport.start();
   * // set it to loop once a second
   * Tone.Transport.loop = true;
   * Tone.Transport.loopEnd = 1;
   */


  sync() {
    if (!this._synced) {
      this._synced = true;

      this._syncedStart = (time, offset) => {
        if (offset > 0) {
          // get the playback state at that time
          const stateEvent = this._state.get(offset); // listen for start events which may occur in the middle of the sync'ed time


          if (stateEvent && stateEvent.state === "started" && stateEvent.time !== offset) {
            // get the offset
            const startOffset = offset - this.toSeconds(stateEvent.time);
            let duration;

            if (stateEvent.duration) {
              duration = this.toSeconds(stateEvent.duration) - startOffset;
            }

            this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);
          }
        }
      };

      this._syncedStop = time => {
        const seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));

        if (this._state.getValueAtTime(seconds) === "started") {
          this._stop(time);
        }
      };

      this.context.transport.on("start", this._syncedStart);
      this.context.transport.on("loopStart", this._syncedStart);
      this.context.transport.on("stop", this._syncedStop);
      this.context.transport.on("pause", this._syncedStop);
      this.context.transport.on("loopEnd", this._syncedStop);
    }

    return this;
  }
  /**
   * Unsync the source to the Transport. See Source.sync
   */


  unsync() {
    if (this._synced) {
      this.context.transport.off("stop", this._syncedStop);
      this.context.transport.off("pause", this._syncedStop);
      this.context.transport.off("loopEnd", this._syncedStop);
      this.context.transport.off("start", this._syncedStart);
      this.context.transport.off("loopStart", this._syncedStart);
    }

    this._synced = false; // clear all of the scheduled ids

    this._scheduled.forEach(id => this.context.transport.clear(id));

    this._scheduled = [];

    this._state.cancel(0); // stop it also


    this._stop(0);

    return this;
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();
    this.onstop = _Interface.noOp;
    this.unsync();

    this._volume.dispose();

    this._state.dispose();

    return this;
  }

}

exports.Source = Source;
},{"../component/channel/Volume":"node_modules/tone/build/esm/component/channel/Volume.js","../core/context/Destination":"node_modules/tone/build/esm/core/context/Destination.js","../core/clock/Transport":"node_modules/tone/build/esm/core/clock/Transport.js","../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../core/util/StateTimeline":"node_modules/tone/build/esm/core/util/StateTimeline.js","../core/util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js","../core/util/Math":"node_modules/tone/build/esm/core/util/Math.js"}],"node_modules/tone/build/esm/source/buffer/ToneBufferSource.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToneBufferSource = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Param = require("../../core/context/Param");

var _ToneAudioBuffer = require("../../core/context/ToneAudioBuffer");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _TypeCheck = require("../../core/util/TypeCheck");

var _Debug = require("../../core/util/Debug");

var _OneShotSource = require("../OneShotSource");

var _Math = require("../../core/util/Math");

/**
 * Wrapper around the native BufferSourceNode.
 * @category Source
 */
class ToneBufferSource extends _OneShotSource.OneShotSource {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(ToneBufferSource.getDefaults(), arguments, ["url", "onload"]));
    this.name = "ToneBufferSource";
    /**
     * The oscillator
     */

    this._source = this.context.createBufferSource();
    this._internalChannels = [this._source];
    /**
     * indicators if the source has started/stopped
     */

    this._sourceStarted = false;
    this._sourceStopped = false;
    const options = (0, _Defaults.optionsFromArguments)(ToneBufferSource.getDefaults(), arguments, ["url", "onload"]);
    (0, _ToneAudioNode.connect)(this._source, this._gainNode);

    this._source.onended = () => this._stopSource();
    /**
     * The playbackRate of the buffer
     */


    this.playbackRate = new _Param.Param({
      context: this.context,
      param: this._source.playbackRate,
      units: "positive",
      value: options.playbackRate
    }); // set some values initially

    this.loop = options.loop;
    this.loopStart = options.loopStart;
    this.loopEnd = options.loopEnd;
    this._buffer = new _ToneAudioBuffer.ToneAudioBuffer(options.url, options.onload, options.onerror);

    this._internalChannels.push(this._source);
  }

  static getDefaults() {
    return Object.assign(_OneShotSource.OneShotSource.getDefaults(), {
      url: new _ToneAudioBuffer.ToneAudioBuffer(),
      loop: false,
      loopEnd: 0,
      loopStart: 0,
      onload: _Interface.noOp,
      onerror: _Interface.noOp,
      playbackRate: 1
    });
  }
  /**
   * The fadeIn time of the amplitude envelope.
   */


  get fadeIn() {
    return this._fadeIn;
  }

  set fadeIn(t) {
    this._fadeIn = t;
  }
  /**
   * The fadeOut time of the amplitude envelope.
   */


  get fadeOut() {
    return this._fadeOut;
  }

  set fadeOut(t) {
    this._fadeOut = t;
  }
  /**
   * The curve applied to the fades, either "linear" or "exponential"
   */


  get curve() {
    return this._curve;
  }

  set curve(t) {
    this._curve = t;
  }
  /**
   * Start the buffer
   * @param  time When the player should start.
   * @param  offset The offset from the beginning of the sample to start at.
   * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)
   * @param  gain  The gain to play the buffer back at.
   */


  start(time, offset, duration, gain = 1) {
    (0, _Debug.assert)(this.buffer.loaded, "buffer is either not set or not loaded");
    const computedTime = this.toSeconds(time); // apply the gain envelope

    this._startGain(computedTime, gain); // if it's a loop the default offset is the loopstart point


    if (this.loop) {
      offset = (0, _Defaults.defaultArg)(offset, this.loopStart);
    } else {
      // otherwise the default offset is 0
      offset = (0, _Defaults.defaultArg)(offset, 0);
    } // make sure the offset is not less than 0


    let computedOffset = Math.max(this.toSeconds(offset), 0); // start the buffer source

    if (this.loop) {
      // modify the offset if it's greater than the loop time
      const loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;
      const loopStart = this.toSeconds(this.loopStart);
      const loopDuration = loopEnd - loopStart; // move the offset back

      if ((0, _Math.GTE)(computedOffset, loopEnd)) {
        computedOffset = (computedOffset - loopStart) % loopDuration + loopStart;
      } // when the offset is very close to the duration, set it to 0


      if ((0, _Math.EQ)(computedOffset, this.buffer.duration)) {
        computedOffset = 0;
      }
    } // this.buffer.loaded would have return false if the AudioBuffer was undefined


    this._source.buffer = this.buffer.get();
    this._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;

    if ((0, _Math.LT)(computedOffset, this.buffer.duration)) {
      this._sourceStarted = true;

      this._source.start(computedTime, computedOffset);
    } // if a duration is given, schedule a stop


    if ((0, _TypeCheck.isDefined)(duration)) {
      let computedDur = this.toSeconds(duration); // make sure it's never negative

      computedDur = Math.max(computedDur, 0);
      this.stop(computedTime + computedDur);
    }

    return this;
  }

  _stopSource(time) {
    if (!this._sourceStopped && this._sourceStarted) {
      this._sourceStopped = true;

      this._source.stop(this.toSeconds(time));

      this._onended();
    }
  }
  /**
   * If loop is true, the loop will start at this position.
   */


  get loopStart() {
    return this._source.loopStart;
  }

  set loopStart(loopStart) {
    this._source.loopStart = this.toSeconds(loopStart);
  }
  /**
   * If loop is true, the loop will end at this position.
   */


  get loopEnd() {
    return this._source.loopEnd;
  }

  set loopEnd(loopEnd) {
    this._source.loopEnd = this.toSeconds(loopEnd);
  }
  /**
   * The audio buffer belonging to the player.
   */


  get buffer() {
    return this._buffer;
  }

  set buffer(buffer) {
    this._buffer.set(buffer);
  }
  /**
   * If the buffer should loop once it's over.
   */


  get loop() {
    return this._source.loop;
  }

  set loop(loop) {
    this._source.loop = loop;

    if (this._sourceStarted) {
      this.cancelStop();
    }
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();
    this._source.onended = null;

    this._source.disconnect();

    this._buffer.dispose();

    this.playbackRate.dispose();
    return this;
  }

}

exports.ToneBufferSource = ToneBufferSource;
},{"../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/context/Param":"node_modules/tone/build/esm/core/context/Param.js","../../core/context/ToneAudioBuffer":"node_modules/tone/build/esm/core/context/ToneAudioBuffer.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../../core/util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","../../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js","../OneShotSource":"node_modules/tone/build/esm/source/OneShotSource.js","../../core/util/Math":"node_modules/tone/build/esm/core/util/Math.js"}],"node_modules/tone/build/esm/source/Noise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Noise = void 0;

var _ToneAudioBuffer = require("../core/context/ToneAudioBuffer");

var _Defaults = require("../core/util/Defaults");

var _Debug = require("../core/util/Debug");

var _Source = require("../source/Source");

var _ToneBufferSource = require("./buffer/ToneBufferSource");

/**
 * Noise is a noise generator. It uses looped noise buffers to save on performance.
 * Noise supports the noise types: "pink", "white", and "brown". Read more about
 * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).
 *
 * @example
 * // initialize the noise and start
 * const noise = new Tone.Noise("pink").start();
 * // make an autofilter to shape the noise
 * const autoFilter = new Tone.AutoFilter({
 * 	frequency: "8n",
 * 	baseFrequency: 200,
 * 	octaves: 8
 * }).toDestination().start();
 * // connect the noise
 * noise.connect(autoFilter);
 * // start the autofilter LFO
 * autoFilter.start();
 * @category Source
 */
class Noise extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Noise.getDefaults(), arguments, ["type"]));
    this.name = "Noise";
    /**
     * Private reference to the source
     */

    this._source = null;
    const options = (0, _Defaults.optionsFromArguments)(Noise.getDefaults(), arguments, ["type"]);
    this._playbackRate = options.playbackRate;
    this.type = options.type;
    this._fadeIn = options.fadeIn;
    this._fadeOut = options.fadeOut;
  }

  static getDefaults() {
    return Object.assign(_Source.Source.getDefaults(), {
      fadeIn: 0,
      fadeOut: 0,
      playbackRate: 1,
      type: "white"
    });
  }
  /**
   * The type of the noise. Can be "white", "brown", or "pink".
   * @example
   * const noise = new Tone.Noise().toDestination().start();
   * noise.type = "brown";
   */


  get type() {
    return this._type;
  }

  set type(type) {
    (0, _Debug.assert)(type in _noiseBuffers, "Noise: invalid type: " + type);

    if (this._type !== type) {
      this._type = type; // if it's playing, stop and restart it

      if (this.state === "started") {
        const now = this.now();

        this._stop(now);

        this._start(now);
      }
    }
  }
  /**
   * The playback rate of the noise. Affects
   * the "frequency" of the noise.
   */


  get playbackRate() {
    return this._playbackRate;
  }

  set playbackRate(rate) {
    this._playbackRate = rate;

    if (this._source) {
      this._source.playbackRate.value = rate;
    }
  }
  /**
   * internal start method
   */


  _start(time) {
    const buffer = _noiseBuffers[this._type];
    this._source = new _ToneBufferSource.ToneBufferSource({
      url: buffer,
      context: this.context,
      fadeIn: this._fadeIn,
      fadeOut: this._fadeOut,
      loop: true,
      onended: () => this.onstop(this),
      playbackRate: this._playbackRate
    }).connect(this.output);

    this._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));
  }
  /**
   * internal stop method
   */


  _stop(time) {
    if (this._source) {
      this._source.stop(this.toSeconds(time));

      this._source = null;
    }
  }
  /**
   * The fadeIn time of the amplitude envelope.
   */


  get fadeIn() {
    return this._fadeIn;
  }

  set fadeIn(time) {
    this._fadeIn = time;

    if (this._source) {
      this._source.fadeIn = this._fadeIn;
    }
  }
  /**
   * The fadeOut time of the amplitude envelope.
   */


  get fadeOut() {
    return this._fadeOut;
  }

  set fadeOut(time) {
    this._fadeOut = time;

    if (this._source) {
      this._source.fadeOut = this._fadeOut;
    }
  }

  _restart(time) {
    // TODO could be optimized by cancelling the buffer source 'stop'
    this._stop(time);

    this._start(time);
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    if (this._source) {
      this._source.disconnect();
    }

    return this;
  }

} //--------------------
// THE NOISE BUFFERS
//--------------------
// Noise buffer stats


exports.Noise = Noise;
const BUFFER_LENGTH = 44100 * 5;
const NUM_CHANNELS = 2;
/**
 * Cache the noise buffers
 */

const _noiseCache = {
  brown: null,
  pink: null,
  white: null
};
/**
 * The noise arrays. Generated on initialization.
 * borrowed heavily from https://github.com/zacharydenton/noise.js
 * (c) 2013 Zach Denton (MIT)
 */

const _noiseBuffers = {
  get brown() {
    if (!_noiseCache.brown) {
      const buffer = [];

      for (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {
        const channel = new Float32Array(BUFFER_LENGTH);
        buffer[channelNum] = channel;
        let lastOut = 0.0;

        for (let i = 0; i < BUFFER_LENGTH; i++) {
          const white = Math.random() * 2 - 1;
          channel[i] = (lastOut + 0.02 * white) / 1.02;
          lastOut = channel[i];
          channel[i] *= 3.5; // (roughly) compensate for gain
        }
      }

      _noiseCache.brown = new _ToneAudioBuffer.ToneAudioBuffer().fromArray(buffer);
    }

    return _noiseCache.brown;
  },

  get pink() {
    if (!_noiseCache.pink) {
      const buffer = [];

      for (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {
        const channel = new Float32Array(BUFFER_LENGTH);
        buffer[channelNum] = channel;
        let b0, b1, b2, b3, b4, b5, b6;
        b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;

        for (let i = 0; i < BUFFER_LENGTH; i++) {
          const white = Math.random() * 2 - 1;
          b0 = 0.99886 * b0 + white * 0.0555179;
          b1 = 0.99332 * b1 + white * 0.0750759;
          b2 = 0.96900 * b2 + white * 0.1538520;
          b3 = 0.86650 * b3 + white * 0.3104856;
          b4 = 0.55000 * b4 + white * 0.5329522;
          b5 = -0.7616 * b5 - white * 0.0168980;
          channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
          channel[i] *= 0.11; // (roughly) compensate for gain

          b6 = white * 0.115926;
        }
      }

      _noiseCache.pink = new _ToneAudioBuffer.ToneAudioBuffer().fromArray(buffer);
    }

    return _noiseCache.pink;
  },

  get white() {
    if (!_noiseCache.white) {
      const buffer = [];

      for (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {
        const channel = new Float32Array(BUFFER_LENGTH);
        buffer[channelNum] = channel;

        for (let i = 0; i < BUFFER_LENGTH; i++) {
          channel[i] = Math.random() * 2 - 1;
        }
      }

      _noiseCache.white = new _ToneAudioBuffer.ToneAudioBuffer().fromArray(buffer);
    }

    return _noiseCache.white;
  }

};
},{"../core/context/ToneAudioBuffer":"node_modules/tone/build/esm/core/context/ToneAudioBuffer.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js","../source/Source":"node_modules/tone/build/esm/source/Source.js","./buffer/ToneBufferSource":"node_modules/tone/build/esm/source/buffer/ToneBufferSource.js"}],"node_modules/tone/build/esm/source/UserMedia.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserMedia = void 0;

var _tslib = require("tslib");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Volume = require("../component/channel/Volume");

var _Defaults = require("../core/util/Defaults");

var _Debug = require("../core/util/Debug");

var _Interface = require("../core/util/Interface");

var _TypeCheck = require("../core/util/TypeCheck");

/**
 * UserMedia uses MediaDevices.getUserMedia to open up and external microphone or audio input.
 * Check [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)
 * to see which browsers are supported. Access to an external input
 * is limited to secure (HTTPS) connections.
 * @example
 * const meter = new Tone.Meter();
 * const mic = new Tone.UserMedia().connect(meter);
 * mic.open().then(() => {
 * 	// promise resolves when input is available
 * 	console.log("mic open");
 * 	// print the incoming mic levels in decibels
 * 	setInterval(() => console.log(meter.getValue()), 100);
 * }).catch(e => {
 * 	// promise is rejected when the user doesn't have or allow mic access
 * 	console.log("mic not open");
 * });
 * @category Source
 */
class UserMedia extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(UserMedia.getDefaults(), arguments, ["volume"]));
    this.name = "UserMedia";
    const options = (0, _Defaults.optionsFromArguments)(UserMedia.getDefaults(), arguments, ["volume"]);
    this._volume = this.output = new _Volume.Volume({
      context: this.context,
      volume: options.volume
    });
    this.volume = this._volume.volume;
    (0, _Interface.readOnly)(this, "volume");
    this.mute = options.mute;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      mute: false,
      volume: 0
    });
  }
  /**
   * Open the media stream. If a string is passed in, it is assumed
   * to be the label or id of the stream, if a number is passed in,
   * it is the input number of the stream.
   * @param  labelOrId The label or id of the audio input media device.
   *                   With no argument, the default stream is opened.
   * @return The promise is resolved when the stream is open.
   */


  open(labelOrId) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      (0, _Debug.assert)(UserMedia.supported, "UserMedia is not supported"); // close the previous stream

      if (this.state === "started") {
        this.close();
      }

      const devices = yield UserMedia.enumerateDevices();

      if ((0, _TypeCheck.isNumber)(labelOrId)) {
        this._device = devices[labelOrId];
      } else {
        this._device = devices.find(device => {
          return device.label === labelOrId || device.deviceId === labelOrId;
        }); // didn't find a matching device

        if (!this._device && devices.length > 0) {
          this._device = devices[0];
        }

        (0, _Debug.assert)((0, _TypeCheck.isDefined)(this._device), `No matching device ${labelOrId}`);
      } // do getUserMedia


      const constraints = {
        audio: {
          echoCancellation: false,
          sampleRate: this.context.sampleRate,
          noiseSuppression: false,
          mozNoiseSuppression: false
        }
      };

      if (this._device) {
        // @ts-ignore
        constraints.audio.deviceId = this._device.deviceId;
      }

      const stream = yield navigator.mediaDevices.getUserMedia(constraints); // start a new source only if the previous one is closed

      if (!this._stream) {
        this._stream = stream; // Wrap a MediaStreamSourceNode around the live input stream.

        const mediaStreamNode = this.context.createMediaStreamSource(stream); // Connect the MediaStreamSourceNode to a gate gain node

        (0, _ToneAudioNode.connect)(mediaStreamNode, this.output);
        this._mediaStream = mediaStreamNode;
      }

      return this;
    });
  }
  /**
   * Close the media stream
   */


  close() {
    if (this._stream && this._mediaStream) {
      this._stream.getAudioTracks().forEach(track => {
        track.stop();
      });

      this._stream = undefined; // remove the old media stream

      this._mediaStream.disconnect();

      this._mediaStream = undefined;
    }

    this._device = undefined;
    return this;
  }
  /**
   * Returns a promise which resolves with the list of audio input devices available.
   * @return The promise that is resolved with the devices
   * @example
   * Tone.UserMedia.enumerateDevices().then((devices) => {
   * 	// print the device labels
   * 	console.log(devices.map(device => device.label));
   * });
   */


  static enumerateDevices() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      const allDevices = yield navigator.mediaDevices.enumerateDevices();
      return allDevices.filter(device => {
        return device.kind === "audioinput";
      });
    });
  }
  /**
   * Returns the playback state of the source, "started" when the microphone is open
   * and "stopped" when the mic is closed.
   */


  get state() {
    return this._stream && this._stream.active ? "started" : "stopped";
  }
  /**
   * Returns an identifier for the represented device that is
   * persisted across sessions. It is un-guessable by other applications and
   * unique to the origin of the calling application. It is reset when the
   * user clears cookies (for Private Browsing, a different identifier is
   * used that is not persisted across sessions). Returns undefined when the
   * device is not open.
   */


  get deviceId() {
    if (this._device) {
      return this._device.deviceId;
    } else {
      return undefined;
    }
  }
  /**
   * Returns a group identifier. Two devices have the
   * same group identifier if they belong to the same physical device.
   * Returns null  when the device is not open.
   */


  get groupId() {
    if (this._device) {
      return this._device.groupId;
    } else {
      return undefined;
    }
  }
  /**
   * Returns a label describing this device (for example "Built-in Microphone").
   * Returns undefined when the device is not open or label is not available
   * because of permissions.
   */


  get label() {
    if (this._device) {
      return this._device.label;
    } else {
      return undefined;
    }
  }
  /**
   * Mute the output.
   * @example
   * const mic = new Tone.UserMedia();
   * mic.open().then(() => {
   * 	// promise resolves when input is available
   * });
   * // mute the output
   * mic.mute = true;
   */


  get mute() {
    return this._volume.mute;
  }

  set mute(mute) {
    this._volume.mute = mute;
  }

  dispose() {
    super.dispose();
    this.close();

    this._volume.dispose();

    this.volume.dispose();
    return this;
  }
  /**
   * If getUserMedia is supported by the browser.
   */


  static get supported() {
    return (0, _TypeCheck.isDefined)(navigator.mediaDevices) && (0, _TypeCheck.isDefined)(navigator.mediaDevices.getUserMedia);
  }

}

exports.UserMedia = UserMedia;
},{"tslib":"node_modules/tslib/tslib.es6.js","../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../component/channel/Volume":"node_modules/tone/build/esm/component/channel/Volume.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../core/util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js"}],"node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateWaveform = generateWaveform;

var _tslib = require("tslib");

var _OfflineContext = require("../../core/context/OfflineContext");

/**
 * Render a segment of the oscillator to an offline context and return the results as an array
 */
function generateWaveform(instance, length) {
  return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
    const duration = length / instance.context.sampleRate;
    const context = new _OfflineContext.OfflineContext(1, duration, instance.context.sampleRate);
    const clone = new instance.constructor(Object.assign(instance.get(), {
      // should do 2 iterations
      frequency: 2 / duration,
      // zero out the detune
      detune: 0,
      context
    })).toDestination();
    clone.start(0);
    const buffer = yield context.render();
    return buffer.getChannelData(0);
  });
}
},{"tslib":"node_modules/tslib/tslib.es6.js","../../core/context/OfflineContext":"node_modules/tone/build/esm/core/context/OfflineContext.js"}],"node_modules/tone/build/esm/source/oscillator/ToneOscillatorNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToneOscillatorNode = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Param = require("../../core/context/Param");

var _Defaults = require("../../core/util/Defaults");

var _OneShotSource = require("../OneShotSource");

var _Interface = require("../../core/util/Interface");

/**
 * Wrapper around the native fire-and-forget OscillatorNode.
 * Adds the ability to reschedule the stop method.
 * ***[[Oscillator]] is better for most use-cases***
 * @category Source
 */
class ToneOscillatorNode extends _OneShotSource.OneShotSource {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(ToneOscillatorNode.getDefaults(), arguments, ["frequency", "type"]));
    this.name = "ToneOscillatorNode";
    /**
     * The oscillator
     */

    this._oscillator = this.context.createOscillator();
    this._internalChannels = [this._oscillator];
    const options = (0, _Defaults.optionsFromArguments)(ToneOscillatorNode.getDefaults(), arguments, ["frequency", "type"]);
    (0, _ToneAudioNode.connect)(this._oscillator, this._gainNode);
    this.type = options.type;
    this.frequency = new _Param.Param({
      context: this.context,
      param: this._oscillator.frequency,
      units: "frequency",
      value: options.frequency
    });
    this.detune = new _Param.Param({
      context: this.context,
      param: this._oscillator.detune,
      units: "cents",
      value: options.detune
    });
    (0, _Interface.readOnly)(this, ["frequency", "detune"]);
  }

  static getDefaults() {
    return Object.assign(_OneShotSource.OneShotSource.getDefaults(), {
      detune: 0,
      frequency: 440,
      type: "sine"
    });
  }
  /**
   * Start the oscillator node at the given time
   * @param  time When to start the oscillator
   */


  start(time) {
    const computedTime = this.toSeconds(time);
    this.log("start", computedTime);

    this._startGain(computedTime);

    this._oscillator.start(computedTime);

    return this;
  }

  _stopSource(time) {
    this._oscillator.stop(time);
  }
  /**
   * Sets an arbitrary custom periodic waveform given a PeriodicWave.
   * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave
   */


  setPeriodicWave(periodicWave) {
    this._oscillator.setPeriodicWave(periodicWave);

    return this;
  }
  /**
   * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'
   */


  get type() {
    return this._oscillator.type;
  }

  set type(type) {
    this._oscillator.type = type;
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    if (this.state === "started") {
      this.stop();
    }

    this._oscillator.disconnect();

    this.frequency.dispose();
    this.detune.dispose();
    return this;
  }

}

exports.ToneOscillatorNode = ToneOscillatorNode;
},{"../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/context/Param":"node_modules/tone/build/esm/core/context/Param.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../OneShotSource":"node_modules/tone/build/esm/source/OneShotSource.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/source/oscillator/Oscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Oscillator = void 0;

var _tslib = require("tslib");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _TypeCheck = require("../../core/util/TypeCheck");

var _Signal = require("../../signal/Signal");

var _Source = require("../Source");

var _OscillatorInterface = require("./OscillatorInterface");

var _ToneOscillatorNode = require("./ToneOscillatorNode");

var _Debug = require("../../core/util/Debug");

var _Math = require("../../core/util/Math");

/**
 * Oscillator supports a number of features including
 * phase rotation, multiple oscillator types (see Oscillator.type),
 * and Transport syncing (see Oscillator.syncFrequency).
 *
 * @example
 * // make and start a 440hz sine tone
 * const osc = new Tone.Oscillator(440, "sine").toDestination().start();
 * @category Source
 */
class Oscillator extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Oscillator.getDefaults(), arguments, ["frequency", "type"]));
    this.name = "Oscillator";
    /**
     * the main oscillator
     */

    this._oscillator = null;
    const options = (0, _Defaults.optionsFromArguments)(Oscillator.getDefaults(), arguments, ["frequency", "type"]);
    this.frequency = new _Signal.Signal({
      context: this.context,
      units: "frequency",
      value: options.frequency
    });
    (0, _Interface.readOnly)(this, "frequency");
    this.detune = new _Signal.Signal({
      context: this.context,
      units: "cents",
      value: options.detune
    });
    (0, _Interface.readOnly)(this, "detune");
    this._partials = options.partials;
    this._partialCount = options.partialCount;
    this._type = options.type;

    if (options.partialCount && options.type !== "custom") {
      this._type = this.baseType + options.partialCount.toString();
    }

    this.phase = options.phase;
  }

  static getDefaults() {
    return Object.assign(_Source.Source.getDefaults(), {
      detune: 0,
      frequency: 440,
      partialCount: 0,
      partials: [],
      phase: 0,
      type: "sine"
    });
  }
  /**
   * start the oscillator
   */


  _start(time) {
    const computedTime = this.toSeconds(time); // new oscillator with previous values

    const oscillator = new _ToneOscillatorNode.ToneOscillatorNode({
      context: this.context,
      onended: () => this.onstop(this)
    });
    this._oscillator = oscillator;

    if (this._wave) {
      this._oscillator.setPeriodicWave(this._wave);
    } else {
      this._oscillator.type = this._type;
    } // connect the control signal to the oscillator frequency & detune


    this._oscillator.connect(this.output);

    this.frequency.connect(this._oscillator.frequency);
    this.detune.connect(this._oscillator.detune); // start the oscillator

    this._oscillator.start(computedTime);
  }
  /**
   * stop the oscillator
   */


  _stop(time) {
    const computedTime = this.toSeconds(time);

    if (this._oscillator) {
      this._oscillator.stop(computedTime);
    }
  }
  /**
   * Restart the oscillator. Does not stop the oscillator, but instead
   * just cancels any scheduled 'stop' from being invoked.
   */


  _restart(time) {
    const computedTime = this.toSeconds(time);
    this.log("restart", computedTime);

    if (this._oscillator) {
      this._oscillator.cancelStop();
    }

    this._state.cancel(computedTime);

    return this;
  }
  /**
   * Sync the signal to the Transport's bpm. Any changes to the transports bpm,
   * will also affect the oscillators frequency.
   * @example
   * const osc = new Tone.Oscillator().toDestination().start();
   * osc.frequency.value = 440;
   * // the ratio between the bpm and the frequency will be maintained
   * osc.syncFrequency();
   * // double the tempo
   * Tone.Transport.bpm.value *= 2;
   * // the frequency of the oscillator is doubled to 880
   */


  syncFrequency() {
    this.context.transport.syncSignal(this.frequency);
    return this;
  }
  /**
   * Unsync the oscillator's frequency from the Transport.
   * See Oscillator.syncFrequency
   */


  unsyncFrequency() {
    this.context.transport.unsyncSignal(this.frequency);
    return this;
  }
  /**
   * Get a cached periodic wave. Avoids having to recompute
   * the oscillator values when they have already been computed
   * with the same values.
   */


  _getCachedPeriodicWave() {
    if (this._type === "custom") {
      const oscProps = Oscillator._periodicWaveCache.find(description => {
        return description.phase === this._phase && (0, _Defaults.deepEquals)(description.partials, this._partials);
      });

      return oscProps;
    } else {
      const oscProps = Oscillator._periodicWaveCache.find(description => {
        return description.type === this._type && description.phase === this._phase;
      });

      this._partialCount = oscProps ? oscProps.partialCount : this._partialCount;
      return oscProps;
    }
  }

  get type() {
    return this._type;
  }

  set type(type) {
    this._type = type;
    const isBasicType = ["sine", "square", "sawtooth", "triangle"].indexOf(type) !== -1;

    if (this._phase === 0 && isBasicType) {
      this._wave = undefined;
      this._partialCount = 0; // just go with the basic approach

      if (this._oscillator !== null) {
        // already tested that it's a basic type
        this._oscillator.type = type;
      }
    } else {
      // first check if the value is cached
      const cache = this._getCachedPeriodicWave();

      if ((0, _TypeCheck.isDefined)(cache)) {
        const {
          partials,
          wave
        } = cache;
        this._wave = wave;
        this._partials = partials;

        if (this._oscillator !== null) {
          this._oscillator.setPeriodicWave(this._wave);
        }
      } else {
        const [real, imag] = this._getRealImaginary(type, this._phase);

        const periodicWave = this.context.createPeriodicWave(real, imag);
        this._wave = periodicWave;

        if (this._oscillator !== null) {
          this._oscillator.setPeriodicWave(this._wave);
        } // set the cache


        Oscillator._periodicWaveCache.push({
          imag,
          partialCount: this._partialCount,
          partials: this._partials,
          phase: this._phase,
          real,
          type: this._type,
          wave: this._wave
        });

        if (Oscillator._periodicWaveCache.length > 100) {
          Oscillator._periodicWaveCache.shift();
        }
      }
    }
  }

  get baseType() {
    return this._type.replace(this.partialCount.toString(), "");
  }

  set baseType(baseType) {
    if (this.partialCount && this._type !== "custom" && baseType !== "custom") {
      this.type = baseType + this.partialCount;
    } else {
      this.type = baseType;
    }
  }

  get partialCount() {
    return this._partialCount;
  }

  set partialCount(p) {
    (0, _Debug.assertRange)(p, 0);
    let type = this._type;
    const partial = /^(sine|triangle|square|sawtooth)(\d+)$/.exec(this._type);

    if (partial) {
      type = partial[1];
    }

    if (this._type !== "custom") {
      if (p === 0) {
        this.type = type;
      } else {
        this.type = type + p.toString();
      }
    } else {
      // extend or shorten the partials array
      const fullPartials = new Float32Array(p); // copy over the partials array

      this._partials.forEach((v, i) => fullPartials[i] = v);

      this._partials = Array.from(fullPartials);
      this.type = this._type;
    }
  }
  /**
   * Returns the real and imaginary components based
   * on the oscillator type.
   * @returns [real: Float32Array, imaginary: Float32Array]
   */


  _getRealImaginary(type, phase) {
    const fftSize = 4096;
    let periodicWaveSize = fftSize / 2;
    const real = new Float32Array(periodicWaveSize);
    const imag = new Float32Array(periodicWaveSize);
    let partialCount = 1;

    if (type === "custom") {
      partialCount = this._partials.length + 1;
      this._partialCount = this._partials.length;
      periodicWaveSize = partialCount; // if the partial count is 0, don't bother doing any computation

      if (this._partials.length === 0) {
        return [real, imag];
      }
    } else {
      const partial = /^(sine|triangle|square|sawtooth)(\d+)$/.exec(type);

      if (partial) {
        partialCount = parseInt(partial[2], 10) + 1;
        this._partialCount = parseInt(partial[2], 10);
        type = partial[1];
        partialCount = Math.max(partialCount, 2);
        periodicWaveSize = partialCount;
      } else {
        this._partialCount = 0;
      }

      this._partials = [];
    }

    for (let n = 1; n < periodicWaveSize; ++n) {
      const piFactor = 2 / (n * Math.PI);
      let b;

      switch (type) {
        case "sine":
          b = n <= partialCount ? 1 : 0;
          this._partials[n - 1] = b;
          break;

        case "square":
          b = n & 1 ? 2 * piFactor : 0;
          this._partials[n - 1] = b;
          break;

        case "sawtooth":
          b = piFactor * (n & 1 ? 1 : -1);
          this._partials[n - 1] = b;
          break;

        case "triangle":
          if (n & 1) {
            b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);
          } else {
            b = 0;
          }

          this._partials[n - 1] = b;
          break;

        case "custom":
          b = this._partials[n - 1];
          break;

        default:
          throw new TypeError("Oscillator: invalid type: " + type);
      }

      if (b !== 0) {
        real[n] = -b * Math.sin(phase * n);
        imag[n] = b * Math.cos(phase * n);
      } else {
        real[n] = 0;
        imag[n] = 0;
      }
    }

    return [real, imag];
  }
  /**
   * Compute the inverse FFT for a given phase.
   */


  _inverseFFT(real, imag, phase) {
    let sum = 0;
    const len = real.length;

    for (let i = 0; i < len; i++) {
      sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);
    }

    return sum;
  }
  /**
   * Returns the initial value of the oscillator when stopped.
   * E.g. a "sine" oscillator with phase = 90 would return an initial value of -1.
   */


  getInitialValue() {
    const [real, imag] = this._getRealImaginary(this._type, 0);

    let maxValue = 0;
    const twoPi = Math.PI * 2;
    const testPositions = 32; // check for peaks in 16 places

    for (let i = 0; i < testPositions; i++) {
      maxValue = Math.max(this._inverseFFT(real, imag, i / testPositions * twoPi), maxValue);
    }

    return (0, _Math.clamp)(-this._inverseFFT(real, imag, this._phase) / maxValue, -1, 1);
  }

  get partials() {
    return this._partials.slice(0, this.partialCount);
  }

  set partials(partials) {
    this._partials = partials;
    this._partialCount = this._partials.length;

    if (partials.length) {
      this.type = "custom";
    }
  }

  get phase() {
    return this._phase * (180 / Math.PI);
  }

  set phase(phase) {
    this._phase = phase * Math.PI / 180; // reset the type

    this.type = this._type;
  }

  asArray(length = 1024) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      return (0, _OscillatorInterface.generateWaveform)(this, length);
    });
  }

  dispose() {
    super.dispose();

    if (this._oscillator !== null) {
      this._oscillator.dispose();
    }

    this._wave = undefined;
    this.frequency.dispose();
    this.detune.dispose();
    return this;
  }

}
/**
 * Cache the periodic waves to avoid having to redo computations
 */


exports.Oscillator = Oscillator;
Oscillator._periodicWaveCache = [];
},{"tslib":"node_modules/tslib/tslib.es6.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../../core/util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","../../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../Source":"node_modules/tone/build/esm/source/Source.js","./OscillatorInterface":"node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js","./ToneOscillatorNode":"node_modules/tone/build/esm/source/oscillator/ToneOscillatorNode.js","../../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js","../../core/util/Math":"node_modules/tone/build/esm/core/util/Math.js"}],"node_modules/tone/build/esm/signal/SignalOperator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SignalOperator = void 0;

var _Defaults = require("../core/util/Defaults");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Signal = require("./Signal");

/**
 * A signal operator has an input and output and modifies the signal.
 */
class SignalOperator extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(SignalOperator.getDefaults(), arguments, ["context"])));
  }

  connect(destination, outputNum = 0, inputNum = 0) {
    (0, _Signal.connectSignal)(this, destination, outputNum, inputNum);
    return this;
  }

}

exports.SignalOperator = SignalOperator;
},{"../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","./Signal":"node_modules/tone/build/esm/signal/Signal.js"}],"node_modules/tone/build/esm/signal/WaveShaper.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WaveShaper = void 0;

var _Defaults = require("../core/util/Defaults");

var _TypeCheck = require("../core/util/TypeCheck");

var _Debug = require("../core/util/Debug");

var _Signal = require("./Signal");

var _SignalOperator = require("./SignalOperator");

/**
 * Wraps the native Web Audio API
 * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).
 *
 * @example
 * const osc = new Tone.Oscillator().toDestination().start();
 * // multiply the output of the signal by 2 using the waveshaper's function
 * const timesTwo = new Tone.WaveShaper((val) => val * 2, 2048).connect(osc.frequency);
 * const signal = new Tone.Signal(440).connect(timesTwo);
 * @category Signal
 */
class WaveShaper extends _SignalOperator.SignalOperator {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(WaveShaper.getDefaults(), arguments, ["mapping", "length"])));
    this.name = "WaveShaper";
    /**
     * the waveshaper node
     */

    this._shaper = this.context.createWaveShaper();
    /**
     * The input to the waveshaper node.
     */

    this.input = this._shaper;
    /**
     * The output from the waveshaper node
     */

    this.output = this._shaper;
    const options = (0, _Defaults.optionsFromArguments)(WaveShaper.getDefaults(), arguments, ["mapping", "length"]);

    if ((0, _TypeCheck.isArray)(options.mapping) || options.mapping instanceof Float32Array) {
      this.curve = Float32Array.from(options.mapping);
    } else if ((0, _TypeCheck.isFunction)(options.mapping)) {
      this.setMap(options.mapping, options.length);
    }
  }

  static getDefaults() {
    return Object.assign(_Signal.Signal.getDefaults(), {
      length: 1024
    });
  }
  /**
   * Uses a mapping function to set the value of the curve.
   * @param mapping The function used to define the values.
   *                The mapping function take two arguments:
   *                the first is the value at the current position
   *                which goes from -1 to 1 over the number of elements
   *                in the curve array. The second argument is the array position.
   * @example
   * const shaper = new Tone.WaveShaper();
   * // map the input signal from [-1, 1] to [0, 10]
   * shaper.setMap((val, index) => (val + 1) * 5);
   */


  setMap(mapping, length = 1024) {
    const array = new Float32Array(length);

    for (let i = 0, len = length; i < len; i++) {
      const normalized = i / (len - 1) * 2 - 1;
      array[i] = mapping(normalized, i);
    }

    this.curve = array;
    return this;
  }
  /**
   * The array to set as the waveshaper curve. For linear curves
   * array length does not make much difference, but for complex curves
   * longer arrays will provide smoother interpolation.
   */


  get curve() {
    return this._shaper.curve;
  }

  set curve(mapping) {
    this._shaper.curve = mapping;
  }
  /**
   * Specifies what type of oversampling (if any) should be used when
   * applying the shaping curve. Can either be "none", "2x" or "4x".
   */


  get oversample() {
    return this._shaper.oversample;
  }

  set oversample(oversampling) {
    const isOverSampleType = ["none", "2x", "4x"].some(str => str.includes(oversampling));
    (0, _Debug.assert)(isOverSampleType, "oversampling must be either 'none', '2x', or '4x'");
    this._shaper.oversample = oversampling;
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    this._shaper.disconnect();

    return this;
  }

}

exports.WaveShaper = WaveShaper;
},{"../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js","./Signal":"node_modules/tone/build/esm/signal/Signal.js","./SignalOperator":"node_modules/tone/build/esm/signal/SignalOperator.js"}],"node_modules/tone/build/esm/signal/AudioToGain.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AudioToGain = void 0;

var _SignalOperator = require("./SignalOperator");

var _WaveShaper = require("./WaveShaper");

/**
 * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].
 * See [[GainToAudio]].
 * @category Signal
 */
class AudioToGain extends _SignalOperator.SignalOperator {
  constructor() {
    super(...arguments);
    this.name = "AudioToGain";
    /**
     * The node which converts the audio ranges
     */

    this._norm = new _WaveShaper.WaveShaper({
      context: this.context,
      mapping: x => (x + 1) / 2
    });
    /**
     * The AudioRange input [-1, 1]
     */

    this.input = this._norm;
    /**
     * The GainRange output [0, 1]
     */

    this.output = this._norm;
  }
  /**
   * clean up
   */


  dispose() {
    super.dispose();

    this._norm.dispose();

    return this;
  }

}

exports.AudioToGain = AudioToGain;
},{"./SignalOperator":"node_modules/tone/build/esm/signal/SignalOperator.js","./WaveShaper":"node_modules/tone/build/esm/signal/WaveShaper.js"}],"node_modules/tone/build/esm/signal/Multiply.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Multiply = void 0;

var _Gain = require("../core/context/Gain");

var _Defaults = require("../core/util/Defaults");

var _Signal = require("./Signal");

/**
 * Multiply two incoming signals. Or, if a number is given in the constructor,
 * multiplies the incoming signal by that value.
 *
 * @example
 * // multiply two signals
 * const mult = new Tone.Multiply();
 * const sigA = new Tone.Signal(3);
 * const sigB = new Tone.Signal(4);
 * sigA.connect(mult);
 * sigB.connect(mult.factor);
 * // output of mult is 12.
 * @example
 * // multiply a signal and a number
 * const mult = new Tone.Multiply(10);
 * const sig = new Tone.Signal(2).connect(mult);
 * // the output of mult is 20.
 * @category Signal
 */
class Multiply extends _Signal.Signal {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(Multiply.getDefaults(), arguments, ["value"])));
    this.name = "Multiply";
    /**
     * Indicates if the value should be overridden on connection
     */

    this.override = false;
    const options = (0, _Defaults.optionsFromArguments)(Multiply.getDefaults(), arguments, ["value"]);
    this._mult = this.input = this.output = new _Gain.Gain({
      context: this.context,
      minValue: options.minValue,
      maxValue: options.maxValue
    });
    this.factor = this._param = this._mult.gain;
    this.factor.setValueAtTime(options.value, 0);
  }

  static getDefaults() {
    return Object.assign(_Signal.Signal.getDefaults(), {
      value: 0
    });
  }

  dispose() {
    super.dispose();

    this._mult.dispose();

    return this;
  }

}

exports.Multiply = Multiply;
},{"../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./Signal":"node_modules/tone/build/esm/signal/Signal.js"}],"node_modules/tone/build/esm/source/oscillator/AMOscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AMOscillator = void 0;

var _tslib = require("tslib");

var _Gain = require("../../core/context/Gain");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _AudioToGain = require("../../signal/AudioToGain");

var _Multiply = require("../../signal/Multiply");

var _Source = require("../Source");

var _Oscillator = require("./Oscillator");

var _OscillatorInterface = require("./OscillatorInterface");

/**
 * An amplitude modulated oscillator node. It is implemented with
 * two oscillators, one which modulators the other's amplitude
 * through a gain node.
 * ```
 *    +-------------+       +----------+
 *    | Carrier Osc +>------> GainNode |
 *    +-------------+       |          +--->Output
 *                      +---> gain     |
 * +---------------+    |   +----------+
 * | Modulator Osc +>---+
 * +---------------+
 * ```
 * @example
 * return Tone.Offline(() => {
 * 	const amOsc = new Tone.AMOscillator(30, "sine", "square").toDestination().start();
 * }, 0.2, 1);
 * @category Source
 */
class AMOscillator extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(AMOscillator.getDefaults(), arguments, ["frequency", "type", "modulationType"]));
    this.name = "AMOscillator";
    /**
     * convert the -1,1 output to 0,1
     */

    this._modulationScale = new _AudioToGain.AudioToGain({
      context: this.context
    });
    /**
     * the node where the modulation happens
     */

    this._modulationNode = new _Gain.Gain({
      context: this.context
    });
    const options = (0, _Defaults.optionsFromArguments)(AMOscillator.getDefaults(), arguments, ["frequency", "type", "modulationType"]);
    this._carrier = new _Oscillator.Oscillator({
      context: this.context,
      detune: options.detune,
      frequency: options.frequency,
      onstop: () => this.onstop(this),
      phase: options.phase,
      type: options.type
    });
    this.frequency = this._carrier.frequency, this.detune = this._carrier.detune;
    this._modulator = new _Oscillator.Oscillator({
      context: this.context,
      phase: options.phase,
      type: options.modulationType
    });
    this.harmonicity = new _Multiply.Multiply({
      context: this.context,
      units: "positive",
      value: options.harmonicity
    }); // connections

    this.frequency.chain(this.harmonicity, this._modulator.frequency);

    this._modulator.chain(this._modulationScale, this._modulationNode.gain);

    this._carrier.chain(this._modulationNode, this.output);

    (0, _Interface.readOnly)(this, ["frequency", "detune", "harmonicity"]);
  }

  static getDefaults() {
    return Object.assign(_Oscillator.Oscillator.getDefaults(), {
      harmonicity: 1,
      modulationType: "square"
    });
  }
  /**
   * start the oscillator
   */


  _start(time) {
    this._modulator.start(time);

    this._carrier.start(time);
  }
  /**
   * stop the oscillator
   */


  _stop(time) {
    this._modulator.stop(time);

    this._carrier.stop(time);
  }

  _restart(time) {
    this._modulator.restart(time);

    this._carrier.restart(time);
  }
  /**
   * The type of the carrier oscillator
   */


  get type() {
    return this._carrier.type;
  }

  set type(type) {
    this._carrier.type = type;
  }

  get baseType() {
    return this._carrier.baseType;
  }

  set baseType(baseType) {
    this._carrier.baseType = baseType;
  }

  get partialCount() {
    return this._carrier.partialCount;
  }

  set partialCount(partialCount) {
    this._carrier.partialCount = partialCount;
  }
  /**
   * The type of the modulator oscillator
   */


  get modulationType() {
    return this._modulator.type;
  }

  set modulationType(type) {
    this._modulator.type = type;
  }

  get phase() {
    return this._carrier.phase;
  }

  set phase(phase) {
    this._carrier.phase = phase;
    this._modulator.phase = phase;
  }

  get partials() {
    return this._carrier.partials;
  }

  set partials(partials) {
    this._carrier.partials = partials;
  }

  asArray(length = 1024) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      return (0, _OscillatorInterface.generateWaveform)(this, length);
    });
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();
    this.frequency.dispose();
    this.detune.dispose();
    this.harmonicity.dispose();

    this._carrier.dispose();

    this._modulator.dispose();

    this._modulationNode.dispose();

    this._modulationScale.dispose();

    return this;
  }

}

exports.AMOscillator = AMOscillator;
},{"tslib":"node_modules/tslib/tslib.es6.js","../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../../signal/AudioToGain":"node_modules/tone/build/esm/signal/AudioToGain.js","../../signal/Multiply":"node_modules/tone/build/esm/signal/Multiply.js","../Source":"node_modules/tone/build/esm/source/Source.js","./Oscillator":"node_modules/tone/build/esm/source/oscillator/Oscillator.js","./OscillatorInterface":"node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js"}],"node_modules/tone/build/esm/source/oscillator/FMOscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FMOscillator = void 0;

var _tslib = require("tslib");

var _Gain = require("../../core/context/Gain");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _Multiply = require("../../signal/Multiply");

var _Signal = require("../../signal/Signal");

var _Source = require("../Source");

var _Oscillator = require("./Oscillator");

var _OscillatorInterface = require("./OscillatorInterface");

/**
 * FMOscillator implements a frequency modulation synthesis
 * ```
 *                                              +-------------+
 * +---------------+        +-------------+     | Carrier Osc |
 * | Modulator Osc +>-------> GainNode    |     |             +--->Output
 * +---------------+        |             +>----> frequency   |
 *                       +--> gain        |     +-------------+
 *                       |  +-------------+
 * +-----------------+   |
 * | modulationIndex +>--+
 * +-----------------+
 * ```
 *
 * @example
 * return Tone.Offline(() => {
 * 	const fmOsc = new Tone.FMOscillator({
 * 		frequency: 200,
 * 		type: "square",
 * 		modulationType: "triangle",
 * 		harmonicity: 0.2,
 * 		modulationIndex: 3
 * 	}).toDestination().start();
 * }, 0.1, 1);
 * @category Source
 */
class FMOscillator extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(FMOscillator.getDefaults(), arguments, ["frequency", "type", "modulationType"]));
    this.name = "FMOscillator";
    /**
     * the node where the modulation happens
     */

    this._modulationNode = new _Gain.Gain({
      context: this.context,
      gain: 0
    });
    const options = (0, _Defaults.optionsFromArguments)(FMOscillator.getDefaults(), arguments, ["frequency", "type", "modulationType"]);
    this._carrier = new _Oscillator.Oscillator({
      context: this.context,
      detune: options.detune,
      frequency: 0,
      onstop: () => this.onstop(this),
      phase: options.phase,
      type: options.type
    });
    this.detune = this._carrier.detune;
    this.frequency = new _Signal.Signal({
      context: this.context,
      units: "frequency",
      value: options.frequency
    });
    this._modulator = new _Oscillator.Oscillator({
      context: this.context,
      phase: options.phase,
      type: options.modulationType
    });
    this.harmonicity = new _Multiply.Multiply({
      context: this.context,
      units: "positive",
      value: options.harmonicity
    });
    this.modulationIndex = new _Multiply.Multiply({
      context: this.context,
      units: "positive",
      value: options.modulationIndex
    }); // connections

    this.frequency.connect(this._carrier.frequency);
    this.frequency.chain(this.harmonicity, this._modulator.frequency);
    this.frequency.chain(this.modulationIndex, this._modulationNode);

    this._modulator.connect(this._modulationNode.gain);

    this._modulationNode.connect(this._carrier.frequency);

    this._carrier.connect(this.output);

    this.detune.connect(this._modulator.detune);
    (0, _Interface.readOnly)(this, ["modulationIndex", "frequency", "detune", "harmonicity"]);
  }

  static getDefaults() {
    return Object.assign(_Oscillator.Oscillator.getDefaults(), {
      harmonicity: 1,
      modulationIndex: 2,
      modulationType: "square"
    });
  }
  /**
   * start the oscillator
   */


  _start(time) {
    this._modulator.start(time);

    this._carrier.start(time);
  }
  /**
   * stop the oscillator
   */


  _stop(time) {
    this._modulator.stop(time);

    this._carrier.stop(time);
  }

  _restart(time) {
    this._modulator.restart(time);

    this._carrier.restart(time);

    return this;
  }

  get type() {
    return this._carrier.type;
  }

  set type(type) {
    this._carrier.type = type;
  }

  get baseType() {
    return this._carrier.baseType;
  }

  set baseType(baseType) {
    this._carrier.baseType = baseType;
  }

  get partialCount() {
    return this._carrier.partialCount;
  }

  set partialCount(partialCount) {
    this._carrier.partialCount = partialCount;
  }
  /**
   * The type of the modulator oscillator
   */


  get modulationType() {
    return this._modulator.type;
  }

  set modulationType(type) {
    this._modulator.type = type;
  }

  get phase() {
    return this._carrier.phase;
  }

  set phase(phase) {
    this._carrier.phase = phase;
    this._modulator.phase = phase;
  }

  get partials() {
    return this._carrier.partials;
  }

  set partials(partials) {
    this._carrier.partials = partials;
  }

  asArray(length = 1024) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      return (0, _OscillatorInterface.generateWaveform)(this, length);
    });
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();
    this.frequency.dispose();
    this.harmonicity.dispose();

    this._carrier.dispose();

    this._modulator.dispose();

    this._modulationNode.dispose();

    this.modulationIndex.dispose();
    return this;
  }

}

exports.FMOscillator = FMOscillator;
},{"tslib":"node_modules/tslib/tslib.es6.js","../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../../signal/Multiply":"node_modules/tone/build/esm/signal/Multiply.js","../../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../Source":"node_modules/tone/build/esm/source/Source.js","./Oscillator":"node_modules/tone/build/esm/source/oscillator/Oscillator.js","./OscillatorInterface":"node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js"}],"node_modules/tone/build/esm/source/oscillator/PulseOscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PulseOscillator = void 0;

var _tslib = require("tslib");

var _Gain = require("../../core/context/Gain");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _Signal = require("../../signal/Signal");

var _WaveShaper = require("../../signal/WaveShaper");

var _Source = require("../Source");

var _Oscillator = require("./Oscillator");

var _OscillatorInterface = require("./OscillatorInterface");

/**
 * PulseOscillator is an oscillator with control over pulse width,
 * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is
 * a square wave.
 * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).
 * ```
 *    width = -0.25        width = 0.0          width = 0.25
 *
 *   +-----+            +-------+       +    +-------+     +-+
 *   |     |            |       |       |            |     |
 *   |     |            |       |       |            |     |
 * +-+     +-------+    +       +-------+            +-----+
 *
 *
 *    width = -0.5                              width = 0.5
 *
 *     +---+                                 +-------+   +---+
 *     |   |                                         |   |
 *     |   |                                         |   |
 * +---+   +-------+                                 +---+
 *
 *
 *    width = -0.75                             width = 0.75
 *
 *       +-+                                 +-------+ +-----+
 *       | |                                         | |
 *       | |                                         | |
 * +-----+ +-------+                                 +-+
 * ```
 * @example
 * return Tone.Offline(() => {
 * 	const pulse = new Tone.PulseOscillator(50, 0.4).toDestination().start();
 * }, 0.1, 1);
 * @category Source
 */
class PulseOscillator extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(PulseOscillator.getDefaults(), arguments, ["frequency", "width"]));
    this.name = "PulseOscillator";
    /**
     * gate the width amount
     */

    this._widthGate = new _Gain.Gain({
      context: this.context,
      gain: 0
    });
    /**
     * Threshold the signal to turn it into a square
     */

    this._thresh = new _WaveShaper.WaveShaper({
      context: this.context,
      mapping: val => val <= 0 ? -1 : 1
    });
    const options = (0, _Defaults.optionsFromArguments)(PulseOscillator.getDefaults(), arguments, ["frequency", "width"]);
    this.width = new _Signal.Signal({
      context: this.context,
      units: "audioRange",
      value: options.width
    });
    this._triangle = new _Oscillator.Oscillator({
      context: this.context,
      detune: options.detune,
      frequency: options.frequency,
      onstop: () => this.onstop(this),
      phase: options.phase,
      type: "triangle"
    });
    this.frequency = this._triangle.frequency;
    this.detune = this._triangle.detune; // connections

    this._triangle.chain(this._thresh, this.output);

    this.width.chain(this._widthGate, this._thresh);
    (0, _Interface.readOnly)(this, ["width", "frequency", "detune"]);
  }

  static getDefaults() {
    return Object.assign(_Source.Source.getDefaults(), {
      detune: 0,
      frequency: 440,
      phase: 0,
      type: "pulse",
      width: 0.2
    });
  }
  /**
   * start the oscillator
   */


  _start(time) {
    time = this.toSeconds(time);

    this._triangle.start(time);

    this._widthGate.gain.setValueAtTime(1, time);
  }
  /**
   * stop the oscillator
   */


  _stop(time) {
    time = this.toSeconds(time);

    this._triangle.stop(time); // the width is still connected to the output.
    // that needs to be stopped also


    this._widthGate.gain.cancelScheduledValues(time);

    this._widthGate.gain.setValueAtTime(0, time);
  }

  _restart(time) {
    this._triangle.restart(time);

    this._widthGate.gain.cancelScheduledValues(time);

    this._widthGate.gain.setValueAtTime(1, time);
  }
  /**
   * The phase of the oscillator in degrees.
   */


  get phase() {
    return this._triangle.phase;
  }

  set phase(phase) {
    this._triangle.phase = phase;
  }
  /**
   * The type of the oscillator. Always returns "pulse".
   */


  get type() {
    return "pulse";
  }
  /**
   * The baseType of the oscillator. Always returns "pulse".
   */


  get baseType() {
    return "pulse";
  }
  /**
   * The partials of the waveform. Cannot set partials for this waveform type
   */


  get partials() {
    return [];
  }
  /**
   * No partials for this waveform type.
   */


  get partialCount() {
    return 0;
  }
  /**
   * *Internal use* The carrier oscillator type is fed through the
   * waveshaper node to create the pulse. Using different carrier oscillators
   * changes oscillator's behavior.
   */


  set carrierType(type) {
    this._triangle.type = type;
  }

  asArray(length = 1024) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      return (0, _OscillatorInterface.generateWaveform)(this, length);
    });
  }
  /**
   * Clean up method.
   */


  dispose() {
    super.dispose();

    this._triangle.dispose();

    this.width.dispose();

    this._widthGate.dispose();

    this._thresh.dispose();

    return this;
  }

}

exports.PulseOscillator = PulseOscillator;
},{"tslib":"node_modules/tslib/tslib.es6.js","../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../../signal/WaveShaper":"node_modules/tone/build/esm/signal/WaveShaper.js","../Source":"node_modules/tone/build/esm/source/Source.js","./Oscillator":"node_modules/tone/build/esm/source/oscillator/Oscillator.js","./OscillatorInterface":"node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js"}],"node_modules/tone/build/esm/source/oscillator/FatOscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FatOscillator = void 0;

var _tslib = require("tslib");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _Signal = require("../../signal/Signal");

var _Source = require("../Source");

var _Oscillator = require("./Oscillator");

var _OscillatorInterface = require("./OscillatorInterface");

var _Debug = require("../../core/util/Debug");

/**
 * FatOscillator is an array of oscillators with detune spread between the oscillators
 * @example
 * const fatOsc = new Tone.FatOscillator("Ab3", "sawtooth", 40).toDestination().start();
 * @category Source
 */
class FatOscillator extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(FatOscillator.getDefaults(), arguments, ["frequency", "type", "spread"]));
    this.name = "FatOscillator";
    /**
     * The array of oscillators
     */

    this._oscillators = [];
    const options = (0, _Defaults.optionsFromArguments)(FatOscillator.getDefaults(), arguments, ["frequency", "type", "spread"]);
    this.frequency = new _Signal.Signal({
      context: this.context,
      units: "frequency",
      value: options.frequency
    });
    this.detune = new _Signal.Signal({
      context: this.context,
      units: "cents",
      value: options.detune
    });
    this._spread = options.spread;
    this._type = options.type;
    this._phase = options.phase;
    this._partials = options.partials;
    this._partialCount = options.partialCount; // set the count initially

    this.count = options.count;
    (0, _Interface.readOnly)(this, ["frequency", "detune"]);
  }

  static getDefaults() {
    return Object.assign(_Oscillator.Oscillator.getDefaults(), {
      count: 3,
      spread: 20,
      type: "sawtooth"
    });
  }
  /**
   * start the oscillator
   */


  _start(time) {
    time = this.toSeconds(time);

    this._forEach(osc => osc.start(time));
  }
  /**
   * stop the oscillator
   */


  _stop(time) {
    time = this.toSeconds(time);

    this._forEach(osc => osc.stop(time));
  }

  _restart(time) {
    this._forEach(osc => osc.restart(time));
  }
  /**
   * Iterate over all of the oscillators
   */


  _forEach(iterator) {
    for (let i = 0; i < this._oscillators.length; i++) {
      iterator(this._oscillators[i], i);
    }
  }
  /**
   * The type of the oscillator
   */


  get type() {
    return this._type;
  }

  set type(type) {
    this._type = type;

    this._forEach(osc => osc.type = type);
  }
  /**
   * The detune spread between the oscillators. If "count" is
   * set to 3 oscillators and the "spread" is set to 40,
   * the three oscillators would be detuned like this: [-20, 0, 20]
   * for a total detune spread of 40 cents.
   * @example
   * const fatOsc = new Tone.FatOscillator().toDestination().start();
   * fatOsc.spread = 70;
   */


  get spread() {
    return this._spread;
  }

  set spread(spread) {
    this._spread = spread;

    if (this._oscillators.length > 1) {
      const start = -spread / 2;
      const step = spread / (this._oscillators.length - 1);

      this._forEach((osc, i) => osc.detune.value = start + step * i);
    }
  }
  /**
   * The number of detuned oscillators. Must be an integer greater than 1.
   * @example
   * const fatOsc = new Tone.FatOscillator("C#3", "sawtooth").toDestination().start();
   * // use 4 sawtooth oscillators
   * fatOsc.count = 4;
   */


  get count() {
    return this._oscillators.length;
  }

  set count(count) {
    (0, _Debug.assertRange)(count, 1);

    if (this._oscillators.length !== count) {
      // dispose the previous oscillators
      this._forEach(osc => osc.dispose());

      this._oscillators = [];

      for (let i = 0; i < count; i++) {
        const osc = new _Oscillator.Oscillator({
          context: this.context,
          volume: -6 - count * 1.1,
          type: this._type,
          phase: this._phase + i / count * 360,
          partialCount: this._partialCount,
          onstop: i === 0 ? () => this.onstop(this) : _Interface.noOp
        });

        if (this.type === "custom") {
          osc.partials = this._partials;
        }

        this.frequency.connect(osc.frequency);
        this.detune.connect(osc.detune);
        osc.detune.overridden = false;
        osc.connect(this.output);
        this._oscillators[i] = osc;
      } // set the spread


      this.spread = this._spread;

      if (this.state === "started") {
        this._forEach(osc => osc.start());
      }
    }
  }

  get phase() {
    return this._phase;
  }

  set phase(phase) {
    this._phase = phase;

    this._forEach((osc, i) => osc.phase = this._phase + i / this.count * 360);
  }

  get baseType() {
    return this._oscillators[0].baseType;
  }

  set baseType(baseType) {
    this._forEach(osc => osc.baseType = baseType);

    this._type = this._oscillators[0].type;
  }

  get partials() {
    return this._oscillators[0].partials;
  }

  set partials(partials) {
    this._partials = partials;
    this._partialCount = this._partials.length;

    if (partials.length) {
      this._type = "custom";

      this._forEach(osc => osc.partials = partials);
    }
  }

  get partialCount() {
    return this._oscillators[0].partialCount;
  }

  set partialCount(partialCount) {
    this._partialCount = partialCount;

    this._forEach(osc => osc.partialCount = partialCount);

    this._type = this._oscillators[0].type;
  }

  asArray(length = 1024) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      return (0, _OscillatorInterface.generateWaveform)(this, length);
    });
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();
    this.frequency.dispose();
    this.detune.dispose();

    this._forEach(osc => osc.dispose());

    return this;
  }

}

exports.FatOscillator = FatOscillator;
},{"tslib":"node_modules/tslib/tslib.es6.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../Source":"node_modules/tone/build/esm/source/Source.js","./Oscillator":"node_modules/tone/build/esm/source/oscillator/Oscillator.js","./OscillatorInterface":"node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js","../../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/source/oscillator/PWMOscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PWMOscillator = void 0;

var _tslib = require("tslib");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _Multiply = require("../../signal/Multiply");

var _Source = require("../Source");

var _Oscillator = require("./Oscillator");

var _OscillatorInterface = require("./OscillatorInterface");

var _PulseOscillator = require("./PulseOscillator");

/**
 * PWMOscillator modulates the width of a Tone.PulseOscillator
 * at the modulationFrequency. This has the effect of continuously
 * changing the timbre of the oscillator by altering the harmonics
 * generated.
 * @example
 * return Tone.Offline(() => {
 * 	const pwm = new Tone.PWMOscillator(60, 0.3).toDestination().start();
 * }, 0.1, 1);
 * @category Source
 */
class PWMOscillator extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(PWMOscillator.getDefaults(), arguments, ["frequency", "modulationFrequency"]));
    this.name = "PWMOscillator";
    this.sourceType = "pwm";
    /**
     * Scale the oscillator so it doesn't go silent
     * at the extreme values.
     */

    this._scale = new _Multiply.Multiply({
      context: this.context,
      value: 2
    });
    const options = (0, _Defaults.optionsFromArguments)(PWMOscillator.getDefaults(), arguments, ["frequency", "modulationFrequency"]);
    this._pulse = new _PulseOscillator.PulseOscillator({
      context: this.context,
      frequency: options.modulationFrequency
    }); // change the pulse oscillator type

    this._pulse.carrierType = "sine";
    this.modulationFrequency = this._pulse.frequency;
    this._modulator = new _Oscillator.Oscillator({
      context: this.context,
      detune: options.detune,
      frequency: options.frequency,
      onstop: () => this.onstop(this),
      phase: options.phase
    });
    this.frequency = this._modulator.frequency;
    this.detune = this._modulator.detune; // connections

    this._modulator.chain(this._scale, this._pulse.width);

    this._pulse.connect(this.output);

    (0, _Interface.readOnly)(this, ["modulationFrequency", "frequency", "detune"]);
  }

  static getDefaults() {
    return Object.assign(_Source.Source.getDefaults(), {
      detune: 0,
      frequency: 440,
      modulationFrequency: 0.4,
      phase: 0,
      type: "pwm"
    });
  }
  /**
   * start the oscillator
   */


  _start(time) {
    time = this.toSeconds(time);

    this._modulator.start(time);

    this._pulse.start(time);
  }
  /**
   * stop the oscillator
   */


  _stop(time) {
    time = this.toSeconds(time);

    this._modulator.stop(time);

    this._pulse.stop(time);
  }
  /**
   * restart the oscillator
   */


  _restart(time) {
    this._modulator.restart(time);

    this._pulse.restart(time);
  }
  /**
   * The type of the oscillator. Always returns "pwm".
   */


  get type() {
    return "pwm";
  }
  /**
   * The baseType of the oscillator. Always returns "pwm".
   */


  get baseType() {
    return "pwm";
  }
  /**
   * The partials of the waveform. Cannot set partials for this waveform type
   */


  get partials() {
    return [];
  }
  /**
   * No partials for this waveform type.
   */


  get partialCount() {
    return 0;
  }
  /**
   * The phase of the oscillator in degrees.
   */


  get phase() {
    return this._modulator.phase;
  }

  set phase(phase) {
    this._modulator.phase = phase;
  }

  asArray(length = 1024) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      return (0, _OscillatorInterface.generateWaveform)(this, length);
    });
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    this._pulse.dispose();

    this._scale.dispose();

    this._modulator.dispose();

    return this;
  }

}

exports.PWMOscillator = PWMOscillator;
},{"tslib":"node_modules/tslib/tslib.es6.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../../signal/Multiply":"node_modules/tone/build/esm/signal/Multiply.js","../Source":"node_modules/tone/build/esm/source/Source.js","./Oscillator":"node_modules/tone/build/esm/source/oscillator/Oscillator.js","./OscillatorInterface":"node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js","./PulseOscillator":"node_modules/tone/build/esm/source/oscillator/PulseOscillator.js"}],"node_modules/tone/build/esm/source/oscillator/OmniOscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OmniOscillator = void 0;

var _tslib = require("tslib");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _TypeCheck = require("../../core/util/TypeCheck");

var _Signal = require("../../signal/Signal");

var _Source = require("../Source");

var _AMOscillator = require("./AMOscillator");

var _FatOscillator = require("./FatOscillator");

var _FMOscillator = require("./FMOscillator");

var _Oscillator = require("./Oscillator");

var _OscillatorInterface = require("./OscillatorInterface");

var _PulseOscillator = require("./PulseOscillator");

var _PWMOscillator = require("./PWMOscillator");

const OmniOscillatorSourceMap = {
  am: _AMOscillator.AMOscillator,
  fat: _FatOscillator.FatOscillator,
  fm: _FMOscillator.FMOscillator,
  oscillator: _Oscillator.Oscillator,
  pulse: _PulseOscillator.PulseOscillator,
  pwm: _PWMOscillator.PWMOscillator
};
/**
 * OmniOscillator aggregates all of the oscillator types into one.
 * @example
 * return Tone.Offline(() => {
 * 	const omniOsc = new Tone.OmniOscillator("C#4", "pwm").toDestination().start();
 * }, 0.1, 1);
 * @category Source
 */

class OmniOscillator extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(OmniOscillator.getDefaults(), arguments, ["frequency", "type"]));
    this.name = "OmniOscillator";
    const options = (0, _Defaults.optionsFromArguments)(OmniOscillator.getDefaults(), arguments, ["frequency", "type"]);
    this.frequency = new _Signal.Signal({
      context: this.context,
      units: "frequency",
      value: options.frequency
    });
    this.detune = new _Signal.Signal({
      context: this.context,
      units: "cents",
      value: options.detune
    });
    (0, _Interface.readOnly)(this, ["frequency", "detune"]); // set the options

    this.set(options);
  }

  static getDefaults() {
    return Object.assign(_Oscillator.Oscillator.getDefaults(), _FMOscillator.FMOscillator.getDefaults(), _AMOscillator.AMOscillator.getDefaults(), _FatOscillator.FatOscillator.getDefaults(), _PulseOscillator.PulseOscillator.getDefaults(), _PWMOscillator.PWMOscillator.getDefaults());
  }
  /**
   * start the oscillator
   */


  _start(time) {
    this._oscillator.start(time);
  }
  /**
   * start the oscillator
   */


  _stop(time) {
    this._oscillator.stop(time);
  }

  _restart(time) {
    this._oscillator.restart(time);

    return this;
  }
  /**
   * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or
   * prefix the basic types with "fm", "am", or "fat" to use the FMOscillator, AMOscillator or FatOscillator
   * types. The oscillator could also be set to "pwm" or "pulse". All of the parameters of the
   * oscillator's class are accessible when the oscillator is set to that type, but throws an error
   * when it's not.
   * @example
   * const omniOsc = new Tone.OmniOscillator().toDestination().start();
   * omniOsc.type = "pwm";
   * // modulationFrequency is parameter which is available
   * // only when the type is "pwm".
   * omniOsc.modulationFrequency.value = 0.5;
   */


  get type() {
    let prefix = "";

    if (["am", "fm", "fat"].some(p => this._sourceType === p)) {
      prefix = this._sourceType;
    }

    return prefix + this._oscillator.type;
  }

  set type(type) {
    if (type.substr(0, 2) === "fm") {
      this._createNewOscillator("fm");

      this._oscillator = this._oscillator;
      this._oscillator.type = type.substr(2);
    } else if (type.substr(0, 2) === "am") {
      this._createNewOscillator("am");

      this._oscillator = this._oscillator;
      this._oscillator.type = type.substr(2);
    } else if (type.substr(0, 3) === "fat") {
      this._createNewOscillator("fat");

      this._oscillator = this._oscillator;
      this._oscillator.type = type.substr(3);
    } else if (type === "pwm") {
      this._createNewOscillator("pwm");

      this._oscillator = this._oscillator;
    } else if (type === "pulse") {
      this._createNewOscillator("pulse");
    } else {
      this._createNewOscillator("oscillator");

      this._oscillator = this._oscillator;
      this._oscillator.type = type;
    }
  }
  /**
   * The value is an empty array when the type is not "custom".
   * This is not available on "pwm" and "pulse" oscillator types.
   * See [[Oscillator.partials]]
   */


  get partials() {
    return this._oscillator.partials;
  }

  set partials(partials) {
    if (!this._getOscType(this._oscillator, "pulse") && !this._getOscType(this._oscillator, "pwm")) {
      this._oscillator.partials = partials;
    }
  }

  get partialCount() {
    return this._oscillator.partialCount;
  }

  set partialCount(partialCount) {
    if (!this._getOscType(this._oscillator, "pulse") && !this._getOscType(this._oscillator, "pwm")) {
      this._oscillator.partialCount = partialCount;
    }
  }

  set(props) {
    // make sure the type is set first
    if (Reflect.has(props, "type") && props.type) {
      this.type = props.type;
    } // then set the rest


    super.set(props);
    return this;
  }
  /**
   * connect the oscillator to the frequency and detune signals
   */


  _createNewOscillator(oscType) {
    if (oscType !== this._sourceType) {
      this._sourceType = oscType;
      const OscConstructor = OmniOscillatorSourceMap[oscType]; // short delay to avoid clicks on the change

      const now = this.now();

      if (this._oscillator) {
        const oldOsc = this._oscillator;
        oldOsc.stop(now); // dispose the old one

        this.context.setTimeout(() => oldOsc.dispose(), this.blockTime);
      }

      this._oscillator = new OscConstructor({
        context: this.context
      });
      this.frequency.connect(this._oscillator.frequency);
      this.detune.connect(this._oscillator.detune);

      this._oscillator.connect(this.output);

      this._oscillator.onstop = () => this.onstop(this);

      if (this.state === "started") {
        this._oscillator.start(now);
      }
    }
  }

  get phase() {
    return this._oscillator.phase;
  }

  set phase(phase) {
    this._oscillator.phase = phase;
  }
  /**
   * The source type of the oscillator.
   * @example
   * const omniOsc = new Tone.OmniOscillator(440, "fmsquare");
   * console.log(omniOsc.sourceType); // 'fm'
   */


  get sourceType() {
    return this._sourceType;
  }

  set sourceType(sType) {
    // the basetype defaults to sine
    let baseType = "sine";

    if (this._oscillator.type !== "pwm" && this._oscillator.type !== "pulse") {
      baseType = this._oscillator.type;
    } // set the type


    if (sType === "fm") {
      this.type = "fm" + baseType;
    } else if (sType === "am") {
      this.type = "am" + baseType;
    } else if (sType === "fat") {
      this.type = "fat" + baseType;
    } else if (sType === "oscillator") {
      this.type = baseType;
    } else if (sType === "pulse") {
      this.type = "pulse";
    } else if (sType === "pwm") {
      this.type = "pwm";
    }
  }

  _getOscType(osc, sourceType) {
    return osc instanceof OmniOscillatorSourceMap[sourceType];
  }
  /**
   * The base type of the oscillator. See [[Oscillator.baseType]]
   * @example
   * const omniOsc = new Tone.OmniOscillator(440, "fmsquare4");
   * console.log(omniOsc.sourceType, omniOsc.baseType, omniOsc.partialCount);
   */


  get baseType() {
    return this._oscillator.baseType;
  }

  set baseType(baseType) {
    if (!this._getOscType(this._oscillator, "pulse") && !this._getOscType(this._oscillator, "pwm") && baseType !== "pulse" && baseType !== "pwm") {
      this._oscillator.baseType = baseType;
    }
  }
  /**
   * The width of the oscillator when sourceType === "pulse".
   * See [[PWMOscillator.width]]
   */


  get width() {
    if (this._getOscType(this._oscillator, "pulse")) {
      return this._oscillator.width;
    } else {
      return undefined;
    }
  }
  /**
   * The number of detuned oscillators when sourceType === "fat".
   * See [[FatOscillator.count]]
   */


  get count() {
    if (this._getOscType(this._oscillator, "fat")) {
      return this._oscillator.count;
    } else {
      return undefined;
    }
  }

  set count(count) {
    if (this._getOscType(this._oscillator, "fat") && (0, _TypeCheck.isNumber)(count)) {
      this._oscillator.count = count;
    }
  }
  /**
   * The detune spread between the oscillators when sourceType === "fat".
   * See [[FatOscillator.count]]
   */


  get spread() {
    if (this._getOscType(this._oscillator, "fat")) {
      return this._oscillator.spread;
    } else {
      return undefined;
    }
  }

  set spread(spread) {
    if (this._getOscType(this._oscillator, "fat") && (0, _TypeCheck.isNumber)(spread)) {
      this._oscillator.spread = spread;
    }
  }
  /**
   * The type of the modulator oscillator. Only if the oscillator is set to "am" or "fm" types.
   * See [[AMOscillator]] or [[FMOscillator]]
   */


  get modulationType() {
    if (this._getOscType(this._oscillator, "fm") || this._getOscType(this._oscillator, "am")) {
      return this._oscillator.modulationType;
    } else {
      return undefined;
    }
  }

  set modulationType(mType) {
    if ((this._getOscType(this._oscillator, "fm") || this._getOscType(this._oscillator, "am")) && (0, _TypeCheck.isString)(mType)) {
      this._oscillator.modulationType = mType;
    }
  }
  /**
   * The modulation index when the sourceType === "fm"
   * See [[FMOscillator]].
   */


  get modulationIndex() {
    if (this._getOscType(this._oscillator, "fm")) {
      return this._oscillator.modulationIndex;
    } else {
      return undefined;
    }
  }
  /**
   * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.
   * See [[AMOscillator]] or [[FMOscillator]]
   */


  get harmonicity() {
    if (this._getOscType(this._oscillator, "fm") || this._getOscType(this._oscillator, "am")) {
      return this._oscillator.harmonicity;
    } else {
      return undefined;
    }
  }
  /**
   * The modulationFrequency Signal of the oscillator when sourceType === "pwm"
   * see [[PWMOscillator]]
   * @min 0.1
   * @max 5
   */


  get modulationFrequency() {
    if (this._getOscType(this._oscillator, "pwm")) {
      return this._oscillator.modulationFrequency;
    } else {
      return undefined;
    }
  }

  asArray(length = 1024) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      return (0, _OscillatorInterface.generateWaveform)(this, length);
    });
  }

  dispose() {
    super.dispose();
    this.detune.dispose();
    this.frequency.dispose();

    this._oscillator.dispose();

    return this;
  }

}

exports.OmniOscillator = OmniOscillator;
},{"tslib":"node_modules/tslib/tslib.es6.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../../core/util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","../../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../Source":"node_modules/tone/build/esm/source/Source.js","./AMOscillator":"node_modules/tone/build/esm/source/oscillator/AMOscillator.js","./FatOscillator":"node_modules/tone/build/esm/source/oscillator/FatOscillator.js","./FMOscillator":"node_modules/tone/build/esm/source/oscillator/FMOscillator.js","./Oscillator":"node_modules/tone/build/esm/source/oscillator/Oscillator.js","./OscillatorInterface":"node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js","./PulseOscillator":"node_modules/tone/build/esm/source/oscillator/PulseOscillator.js","./PWMOscillator":"node_modules/tone/build/esm/source/oscillator/PWMOscillator.js"}],"node_modules/tone/build/esm/signal/Add.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Add = void 0;

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Gain = require("../core/context/Gain");

var _Defaults = require("../core/util/Defaults");

var _Signal = require("./Signal");

/**
 * Add a signal and a number or two signals. When no value is
 * passed into the constructor, Tone.Add will sum input and `addend`
 * If a value is passed into the constructor, the it will be added to the input.
 *
 * @example
 * return Tone.Offline(() => {
 * 	const add = new Tone.Add(2).toDestination();
 * 	add.addend.setValueAtTime(1, 0.2);
 * 	const signal = new Tone.Signal(2);
 * 	// add a signal and a scalar
 * 	signal.connect(add);
 * 	signal.setValueAtTime(1, 0.1);
 * }, 0.5, 1);
 * @category Signal
 */
class Add extends _Signal.Signal {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(Add.getDefaults(), arguments, ["value"])));
    this.override = false;
    this.name = "Add";
    /**
     * the summing node
     */

    this._sum = new _Gain.Gain({
      context: this.context
    });
    this.input = this._sum;
    this.output = this._sum;
    /**
     * The value which is added to the input signal
     */

    this.addend = this._param;
    (0, _ToneAudioNode.connectSeries)(this._constantSource, this._sum);
  }

  static getDefaults() {
    return Object.assign(_Signal.Signal.getDefaults(), {
      value: 0
    });
  }

  dispose() {
    super.dispose();

    this._sum.dispose();

    return this;
  }

}

exports.Add = Add;
},{"../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./Signal":"node_modules/tone/build/esm/signal/Signal.js"}],"node_modules/tone/build/esm/signal/Scale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Scale = void 0;

var _Defaults = require("../core/util/Defaults");

var _Add = require("./Add");

var _Multiply = require("./Multiply");

var _SignalOperator = require("./SignalOperator");

/**
 * Performs a linear scaling on an input signal.
 * Scales a NormalRange input to between
 * outputMin and outputMax.
 *
 * @example
 * const scale = new Tone.Scale(50, 100);
 * const signal = new Tone.Signal(0.5).connect(scale);
 * // the output of scale equals 75
 * @category Signal
 */
class Scale extends _SignalOperator.SignalOperator {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(Scale.getDefaults(), arguments, ["min", "max"])));
    this.name = "Scale";
    const options = (0, _Defaults.optionsFromArguments)(Scale.getDefaults(), arguments, ["min", "max"]);
    this._mult = this.input = new _Multiply.Multiply({
      context: this.context,
      value: options.max - options.min
    });
    this._add = this.output = new _Add.Add({
      context: this.context,
      value: options.min
    });
    this._min = options.min;
    this._max = options.max;
    this.input.connect(this.output);
  }

  static getDefaults() {
    return Object.assign(_SignalOperator.SignalOperator.getDefaults(), {
      max: 1,
      min: 0
    });
  }
  /**
   * The minimum output value. This number is output when the value input value is 0.
   */


  get min() {
    return this._min;
  }

  set min(min) {
    this._min = min;

    this._setRange();
  }
  /**
   * The maximum output value. This number is output when the value input value is 1.
   */


  get max() {
    return this._max;
  }

  set max(max) {
    this._max = max;

    this._setRange();
  }
  /**
   * set the values
   */


  _setRange() {
    this._add.value = this._min;
    this._mult.value = this._max - this._min;
  }

  dispose() {
    super.dispose();

    this._add.dispose();

    this._mult.dispose();

    return this;
  }

}

exports.Scale = Scale;
},{"../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./Add":"node_modules/tone/build/esm/signal/Add.js","./Multiply":"node_modules/tone/build/esm/signal/Multiply.js","./SignalOperator":"node_modules/tone/build/esm/signal/SignalOperator.js"}],"node_modules/tone/build/esm/signal/Zero.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Zero = void 0;

var _Gain = require("../core/context/Gain");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Defaults = require("../core/util/Defaults");

var _SignalOperator = require("./SignalOperator");

/**
 * Tone.Zero outputs 0's at audio-rate. The reason this has to be
 * it's own class is that many browsers optimize out Tone.Signal
 * with a value of 0 and will not process nodes further down the graph.
 * @category Signal
 */
class Zero extends _SignalOperator.SignalOperator {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(Zero.getDefaults(), arguments)));
    this.name = "Zero";
    /**
     * The gain node which connects the constant source to the output
     */

    this._gain = new _Gain.Gain({
      context: this.context
    });
    /**
     * Only outputs 0
     */

    this.output = this._gain;
    /**
     * no input node
     */

    this.input = undefined;
    (0, _ToneAudioNode.connect)(this.context.getConstant(0), this._gain);
  }
  /**
   * clean up
   */


  dispose() {
    super.dispose();
    (0, _ToneAudioNode.disconnect)(this.context.getConstant(0), this._gain);
    return this;
  }

}

exports.Zero = Zero;
},{"../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./SignalOperator":"node_modules/tone/build/esm/signal/SignalOperator.js"}],"node_modules/tone/build/esm/source/oscillator/LFO.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LFO = void 0;

var _Gain = require("../../core/context/Gain");

var _Param = require("../../core/context/Param");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _AudioToGain = require("../../signal/AudioToGain");

var _Scale = require("../../signal/Scale");

var _Signal = require("../../signal/Signal");

var _Zero = require("../../signal/Zero");

var _Oscillator = require("./Oscillator");

/**
 * LFO stands for low frequency oscillator. LFO produces an output signal
 * which can be attached to an AudioParam or Tone.Signal
 * in order to modulate that parameter with an oscillator. The LFO can
 * also be synced to the transport to start/stop and change when the tempo changes.
 * @example
 * return Tone.Offline(() => {
 * 	const lfo = new Tone.LFO("4n", 400, 4000).start().toDestination();
 * }, 0.5, 1);
 * @category Source
 */
class LFO extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(LFO.getDefaults(), arguments, ["frequency", "min", "max"]));
    this.name = "LFO";
    /**
     * The value that the LFO outputs when it's stopped
     */

    this._stoppedValue = 0;
    /**
     * A private placeholder for the units
     */

    this._units = "number";
    /**
     * If the input value is converted using the [[units]]
     */

    this.convert = true;
    /**
     * Private methods borrowed from Param
     */
    // @ts-ignore

    this._fromType = _Param.Param.prototype._fromType; // @ts-ignore

    this._toType = _Param.Param.prototype._toType; // @ts-ignore

    this._is = _Param.Param.prototype._is; // @ts-ignore

    this._clampValue = _Param.Param.prototype._clampValue;
    const options = (0, _Defaults.optionsFromArguments)(LFO.getDefaults(), arguments, ["frequency", "min", "max"]);
    this._oscillator = new _Oscillator.Oscillator(options);
    this.frequency = this._oscillator.frequency;
    this._amplitudeGain = new _Gain.Gain({
      context: this.context,
      gain: options.amplitude,
      units: "normalRange"
    });
    this.amplitude = this._amplitudeGain.gain;
    this._stoppedSignal = new _Signal.Signal({
      context: this.context,
      units: "audioRange",
      value: 0
    });
    this._zeros = new _Zero.Zero({
      context: this.context
    });
    this._a2g = new _AudioToGain.AudioToGain({
      context: this.context
    });
    this._scaler = this.output = new _Scale.Scale({
      context: this.context,
      max: options.max,
      min: options.min
    });
    this.units = options.units;
    this.min = options.min;
    this.max = options.max; // connect it up

    this._oscillator.chain(this._amplitudeGain, this._a2g, this._scaler);

    this._zeros.connect(this._a2g);

    this._stoppedSignal.connect(this._a2g);

    (0, _Interface.readOnly)(this, ["amplitude", "frequency"]);
    this.phase = options.phase;
  }

  static getDefaults() {
    return Object.assign(_Oscillator.Oscillator.getDefaults(), {
      amplitude: 1,
      frequency: "4n",
      max: 1,
      min: 0,
      type: "sine",
      units: "number"
    });
  }
  /**
   * Start the LFO.
   * @param time The time the LFO will start
   */


  start(time) {
    time = this.toSeconds(time);

    this._stoppedSignal.setValueAtTime(0, time);

    this._oscillator.start(time);

    return this;
  }
  /**
   * Stop the LFO.
   * @param  time The time the LFO will stop
   */


  stop(time) {
    time = this.toSeconds(time);

    this._stoppedSignal.setValueAtTime(this._stoppedValue, time);

    this._oscillator.stop(time);

    return this;
  }
  /**
   * Sync the start/stop/pause to the transport
   * and the frequency to the bpm of the transport
   * @example
   * const lfo = new Tone.LFO("8n");
   * lfo.sync().start(0);
   * // the rate of the LFO will always be an eighth note, even as the tempo changes
   */


  sync() {
    this._oscillator.sync();

    this._oscillator.syncFrequency();

    return this;
  }
  /**
   * unsync the LFO from transport control
   */


  unsync() {
    this._oscillator.unsync();

    this._oscillator.unsyncFrequency();

    return this;
  }
  /**
   * After the oscillator waveform is updated, reset the `_stoppedSignal` value to match the updated waveform
   */


  _setStoppedValue() {
    this._stoppedValue = this._oscillator.getInitialValue();
    this._stoppedSignal.value = this._stoppedValue;
  }
  /**
   * The minimum output of the LFO.
   */


  get min() {
    return this._toType(this._scaler.min);
  }

  set min(min) {
    min = this._fromType(min);
    this._scaler.min = min;
  }
  /**
   * The maximum output of the LFO.
   */


  get max() {
    return this._toType(this._scaler.max);
  }

  set max(max) {
    max = this._fromType(max);
    this._scaler.max = max;
  }
  /**
   * The type of the oscillator: See [[Oscillator.type]]
   */


  get type() {
    return this._oscillator.type;
  }

  set type(type) {
    this._oscillator.type = type;

    this._setStoppedValue();
  }
  /**
   * The oscillator's partials array: See [[Oscillator.partials]]
   */


  get partials() {
    return this._oscillator.partials;
  }

  set partials(partials) {
    this._oscillator.partials = partials;

    this._setStoppedValue();
  }
  /**
   * The phase of the LFO.
   */


  get phase() {
    return this._oscillator.phase;
  }

  set phase(phase) {
    this._oscillator.phase = phase;

    this._setStoppedValue();
  }
  /**
   * The output units of the LFO.
   */


  get units() {
    return this._units;
  }

  set units(val) {
    const currentMin = this.min;
    const currentMax = this.max; // convert the min and the max

    this._units = val;
    this.min = currentMin;
    this.max = currentMax;
  }
  /**
   * Returns the playback state of the source, either "started" or "stopped".
   */


  get state() {
    return this._oscillator.state;
  }
  /**
   * @param node the destination to connect to
   * @param outputNum the optional output number
   * @param inputNum the input number
   */


  connect(node, outputNum, inputNum) {
    if (node instanceof _Param.Param || node instanceof _Signal.Signal) {
      this.convert = node.convert;
      this.units = node.units;
    }

    (0, _Signal.connectSignal)(this, node, outputNum, inputNum);
    return this;
  }

  dispose() {
    super.dispose();

    this._oscillator.dispose();

    this._stoppedSignal.dispose();

    this._zeros.dispose();

    this._scaler.dispose();

    this._a2g.dispose();

    this._amplitudeGain.dispose();

    this.amplitude.dispose();
    return this;
  }

}

exports.LFO = LFO;
},{"../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../../core/context/Param":"node_modules/tone/build/esm/core/context/Param.js","../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../../signal/AudioToGain":"node_modules/tone/build/esm/signal/AudioToGain.js","../../signal/Scale":"node_modules/tone/build/esm/signal/Scale.js","../../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../../signal/Zero":"node_modules/tone/build/esm/signal/Zero.js","./Oscillator":"node_modules/tone/build/esm/source/oscillator/Oscillator.js"}],"node_modules/tone/build/esm/core/util/Decorator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.range = range;
exports.timeRange = timeRange;

var _Debug = require("./Debug");

/**
 * Assert that the number is in the given range.
 */
function range(min, max = Infinity) {
  const valueMap = new WeakMap();
  return function (target, propertyKey) {
    Reflect.defineProperty(target, propertyKey, {
      configurable: true,
      enumerable: true,
      get: function () {
        return valueMap.get(this);
      },
      set: function (newValue) {
        (0, _Debug.assertRange)(newValue, min, max);
        valueMap.set(this, newValue);
      }
    });
  };
}
/**
 * Convert the time to seconds and assert that the time is in between the two
 * values when being set.
 */


function timeRange(min, max = Infinity) {
  const valueMap = new WeakMap();
  return function (target, propertyKey) {
    Reflect.defineProperty(target, propertyKey, {
      configurable: true,
      enumerable: true,
      get: function () {
        return valueMap.get(this);
      },
      set: function (newValue) {
        (0, _Debug.assertRange)(this.toSeconds(newValue), min, max);
        valueMap.set(this, newValue);
      }
    });
  };
}
},{"./Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/source/buffer/Player.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Player = void 0;

var _tslib = require("tslib");

var _ToneAudioBuffer = require("../../core/context/ToneAudioBuffer");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _TypeCheck = require("../../core/util/TypeCheck");

var _Source = require("../Source");

var _ToneBufferSource = require("./ToneBufferSource");

var _Debug = require("../../core/util/Debug");

var _Decorator = require("../../core/util/Decorator");

/**
 * Player is an audio file player with start, loop, and stop functions.
 * @example
 * const player = new Tone.Player("https://tonejs.github.io/audio/berklee/gong_1.mp3").toDestination();
 * // play as soon as the buffer is loaded
 * player.autostart = true;
 * @category Source
 */
class Player extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Player.getDefaults(), arguments, ["url", "onload"]));
    this.name = "Player";
    /**
     * All of the active buffer source nodes
     */

    this._activeSources = new Set();
    const options = (0, _Defaults.optionsFromArguments)(Player.getDefaults(), arguments, ["url", "onload"]);
    this._buffer = new _ToneAudioBuffer.ToneAudioBuffer({
      onload: this._onload.bind(this, options.onload),
      onerror: options.onerror,
      reverse: options.reverse,
      url: options.url
    });
    this.autostart = options.autostart;
    this._loop = options.loop;
    this._loopStart = options.loopStart;
    this._loopEnd = options.loopEnd;
    this._playbackRate = options.playbackRate;
    this.fadeIn = options.fadeIn;
    this.fadeOut = options.fadeOut;
  }

  static getDefaults() {
    return Object.assign(_Source.Source.getDefaults(), {
      autostart: false,
      fadeIn: 0,
      fadeOut: 0,
      loop: false,
      loopEnd: 0,
      loopStart: 0,
      onload: _Interface.noOp,
      onerror: _Interface.noOp,
      playbackRate: 1,
      reverse: false
    });
  }
  /**
   * Load the audio file as an audio buffer.
   * Decodes the audio asynchronously and invokes
   * the callback once the audio buffer loads.
   * Note: this does not need to be called if a url
   * was passed in to the constructor. Only use this
   * if you want to manually load a new url.
   * @param url The url of the buffer to load. Filetype support depends on the browser.
   */


  load(url) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      yield this._buffer.load(url);

      this._onload();

      return this;
    });
  }
  /**
   * Internal callback when the buffer is loaded.
   */


  _onload(callback = _Interface.noOp) {
    callback();

    if (this.autostart) {
      this.start();
    }
  }
  /**
   * Internal callback when the buffer is done playing.
   */


  _onSourceEnd(source) {
    // invoke the onstop function
    this.onstop(this); // delete the source from the active sources

    this._activeSources.delete(source);

    if (this._activeSources.size === 0 && !this._synced && this._state.getValueAtTime(this.now()) === "started") {
      // remove the 'implicitEnd' event and replace with an explicit end
      this._state.cancel(this.now());

      this._state.setStateAtTime("stopped", this.now());
    }
  }
  /**
   * Play the buffer at the given startTime. Optionally add an offset
   * and/or duration which will play the buffer from a position
   * within the buffer for the given duration.
   *
   * @param  time When the player should start.
   * @param  offset The offset from the beginning of the sample to start at.
   * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)
   */


  start(time, offset, duration) {
    super.start(time, offset, duration);
    return this;
  }
  /**
   * Internal start method
   */


  _start(startTime, offset, duration) {
    // if it's a loop the default offset is the loopStart point
    if (this._loop) {
      offset = (0, _Defaults.defaultArg)(offset, this._loopStart);
    } else {
      // otherwise the default offset is 0
      offset = (0, _Defaults.defaultArg)(offset, 0);
    } // compute the values in seconds


    const computedOffset = this.toSeconds(offset); // compute the duration which is either the passed in duration of the buffer.duration - offset

    const origDuration = duration;
    duration = (0, _Defaults.defaultArg)(duration, Math.max(this._buffer.duration - computedOffset, 0));
    let computedDuration = this.toSeconds(duration); // scale it by the playback rate

    computedDuration = computedDuration / this._playbackRate; // get the start time

    startTime = this.toSeconds(startTime); // make the source

    const source = new _ToneBufferSource.ToneBufferSource({
      url: this._buffer,
      context: this.context,
      fadeIn: this.fadeIn,
      fadeOut: this.fadeOut,
      loop: this._loop,
      loopEnd: this._loopEnd,
      loopStart: this._loopStart,
      onended: this._onSourceEnd.bind(this),
      playbackRate: this._playbackRate
    }).connect(this.output); // set the looping properties

    if (!this._loop && !this._synced) {
      // cancel the previous stop
      this._state.cancel(startTime + computedDuration); // if it's not looping, set the state change at the end of the sample


      this._state.setStateAtTime("stopped", startTime + computedDuration, {
        implicitEnd: true
      });
    } // add it to the array of active sources


    this._activeSources.add(source); // start it


    if (this._loop && (0, _TypeCheck.isUndef)(origDuration)) {
      source.start(startTime, computedOffset);
    } else {
      // subtract the fade out time
      source.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));
    }
  }
  /**
   * Stop playback.
   */


  _stop(time) {
    const computedTime = this.toSeconds(time);

    this._activeSources.forEach(source => source.stop(computedTime));
  }
  /**
   * Stop and then restart the player from the beginning (or offset)
   * @param  time When the player should start.
   * @param  offset The offset from the beginning of the sample to start at.
   * @param  duration How long the sample should play. If no duration is given,
   * 					it will default to the full length of the sample (minus any offset)
   */


  restart(time, offset, duration) {
    super.restart(time, offset, duration);
    return this;
  }

  _restart(time, offset, duration) {
    this._stop(time);

    this._start(time, offset, duration);
  }
  /**
   * Seek to a specific time in the player's buffer. If the
   * source is no longer playing at that time, it will stop.
   * @param offset The time to seek to.
   * @param when The time for the seek event to occur.
   * @example
   * const player = new Tone.Player("https://tonejs.github.io/audio/berklee/gurgling_theremin_1.mp3", () => {
   * 	player.start();
   * 	// seek to the offset in 1 second from now
   * 	player.seek(0.4, "+1");
   * }).toDestination();
   */


  seek(offset, when) {
    const computedTime = this.toSeconds(when);

    if (this._state.getValueAtTime(computedTime) === "started") {
      const computedOffset = this.toSeconds(offset); // if it's currently playing, stop it

      this._stop(computedTime); // restart it at the given time


      this._start(computedTime, computedOffset);
    }

    return this;
  }
  /**
   * Set the loop start and end. Will only loop if loop is set to true.
   * @param loopStart The loop start time
   * @param loopEnd The loop end time
   * @example
   * const player = new Tone.Player("https://tonejs.github.io/audio/berklee/malevoices_aa2_F3.mp3").toDestination();
   * // loop between the given points
   * player.setLoopPoints(0.2, 0.3);
   * player.loop = true;
   * player.autostart = true;
   */


  setLoopPoints(loopStart, loopEnd) {
    this.loopStart = loopStart;
    this.loopEnd = loopEnd;
    return this;
  }
  /**
   * If loop is true, the loop will start at this position.
   */


  get loopStart() {
    return this._loopStart;
  }

  set loopStart(loopStart) {
    this._loopStart = loopStart;

    if (this.buffer.loaded) {
      (0, _Debug.assertRange)(this.toSeconds(loopStart), 0, this.buffer.duration);
    } // get the current source


    this._activeSources.forEach(source => {
      source.loopStart = loopStart;
    });
  }
  /**
   * If loop is true, the loop will end at this position.
   */


  get loopEnd() {
    return this._loopEnd;
  }

  set loopEnd(loopEnd) {
    this._loopEnd = loopEnd;

    if (this.buffer.loaded) {
      (0, _Debug.assertRange)(this.toSeconds(loopEnd), 0, this.buffer.duration);
    } // get the current source


    this._activeSources.forEach(source => {
      source.loopEnd = loopEnd;
    });
  }
  /**
   * The audio buffer belonging to the player.
   */


  get buffer() {
    return this._buffer;
  }

  set buffer(buffer) {
    this._buffer.set(buffer);
  }
  /**
   * If the buffer should loop once it's over.
   * @example
   * const player = new Tone.Player("https://tonejs.github.io/audio/drum-samples/breakbeat.mp3").toDestination();
   * player.loop = true;
   * player.autostart = true;
   */


  get loop() {
    return this._loop;
  }

  set loop(loop) {
    // if no change, do nothing
    if (this._loop === loop) {
      return;
    }

    this._loop = loop; // set the loop of all of the sources

    this._activeSources.forEach(source => {
      source.loop = loop;
    });

    if (loop) {
      // remove the next stopEvent
      const stopEvent = this._state.getNextState("stopped", this.now());

      if (stopEvent) {
        this._state.cancel(stopEvent.time);
      }
    }
  }
  /**
   * Normal speed is 1. The pitch will change with the playback rate.
   * @example
   * const player = new Tone.Player("https://tonejs.github.io/audio/berklee/femalevoices_aa2_A5.mp3").toDestination();
   * // play at 1/4 speed
   * player.playbackRate = 0.25;
   * // play as soon as the buffer is loaded
   * player.autostart = true;
   */


  get playbackRate() {
    return this._playbackRate;
  }

  set playbackRate(rate) {
    this._playbackRate = rate;
    const now = this.now(); // cancel the stop event since it's at a different time now

    const stopEvent = this._state.getNextState("stopped", now);

    if (stopEvent && stopEvent.implicitEnd) {
      this._state.cancel(stopEvent.time);

      this._activeSources.forEach(source => source.cancelStop());
    } // set all the sources


    this._activeSources.forEach(source => {
      source.playbackRate.setValueAtTime(rate, now);
    });
  }
  /**
   * If the buffer should be reversed
   * @example
   * const player = new Tone.Player("https://tonejs.github.io/audio/berklee/chime_1.mp3").toDestination();
   * player.autostart = true;
   * player.reverse = true;
   */


  get reverse() {
    return this._buffer.reverse;
  }

  set reverse(rev) {
    this._buffer.reverse = rev;
  }
  /**
   * If the buffer is loaded
   */


  get loaded() {
    return this._buffer.loaded;
  }

  dispose() {
    super.dispose(); // disconnect all of the players

    this._activeSources.forEach(source => source.dispose());

    this._activeSources.clear();

    this._buffer.dispose();

    return this;
  }

}

exports.Player = Player;
(0, _tslib.__decorate)([(0, _Decorator.timeRange)(0)], Player.prototype, "fadeIn", void 0);
(0, _tslib.__decorate)([(0, _Decorator.timeRange)(0)], Player.prototype, "fadeOut", void 0);
},{"tslib":"node_modules/tslib/tslib.es6.js","../../core/context/ToneAudioBuffer":"node_modules/tone/build/esm/core/context/ToneAudioBuffer.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../../core/util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","../Source":"node_modules/tone/build/esm/source/Source.js","./ToneBufferSource":"node_modules/tone/build/esm/source/buffer/ToneBufferSource.js","../../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js","../../core/util/Decorator":"node_modules/tone/build/esm/core/util/Decorator.js"}],"node_modules/tone/build/esm/source/buffer/Players.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Players = void 0;

var _Volume = require("../../component/channel/Volume");

var _ToneAudioBuffers = require("../../core/context/ToneAudioBuffers");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Debug = require("../../core/util/Debug");

var _Interface = require("../../core/util/Interface");

var _Source = require("../Source");

var _Player = require("./Player");

/**
 * Players combines multiple [[Player]] objects.
 * @category Source
 */
class Players extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Players.getDefaults(), arguments, ["urls", "onload"], "urls"));
    this.name = "Players";
    /**
     * Players has no input.
     */

    this.input = undefined;
    /**
     * The container of all of the players
     */

    this._players = new Map();
    const options = (0, _Defaults.optionsFromArguments)(Players.getDefaults(), arguments, ["urls", "onload"], "urls");
    /**
     * The output volume node
     */

    this._volume = this.output = new _Volume.Volume({
      context: this.context,
      volume: options.volume
    });
    this.volume = this._volume.volume;
    (0, _Interface.readOnly)(this, "volume");
    this._buffers = new _ToneAudioBuffers.ToneAudioBuffers({
      urls: options.urls,
      onload: options.onload,
      baseUrl: options.baseUrl,
      onerror: options.onerror
    }); // mute initially

    this.mute = options.mute;
    this._fadeIn = options.fadeIn;
    this._fadeOut = options.fadeOut;
  }

  static getDefaults() {
    return Object.assign(_Source.Source.getDefaults(), {
      baseUrl: "",
      fadeIn: 0,
      fadeOut: 0,
      mute: false,
      onload: _Interface.noOp,
      onerror: _Interface.noOp,
      urls: {},
      volume: 0
    });
  }
  /**
   * Mute the output.
   */


  get mute() {
    return this._volume.mute;
  }

  set mute(mute) {
    this._volume.mute = mute;
  }
  /**
   * The fadeIn time of the envelope applied to the source.
   */


  get fadeIn() {
    return this._fadeIn;
  }

  set fadeIn(fadeIn) {
    this._fadeIn = fadeIn;

    this._players.forEach(player => {
      player.fadeIn = fadeIn;
    });
  }
  /**
   * The fadeOut time of the each of the sources.
   */


  get fadeOut() {
    return this._fadeOut;
  }

  set fadeOut(fadeOut) {
    this._fadeOut = fadeOut;

    this._players.forEach(player => {
      player.fadeOut = fadeOut;
    });
  }
  /**
   * The state of the players object. Returns "started" if any of the players are playing.
   */


  get state() {
    const playing = Array.from(this._players).some(([_, player]) => player.state === "started");
    return playing ? "started" : "stopped";
  }
  /**
   * True if the buffers object has a buffer by that name.
   * @param name  The key or index of the buffer.
   */


  has(name) {
    return this._buffers.has(name);
  }
  /**
   * Get a player by name.
   * @param  name  The players name as defined in the constructor object or `add` method.
   */


  player(name) {
    (0, _Debug.assert)(this.has(name), `No Player with the name ${name} exists on this object`);

    if (!this._players.has(name)) {
      const player = new _Player.Player({
        context: this.context,
        fadeIn: this._fadeIn,
        fadeOut: this._fadeOut,
        url: this._buffers.get(name)
      }).connect(this.output);

      this._players.set(name, player);
    }

    return this._players.get(name);
  }
  /**
   * If all the buffers are loaded or not
   */


  get loaded() {
    return this._buffers.loaded;
  }
  /**
   * Add a player by name and url to the Players
   * @param  name A unique name to give the player
   * @param  url  Either the url of the bufer or a buffer which will be added with the given name.
   * @param callback  The callback to invoke when the url is loaded.
   */


  add(name, url, callback) {
    (0, _Debug.assert)(!this._buffers.has(name), "A buffer with that name already exists on this object");

    this._buffers.add(name, url, callback);

    return this;
  }
  /**
   * Stop all of the players at the given time
   * @param time The time to stop all of the players.
   */


  stopAll(time) {
    this._players.forEach(player => player.stop(time));

    return this;
  }

  dispose() {
    super.dispose();

    this._volume.dispose();

    this.volume.dispose();

    this._players.forEach(player => player.dispose());

    this._buffers.dispose();

    return this;
  }

}

exports.Players = Players;
},{"../../component/channel/Volume":"node_modules/tone/build/esm/component/channel/Volume.js","../../core/context/ToneAudioBuffers":"node_modules/tone/build/esm/core/context/ToneAudioBuffers.js","../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../Source":"node_modules/tone/build/esm/source/Source.js","./Player":"node_modules/tone/build/esm/source/buffer/Player.js"}],"node_modules/tone/build/esm/source/buffer/GrainPlayer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GrainPlayer = void 0;

var _Source = require("../Source");

var _Interface = require("../../core/util/Interface");

var _ToneAudioBuffer = require("../../core/context/ToneAudioBuffer");

var _Defaults = require("../../core/util/Defaults");

var _Clock = require("../../core/clock/Clock");

var _ToneBufferSource = require("./ToneBufferSource");

var _Conversions = require("../../core/type/Conversions");

var _Debug = require("../../core/util/Debug");

/**
 * GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).
 * Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the
 * amount of time each small chunk of audio is played for and the overlap is the
 * amount of crossfading transition time between successive grains.
 * @category Source
 */
class GrainPlayer extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(GrainPlayer.getDefaults(), arguments, ["url", "onload"]));
    this.name = "GrainPlayer";
    /**
     * Internal loopStart value
     */

    this._loopStart = 0;
    /**
     * Internal loopStart value
     */

    this._loopEnd = 0;
    /**
     * All of the currently playing BufferSources
     */

    this._activeSources = [];
    const options = (0, _Defaults.optionsFromArguments)(GrainPlayer.getDefaults(), arguments, ["url", "onload"]);
    this.buffer = new _ToneAudioBuffer.ToneAudioBuffer({
      onload: options.onload,
      onerror: options.onerror,
      reverse: options.reverse,
      url: options.url
    });
    this._clock = new _Clock.Clock({
      context: this.context,
      callback: this._tick.bind(this),
      frequency: 1 / options.grainSize
    });
    this._playbackRate = options.playbackRate;
    this._grainSize = options.grainSize;
    this._overlap = options.overlap;
    this.detune = options.detune; // setup

    this.overlap = options.overlap;
    this.loop = options.loop;
    this.playbackRate = options.playbackRate;
    this.grainSize = options.grainSize;
    this.loopStart = options.loopStart;
    this.loopEnd = options.loopEnd;
    this.reverse = options.reverse;

    this._clock.on("stop", this._onstop.bind(this));
  }

  static getDefaults() {
    return Object.assign(_Source.Source.getDefaults(), {
      onload: _Interface.noOp,
      onerror: _Interface.noOp,
      overlap: 0.1,
      grainSize: 0.2,
      playbackRate: 1,
      detune: 0,
      loop: false,
      loopStart: 0,
      loopEnd: 0,
      reverse: false
    });
  }
  /**
   * Internal start method
   */


  _start(time, offset, duration) {
    offset = (0, _Defaults.defaultArg)(offset, 0);
    offset = this.toSeconds(offset);
    time = this.toSeconds(time);

    const grainSize = 1 / this._clock.frequency.getValueAtTime(time);

    this._clock.start(time, offset / grainSize);

    if (duration) {
      this.stop(time + this.toSeconds(duration));
    }
  }
  /**
   * Stop and then restart the player from the beginning (or offset)
   * @param  time When the player should start.
   * @param  offset The offset from the beginning of the sample to start at.
   * @param  duration How long the sample should play. If no duration is given,
   * 					it will default to the full length of the sample (minus any offset)
   */


  restart(time, offset, duration) {
    super.restart(time, offset, duration);
    return this;
  }

  _restart(time, offset, duration) {
    this._stop(time);

    this._start(time, offset, duration);
  }
  /**
   * Internal stop method
   */


  _stop(time) {
    this._clock.stop(time);
  }
  /**
   * Invoked when the clock is stopped
   */


  _onstop(time) {
    // stop the players
    this._activeSources.forEach(source => {
      source.fadeOut = 0;
      source.stop(time);
    });

    this.onstop(this);
  }
  /**
   * Invoked on each clock tick. scheduled a new grain at this time.
   */


  _tick(time) {
    // check if it should stop looping
    const ticks = this._clock.getTicksAtTime(time);

    const offset = ticks * this._grainSize;
    this.log("offset", offset);

    if (!this.loop && offset > this.buffer.duration) {
      this.stop(time);
      return;
    } // at the beginning of the file, the fade in should be 0


    const fadeIn = offset < this._overlap ? 0 : this._overlap; // create a buffer source

    const source = new _ToneBufferSource.ToneBufferSource({
      context: this.context,
      url: this.buffer,
      fadeIn: fadeIn,
      fadeOut: this._overlap,
      loop: this.loop,
      loopStart: this._loopStart,
      loopEnd: this._loopEnd,
      // compute the playbackRate based on the detune
      playbackRate: (0, _Conversions.intervalToFrequencyRatio)(this.detune / 100)
    }).connect(this.output);
    source.start(time, this._grainSize * ticks);
    source.stop(time + this._grainSize / this.playbackRate); // add it to the active sources

    this._activeSources.push(source); // remove it when it's done


    source.onended = () => {
      const index = this._activeSources.indexOf(source);

      if (index !== -1) {
        this._activeSources.splice(index, 1);
      }
    };
  }
  /**
   * The playback rate of the sample
   */


  get playbackRate() {
    return this._playbackRate;
  }

  set playbackRate(rate) {
    (0, _Debug.assertRange)(rate, 0.001);
    this._playbackRate = rate;
    this.grainSize = this._grainSize;
  }
  /**
   * The loop start time.
   */


  get loopStart() {
    return this._loopStart;
  }

  set loopStart(time) {
    if (this.buffer.loaded) {
      (0, _Debug.assertRange)(this.toSeconds(time), 0, this.buffer.duration);
    }

    this._loopStart = this.toSeconds(time);
  }
  /**
   * The loop end time.
   */


  get loopEnd() {
    return this._loopEnd;
  }

  set loopEnd(time) {
    if (this.buffer.loaded) {
      (0, _Debug.assertRange)(this.toSeconds(time), 0, this.buffer.duration);
    }

    this._loopEnd = this.toSeconds(time);
  }
  /**
   * The direction the buffer should play in
   */


  get reverse() {
    return this.buffer.reverse;
  }

  set reverse(rev) {
    this.buffer.reverse = rev;
  }
  /**
   * The size of each chunk of audio that the
   * buffer is chopped into and played back at.
   */


  get grainSize() {
    return this._grainSize;
  }

  set grainSize(size) {
    this._grainSize = this.toSeconds(size);

    this._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());
  }
  /**
   * The duration of the cross-fade between successive grains.
   */


  get overlap() {
    return this._overlap;
  }

  set overlap(time) {
    const computedTime = this.toSeconds(time);
    (0, _Debug.assertRange)(computedTime, 0);
    this._overlap = computedTime;
  }
  /**
   * If all the buffer is loaded
   */


  get loaded() {
    return this.buffer.loaded;
  }

  dispose() {
    super.dispose();
    this.buffer.dispose();

    this._clock.dispose();

    this._activeSources.forEach(source => source.dispose());

    return this;
  }

}

exports.GrainPlayer = GrainPlayer;
},{"../Source":"node_modules/tone/build/esm/source/Source.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../../core/context/ToneAudioBuffer":"node_modules/tone/build/esm/core/context/ToneAudioBuffer.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/clock/Clock":"node_modules/tone/build/esm/core/clock/Clock.js","./ToneBufferSource":"node_modules/tone/build/esm/source/buffer/ToneBufferSource.js","../../core/type/Conversions":"node_modules/tone/build/esm/core/type/Conversions.js","../../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/source/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Noise = require("./Noise");

Object.keys(_Noise).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Noise[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Noise[key];
    }
  });
});

var _UserMedia = require("./UserMedia");

Object.keys(_UserMedia).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _UserMedia[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _UserMedia[key];
    }
  });
});

var _Oscillator = require("./oscillator/Oscillator");

Object.keys(_Oscillator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Oscillator[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Oscillator[key];
    }
  });
});

var _AMOscillator = require("./oscillator/AMOscillator");

Object.keys(_AMOscillator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _AMOscillator[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AMOscillator[key];
    }
  });
});

var _FMOscillator = require("./oscillator/FMOscillator");

Object.keys(_FMOscillator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _FMOscillator[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _FMOscillator[key];
    }
  });
});

var _PulseOscillator = require("./oscillator/PulseOscillator");

Object.keys(_PulseOscillator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _PulseOscillator[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _PulseOscillator[key];
    }
  });
});

var _FatOscillator = require("./oscillator/FatOscillator");

Object.keys(_FatOscillator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _FatOscillator[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _FatOscillator[key];
    }
  });
});

var _PWMOscillator = require("./oscillator/PWMOscillator");

Object.keys(_PWMOscillator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _PWMOscillator[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _PWMOscillator[key];
    }
  });
});

var _OmniOscillator = require("./oscillator/OmniOscillator");

Object.keys(_OmniOscillator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _OmniOscillator[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _OmniOscillator[key];
    }
  });
});

var _ToneOscillatorNode = require("./oscillator/ToneOscillatorNode");

Object.keys(_ToneOscillatorNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _ToneOscillatorNode[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ToneOscillatorNode[key];
    }
  });
});

var _LFO = require("./oscillator/LFO");

Object.keys(_LFO).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _LFO[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _LFO[key];
    }
  });
});

var _ToneBufferSource = require("./buffer/ToneBufferSource");

Object.keys(_ToneBufferSource).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _ToneBufferSource[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ToneBufferSource[key];
    }
  });
});

var _Player = require("./buffer/Player");

Object.keys(_Player).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Player[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Player[key];
    }
  });
});

var _Players = require("./buffer/Players");

Object.keys(_Players).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Players[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Players[key];
    }
  });
});

var _GrainPlayer = require("./buffer/GrainPlayer");

Object.keys(_GrainPlayer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _GrainPlayer[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _GrainPlayer[key];
    }
  });
});
},{"./Noise":"node_modules/tone/build/esm/source/Noise.js","./UserMedia":"node_modules/tone/build/esm/source/UserMedia.js","./oscillator/Oscillator":"node_modules/tone/build/esm/source/oscillator/Oscillator.js","./oscillator/AMOscillator":"node_modules/tone/build/esm/source/oscillator/AMOscillator.js","./oscillator/FMOscillator":"node_modules/tone/build/esm/source/oscillator/FMOscillator.js","./oscillator/PulseOscillator":"node_modules/tone/build/esm/source/oscillator/PulseOscillator.js","./oscillator/FatOscillator":"node_modules/tone/build/esm/source/oscillator/FatOscillator.js","./oscillator/PWMOscillator":"node_modules/tone/build/esm/source/oscillator/PWMOscillator.js","./oscillator/OmniOscillator":"node_modules/tone/build/esm/source/oscillator/OmniOscillator.js","./oscillator/ToneOscillatorNode":"node_modules/tone/build/esm/source/oscillator/ToneOscillatorNode.js","./oscillator/LFO":"node_modules/tone/build/esm/source/oscillator/LFO.js","./buffer/ToneBufferSource":"node_modules/tone/build/esm/source/buffer/ToneBufferSource.js","./buffer/Player":"node_modules/tone/build/esm/source/buffer/Player.js","./buffer/Players":"node_modules/tone/build/esm/source/buffer/Players.js","./buffer/GrainPlayer":"node_modules/tone/build/esm/source/buffer/GrainPlayer.js"}],"node_modules/tone/build/esm/signal/Abs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Abs = void 0;

var _SignalOperator = require("./SignalOperator");

var _WaveShaper = require("./WaveShaper");

/**
 * Return the absolute value of an incoming signal.
 *
 * @example
 * return Tone.Offline(() => {
 * 	const abs = new Tone.Abs().toDestination();
 * 	const signal = new Tone.Signal(1);
 * 	signal.rampTo(-1, 0.5);
 * 	signal.connect(abs);
 * }, 0.5, 1);
 * @category Signal
 */
class Abs extends _SignalOperator.SignalOperator {
  constructor() {
    super(...arguments);
    this.name = "Abs";
    /**
     * The node which converts the audio ranges
     */

    this._abs = new _WaveShaper.WaveShaper({
      context: this.context,
      mapping: val => {
        if (Math.abs(val) < 0.001) {
          return 0;
        } else {
          return Math.abs(val);
        }
      }
    });
    /**
     * The AudioRange input [-1, 1]
     */

    this.input = this._abs;
    /**
     * The output range [0, 1]
     */

    this.output = this._abs;
  }
  /**
   * clean up
   */


  dispose() {
    super.dispose();

    this._abs.dispose();

    return this;
  }

}

exports.Abs = Abs;
},{"./SignalOperator":"node_modules/tone/build/esm/signal/SignalOperator.js","./WaveShaper":"node_modules/tone/build/esm/signal/WaveShaper.js"}],"node_modules/tone/build/esm/signal/GainToAudio.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GainToAudio = void 0;

var _SignalOperator = require("./SignalOperator");

var _WaveShaper = require("./WaveShaper");

/**
 * GainToAudio converts an input in NormalRange [0,1] to AudioRange [-1,1].
 * See [[AudioToGain]].
 * @category Signal
 */
class GainToAudio extends _SignalOperator.SignalOperator {
  constructor() {
    super(...arguments);
    this.name = "GainToAudio";
    /**
     * The node which converts the audio ranges
     */

    this._norm = new _WaveShaper.WaveShaper({
      context: this.context,
      mapping: x => Math.abs(x) * 2 - 1
    });
    /**
     * The NormalRange input [0, 1]
     */

    this.input = this._norm;
    /**
     * The AudioRange output [-1, 1]
     */

    this.output = this._norm;
  }
  /**
   * clean up
   */


  dispose() {
    super.dispose();

    this._norm.dispose();

    return this;
  }

}

exports.GainToAudio = GainToAudio;
},{"./SignalOperator":"node_modules/tone/build/esm/signal/SignalOperator.js","./WaveShaper":"node_modules/tone/build/esm/signal/WaveShaper.js"}],"node_modules/tone/build/esm/signal/Negate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Negate = void 0;

var _Multiply = require("./Multiply");

var _SignalOperator = require("./SignalOperator");

/**
 * Negate the incoming signal. i.e. an input signal of 10 will output -10
 *
 * @example
 * const neg = new Tone.Negate();
 * const sig = new Tone.Signal(-2).connect(neg);
 * // output of neg is positive 2.
 * @category Signal
 */
class Negate extends _SignalOperator.SignalOperator {
  constructor() {
    super(...arguments);
    this.name = "Negate";
    /**
     * negation is done by multiplying by -1
     */

    this._multiply = new _Multiply.Multiply({
      context: this.context,
      value: -1
    });
    /**
     * The input and output are equal to the multiply node
     */

    this.input = this._multiply;
    this.output = this._multiply;
  }
  /**
   * clean up
   * @returns {Negate} this
   */


  dispose() {
    super.dispose();

    this._multiply.dispose();

    return this;
  }

}

exports.Negate = Negate;
},{"./Multiply":"node_modules/tone/build/esm/signal/Multiply.js","./SignalOperator":"node_modules/tone/build/esm/signal/SignalOperator.js"}],"node_modules/tone/build/esm/signal/Subtract.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Subtract = void 0;

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Gain = require("../core/context/Gain");

var _Defaults = require("../core/util/Defaults");

var _Negate = require("../signal/Negate");

var _Signal = require("../signal/Signal");

/**
 * Subtract the signal connected to the input is subtracted from the signal connected
 * The subtrahend.
 *
 * @example
 * // subtract a scalar from a signal
 * const sub = new Tone.Subtract(1);
 * const sig = new Tone.Signal(4).connect(sub);
 * // the output of sub is 3.
 * @example
 * // subtract two signals
 * const sub = new Tone.Subtract();
 * const sigA = new Tone.Signal(10);
 * const sigB = new Tone.Signal(2.5);
 * sigA.connect(sub);
 * sigB.connect(sub.subtrahend);
 * // output of sub is 7.5
 * @category Signal
 */
class Subtract extends _Signal.Signal {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(Subtract.getDefaults(), arguments, ["value"])));
    this.override = false;
    this.name = "Subtract";
    /**
     * the summing node
     */

    this._sum = new _Gain.Gain({
      context: this.context
    });
    this.input = this._sum;
    this.output = this._sum;
    /**
     * Negate the input of the second input before connecting it to the summing node.
     */

    this._neg = new _Negate.Negate({
      context: this.context
    });
    /**
     * The value which is subtracted from the main signal
     */

    this.subtrahend = this._param;
    (0, _ToneAudioNode.connectSeries)(this._constantSource, this._neg, this._sum);
  }

  static getDefaults() {
    return Object.assign(_Signal.Signal.getDefaults(), {
      value: 0
    });
  }

  dispose() {
    super.dispose();

    this._neg.dispose();

    this._sum.dispose();

    return this;
  }

}

exports.Subtract = Subtract;
},{"../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../signal/Negate":"node_modules/tone/build/esm/signal/Negate.js","../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js"}],"node_modules/tone/build/esm/signal/GreaterThanZero.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GreaterThanZero = void 0;

var _SignalOperator = require("./SignalOperator");

var _Multiply = require("./Multiply");

var _WaveShaper = require("./WaveShaper");

var _Defaults = require("../core/util/Defaults");

/**
 * GreaterThanZero outputs 1 when the input is strictly greater than zero
 * @example
 * return Tone.Offline(() => {
 * 	const gt0 = new Tone.GreaterThanZero().toDestination();
 * 	const sig = new Tone.Signal(0.5).connect(gt0);
 * 	sig.setValueAtTime(-1, 0.05);
 * }, 0.1, 1);
 * @category Signal
 */
class GreaterThanZero extends _SignalOperator.SignalOperator {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(GreaterThanZero.getDefaults(), arguments)));
    this.name = "GreaterThanZero";
    this._thresh = this.output = new _WaveShaper.WaveShaper({
      context: this.context,
      length: 127,
      mapping: val => {
        if (val <= 0) {
          return 0;
        } else {
          return 1;
        }
      }
    });
    this._scale = this.input = new _Multiply.Multiply({
      context: this.context,
      value: 10000
    }); // connections

    this._scale.connect(this._thresh);
  }

  dispose() {
    super.dispose();

    this._scale.dispose();

    this._thresh.dispose();

    return this;
  }

}

exports.GreaterThanZero = GreaterThanZero;
},{"./SignalOperator":"node_modules/tone/build/esm/signal/SignalOperator.js","./Multiply":"node_modules/tone/build/esm/signal/Multiply.js","./WaveShaper":"node_modules/tone/build/esm/signal/WaveShaper.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js"}],"node_modules/tone/build/esm/signal/GreaterThan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GreaterThan = void 0;

var _Defaults = require("../core/util/Defaults");

var _Subtract = require("./Subtract");

var _Signal = require("./Signal");

var _GreaterThanZero = require("./GreaterThanZero");

var _Interface = require("../core/util/Interface");

/**
 * Output 1 if the signal is greater than the value, otherwise outputs 0.
 * can compare two signals or a signal and a number.
 *
 * @example
 * return Tone.Offline(() => {
 * 	const gt = new Tone.GreaterThan(2).toDestination();
 * 	const sig = new Tone.Signal(4).connect(gt);
 * }, 0.1, 1);
 * @category Signal
 */
class GreaterThan extends _Signal.Signal {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(GreaterThan.getDefaults(), arguments, ["value"])));
    this.name = "GreaterThan";
    this.override = false;
    const options = (0, _Defaults.optionsFromArguments)(GreaterThan.getDefaults(), arguments, ["value"]);
    this._subtract = this.input = new _Subtract.Subtract({
      context: this.context,
      value: options.value
    });
    this._gtz = this.output = new _GreaterThanZero.GreaterThanZero({
      context: this.context
    });
    this.comparator = this._param = this._subtract.subtrahend;
    (0, _Interface.readOnly)(this, "comparator"); // connect

    this._subtract.connect(this._gtz);
  }

  static getDefaults() {
    return Object.assign(_Signal.Signal.getDefaults(), {
      value: 0
    });
  }

  dispose() {
    super.dispose();

    this._gtz.dispose();

    this._subtract.dispose();

    this.comparator.dispose();
    return this;
  }

}

exports.GreaterThan = GreaterThan;
},{"../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./Subtract":"node_modules/tone/build/esm/signal/Subtract.js","./Signal":"node_modules/tone/build/esm/signal/Signal.js","./GreaterThanZero":"node_modules/tone/build/esm/signal/GreaterThanZero.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/signal/Pow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pow = void 0;

var _WaveShaper = require("./WaveShaper");

var _Defaults = require("../core/util/Defaults");

var _SignalOperator = require("./SignalOperator");

/**
 * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]
 *
 * @example
 * const pow = new Tone.Pow(2);
 * const sig = new Tone.Signal(0.5).connect(pow);
 * // output of pow is 0.25.
 * @category Signal
 */
class Pow extends _SignalOperator.SignalOperator {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(Pow.getDefaults(), arguments, ["value"])));
    this.name = "Pow";
    const options = (0, _Defaults.optionsFromArguments)(Pow.getDefaults(), arguments, ["value"]);
    this._exponentScaler = this.input = this.output = new _WaveShaper.WaveShaper({
      context: this.context,
      mapping: this._expFunc(options.value),
      length: 8192
    });
    this._exponent = options.value;
  }

  static getDefaults() {
    return Object.assign(_SignalOperator.SignalOperator.getDefaults(), {
      value: 1
    });
  }
  /**
   * the function which maps the waveshaper
   * @param exponent exponent value
   */


  _expFunc(exponent) {
    return val => {
      return Math.pow(Math.abs(val), exponent);
    };
  }
  /**
   * The value of the exponent.
   */


  get value() {
    return this._exponent;
  }

  set value(exponent) {
    this._exponent = exponent;

    this._exponentScaler.setMap(this._expFunc(this._exponent));
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    this._exponentScaler.dispose();

    return this;
  }

}

exports.Pow = Pow;
},{"./WaveShaper":"node_modules/tone/build/esm/signal/WaveShaper.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./SignalOperator":"node_modules/tone/build/esm/signal/SignalOperator.js"}],"node_modules/tone/build/esm/signal/ScaleExp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScaleExp = void 0;

var _Scale = require("./Scale");

var _Defaults = require("../core/util/Defaults");

var _Pow = require("./Pow");

/**
 * Performs an exponential scaling on an input signal.
 * Scales a NormalRange value [0,1] exponentially
 * to the output range of outputMin to outputMax.
 * @example
 * const scaleExp = new Tone.ScaleExp(0, 100, 2);
 * const signal = new Tone.Signal(0.5).connect(scaleExp);
 * @category Signal
 */
class ScaleExp extends _Scale.Scale {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(ScaleExp.getDefaults(), arguments, ["min", "max", "exponent"])));
    this.name = "ScaleExp";
    const options = (0, _Defaults.optionsFromArguments)(ScaleExp.getDefaults(), arguments, ["min", "max", "exponent"]);
    this.input = this._exp = new _Pow.Pow({
      context: this.context,
      value: options.exponent
    });

    this._exp.connect(this._mult);
  }

  static getDefaults() {
    return Object.assign(_Scale.Scale.getDefaults(), {
      exponent: 1
    });
  }
  /**
   * Instead of interpolating linearly between the [[min]] and
   * [[max]] values, setting the exponent will interpolate between
   * the two values with an exponential curve.
   */


  get exponent() {
    return this._exp.value;
  }

  set exponent(exp) {
    this._exp.value = exp;
  }

  dispose() {
    super.dispose();

    this._exp.dispose();

    return this;
  }

}

exports.ScaleExp = ScaleExp;
},{"./Scale":"node_modules/tone/build/esm/signal/Scale.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./Pow":"node_modules/tone/build/esm/signal/Pow.js"}],"node_modules/tone/build/esm/signal/SyncedSignal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SyncedSignal = void 0;

var _Signal = require("./Signal");

var _Defaults = require("../core/util/Defaults");

var _TransportTime = require("../core/type/TransportTime");

var _ToneConstantSource = require("./ToneConstantSource");

/**
 * Adds the ability to synchronize the signal to the [[Transport]]
 */
class SyncedSignal extends _Signal.Signal {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(_Signal.Signal.getDefaults(), arguments, ["value", "units"]));
    this.name = "SyncedSignal";
    /**
     * Don't override when something is connected to the input
     */

    this.override = false;
    const options = (0, _Defaults.optionsFromArguments)(_Signal.Signal.getDefaults(), arguments, ["value", "units"]);
    this._lastVal = options.value;
    this._synced = this.context.transport.scheduleRepeat(this._onTick.bind(this), "1i");
    this._syncedCallback = this._anchorValue.bind(this);
    this.context.transport.on("start", this._syncedCallback);
    this.context.transport.on("pause", this._syncedCallback);
    this.context.transport.on("stop", this._syncedCallback); // disconnect the constant source from the output and replace it with another one

    this._constantSource.disconnect();

    this._constantSource.stop(0); // create a new one


    this._constantSource = this.output = new _ToneConstantSource.ToneConstantSource({
      context: this.context,
      offset: options.value,
      units: options.units
    }).start(0);
    this.setValueAtTime(options.value, 0);
  }
  /**
   * Callback which is invoked every tick.
   */


  _onTick(time) {
    const val = super.getValueAtTime(this.context.transport.seconds); // approximate ramp curves with linear ramps

    if (this._lastVal !== val) {
      this._lastVal = val;

      this._constantSource.offset.setValueAtTime(val, time);
    }
  }
  /**
   * Anchor the value at the start and stop of the Transport
   */


  _anchorValue(time) {
    const val = super.getValueAtTime(this.context.transport.seconds);
    this._lastVal = val;

    this._constantSource.offset.cancelAndHoldAtTime(time);

    this._constantSource.offset.setValueAtTime(val, time);
  }

  getValueAtTime(time) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, time).toSeconds();
    return super.getValueAtTime(computedTime);
  }

  setValueAtTime(value, time) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, time).toSeconds();
    super.setValueAtTime(value, computedTime);
    return this;
  }

  linearRampToValueAtTime(value, time) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, time).toSeconds();
    super.linearRampToValueAtTime(value, computedTime);
    return this;
  }

  exponentialRampToValueAtTime(value, time) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, time).toSeconds();
    super.exponentialRampToValueAtTime(value, computedTime);
    return this;
  }

  setTargetAtTime(value, startTime, timeConstant) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, startTime).toSeconds();
    super.setTargetAtTime(value, computedTime, timeConstant);
    return this;
  }

  cancelScheduledValues(startTime) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, startTime).toSeconds();
    super.cancelScheduledValues(computedTime);
    return this;
  }

  setValueCurveAtTime(values, startTime, duration, scaling) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, startTime).toSeconds();
    duration = this.toSeconds(duration);
    super.setValueCurveAtTime(values, computedTime, duration, scaling);
    return this;
  }

  cancelAndHoldAtTime(time) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, time).toSeconds();
    super.cancelAndHoldAtTime(computedTime);
    return this;
  }

  setRampPoint(time) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, time).toSeconds();
    super.setRampPoint(computedTime);
    return this;
  }

  exponentialRampTo(value, rampTime, startTime) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, startTime).toSeconds();
    super.exponentialRampTo(value, rampTime, computedTime);
    return this;
  }

  linearRampTo(value, rampTime, startTime) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, startTime).toSeconds();
    super.linearRampTo(value, rampTime, computedTime);
    return this;
  }

  targetRampTo(value, rampTime, startTime) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, startTime).toSeconds();
    super.targetRampTo(value, rampTime, computedTime);
    return this;
  }

  dispose() {
    super.dispose();
    this.context.transport.clear(this._synced);
    this.context.transport.off("start", this._syncedCallback);
    this.context.transport.off("pause", this._syncedCallback);
    this.context.transport.off("stop", this._syncedCallback);

    this._constantSource.dispose();

    return this;
  }

}

exports.SyncedSignal = SyncedSignal;
},{"./Signal":"node_modules/tone/build/esm/signal/Signal.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/type/TransportTime":"node_modules/tone/build/esm/core/type/TransportTime.js","./ToneConstantSource":"node_modules/tone/build/esm/signal/ToneConstantSource.js"}],"node_modules/tone/build/esm/signal/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Add = require("./Add");

Object.keys(_Add).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Add[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Add[key];
    }
  });
});

var _Abs = require("./Abs");

Object.keys(_Abs).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Abs[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Abs[key];
    }
  });
});

var _AudioToGain = require("./AudioToGain");

Object.keys(_AudioToGain).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _AudioToGain[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AudioToGain[key];
    }
  });
});

var _GainToAudio = require("./GainToAudio");

Object.keys(_GainToAudio).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _GainToAudio[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _GainToAudio[key];
    }
  });
});

var _GreaterThan = require("./GreaterThan");

Object.keys(_GreaterThan).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _GreaterThan[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _GreaterThan[key];
    }
  });
});

var _GreaterThanZero = require("./GreaterThanZero");

Object.keys(_GreaterThanZero).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _GreaterThanZero[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _GreaterThanZero[key];
    }
  });
});

var _Multiply = require("./Multiply");

Object.keys(_Multiply).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Multiply[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Multiply[key];
    }
  });
});

var _Negate = require("./Negate");

Object.keys(_Negate).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Negate[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Negate[key];
    }
  });
});

var _Pow = require("./Pow");

Object.keys(_Pow).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Pow[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Pow[key];
    }
  });
});

var _Signal = require("./Signal");

Object.keys(_Signal).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Signal[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Signal[key];
    }
  });
});

var _Scale = require("./Scale");

Object.keys(_Scale).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Scale[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Scale[key];
    }
  });
});

var _ScaleExp = require("./ScaleExp");

Object.keys(_ScaleExp).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _ScaleExp[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ScaleExp[key];
    }
  });
});

var _Subtract = require("./Subtract");

Object.keys(_Subtract).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Subtract[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Subtract[key];
    }
  });
});

var _SyncedSignal = require("./SyncedSignal");

Object.keys(_SyncedSignal).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _SyncedSignal[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _SyncedSignal[key];
    }
  });
});

var _WaveShaper = require("./WaveShaper");

Object.keys(_WaveShaper).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _WaveShaper[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _WaveShaper[key];
    }
  });
});

var _Zero = require("./Zero");

Object.keys(_Zero).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Zero[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Zero[key];
    }
  });
});
},{"./Add":"node_modules/tone/build/esm/signal/Add.js","./Abs":"node_modules/tone/build/esm/signal/Abs.js","./AudioToGain":"node_modules/tone/build/esm/signal/AudioToGain.js","./GainToAudio":"node_modules/tone/build/esm/signal/GainToAudio.js","./GreaterThan":"node_modules/tone/build/esm/signal/GreaterThan.js","./GreaterThanZero":"node_modules/tone/build/esm/signal/GreaterThanZero.js","./Multiply":"node_modules/tone/build/esm/signal/Multiply.js","./Negate":"node_modules/tone/build/esm/signal/Negate.js","./Pow":"node_modules/tone/build/esm/signal/Pow.js","./Signal":"node_modules/tone/build/esm/signal/Signal.js","./Scale":"node_modules/tone/build/esm/signal/Scale.js","./ScaleExp":"node_modules/tone/build/esm/signal/ScaleExp.js","./Subtract":"node_modules/tone/build/esm/signal/Subtract.js","./SyncedSignal":"node_modules/tone/build/esm/signal/SyncedSignal.js","./WaveShaper":"node_modules/tone/build/esm/signal/WaveShaper.js","./Zero":"node_modules/tone/build/esm/signal/Zero.js"}],"node_modules/tone/build/esm/component/envelope/Envelope.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Envelope = void 0;

var _tslib = require("tslib");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _TypeCheck = require("../../core/util/TypeCheck");

var _Signal = require("../../signal/Signal");

var _OfflineContext = require("../../core/context/OfflineContext");

var _Debug = require("../../core/util/Debug");

var _Decorator = require("../../core/util/Decorator");

/**
 * Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)
 * envelope generator. Envelope outputs a signal which
 * can be connected to an AudioParam or Tone.Signal.
 * ```
 *           /\
 *          /  \
 *         /    \
 *        /      \
 *       /        \___________
 *      /                     \
 *     /                       \
 *    /                         \
 *   /                           \
 * ```
 * @example
 * return Tone.Offline(() => {
 * 	const env = new Tone.Envelope({
 * 		attack: 0.1,
 * 		decay: 0.2,
 * 		sustain: 0.5,
 * 		release: 0.8,
 * 	}).toDestination();
 * 	env.triggerAttackRelease(0.5);
 * }, 1.5, 1);
 * @category Component
 */
class Envelope extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Envelope.getDefaults(), arguments, ["attack", "decay", "sustain", "release"]));
    this.name = "Envelope";
    /**
     * the signal which is output.
     */

    this._sig = new _Signal.Signal({
      context: this.context,
      value: 0
    });
    /**
     * The output signal of the envelope
     */

    this.output = this._sig;
    /**
     * Envelope has no input
     */

    this.input = undefined;
    const options = (0, _Defaults.optionsFromArguments)(Envelope.getDefaults(), arguments, ["attack", "decay", "sustain", "release"]);
    this.attack = options.attack;
    this.decay = options.decay;
    this.sustain = options.sustain;
    this.release = options.release;
    this.attackCurve = options.attackCurve;
    this.releaseCurve = options.releaseCurve;
    this.decayCurve = options.decayCurve;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      attack: 0.01,
      attackCurve: "linear",
      decay: 0.1,
      decayCurve: "exponential",
      release: 1,
      releaseCurve: "exponential",
      sustain: 0.5
    });
  }
  /**
   * Read the current value of the envelope. Useful for
   * synchronizing visual output to the envelope.
   */


  get value() {
    return this.getValueAtTime(this.now());
  }
  /**
   * Get the curve
   * @param  curve
   * @param  direction  In/Out
   * @return The curve name
   */


  _getCurve(curve, direction) {
    if ((0, _TypeCheck.isString)(curve)) {
      return curve;
    } else {
      // look up the name in the curves array
      let curveName;

      for (curveName in EnvelopeCurves) {
        if (EnvelopeCurves[curveName][direction] === curve) {
          return curveName;
        }
      } // return the custom curve


      return curve;
    }
  }
  /**
   * Assign a the curve to the given name using the direction
   * @param  name
   * @param  direction In/Out
   * @param  curve
   */


  _setCurve(name, direction, curve) {
    // check if it's a valid type
    if ((0, _TypeCheck.isString)(curve) && Reflect.has(EnvelopeCurves, curve)) {
      const curveDef = EnvelopeCurves[curve];

      if ((0, _TypeCheck.isObject)(curveDef)) {
        if (name !== "_decayCurve") {
          this[name] = curveDef[direction];
        }
      } else {
        this[name] = curveDef;
      }
    } else if ((0, _TypeCheck.isArray)(curve) && name !== "_decayCurve") {
      this[name] = curve;
    } else {
      throw new Error("Envelope: invalid curve: " + curve);
    }
  }
  /**
   * The shape of the attack.
   * Can be any of these strings:
   * * "linear"
   * * "exponential"
   * * "sine"
   * * "cosine"
   * * "bounce"
   * * "ripple"
   * * "step"
   *
   * Can also be an array which describes the curve. Values
   * in the array are evenly subdivided and linearly
   * interpolated over the duration of the attack.
   * @example
   * return Tone.Offline(() => {
   * 	const env = new Tone.Envelope(0.4).toDestination();
   * 	env.attackCurve = "linear";
   * 	env.triggerAttack();
   * }, 1, 1);
   */


  get attackCurve() {
    return this._getCurve(this._attackCurve, "In");
  }

  set attackCurve(curve) {
    this._setCurve("_attackCurve", "In", curve);
  }
  /**
   * The shape of the release. See the attack curve types.
   * @example
   * return Tone.Offline(() => {
   * 	const env = new Tone.Envelope({
   * 		release: 0.8
   * 	}).toDestination();
   * 	env.triggerAttack();
   * 	// release curve could also be defined by an array
   * 	env.releaseCurve = [1, 0.3, 0.4, 0.2, 0.7, 0];
   * 	env.triggerRelease(0.2);
   * }, 1, 1);
   */


  get releaseCurve() {
    return this._getCurve(this._releaseCurve, "Out");
  }

  set releaseCurve(curve) {
    this._setCurve("_releaseCurve", "Out", curve);
  }
  /**
   * The shape of the decay either "linear" or "exponential"
   * @example
   * return Tone.Offline(() => {
   * 	const env = new Tone.Envelope({
   * 		sustain: 0.1,
   * 		decay: 0.5
   * 	}).toDestination();
   * 	env.decayCurve = "linear";
   * 	env.triggerAttack();
   * }, 1, 1);
   */


  get decayCurve() {
    return this._decayCurve;
  }

  set decayCurve(curve) {
    (0, _Debug.assert)(["linear", "exponential"].some(c => c === curve), `Invalid envelope curve: ${curve}`);
    this._decayCurve = curve;
  }
  /**
   * Trigger the attack/decay portion of the ADSR envelope.
   * @param  time When the attack should start.
   * @param velocity The velocity of the envelope scales the vales.
   *                             number between 0-1
   * @example
   * const env = new Tone.AmplitudeEnvelope().toDestination();
   * const osc = new Tone.Oscillator().connect(env).start();
   * // trigger the attack 0.5 seconds from now with a velocity of 0.2
   * env.triggerAttack("+0.5", 0.2);
   */


  triggerAttack(time, velocity = 1) {
    this.log("triggerAttack", time, velocity);
    time = this.toSeconds(time);
    const originalAttack = this.toSeconds(this.attack);
    let attack = originalAttack;
    const decay = this.toSeconds(this.decay); // check if it's not a complete attack

    const currentValue = this.getValueAtTime(time);

    if (currentValue > 0) {
      // subtract the current value from the attack time
      const attackRate = 1 / attack;
      const remainingDistance = 1 - currentValue; // the attack is now the remaining time

      attack = remainingDistance / attackRate;
    } // attack


    if (attack < this.sampleTime) {
      this._sig.cancelScheduledValues(time); // case where the attack time is 0 should set instantly


      this._sig.setValueAtTime(velocity, time);
    } else if (this._attackCurve === "linear") {
      this._sig.linearRampTo(velocity, attack, time);
    } else if (this._attackCurve === "exponential") {
      this._sig.targetRampTo(velocity, attack, time);
    } else {
      this._sig.cancelAndHoldAtTime(time);

      let curve = this._attackCurve; // find the starting position in the curve

      for (let i = 1; i < curve.length; i++) {
        // the starting index is between the two values
        if (curve[i - 1] <= currentValue && currentValue <= curve[i]) {
          curve = this._attackCurve.slice(i); // the first index is the current value

          curve[0] = currentValue;
          break;
        }
      }

      this._sig.setValueCurveAtTime(curve, time, attack, velocity);
    } // decay


    if (decay && this.sustain < 1) {
      const decayValue = velocity * this.sustain;
      const decayStart = time + attack;
      this.log("decay", decayStart);

      if (this._decayCurve === "linear") {
        this._sig.linearRampToValueAtTime(decayValue, decay + decayStart);
      } else {
        this._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);
      }
    }

    return this;
  }
  /**
   * Triggers the release of the envelope.
   * @param  time When the release portion of the envelope should start.
   * @example
   * const env = new Tone.AmplitudeEnvelope().toDestination();
   * const osc = new Tone.Oscillator({
   * 	type: "sawtooth"
   * }).connect(env).start();
   * env.triggerAttack();
   * // trigger the release half a second after the attack
   * env.triggerRelease("+0.5");
   */


  triggerRelease(time) {
    this.log("triggerRelease", time);
    time = this.toSeconds(time);
    const currentValue = this.getValueAtTime(time);

    if (currentValue > 0) {
      const release = this.toSeconds(this.release);

      if (release < this.sampleTime) {
        this._sig.setValueAtTime(0, time);
      } else if (this._releaseCurve === "linear") {
        this._sig.linearRampTo(0, release, time);
      } else if (this._releaseCurve === "exponential") {
        this._sig.targetRampTo(0, release, time);
      } else {
        (0, _Debug.assert)((0, _TypeCheck.isArray)(this._releaseCurve), "releaseCurve must be either 'linear', 'exponential' or an array");

        this._sig.cancelAndHoldAtTime(time);

        this._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);
      }
    }

    return this;
  }
  /**
   * Get the scheduled value at the given time. This will
   * return the unconverted (raw) value.
   * @example
   * const env = new Tone.Envelope(0.5, 1, 0.4, 2);
   * env.triggerAttackRelease(2);
   * setInterval(() => console.log(env.getValueAtTime(Tone.now())), 100);
   */


  getValueAtTime(time) {
    return this._sig.getValueAtTime(time);
  }
  /**
   * triggerAttackRelease is shorthand for triggerAttack, then waiting
   * some duration, then triggerRelease.
   * @param duration The duration of the sustain.
   * @param time When the attack should be triggered.
   * @param velocity The velocity of the envelope.
   * @example
   * const env = new Tone.AmplitudeEnvelope().toDestination();
   * const osc = new Tone.Oscillator().connect(env).start();
   * // trigger the release 0.5 seconds after the attack
   * env.triggerAttackRelease(0.5);
   */


  triggerAttackRelease(duration, time, velocity = 1) {
    time = this.toSeconds(time);
    this.triggerAttack(time, velocity);
    this.triggerRelease(time + this.toSeconds(duration));
    return this;
  }
  /**
   * Cancels all scheduled envelope changes after the given time.
   */


  cancel(after) {
    this._sig.cancelScheduledValues(this.toSeconds(after));

    return this;
  }
  /**
   * Connect the envelope to a destination node.
   */


  connect(destination, outputNumber = 0, inputNumber = 0) {
    (0, _Signal.connectSignal)(this, destination, outputNumber, inputNumber);
    return this;
  }
  /**
   * Render the envelope curve to an array of the given length.
   * Good for visualizing the envelope curve. Rescales the duration of the
   * envelope to fit the length.
   */


  asArray(length = 1024) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      const duration = length / this.context.sampleRate;
      const context = new _OfflineContext.OfflineContext(1, duration, this.context.sampleRate); // normalize the ADSR for the given duration with 20% sustain time

      const attackPortion = this.toSeconds(this.attack) + this.toSeconds(this.decay);
      const envelopeDuration = attackPortion + this.toSeconds(this.release);
      const sustainTime = envelopeDuration * 0.1;
      const totalDuration = envelopeDuration + sustainTime; // @ts-ignore

      const clone = new this.constructor(Object.assign(this.get(), {
        attack: duration * this.toSeconds(this.attack) / totalDuration,
        decay: duration * this.toSeconds(this.decay) / totalDuration,
        release: duration * this.toSeconds(this.release) / totalDuration,
        context
      }));

      clone._sig.toDestination();

      clone.triggerAttackRelease(duration * (attackPortion + sustainTime) / totalDuration, 0);
      const buffer = yield context.render();
      return buffer.getChannelData(0);
    });
  }

  dispose() {
    super.dispose();

    this._sig.dispose();

    return this;
  }

}

exports.Envelope = Envelope;
(0, _tslib.__decorate)([(0, _Decorator.timeRange)(0)], Envelope.prototype, "attack", void 0);
(0, _tslib.__decorate)([(0, _Decorator.timeRange)(0)], Envelope.prototype, "decay", void 0);
(0, _tslib.__decorate)([(0, _Decorator.range)(0, 1)], Envelope.prototype, "sustain", void 0);
(0, _tslib.__decorate)([(0, _Decorator.timeRange)(0)], Envelope.prototype, "release", void 0);
/**
 * Generate some complex envelope curves.
 */

const EnvelopeCurves = (() => {
  const curveLen = 128;
  let i;
  let k; // cosine curve

  const cosineCurve = [];

  for (i = 0; i < curveLen; i++) {
    cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));
  } // ripple curve


  const rippleCurve = [];
  const rippleCurveFreq = 6.4;

  for (i = 0; i < curveLen - 1; i++) {
    k = i / (curveLen - 1);
    const sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;
    rippleCurve[i] = sineWave / 10 + k * 0.83;
  }

  rippleCurve[curveLen - 1] = 1; // stairs curve

  const stairsCurve = [];
  const steps = 5;

  for (i = 0; i < curveLen; i++) {
    stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;
  } // in-out easing curve


  const sineCurve = [];

  for (i = 0; i < curveLen; i++) {
    k = i / (curveLen - 1);
    sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));
  } // a bounce curve


  const bounceCurve = [];

  for (i = 0; i < curveLen; i++) {
    k = i / (curveLen - 1);
    const freq = Math.pow(k, 3) * 4 + 0.2;
    const val = Math.cos(freq * Math.PI * 2 * k);
    bounceCurve[i] = Math.abs(val * (1 - k));
  }
  /**
   * Invert a value curve to make it work for the release
   */


  function invertCurve(curve) {
    const out = new Array(curve.length);

    for (let j = 0; j < curve.length; j++) {
      out[j] = 1 - curve[j];
    }

    return out;
  }
  /**
   * reverse the curve
   */


  function reverseCurve(curve) {
    return curve.slice(0).reverse();
  }
  /**
   * attack and release curve arrays
   */


  return {
    bounce: {
      In: invertCurve(bounceCurve),
      Out: bounceCurve
    },
    cosine: {
      In: cosineCurve,
      Out: reverseCurve(cosineCurve)
    },
    exponential: "exponential",
    linear: "linear",
    ripple: {
      In: rippleCurve,
      Out: invertCurve(rippleCurve)
    },
    sine: {
      In: sineCurve,
      Out: invertCurve(sineCurve)
    },
    step: {
      In: stairsCurve,
      Out: invertCurve(stairsCurve)
    }
  };
})();
},{"tslib":"node_modules/tslib/tslib.es6.js","../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","../../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../../core/context/OfflineContext":"node_modules/tone/build/esm/core/context/OfflineContext.js","../../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js","../../core/util/Decorator":"node_modules/tone/build/esm/core/util/Decorator.js"}],"node_modules/tone/build/esm/instrument/Instrument.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Instrument = void 0;

var _Volume = require("../component/channel/Volume");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

/**
 * Base-class for all instruments
 */
class Instrument extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Instrument.getDefaults(), arguments));
    /**
     * Keep track of all events scheduled to the transport
     * when the instrument is 'synced'
     */

    this._scheduledEvents = [];
    /**
     * If the instrument is currently synced
     */

    this._synced = false;
    this._original_triggerAttack = this.triggerAttack;
    this._original_triggerRelease = this.triggerRelease;
    const options = (0, _Defaults.optionsFromArguments)(Instrument.getDefaults(), arguments);
    this._volume = this.output = new _Volume.Volume({
      context: this.context,
      volume: options.volume
    });
    this.volume = this._volume.volume;
    (0, _Interface.readOnly)(this, "volume");
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      volume: 0
    });
  }
  /**
   * Sync the instrument to the Transport. All subsequent calls of
   * [[triggerAttack]] and [[triggerRelease]] will be scheduled along the transport.
   * @example
   * const fmSynth = new Tone.FMSynth().toDestination();
   * fmSynth.volume.value = -6;
   * fmSynth.sync();
   * // schedule 3 notes when the transport first starts
   * fmSynth.triggerAttackRelease("C4", "8n", 0);
   * fmSynth.triggerAttackRelease("E4", "8n", "8n");
   * fmSynth.triggerAttackRelease("G4", "8n", "4n");
   * // start the transport to hear the notes
   * Tone.Transport.start();
   */


  sync() {
    if (this._syncState()) {
      this._syncMethod("triggerAttack", 1);

      this._syncMethod("triggerRelease", 0);
    }

    return this;
  }
  /**
   * set _sync
   */


  _syncState() {
    let changed = false;

    if (!this._synced) {
      this._synced = true;
      changed = true;
    }

    return changed;
  }
  /**
   * Wrap the given method so that it can be synchronized
   * @param method Which method to wrap and sync
   * @param  timePosition What position the time argument appears in
   */


  _syncMethod(method, timePosition) {
    const originalMethod = this["_original_" + method] = this[method];

    this[method] = (...args) => {
      const time = args[timePosition];
      const id = this.context.transport.schedule(t => {
        args[timePosition] = t;
        originalMethod.apply(this, args);
      }, time);

      this._scheduledEvents.push(id);
    };
  }
  /**
   * Unsync the instrument from the Transport
   */


  unsync() {
    this._scheduledEvents.forEach(id => this.context.transport.clear(id));

    this._scheduledEvents = [];

    if (this._synced) {
      this._synced = false;
      this.triggerAttack = this._original_triggerAttack;
      this.triggerRelease = this._original_triggerRelease;
    }

    return this;
  }
  /**
   * Trigger the attack and then the release after the duration.
   * @param  note     The note to trigger.
   * @param  duration How long the note should be held for before
   *                         triggering the release. This value must be greater than 0.
   * @param time  When the note should be triggered.
   * @param  velocity The velocity the note should be triggered at.
   * @example
   * const synth = new Tone.Synth().toDestination();
   * // trigger "C4" for the duration of an 8th note
   * synth.triggerAttackRelease("C4", "8n");
   */


  triggerAttackRelease(note, duration, time, velocity) {
    const computedTime = this.toSeconds(time);
    const computedDuration = this.toSeconds(duration);
    this.triggerAttack(note, computedTime, velocity);
    this.triggerRelease(computedTime + computedDuration);
    return this;
  }
  /**
   * clean up
   * @returns {Instrument} this
   */


  dispose() {
    super.dispose();

    this._volume.dispose();

    this.unsync();
    this._scheduledEvents = [];
    return this;
  }

}

exports.Instrument = Instrument;
},{"../component/channel/Volume":"node_modules/tone/build/esm/component/channel/Volume.js","../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/instrument/Monophonic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Monophonic = void 0;

var _tslib = require("tslib");

var _Frequency = require("../core/type/Frequency");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _Instrument = require("../instrument/Instrument");

var _Decorator = require("../core/util/Decorator");

/**
 * Abstract base class for other monophonic instruments to extend.
 */
class Monophonic extends _Instrument.Instrument {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Monophonic.getDefaults(), arguments));
    const options = (0, _Defaults.optionsFromArguments)(Monophonic.getDefaults(), arguments);
    this.portamento = options.portamento;
    this.onsilence = options.onsilence;
  }

  static getDefaults() {
    return Object.assign(_Instrument.Instrument.getDefaults(), {
      detune: 0,
      onsilence: _Interface.noOp,
      portamento: 0
    });
  }
  /**
   * Trigger the attack of the note optionally with a given velocity.
   * @param  note The note to trigger.
   * @param  time When the note should start.
   * @param  velocity The velocity scaler determines how "loud" the note will be triggered.
   * @example
   * const synth = new Tone.Synth().toDestination();
   * // trigger the note a half second from now at half velocity
   * synth.triggerAttack("C4", "+0.5", 0.5);
   */


  triggerAttack(note, time, velocity = 1) {
    this.log("triggerAttack", note, time, velocity);
    const seconds = this.toSeconds(time);

    this._triggerEnvelopeAttack(seconds, velocity);

    this.setNote(note, seconds);
    return this;
  }
  /**
   * Trigger the release portion of the envelope
   * @param  time If no time is given, the release happens immediatly
   * @example
   * const synth = new Tone.Synth().toDestination();
   * synth.triggerAttack("C4");
   * // trigger the release a second from now
   * synth.triggerRelease("+1");
   */


  triggerRelease(time) {
    this.log("triggerRelease", time);
    const seconds = this.toSeconds(time);

    this._triggerEnvelopeRelease(seconds);

    return this;
  }
  /**
   * Set the note at the given time. If no time is given, the note
   * will set immediately.
   * @param note The note to change to.
   * @param  time The time when the note should be set.
   * @example
   * const synth = new Tone.Synth().toDestination();
   * synth.triggerAttack("C4");
   * // change to F#6 in one quarter note from now.
   * synth.setNote("F#6", "+4n");
   */


  setNote(note, time) {
    const computedTime = this.toSeconds(time);
    const computedFrequency = note instanceof _Frequency.FrequencyClass ? note.toFrequency() : note;

    if (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {
      const portTime = this.toSeconds(this.portamento);
      this.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);
    } else {
      this.frequency.setValueAtTime(computedFrequency, computedTime);
    }

    return this;
  }

}

exports.Monophonic = Monophonic;
(0, _tslib.__decorate)([(0, _Decorator.timeRange)(0)], Monophonic.prototype, "portamento", void 0);
},{"tslib":"node_modules/tslib/tslib.es6.js","../core/type/Frequency":"node_modules/tone/build/esm/core/type/Frequency.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../instrument/Instrument":"node_modules/tone/build/esm/instrument/Instrument.js","../core/util/Decorator":"node_modules/tone/build/esm/core/util/Decorator.js"}],"node_modules/tone/build/esm/component/envelope/AmplitudeEnvelope.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AmplitudeEnvelope = void 0;

var _Gain = require("../../core/context/Gain");

var _Defaults = require("../../core/util/Defaults");

var _Envelope = require("./Envelope");

/**
 * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.
 * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts
 * an audio signal as the input and will apply the envelope to the amplitude
 * of the signal.
 * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).
 *
 * @example
 * return Tone.Offline(() => {
 * 	const ampEnv = new Tone.AmplitudeEnvelope({
 * 		attack: 0.1,
 * 		decay: 0.2,
 * 		sustain: 1.0,
 * 		release: 0.8
 * 	}).toDestination();
 * 	// create an oscillator and connect it
 * 	const osc = new Tone.Oscillator().connect(ampEnv).start();
 * 	// trigger the envelopes attack and release "8t" apart
 * 	ampEnv.triggerAttackRelease("8t");
 * }, 1.5, 1);
 * @category Component
 */
class AmplitudeEnvelope extends _Envelope.Envelope {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(AmplitudeEnvelope.getDefaults(), arguments, ["attack", "decay", "sustain", "release"]));
    this.name = "AmplitudeEnvelope";
    this._gainNode = new _Gain.Gain({
      context: this.context,
      gain: 0
    });
    this.output = this._gainNode;
    this.input = this._gainNode;

    this._sig.connect(this._gainNode.gain);

    this.output = this._gainNode;
    this.input = this._gainNode;
  }
  /**
   * Clean up
   */


  dispose() {
    super.dispose();

    this._gainNode.dispose();

    return this;
  }

}

exports.AmplitudeEnvelope = AmplitudeEnvelope;
},{"../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./Envelope":"node_modules/tone/build/esm/component/envelope/Envelope.js"}],"node_modules/tone/build/esm/instrument/Synth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Synth = void 0;

var _AmplitudeEnvelope = require("../component/envelope/AmplitudeEnvelope");

var _Envelope = require("../component/envelope/Envelope");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _OmniOscillator = require("../source/oscillator/OmniOscillator");

var _Source = require("../source/Source");

var _Monophonic = require("./Monophonic");

/**
 * Synth is composed simply of a [[OmniOscillator]] routed through an [[AmplitudeEnvelope]].
 * ```
 * +----------------+   +-------------------+
 * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output
 * +----------------+   +-------------------+
 * ```
 * @example
 * const synth = new Tone.Synth().toDestination();
 * synth.triggerAttackRelease("C4", "8n");
 * @category Instrument
 */
class Synth extends _Monophonic.Monophonic {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Synth.getDefaults(), arguments));
    this.name = "Synth";
    const options = (0, _Defaults.optionsFromArguments)(Synth.getDefaults(), arguments);
    this.oscillator = new _OmniOscillator.OmniOscillator(Object.assign({
      context: this.context,
      detune: options.detune,
      onstop: () => this.onsilence(this)
    }, options.oscillator));
    this.frequency = this.oscillator.frequency;
    this.detune = this.oscillator.detune;
    this.envelope = new _AmplitudeEnvelope.AmplitudeEnvelope(Object.assign({
      context: this.context
    }, options.envelope)); // connect the oscillators to the output

    this.oscillator.chain(this.envelope, this.output);
    (0, _Interface.readOnly)(this, ["oscillator", "frequency", "detune", "envelope"]);
  }

  static getDefaults() {
    return Object.assign(_Monophonic.Monophonic.getDefaults(), {
      envelope: Object.assign((0, _Defaults.omitFromObject)(_Envelope.Envelope.getDefaults(), Object.keys(_ToneAudioNode.ToneAudioNode.getDefaults())), {
        attack: 0.005,
        decay: 0.1,
        release: 1,
        sustain: 0.3
      }),
      oscillator: Object.assign((0, _Defaults.omitFromObject)(_OmniOscillator.OmniOscillator.getDefaults(), [...Object.keys(_Source.Source.getDefaults()), "frequency", "detune"]), {
        type: "triangle"
      })
    });
  }
  /**
   * start the attack portion of the envelope
   * @param time the time the attack should start
   * @param velocity the velocity of the note (0-1)
   */


  _triggerEnvelopeAttack(time, velocity) {
    // the envelopes
    this.envelope.triggerAttack(time, velocity);
    this.oscillator.start(time); // if there is no release portion, stop the oscillator

    if (this.envelope.sustain === 0) {
      const computedAttack = this.toSeconds(this.envelope.attack);
      const computedDecay = this.toSeconds(this.envelope.decay);
      this.oscillator.stop(time + computedAttack + computedDecay);
    }
  }
  /**
   * start the release portion of the envelope
   * @param time the time the release should start
   */


  _triggerEnvelopeRelease(time) {
    this.envelope.triggerRelease(time);
    this.oscillator.stop(time + this.toSeconds(this.envelope.release));
  }

  getLevelAtTime(time) {
    time = this.toSeconds(time);
    return this.envelope.getValueAtTime(time);
  }
  /**
   * clean up
   */


  dispose() {
    super.dispose();
    this.oscillator.dispose();
    this.envelope.dispose();
    return this;
  }

}

exports.Synth = Synth;
},{"../component/envelope/AmplitudeEnvelope":"node_modules/tone/build/esm/component/envelope/AmplitudeEnvelope.js","../component/envelope/Envelope":"node_modules/tone/build/esm/component/envelope/Envelope.js","../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../source/oscillator/OmniOscillator":"node_modules/tone/build/esm/source/oscillator/OmniOscillator.js","../source/Source":"node_modules/tone/build/esm/source/Source.js","./Monophonic":"node_modules/tone/build/esm/instrument/Monophonic.js"}],"node_modules/tone/build/esm/instrument/ModulationSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModulationSynth = void 0;

var _Signal = require("../signal/Signal");

var _Multiply = require("../signal/Multiply");

var _Gain = require("../core/context/Gain");

var _Envelope = require("../component/envelope/Envelope");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Monophonic = require("./Monophonic");

var _OmniOscillator = require("../source/oscillator/OmniOscillator");

var _Source = require("../source/Source");

var _Synth = require("./Synth");

var _Interface = require("../core/util/Interface");

var _Defaults = require("../core/util/Defaults");

/**
 * Base class for both AM and FM synths
 */
class ModulationSynth extends _Monophonic.Monophonic {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(ModulationSynth.getDefaults(), arguments));
    this.name = "ModulationSynth";
    const options = (0, _Defaults.optionsFromArguments)(ModulationSynth.getDefaults(), arguments);
    this._carrier = new _Synth.Synth({
      context: this.context,
      oscillator: options.oscillator,
      envelope: options.envelope,
      onsilence: () => this.onsilence(this),
      volume: -10
    });
    this._modulator = new _Synth.Synth({
      context: this.context,
      oscillator: options.modulation,
      envelope: options.modulationEnvelope,
      volume: -10
    });
    this.oscillator = this._carrier.oscillator;
    this.envelope = this._carrier.envelope;
    this.modulation = this._modulator.oscillator;
    this.modulationEnvelope = this._modulator.envelope;
    this.frequency = new _Signal.Signal({
      context: this.context,
      units: "frequency"
    });
    this.detune = new _Signal.Signal({
      context: this.context,
      value: options.detune,
      units: "cents"
    });
    this.harmonicity = new _Multiply.Multiply({
      context: this.context,
      value: options.harmonicity,
      minValue: 0
    });
    this._modulationNode = new _Gain.Gain({
      context: this.context,
      gain: 0
    });
    (0, _Interface.readOnly)(this, ["frequency", "harmonicity", "oscillator", "envelope", "modulation", "modulationEnvelope", "detune"]);
  }

  static getDefaults() {
    return Object.assign(_Monophonic.Monophonic.getDefaults(), {
      harmonicity: 3,
      oscillator: Object.assign((0, _Defaults.omitFromObject)(_OmniOscillator.OmniOscillator.getDefaults(), [...Object.keys(_Source.Source.getDefaults()), "frequency", "detune"]), {
        type: "sine"
      }),
      envelope: Object.assign((0, _Defaults.omitFromObject)(_Envelope.Envelope.getDefaults(), Object.keys(_ToneAudioNode.ToneAudioNode.getDefaults())), {
        attack: 0.01,
        decay: 0.01,
        sustain: 1,
        release: 0.5
      }),
      modulation: Object.assign((0, _Defaults.omitFromObject)(_OmniOscillator.OmniOscillator.getDefaults(), [...Object.keys(_Source.Source.getDefaults()), "frequency", "detune"]), {
        type: "square"
      }),
      modulationEnvelope: Object.assign((0, _Defaults.omitFromObject)(_Envelope.Envelope.getDefaults(), Object.keys(_ToneAudioNode.ToneAudioNode.getDefaults())), {
        attack: 0.5,
        decay: 0.0,
        sustain: 1,
        release: 0.5
      })
    });
  }
  /**
   * Trigger the attack portion of the note
   */


  _triggerEnvelopeAttack(time, velocity) {
    // @ts-ignore
    this._carrier._triggerEnvelopeAttack(time, velocity); // @ts-ignore


    this._modulator._triggerEnvelopeAttack(time, velocity);
  }
  /**
   * Trigger the release portion of the note
   */


  _triggerEnvelopeRelease(time) {
    // @ts-ignore
    this._carrier._triggerEnvelopeRelease(time); // @ts-ignore


    this._modulator._triggerEnvelopeRelease(time);

    return this;
  }

  getLevelAtTime(time) {
    time = this.toSeconds(time);
    return this.envelope.getValueAtTime(time);
  }

  dispose() {
    super.dispose();

    this._carrier.dispose();

    this._modulator.dispose();

    this.frequency.dispose();
    this.detune.dispose();
    this.harmonicity.dispose();

    this._modulationNode.dispose();

    return this;
  }

}

exports.ModulationSynth = ModulationSynth;
},{"../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../signal/Multiply":"node_modules/tone/build/esm/signal/Multiply.js","../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../component/envelope/Envelope":"node_modules/tone/build/esm/component/envelope/Envelope.js","../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","./Monophonic":"node_modules/tone/build/esm/instrument/Monophonic.js","../source/oscillator/OmniOscillator":"node_modules/tone/build/esm/source/oscillator/OmniOscillator.js","../source/Source":"node_modules/tone/build/esm/source/Source.js","./Synth":"node_modules/tone/build/esm/instrument/Synth.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js"}],"node_modules/tone/build/esm/instrument/AMSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AMSynth = void 0;

var _AudioToGain = require("../signal/AudioToGain");

var _Defaults = require("../core/util/Defaults");

var _ModulationSynth = require("./ModulationSynth");

/**
 * AMSynth uses the output of one Tone.Synth to modulate the
 * amplitude of another Tone.Synth. The harmonicity (the ratio between
 * the two signals) affects the timbre of the output signal greatly.
 * Read more about Amplitude Modulation Synthesis on
 * [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).
 *
 * @example
 * const synth = new Tone.AMSynth().toDestination();
 * synth.triggerAttackRelease("C4", "4n");
 *
 * @category Instrument
 */
class AMSynth extends _ModulationSynth.ModulationSynth {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(AMSynth.getDefaults(), arguments));
    this.name = "AMSynth";
    this._modulationScale = new _AudioToGain.AudioToGain({
      context: this.context
    }); // control the two voices frequency

    this.frequency.connect(this._carrier.frequency);
    this.frequency.chain(this.harmonicity, this._modulator.frequency);
    this.detune.fan(this._carrier.detune, this._modulator.detune);

    this._modulator.chain(this._modulationScale, this._modulationNode.gain);

    this._carrier.chain(this._modulationNode, this.output);
  }

  dispose() {
    super.dispose();

    this._modulationScale.dispose();

    return this;
  }

}

exports.AMSynth = AMSynth;
},{"../signal/AudioToGain":"node_modules/tone/build/esm/signal/AudioToGain.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./ModulationSynth":"node_modules/tone/build/esm/instrument/ModulationSynth.js"}],"node_modules/tone/build/esm/component/filter/BiquadFilter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BiquadFilter = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Param = require("../../core/context/Param");

var _Debug = require("../../core/util/Debug");

/**
 * Thin wrapper around the native Web Audio [BiquadFilterNode](https://webaudio.github.io/web-audio-api/#biquadfilternode).
 * BiquadFilter is similar to [[Filter]] but doesn't have the option to set the "rolloff" value.
 * @category Component
 */
class BiquadFilter extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(BiquadFilter.getDefaults(), arguments, ["frequency", "type"]));
    this.name = "BiquadFilter";
    const options = (0, _Defaults.optionsFromArguments)(BiquadFilter.getDefaults(), arguments, ["frequency", "type"]);
    this._filter = this.context.createBiquadFilter();
    this.input = this.output = this._filter;
    this.Q = new _Param.Param({
      context: this.context,
      units: "number",
      value: options.Q,
      param: this._filter.Q
    });
    this.frequency = new _Param.Param({
      context: this.context,
      units: "frequency",
      value: options.frequency,
      param: this._filter.frequency
    });
    this.detune = new _Param.Param({
      context: this.context,
      units: "cents",
      value: options.detune,
      param: this._filter.detune
    });
    this.gain = new _Param.Param({
      context: this.context,
      units: "decibels",
      convert: false,
      value: options.gain,
      param: this._filter.gain
    });
    this.type = options.type;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      Q: 1,
      type: "lowpass",
      frequency: 350,
      detune: 0,
      gain: 0
    });
  }
  /**
   * The type of this BiquadFilterNode. For a complete list of types and their attributes, see the
   * [Web Audio API](https://webaudio.github.io/web-audio-api/#dom-biquadfiltertype-lowpass)
   */


  get type() {
    return this._filter.type;
  }

  set type(type) {
    const types = ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "notch", "allpass", "peaking"];
    (0, _Debug.assert)(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);
    this._filter.type = type;
  }
  /**
   * Get the frequency response curve. This curve represents how the filter
   * responses to frequencies between 20hz-20khz.
   * @param  len The number of values to return
   * @return The frequency response curve between 20-20kHz
   */


  getFrequencyResponse(len = 128) {
    // start with all 1s
    const freqValues = new Float32Array(len);

    for (let i = 0; i < len; i++) {
      const norm = Math.pow(i / len, 2);
      const freq = norm * (20000 - 20) + 20;
      freqValues[i] = freq;
    }

    const magValues = new Float32Array(len);
    const phaseValues = new Float32Array(len); // clone the filter to remove any connections which may be changing the value

    const filterClone = this.context.createBiquadFilter();
    filterClone.type = this.type;
    filterClone.Q.value = this.Q.value;
    filterClone.frequency.value = this.frequency.value;
    filterClone.gain.value = this.gain.value;
    filterClone.getFrequencyResponse(freqValues, magValues, phaseValues);
    return magValues;
  }

  dispose() {
    super.dispose();

    this._filter.disconnect();

    this.Q.dispose();
    this.frequency.dispose();
    this.gain.dispose();
    this.detune.dispose();
    return this;
  }

}

exports.BiquadFilter = BiquadFilter;
},{"../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/context/Param":"node_modules/tone/build/esm/core/context/Param.js","../../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/component/filter/Filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Filter = void 0;

var _Gain = require("../../core/context/Gain");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _TypeCheck = require("../../core/util/TypeCheck");

var _Signal = require("../../signal/Signal");

var _Debug = require("../../core/util/Debug");

var _BiquadFilter = require("./BiquadFilter");

/**
 * Tone.Filter is a filter which allows for all of the same native methods
 * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).
 * Tone.Filter has the added ability to set the filter rolloff at -12
 * (default), -24 and -48.
 * @example
 * const filter = new Tone.Filter(1500, "highpass").toDestination();
 * filter.frequency.rampTo(20000, 10);
 * const noise = new Tone.Noise().connect(filter).start();
 * @category Component
 */
class Filter extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Filter.getDefaults(), arguments, ["frequency", "type", "rolloff"]));
    this.name = "Filter";
    this.input = new _Gain.Gain({
      context: this.context
    });
    this.output = new _Gain.Gain({
      context: this.context
    });
    this._filters = [];
    const options = (0, _Defaults.optionsFromArguments)(Filter.getDefaults(), arguments, ["frequency", "type", "rolloff"]);
    this._filters = [];
    this.Q = new _Signal.Signal({
      context: this.context,
      units: "positive",
      value: options.Q
    });
    this.frequency = new _Signal.Signal({
      context: this.context,
      units: "frequency",
      value: options.frequency
    });
    this.detune = new _Signal.Signal({
      context: this.context,
      units: "cents",
      value: options.detune
    });
    this.gain = new _Signal.Signal({
      context: this.context,
      units: "decibels",
      convert: false,
      value: options.gain
    });
    this._type = options.type;
    this.rolloff = options.rolloff;
    (0, _Interface.readOnly)(this, ["detune", "frequency", "gain", "Q"]);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      Q: 1,
      detune: 0,
      frequency: 350,
      gain: 0,
      rolloff: -12,
      type: "lowpass"
    });
  }
  /**
   * The type of the filter. Types: "lowpass", "highpass",
   * "bandpass", "lowshelf", "highshelf", "notch", "allpass", or "peaking".
   */


  get type() {
    return this._type;
  }

  set type(type) {
    const types = ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "notch", "allpass", "peaking"];
    (0, _Debug.assert)(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);
    this._type = type;

    this._filters.forEach(filter => filter.type = type);
  }
  /**
   * The rolloff of the filter which is the drop in db
   * per octave. Implemented internally by cascading filters.
   * Only accepts the values -12, -24, -48 and -96.
   */


  get rolloff() {
    return this._rolloff;
  }

  set rolloff(rolloff) {
    const rolloffNum = (0, _TypeCheck.isNumber)(rolloff) ? rolloff : parseInt(rolloff, 10);
    const possibilities = [-12, -24, -48, -96];
    let cascadingCount = possibilities.indexOf(rolloffNum); // check the rolloff is valid

    (0, _Debug.assert)(cascadingCount !== -1, `rolloff can only be ${possibilities.join(", ")}`);
    cascadingCount += 1;
    this._rolloff = rolloffNum;
    this.input.disconnect();

    this._filters.forEach(filter => filter.disconnect());

    this._filters = new Array(cascadingCount);

    for (let count = 0; count < cascadingCount; count++) {
      const filter = new _BiquadFilter.BiquadFilter({
        context: this.context
      });
      filter.type = this._type;
      this.frequency.connect(filter.frequency);
      this.detune.connect(filter.detune);
      this.Q.connect(filter.Q);
      this.gain.connect(filter.gain);
      this._filters[count] = filter;
    }

    this._internalChannels = this._filters;
    (0, _ToneAudioNode.connectSeries)(this.input, ...this._internalChannels, this.output);
  }
  /**
   * Get the frequency response curve. This curve represents how the filter
   * responses to frequencies between 20hz-20khz.
   * @param  len The number of values to return
   * @return The frequency response curve between 20-20kHz
   */


  getFrequencyResponse(len = 128) {
    const filterClone = new _BiquadFilter.BiquadFilter({
      frequency: this.frequency.value,
      gain: this.gain.value,
      Q: this.Q.value,
      type: this._type,
      detune: this.detune.value
    }); // start with all 1s

    const totalResponse = new Float32Array(len).map(() => 1);

    this._filters.forEach(() => {
      const response = filterClone.getFrequencyResponse(len);
      response.forEach((val, i) => totalResponse[i] *= val);
    });

    filterClone.dispose();
    return totalResponse;
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    this._filters.forEach(filter => {
      filter.dispose();
    });

    (0, _Interface.writable)(this, ["detune", "frequency", "gain", "Q"]);
    this.frequency.dispose();
    this.Q.dispose();
    this.detune.dispose();
    this.gain.dispose();
    return this;
  }

}

exports.Filter = Filter;
},{"../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../../core/util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","../../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js","./BiquadFilter":"node_modules/tone/build/esm/component/filter/BiquadFilter.js"}],"node_modules/tone/build/esm/component/envelope/FrequencyEnvelope.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FrequencyEnvelope = void 0;

var _Defaults = require("../../core/util/Defaults");

var _Envelope = require("./Envelope");

var _Scale = require("../../signal/Scale");

var _Pow = require("../../signal/Pow");

var _Debug = require("../../core/util/Debug");

/**
 * FrequencyEnvelope is an [[Envelope]] which ramps between [[baseFrequency]]
 * and [[octaves]]. It can also have an optional [[exponent]] to adjust the curve
 * which it ramps.
 * @example
 * const oscillator = new Tone.Oscillator().toDestination().start();
 * const freqEnv = new Tone.FrequencyEnvelope({
 * 	attack: 0.2,
 * 	baseFrequency: "C2",
 * 	octaves: 4
 * });
 * freqEnv.connect(oscillator.frequency);
 * freqEnv.triggerAttack();
 * @category Component
 */
class FrequencyEnvelope extends _Envelope.Envelope {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(FrequencyEnvelope.getDefaults(), arguments, ["attack", "decay", "sustain", "release"]));
    this.name = "FrequencyEnvelope";
    const options = (0, _Defaults.optionsFromArguments)(FrequencyEnvelope.getDefaults(), arguments, ["attack", "decay", "sustain", "release"]);
    this._octaves = options.octaves;
    this._baseFrequency = this.toFrequency(options.baseFrequency);
    this._exponent = this.input = new _Pow.Pow({
      context: this.context,
      value: options.exponent
    });
    this._scale = this.output = new _Scale.Scale({
      context: this.context,
      min: this._baseFrequency,
      max: this._baseFrequency * Math.pow(2, this._octaves)
    });

    this._sig.chain(this._exponent, this._scale);
  }

  static getDefaults() {
    return Object.assign(_Envelope.Envelope.getDefaults(), {
      baseFrequency: 200,
      exponent: 1,
      octaves: 4
    });
  }
  /**
   * The envelope's minimum output value. This is the value which it
   * starts at.
   */


  get baseFrequency() {
    return this._baseFrequency;
  }

  set baseFrequency(min) {
    const freq = this.toFrequency(min);
    (0, _Debug.assertRange)(freq, 0);
    this._baseFrequency = freq;
    this._scale.min = this._baseFrequency; // update the max value when the min changes

    this.octaves = this._octaves;
  }
  /**
   * The number of octaves above the baseFrequency that the
   * envelope will scale to.
   */


  get octaves() {
    return this._octaves;
  }

  set octaves(octaves) {
    this._octaves = octaves;
    this._scale.max = this._baseFrequency * Math.pow(2, octaves);
  }
  /**
   * The envelope's exponent value.
   */


  get exponent() {
    return this._exponent.value;
  }

  set exponent(exponent) {
    this._exponent.value = exponent;
  }
  /**
   * Clean up
   */


  dispose() {
    super.dispose();

    this._exponent.dispose();

    this._scale.dispose();

    return this;
  }

}

exports.FrequencyEnvelope = FrequencyEnvelope;
},{"../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./Envelope":"node_modules/tone/build/esm/component/envelope/Envelope.js","../../signal/Scale":"node_modules/tone/build/esm/signal/Scale.js","../../signal/Pow":"node_modules/tone/build/esm/signal/Pow.js","../../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/instrument/MonoSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MonoSynth = void 0;

var _AmplitudeEnvelope = require("../component/envelope/AmplitudeEnvelope");

var _Envelope = require("../component/envelope/Envelope");

var _Filter = require("../component/filter/Filter");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _Monophonic = require("../instrument/Monophonic");

var _OmniOscillator = require("../source/oscillator/OmniOscillator");

var _Source = require("../source/Source");

var _FrequencyEnvelope = require("../component/envelope/FrequencyEnvelope");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

/**
 * MonoSynth is composed of one `oscillator`, one `filter`, and two `envelopes`.
 * The amplitude of the Oscillator and the cutoff frequency of the
 * Filter are controlled by Envelopes.
 * <img src="https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240">
 * @example
 * const synth = new Tone.MonoSynth({
 * 	oscillator: {
 * 		type: "square"
 * 	},
 * 	envelope: {
 * 		attack: 0.1
 * 	}
 * }).toDestination();
 * synth.triggerAttackRelease("C4", "8n");
 * @category Instrument
 */
class MonoSynth extends _Monophonic.Monophonic {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(MonoSynth.getDefaults(), arguments));
    this.name = "MonoSynth";
    const options = (0, _Defaults.optionsFromArguments)(MonoSynth.getDefaults(), arguments);
    this.oscillator = new _OmniOscillator.OmniOscillator(Object.assign(options.oscillator, {
      context: this.context,
      detune: options.detune,
      onstop: () => this.onsilence(this)
    }));
    this.frequency = this.oscillator.frequency;
    this.detune = this.oscillator.detune;
    this.filter = new _Filter.Filter(Object.assign(options.filter, {
      context: this.context
    }));
    this.filterEnvelope = new _FrequencyEnvelope.FrequencyEnvelope(Object.assign(options.filterEnvelope, {
      context: this.context
    }));
    this.envelope = new _AmplitudeEnvelope.AmplitudeEnvelope(Object.assign(options.envelope, {
      context: this.context
    })); // connect the oscillators to the output

    this.oscillator.chain(this.filter, this.envelope, this.output); // connect the filter envelope

    this.filterEnvelope.connect(this.filter.frequency);
    (0, _Interface.readOnly)(this, ["oscillator", "frequency", "detune", "filter", "filterEnvelope", "envelope"]);
  }

  static getDefaults() {
    return Object.assign(_Monophonic.Monophonic.getDefaults(), {
      envelope: Object.assign((0, _Defaults.omitFromObject)(_Envelope.Envelope.getDefaults(), Object.keys(_ToneAudioNode.ToneAudioNode.getDefaults())), {
        attack: 0.005,
        decay: 0.1,
        release: 1,
        sustain: 0.9
      }),
      filter: Object.assign((0, _Defaults.omitFromObject)(_Filter.Filter.getDefaults(), Object.keys(_ToneAudioNode.ToneAudioNode.getDefaults())), {
        Q: 1,
        rolloff: -12,
        type: "lowpass"
      }),
      filterEnvelope: Object.assign((0, _Defaults.omitFromObject)(_FrequencyEnvelope.FrequencyEnvelope.getDefaults(), Object.keys(_ToneAudioNode.ToneAudioNode.getDefaults())), {
        attack: 0.6,
        baseFrequency: 200,
        decay: 0.2,
        exponent: 2,
        octaves: 3,
        release: 2,
        sustain: 0.5
      }),
      oscillator: Object.assign((0, _Defaults.omitFromObject)(_OmniOscillator.OmniOscillator.getDefaults(), Object.keys(_Source.Source.getDefaults())), {
        type: "sawtooth"
      })
    });
  }
  /**
   * start the attack portion of the envelope
   * @param time the time the attack should start
   * @param velocity the velocity of the note (0-1)
   */


  _triggerEnvelopeAttack(time, velocity = 1) {
    this.envelope.triggerAttack(time, velocity);
    this.filterEnvelope.triggerAttack(time);
    this.oscillator.start(time);

    if (this.envelope.sustain === 0) {
      const computedAttack = this.toSeconds(this.envelope.attack);
      const computedDecay = this.toSeconds(this.envelope.decay);
      this.oscillator.stop(time + computedAttack + computedDecay);
    }
  }
  /**
   * start the release portion of the envelope
   * @param time the time the release should start
   */


  _triggerEnvelopeRelease(time) {
    this.envelope.triggerRelease(time);
    this.filterEnvelope.triggerRelease(time);
    this.oscillator.stop(time + this.toSeconds(this.envelope.release));
  }

  getLevelAtTime(time) {
    time = this.toSeconds(time);
    return this.envelope.getValueAtTime(time);
  }

  dispose() {
    super.dispose();
    this.oscillator.dispose();
    this.envelope.dispose();
    this.filterEnvelope.dispose();
    this.filter.dispose();
    return this;
  }

}

exports.MonoSynth = MonoSynth;
},{"../component/envelope/AmplitudeEnvelope":"node_modules/tone/build/esm/component/envelope/AmplitudeEnvelope.js","../component/envelope/Envelope":"node_modules/tone/build/esm/component/envelope/Envelope.js","../component/filter/Filter":"node_modules/tone/build/esm/component/filter/Filter.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../instrument/Monophonic":"node_modules/tone/build/esm/instrument/Monophonic.js","../source/oscillator/OmniOscillator":"node_modules/tone/build/esm/source/oscillator/OmniOscillator.js","../source/Source":"node_modules/tone/build/esm/source/Source.js","../component/envelope/FrequencyEnvelope":"node_modules/tone/build/esm/component/envelope/FrequencyEnvelope.js","../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js"}],"node_modules/tone/build/esm/instrument/DuoSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DuoSynth = void 0;

var _Monophonic = require("./Monophonic");

var _MonoSynth = require("./MonoSynth");

var _Signal = require("../signal/Signal");

var _Interface = require("../core/util/Interface");

var _LFO = require("../source/oscillator/LFO");

var _Gain = require("../core/context/Gain");

var _Multiply = require("../signal/Multiply");

var _Defaults = require("../core/util/Defaults");

/**
 * DuoSynth is a monophonic synth composed of two [[MonoSynths]] run in parallel with control over the
 * frequency ratio between the two voices and vibrato effect.
 * @example
 * const duoSynth = new Tone.DuoSynth().toDestination();
 * duoSynth.triggerAttackRelease("C4", "2n");
 * @category Instrument
 */
class DuoSynth extends _Monophonic.Monophonic {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(DuoSynth.getDefaults(), arguments));
    this.name = "DuoSynth";
    const options = (0, _Defaults.optionsFromArguments)(DuoSynth.getDefaults(), arguments);
    this.voice0 = new _MonoSynth.MonoSynth(Object.assign(options.voice0, {
      context: this.context,
      onsilence: () => this.onsilence(this)
    }));
    this.voice1 = new _MonoSynth.MonoSynth(Object.assign(options.voice1, {
      context: this.context
    }));
    this.harmonicity = new _Multiply.Multiply({
      context: this.context,
      units: "positive",
      value: options.harmonicity
    });
    this._vibrato = new _LFO.LFO({
      frequency: options.vibratoRate,
      context: this.context,
      min: -50,
      max: 50
    }); // start the vibrato immediately

    this._vibrato.start();

    this.vibratoRate = this._vibrato.frequency;
    this._vibratoGain = new _Gain.Gain({
      context: this.context,
      units: "normalRange",
      gain: options.vibratoAmount
    });
    this.vibratoAmount = this._vibratoGain.gain;
    this.frequency = new _Signal.Signal({
      context: this.context,
      units: "frequency",
      value: 440
    });
    this.detune = new _Signal.Signal({
      context: this.context,
      units: "cents",
      value: options.detune
    }); // control the two voices frequency

    this.frequency.connect(this.voice0.frequency);
    this.frequency.chain(this.harmonicity, this.voice1.frequency);

    this._vibrato.connect(this._vibratoGain);

    this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);

    this.detune.fan(this.voice0.detune, this.voice1.detune);
    this.voice0.connect(this.output);
    this.voice1.connect(this.output);
    (0, _Interface.readOnly)(this, ["voice0", "voice1", "frequency", "vibratoAmount", "vibratoRate"]);
  }

  getLevelAtTime(time) {
    time = this.toSeconds(time);
    return this.voice0.envelope.getValueAtTime(time) + this.voice1.envelope.getValueAtTime(time);
  }

  static getDefaults() {
    return (0, _Defaults.deepMerge)(_Monophonic.Monophonic.getDefaults(), {
      vibratoAmount: 0.5,
      vibratoRate: 5,
      harmonicity: 1.5,
      voice0: (0, _Defaults.deepMerge)((0, _Defaults.omitFromObject)(_MonoSynth.MonoSynth.getDefaults(), Object.keys(_Monophonic.Monophonic.getDefaults())), {
        filterEnvelope: {
          attack: 0.01,
          decay: 0.0,
          sustain: 1,
          release: 0.5
        },
        envelope: {
          attack: 0.01,
          decay: 0.0,
          sustain: 1,
          release: 0.5
        }
      }),
      voice1: (0, _Defaults.deepMerge)((0, _Defaults.omitFromObject)(_MonoSynth.MonoSynth.getDefaults(), Object.keys(_Monophonic.Monophonic.getDefaults())), {
        filterEnvelope: {
          attack: 0.01,
          decay: 0.0,
          sustain: 1,
          release: 0.5
        },
        envelope: {
          attack: 0.01,
          decay: 0.0,
          sustain: 1,
          release: 0.5
        }
      })
    });
  }
  /**
   * Trigger the attack portion of the note
   */


  _triggerEnvelopeAttack(time, velocity) {
    // @ts-ignore
    this.voice0._triggerEnvelopeAttack(time, velocity); // @ts-ignore


    this.voice1._triggerEnvelopeAttack(time, velocity);
  }
  /**
   * Trigger the release portion of the note
   */


  _triggerEnvelopeRelease(time) {
    // @ts-ignore
    this.voice0._triggerEnvelopeRelease(time); // @ts-ignore


    this.voice1._triggerEnvelopeRelease(time);

    return this;
  }

  dispose() {
    super.dispose();
    this.voice0.dispose();
    this.voice1.dispose();
    this.frequency.dispose();
    this.detune.dispose();

    this._vibrato.dispose();

    this.vibratoRate.dispose();

    this._vibratoGain.dispose();

    this.harmonicity.dispose();
    return this;
  }

}

exports.DuoSynth = DuoSynth;
},{"./Monophonic":"node_modules/tone/build/esm/instrument/Monophonic.js","./MonoSynth":"node_modules/tone/build/esm/instrument/MonoSynth.js","../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../source/oscillator/LFO":"node_modules/tone/build/esm/source/oscillator/LFO.js","../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../signal/Multiply":"node_modules/tone/build/esm/signal/Multiply.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js"}],"node_modules/tone/build/esm/instrument/FMSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FMSynth = void 0;

var _Defaults = require("../core/util/Defaults");

var _Multiply = require("../signal/Multiply");

var _ModulationSynth = require("./ModulationSynth");

/**
 * FMSynth is composed of two Tone.Synths where one Tone.Synth modulates
 * the frequency of a second Tone.Synth. A lot of spectral content
 * can be explored using the modulationIndex parameter. Read more about
 * frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).
 *
 * @example
 * const fmSynth = new Tone.FMSynth().toDestination();
 * fmSynth.triggerAttackRelease("C5", "4n");
 *
 * @category Instrument
 */
class FMSynth extends _ModulationSynth.ModulationSynth {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(FMSynth.getDefaults(), arguments));
    this.name = "FMSynth";
    const options = (0, _Defaults.optionsFromArguments)(FMSynth.getDefaults(), arguments);
    this.modulationIndex = new _Multiply.Multiply({
      context: this.context,
      value: options.modulationIndex
    }); // control the two voices frequency

    this.frequency.connect(this._carrier.frequency);
    this.frequency.chain(this.harmonicity, this._modulator.frequency);
    this.frequency.chain(this.modulationIndex, this._modulationNode);
    this.detune.fan(this._carrier.detune, this._modulator.detune);

    this._modulator.connect(this._modulationNode.gain);

    this._modulationNode.connect(this._carrier.frequency);

    this._carrier.connect(this.output);
  }

  static getDefaults() {
    return Object.assign(_ModulationSynth.ModulationSynth.getDefaults(), {
      modulationIndex: 10
    });
  }

  dispose() {
    super.dispose();
    this.modulationIndex.dispose();
    return this;
  }

}

exports.FMSynth = FMSynth;
},{"../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../signal/Multiply":"node_modules/tone/build/esm/signal/Multiply.js","./ModulationSynth":"node_modules/tone/build/esm/instrument/ModulationSynth.js"}],"node_modules/tone/build/esm/instrument/MetalSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MetalSynth = void 0;

var _Envelope = require("../component/envelope/Envelope");

var _Filter = require("../component/filter/Filter");

var _Gain = require("../core/context/Gain");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _Multiply = require("../signal/Multiply");

var _Scale = require("../signal/Scale");

var _Signal = require("../signal/Signal");

var _FMOscillator = require("../source/oscillator/FMOscillator");

var _Monophonic = require("./Monophonic");

/**
 * Inharmonic ratio of frequencies based on the Roland TR-808
 * Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model
 */
const inharmRatios = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];
/**
 * A highly inharmonic and spectrally complex source with a highpass filter
 * and amplitude envelope which is good for making metallophone sounds.
 * Based on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).
 * Inspiration from [Sound on Sound](https://shorturl.at/rSZ12).
 * @category Instrument
 */

class MetalSynth extends _Monophonic.Monophonic {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(MetalSynth.getDefaults(), arguments));
    this.name = "MetalSynth";
    /**
     * The array of FMOscillators
     */

    this._oscillators = [];
    /**
     * The frequency multipliers
     */

    this._freqMultipliers = [];
    const options = (0, _Defaults.optionsFromArguments)(MetalSynth.getDefaults(), arguments);
    this.detune = new _Signal.Signal({
      context: this.context,
      units: "cents",
      value: options.detune
    });
    this.frequency = new _Signal.Signal({
      context: this.context,
      units: "frequency"
    });
    this._amplitude = new _Gain.Gain({
      context: this.context,
      gain: 0
    }).connect(this.output);
    this._highpass = new _Filter.Filter({
      // Q: -3.0102999566398125,
      Q: 0,
      context: this.context,
      type: "highpass"
    }).connect(this._amplitude);

    for (let i = 0; i < inharmRatios.length; i++) {
      const osc = new _FMOscillator.FMOscillator({
        context: this.context,
        harmonicity: options.harmonicity,
        modulationIndex: options.modulationIndex,
        modulationType: "square",
        onstop: i === 0 ? () => this.onsilence(this) : _Interface.noOp,
        type: "square"
      });
      osc.connect(this._highpass);
      this._oscillators[i] = osc;
      const mult = new _Multiply.Multiply({
        context: this.context,
        value: inharmRatios[i]
      });
      this._freqMultipliers[i] = mult;
      this.frequency.chain(mult, osc.frequency);
      this.detune.connect(osc.detune);
    }

    this._filterFreqScaler = new _Scale.Scale({
      context: this.context,
      max: 7000,
      min: this.toFrequency(options.resonance)
    });
    this.envelope = new _Envelope.Envelope({
      attack: options.envelope.attack,
      attackCurve: "linear",
      context: this.context,
      decay: options.envelope.decay,
      release: options.envelope.release,
      sustain: 0
    });
    this.envelope.chain(this._filterFreqScaler, this._highpass.frequency);
    this.envelope.connect(this._amplitude.gain); // set the octaves

    this._octaves = options.octaves;
    this.octaves = options.octaves;
  }

  static getDefaults() {
    return (0, _Defaults.deepMerge)(_Monophonic.Monophonic.getDefaults(), {
      envelope: Object.assign((0, _Defaults.omitFromObject)(_Envelope.Envelope.getDefaults(), Object.keys(_ToneAudioNode.ToneAudioNode.getDefaults())), {
        attack: 0.001,
        decay: 1.4,
        release: 0.2
      }),
      harmonicity: 5.1,
      modulationIndex: 32,
      octaves: 1.5,
      resonance: 4000
    });
  }
  /**
   * Trigger the attack.
   * @param time When the attack should be triggered.
   * @param velocity The velocity that the envelope should be triggered at.
   */


  _triggerEnvelopeAttack(time, velocity = 1) {
    this.envelope.triggerAttack(time, velocity);

    this._oscillators.forEach(osc => osc.start(time));

    if (this.envelope.sustain === 0) {
      this._oscillators.forEach(osc => {
        osc.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));
      });
    }

    return this;
  }
  /**
   * Trigger the release of the envelope.
   * @param time When the release should be triggered.
   */


  _triggerEnvelopeRelease(time) {
    this.envelope.triggerRelease(time);

    this._oscillators.forEach(osc => osc.stop(time + this.toSeconds(this.envelope.release)));

    return this;
  }

  getLevelAtTime(time) {
    time = this.toSeconds(time);
    return this.envelope.getValueAtTime(time);
  }
  /**
   * The modulationIndex of the oscillators which make up the source.
   * see [[FMOscillator.modulationIndex]]
   * @min 1
   * @max 100
   */


  get modulationIndex() {
    return this._oscillators[0].modulationIndex.value;
  }

  set modulationIndex(val) {
    this._oscillators.forEach(osc => osc.modulationIndex.value = val);
  }
  /**
   * The harmonicity of the oscillators which make up the source.
   * see Tone.FMOscillator.harmonicity
   * @min 0.1
   * @max 10
   */


  get harmonicity() {
    return this._oscillators[0].harmonicity.value;
  }

  set harmonicity(val) {
    this._oscillators.forEach(osc => osc.harmonicity.value = val);
  }
  /**
   * The lower level of the highpass filter which is attached to the envelope.
   * This value should be between [0, 7000]
   * @min 0
   * @max 7000
   */


  get resonance() {
    return this._filterFreqScaler.min;
  }

  set resonance(val) {
    this._filterFreqScaler.min = this.toFrequency(val);
    this.octaves = this._octaves;
  }
  /**
   * The number of octaves above the "resonance" frequency
   * that the filter ramps during the attack/decay envelope
   * @min 0
   * @max 8
   */


  get octaves() {
    return this._octaves;
  }

  set octaves(val) {
    this._octaves = val;
    this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, val);
  }

  dispose() {
    super.dispose();

    this._oscillators.forEach(osc => osc.dispose());

    this._freqMultipliers.forEach(freqMult => freqMult.dispose());

    this.frequency.dispose();
    this.detune.dispose();

    this._filterFreqScaler.dispose();

    this._amplitude.dispose();

    this.envelope.dispose();

    this._highpass.dispose();

    return this;
  }

}

exports.MetalSynth = MetalSynth;
},{"../component/envelope/Envelope":"node_modules/tone/build/esm/component/envelope/Envelope.js","../component/filter/Filter":"node_modules/tone/build/esm/component/filter/Filter.js","../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../signal/Multiply":"node_modules/tone/build/esm/signal/Multiply.js","../signal/Scale":"node_modules/tone/build/esm/signal/Scale.js","../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../source/oscillator/FMOscillator":"node_modules/tone/build/esm/source/oscillator/FMOscillator.js","./Monophonic":"node_modules/tone/build/esm/instrument/Monophonic.js"}],"node_modules/tone/build/esm/instrument/MembraneSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MembraneSynth = void 0;

var _tslib = require("tslib");

var _Frequency = require("../core/type/Frequency");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _Monophonic = require("./Monophonic");

var _Synth = require("./Synth");

var _Decorator = require("../core/util/Decorator");

/**
 * MembraneSynth makes kick and tom sounds using a single oscillator
 * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator
 * is routed through a Tone.AmplitudeEnvelope to the output. The drum
 * quality of the sound comes from the frequency envelope applied
 * during MembraneSynth.triggerAttack(note). The frequency envelope
 * starts at <code>note * .octaves</code> and ramps to <code>note</code>
 * over the duration of <code>.pitchDecay</code>.
 * @example
 * const synth = new Tone.MembraneSynth().toDestination();
 * synth.triggerAttackRelease("C2", "8n");
 * @category Instrument
 */
class MembraneSynth extends _Synth.Synth {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(MembraneSynth.getDefaults(), arguments));
    this.name = "MembraneSynth";
    /**
     * Portamento is ignored in this synth. use pitch decay instead.
     */

    this.portamento = 0;
    const options = (0, _Defaults.optionsFromArguments)(MembraneSynth.getDefaults(), arguments);
    this.pitchDecay = options.pitchDecay;
    this.octaves = options.octaves;
    (0, _Interface.readOnly)(this, ["oscillator", "envelope"]);
  }

  static getDefaults() {
    return (0, _Defaults.deepMerge)(_Monophonic.Monophonic.getDefaults(), _Synth.Synth.getDefaults(), {
      envelope: {
        attack: 0.001,
        attackCurve: "exponential",
        decay: 0.4,
        release: 1.4,
        sustain: 0.01
      },
      octaves: 10,
      oscillator: {
        type: "sine"
      },
      pitchDecay: 0.05
    });
  }

  setNote(note, time) {
    const seconds = this.toSeconds(time);
    const hertz = this.toFrequency(note instanceof _Frequency.FrequencyClass ? note.toFrequency() : note);
    const maxNote = hertz * this.octaves;
    this.oscillator.frequency.setValueAtTime(maxNote, seconds);
    this.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));
    return this;
  }

  dispose() {
    super.dispose();
    return this;
  }

}

exports.MembraneSynth = MembraneSynth;
(0, _tslib.__decorate)([(0, _Decorator.range)(0)], MembraneSynth.prototype, "octaves", void 0);
(0, _tslib.__decorate)([(0, _Decorator.timeRange)(0)], MembraneSynth.prototype, "pitchDecay", void 0);
},{"tslib":"node_modules/tslib/tslib.es6.js","../core/type/Frequency":"node_modules/tone/build/esm/core/type/Frequency.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","./Monophonic":"node_modules/tone/build/esm/instrument/Monophonic.js","./Synth":"node_modules/tone/build/esm/instrument/Synth.js","../core/util/Decorator":"node_modules/tone/build/esm/core/util/Decorator.js"}],"node_modules/tone/build/esm/instrument/NoiseSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoiseSynth = void 0;

var _AmplitudeEnvelope = require("../component/envelope/AmplitudeEnvelope");

var _Defaults = require("../core/util/Defaults");

var _Noise = require("../source/Noise");

var _Instrument = require("./Instrument");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Envelope = require("../component/envelope/Envelope");

var _Source = require("../source/Source");

/**
 * Tone.NoiseSynth is composed of [[Noise]] through an [[AmplitudeEnvelope]].
 * ```
 * +-------+   +-------------------+
 * | Noise +>--> AmplitudeEnvelope +>--> Output
 * +-------+   +-------------------+
 * ```
 * @example
 * const noiseSynth = new Tone.NoiseSynth().toDestination();
 * noiseSynth.triggerAttackRelease("8n", 0.05);
 * @category Instrument
 */
class NoiseSynth extends _Instrument.Instrument {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(NoiseSynth.getDefaults(), arguments));
    this.name = "NoiseSynth";
    const options = (0, _Defaults.optionsFromArguments)(NoiseSynth.getDefaults(), arguments);
    this.noise = new _Noise.Noise(Object.assign({
      context: this.context
    }, options.noise));
    this.envelope = new _AmplitudeEnvelope.AmplitudeEnvelope(Object.assign({
      context: this.context
    }, options.envelope)); // connect the noise to the output

    this.noise.chain(this.envelope, this.output);
  }

  static getDefaults() {
    return Object.assign(_Instrument.Instrument.getDefaults(), {
      envelope: Object.assign((0, _Defaults.omitFromObject)(_Envelope.Envelope.getDefaults(), Object.keys(_ToneAudioNode.ToneAudioNode.getDefaults())), {
        decay: 0.1,
        sustain: 0.0
      }),
      noise: Object.assign((0, _Defaults.omitFromObject)(_Noise.Noise.getDefaults(), Object.keys(_Source.Source.getDefaults())), {
        type: "white"
      })
    });
  }
  /**
   * Start the attack portion of the envelopes. Unlike other
   * instruments, Tone.NoiseSynth doesn't have a note.
   * @example
   * const noiseSynth = new Tone.NoiseSynth().toDestination();
   * noiseSynth.triggerAttack();
   */


  triggerAttack(time, velocity = 1) {
    time = this.toSeconds(time); // the envelopes

    this.envelope.triggerAttack(time, velocity); // start the noise

    this.noise.start(time);

    if (this.envelope.sustain === 0) {
      this.noise.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));
    }

    return this;
  }
  /**
   * Start the release portion of the envelopes.
   */


  triggerRelease(time) {
    time = this.toSeconds(time);
    this.envelope.triggerRelease(time);
    this.noise.stop(time + this.toSeconds(this.envelope.release));
    return this;
  }

  sync() {
    if (this._syncState()) {
      this._syncMethod("triggerAttack", 0);

      this._syncMethod("triggerRelease", 0);
    }

    return this;
  }

  triggerAttackRelease(duration, time, velocity = 1) {
    time = this.toSeconds(time);
    duration = this.toSeconds(duration);
    this.triggerAttack(time, velocity);
    this.triggerRelease(time + duration);
    return this;
  }

  dispose() {
    super.dispose();
    this.noise.dispose();
    this.envelope.dispose();
    return this;
  }

}

exports.NoiseSynth = NoiseSynth;
},{"../component/envelope/AmplitudeEnvelope":"node_modules/tone/build/esm/component/envelope/AmplitudeEnvelope.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../source/Noise":"node_modules/tone/build/esm/source/Noise.js","./Instrument":"node_modules/tone/build/esm/instrument/Instrument.js","../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../component/envelope/Envelope":"node_modules/tone/build/esm/component/envelope/Envelope.js","../source/Source":"node_modules/tone/build/esm/source/Source.js"}],"node_modules/tone/build/esm/core/worklet/WorkletGlobalScope.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addToWorklet = addToWorklet;
exports.registerProcessor = registerProcessor;
exports.getWorkletGlobalScope = getWorkletGlobalScope;

/**
 * All of the classes or functions which are loaded into the AudioWorkletGlobalScope
 */
const workletContext = new Set();
/**
 * Add a class to the AudioWorkletGlobalScope
 */

function addToWorklet(classOrFunction) {
  workletContext.add(classOrFunction);
}
/**
 * Register a processor in the AudioWorkletGlobalScope with the given name
 */


function registerProcessor(name, classDesc) {
  const processor =
  /* javascript */
  `registerProcessor("${name}", ${classDesc})`;
  workletContext.add(processor);
}
/**
 * Get all of the modules which have been registered to the AudioWorkletGlobalScope
 */


function getWorkletGlobalScope() {
  return Array.from(workletContext).join("\n");
}
},{}],"node_modules/tone/build/esm/core/worklet/ToneAudioWorklet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToneAudioWorklet = void 0;

var _ToneAudioNode = require("../context/ToneAudioNode");

var _Interface = require("../util/Interface");

var _WorkletGlobalScope = require("./WorkletGlobalScope");

class ToneAudioWorklet extends _ToneAudioNode.ToneAudioNode {
  constructor(options) {
    super(options);
    this.name = "ToneAudioWorklet";
    /**
     * The constructor options for the node
     */

    this.workletOptions = {};
    /**
     * Callback which is invoked when there is an error in the processing
     */

    this.onprocessorerror = _Interface.noOp;
    const blobUrl = URL.createObjectURL(new Blob([(0, _WorkletGlobalScope.getWorkletGlobalScope)()], {
      type: "text/javascript"
    }));

    const name = this._audioWorkletName();

    this._dummyGain = this.context.createGain();
    this._dummyParam = this._dummyGain.gain; // Register the processor

    this.context.addAudioWorkletModule(blobUrl, name).then(() => {
      // create the worklet when it's read
      if (!this.disposed) {
        this._worklet = this.context.createAudioWorkletNode(name, this.workletOptions);
        this._worklet.onprocessorerror = this.onprocessorerror.bind(this);
        this.onReady(this._worklet);
      }
    });
  }

  dispose() {
    super.dispose();

    this._dummyGain.disconnect();

    if (this._worklet) {
      this._worklet.port.postMessage("dispose");

      this._worklet.disconnect();
    }

    return this;
  }

}

exports.ToneAudioWorklet = ToneAudioWorklet;
},{"../context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","./WorkletGlobalScope":"node_modules/tone/build/esm/core/worklet/WorkletGlobalScope.js"}],"node_modules/tone/build/esm/core/worklet/ToneAudioWorkletProcessor.worklet.js":[function(require,module,exports) {
"use strict";

var _WorkletGlobalScope = require("./WorkletGlobalScope");

const toneAudioWorkletProcessor =
/* javascript */
`
	/**
	 * The base AudioWorkletProcessor for use in Tone.js. Works with the [[ToneAudioWorklet]]. 
	 */
	class ToneAudioWorkletProcessor extends AudioWorkletProcessor {

		constructor(options) {
			
			super(options);
			/**
			 * If the processor was disposed or not. Keep alive until it's disposed.
			 */
			this.disposed = false;
		   	/** 
			 * The number of samples in the processing block
			 */
			this.blockSize = 128;
			/**
			 * the sample rate
			 */
			this.sampleRate = sampleRate;

			this.port.onmessage = (event) => {
				// when it receives a dispose 
				if (event.data === "dispose") {
					this.disposed = true;
				}
			};
		}
	}
`;
(0, _WorkletGlobalScope.addToWorklet)(toneAudioWorkletProcessor);
},{"./WorkletGlobalScope":"node_modules/tone/build/esm/core/worklet/WorkletGlobalScope.js"}],"node_modules/tone/build/esm/core/worklet/SingleIOProcessor.worklet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.singleIOProcess = void 0;

require("./ToneAudioWorkletProcessor.worklet");

var _WorkletGlobalScope = require("./WorkletGlobalScope");

const singleIOProcess =
/* javascript */
`
	/**
	 * Abstract class for a single input/output processor. 
	 * has a 'generate' function which processes one sample at a time
	 */
	class SingleIOProcessor extends ToneAudioWorkletProcessor {

		constructor(options) {
			super(Object.assign(options, {
				numberOfInputs: 1,
				numberOfOutputs: 1
			}));
			/**
			 * Holds the name of the parameter and a single value of that
			 * parameter at the current sample
			 * @type { [name: string]: number }
			 */
			this.params = {}
		}

		/**
		 * Generate an output sample from the input sample and parameters
		 * @abstract
		 * @param input number
		 * @param channel number
		 * @param parameters { [name: string]: number }
		 * @returns number
		 */
		generate(){}

		/**
		 * Update the private params object with the 
		 * values of the parameters at the given index
		 * @param parameters { [name: string]: Float32Array },
		 * @param index number
		 */
		updateParams(parameters, index) {
			for (const paramName in parameters) {
				const param = parameters[paramName];
				if (param.length > 1) {
					this.params[paramName] = parameters[paramName][index];
				} else {
					this.params[paramName] = parameters[paramName][0];
				}
			}
		}

		/**
		 * Process a single frame of the audio
		 * @param inputs Float32Array[][]
		 * @param outputs Float32Array[][]
		 */
		process(inputs, outputs, parameters) {
			const input = inputs[0];
			const output = outputs[0];
			// get the parameter values
			const channelCount = Math.max(input && input.length || 0, output.length);
			for (let sample = 0; sample < this.blockSize; sample++) {
				this.updateParams(parameters, sample);
				for (let channel = 0; channel < channelCount; channel++) {
					const inputSample = input && input.length ? input[channel][sample] : 0;
					output[channel][sample] = this.generate(inputSample, channel, this.params);
				}
			}
			return !this.disposed;
		}
	};
`;
exports.singleIOProcess = singleIOProcess;
(0, _WorkletGlobalScope.addToWorklet)(singleIOProcess);
},{"./ToneAudioWorkletProcessor.worklet":"node_modules/tone/build/esm/core/worklet/ToneAudioWorkletProcessor.worklet.js","./WorkletGlobalScope":"node_modules/tone/build/esm/core/worklet/WorkletGlobalScope.js"}],"node_modules/tone/build/esm/core/worklet/DelayLine.worklet.js":[function(require,module,exports) {
"use strict";

var _WorkletGlobalScope = require("./WorkletGlobalScope");

const delayLine =
/* javascript */
`
	/**
	 * A multichannel buffer for use within an AudioWorkletProcessor as a delay line
	 */
	class DelayLine {
		
		constructor(size, channels) {
			this.buffer = [];
			this.writeHead = []
			this.size = size;

			// create the empty channels
			for (let i = 0; i < channels; i++) {
				this.buffer[i] = new Float32Array(this.size);
				this.writeHead[i] = 0;
			}
		}

		/**
		 * Push a value onto the end
		 * @param channel number
		 * @param value number
		 */
		push(channel, value) {
			this.writeHead[channel] += 1;
			if (this.writeHead[channel] > this.size) {
				this.writeHead[channel] = 0;
			}
			this.buffer[channel][this.writeHead[channel]] = value;
		}

		/**
		 * Get the recorded value of the channel given the delay
		 * @param channel number
		 * @param delay number delay samples
		 */
		get(channel, delay) {
			let readHead = this.writeHead[channel] - Math.floor(delay);
			if (readHead < 0) {
				readHead += this.size;
			}
			return this.buffer[channel][readHead];
		}
	}
`;
(0, _WorkletGlobalScope.addToWorklet)(delayLine);
},{"./WorkletGlobalScope":"node_modules/tone/build/esm/core/worklet/WorkletGlobalScope.js"}],"node_modules/tone/build/esm/component/filter/FeedbackCombFilter.worklet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.workletName = void 0;

require("../../core/worklet/SingleIOProcessor.worklet");

require("../../core/worklet/DelayLine.worklet");

var _WorkletGlobalScope = require("../../core/worklet/WorkletGlobalScope");

const workletName = "feedback-comb-filter";
exports.workletName = workletName;
const feedbackCombFilter =
/* javascript */
`
	class FeedbackCombFilterWorklet extends SingleIOProcessor {

		constructor(options) {
			super(options);
			this.delayLine = new DelayLine(this.sampleRate, options.channelCount || 2);
		}

		static get parameterDescriptors() {
			return [{
				name: "delayTime",
				defaultValue: 0.1,
				minValue: 0,
				maxValue: 1,
				automationRate: "k-rate"
			}, {
				name: "feedback",
				defaultValue: 0.5,
				minValue: 0,
				maxValue: 0.9999,
				automationRate: "k-rate"
			}];
		}

		generate(input, channel, parameters) {
			const delayedSample = this.delayLine.get(channel, parameters.delayTime * this.sampleRate);
			this.delayLine.push(channel, input + delayedSample * parameters.feedback);
			return delayedSample;
		}
	}
`;
(0, _WorkletGlobalScope.registerProcessor)(workletName, feedbackCombFilter);
},{"../../core/worklet/SingleIOProcessor.worklet":"node_modules/tone/build/esm/core/worklet/SingleIOProcessor.worklet.js","../../core/worklet/DelayLine.worklet":"node_modules/tone/build/esm/core/worklet/DelayLine.worklet.js","../../core/worklet/WorkletGlobalScope":"node_modules/tone/build/esm/core/worklet/WorkletGlobalScope.js"}],"node_modules/tone/build/esm/component/filter/FeedbackCombFilter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FeedbackCombFilter = void 0;

var _Gain = require("../../core/context/Gain");

var _Param = require("../../core/context/Param");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _ToneAudioWorklet = require("../../core/worklet/ToneAudioWorklet");

var _FeedbackCombFilter = require("./FeedbackCombFilter.worklet");

/**
 * Comb filters are basic building blocks for physical modeling. Read more
 * about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).
 *
 * This comb filter is implemented with the AudioWorkletNode which allows it to have feedback delays less than the
 * Web Audio processing block of 128 samples. There is a polyfill for browsers that don't yet support the
 * AudioWorkletNode, but it will add some latency and have slower performance than the AudioWorkletNode.
 * @category Component
 */
class FeedbackCombFilter extends _ToneAudioWorklet.ToneAudioWorklet {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(FeedbackCombFilter.getDefaults(), arguments, ["delayTime", "resonance"]));
    this.name = "FeedbackCombFilter";
    const options = (0, _Defaults.optionsFromArguments)(FeedbackCombFilter.getDefaults(), arguments, ["delayTime", "resonance"]);
    this.input = new _Gain.Gain({
      context: this.context
    });
    this.output = new _Gain.Gain({
      context: this.context
    });
    this.delayTime = new _Param.Param({
      context: this.context,
      value: options.delayTime,
      units: "time",
      minValue: 0,
      maxValue: 1,
      param: this._dummyParam,
      swappable: true
    });
    this.resonance = new _Param.Param({
      context: this.context,
      value: options.resonance,
      units: "normalRange",
      param: this._dummyParam,
      swappable: true
    });
    (0, _Interface.readOnly)(this, ["resonance", "delayTime"]);
  }

  _audioWorkletName() {
    return _FeedbackCombFilter.workletName;
  }
  /**
   * The default parameters
   */


  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      delayTime: 0.1,
      resonance: 0.5
    });
  }

  onReady(node) {
    (0, _ToneAudioNode.connectSeries)(this.input, node, this.output);
    const delayTime = node.parameters.get("delayTime");
    ;
    this.delayTime.setParam(delayTime);
    const feedback = node.parameters.get("feedback");
    ;
    this.resonance.setParam(feedback);
  }

  dispose() {
    super.dispose();
    this.input.dispose();
    this.output.dispose();
    this.delayTime.dispose();
    this.resonance.dispose();
    return this;
  }

}

exports.FeedbackCombFilter = FeedbackCombFilter;
},{"../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../../core/context/Param":"node_modules/tone/build/esm/core/context/Param.js","../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../../core/worklet/ToneAudioWorklet":"node_modules/tone/build/esm/core/worklet/ToneAudioWorklet.js","./FeedbackCombFilter.worklet":"node_modules/tone/build/esm/component/filter/FeedbackCombFilter.worklet.js"}],"node_modules/tone/build/esm/component/filter/OnePoleFilter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OnePoleFilter = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Gain = require("../../core/context/Gain");

/**
 * A one pole filter with 6db-per-octave rolloff. Either "highpass" or "lowpass".
 * Note that changing the type or frequency may result in a discontinuity which
 * can sound like a click or pop.
 * References:
 * * http://www.earlevel.com/main/2012/12/15/a-one-pole-filter/
 * * http://www.dspguide.com/ch19/2.htm
 * * https://github.com/vitaliy-bobrov/js-rocks/blob/master/src/app/audio/effects/one-pole-filters.ts
 * @category Component
 */
class OnePoleFilter extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(OnePoleFilter.getDefaults(), arguments, ["frequency", "type"]));
    this.name = "OnePoleFilter";
    const options = (0, _Defaults.optionsFromArguments)(OnePoleFilter.getDefaults(), arguments, ["frequency", "type"]);
    this._frequency = options.frequency;
    this._type = options.type;
    this.input = new _Gain.Gain({
      context: this.context
    });
    this.output = new _Gain.Gain({
      context: this.context
    });

    this._createFilter();
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      frequency: 880,
      type: "lowpass"
    });
  }
  /**
   * Create a filter and dispose the old one
   */


  _createFilter() {
    const oldFilter = this._filter;
    const freq = this.toFrequency(this._frequency);
    const t = 1 / (2 * Math.PI * freq);

    if (this._type === "lowpass") {
      const a0 = 1 / (t * this.context.sampleRate);
      const b1 = a0 - 1;
      this._filter = this.context.createIIRFilter([a0, 0], [1, b1]);
    } else {
      const b1 = 1 / (t * this.context.sampleRate) - 1;
      this._filter = this.context.createIIRFilter([1, -1], [1, b1]);
    }

    this.input.chain(this._filter, this.output);

    if (oldFilter) {
      // dispose it on the next block
      this.context.setTimeout(() => {
        if (!this.disposed) {
          this.input.disconnect(oldFilter);
          oldFilter.disconnect();
        }
      }, this.blockTime);
    }
  }
  /**
   * The frequency value.
   */


  get frequency() {
    return this._frequency;
  }

  set frequency(fq) {
    this._frequency = fq;

    this._createFilter();
  }
  /**
   * The OnePole Filter type, either "highpass" or "lowpass"
   */


  get type() {
    return this._type;
  }

  set type(t) {
    this._type = t;

    this._createFilter();
  }
  /**
   * Get the frequency response curve. This curve represents how the filter
   * responses to frequencies between 20hz-20khz.
   * @param  len The number of values to return
   * @return The frequency response curve between 20-20kHz
   */


  getFrequencyResponse(len = 128) {
    const freqValues = new Float32Array(len);

    for (let i = 0; i < len; i++) {
      const norm = Math.pow(i / len, 2);
      const freq = norm * (20000 - 20) + 20;
      freqValues[i] = freq;
    }

    const magValues = new Float32Array(len);
    const phaseValues = new Float32Array(len);

    this._filter.getFrequencyResponse(freqValues, magValues, phaseValues);

    return magValues;
  }

  dispose() {
    super.dispose();
    this.input.dispose();
    this.output.dispose();

    this._filter.disconnect();

    return this;
  }

}

exports.OnePoleFilter = OnePoleFilter;
},{"../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js"}],"node_modules/tone/build/esm/component/filter/LowpassCombFilter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LowpassCombFilter = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _FeedbackCombFilter = require("./FeedbackCombFilter");

var _OnePoleFilter = require("./OnePoleFilter");

/**
 * A lowpass feedback comb filter. It is similar to
 * [[FeedbackCombFilter]], but includes a lowpass filter.
 * @category Component
 */
class LowpassCombFilter extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(LowpassCombFilter.getDefaults(), arguments, ["delayTime", "resonance", "dampening"]));
    this.name = "LowpassCombFilter";
    const options = (0, _Defaults.optionsFromArguments)(LowpassCombFilter.getDefaults(), arguments, ["delayTime", "resonance", "dampening"]);
    this._combFilter = this.output = new _FeedbackCombFilter.FeedbackCombFilter({
      context: this.context,
      delayTime: options.delayTime,
      resonance: options.resonance
    });
    this.delayTime = this._combFilter.delayTime;
    this.resonance = this._combFilter.resonance;
    this._lowpass = this.input = new _OnePoleFilter.OnePoleFilter({
      context: this.context,
      frequency: options.dampening,
      type: "lowpass"
    }); // connections

    this._lowpass.connect(this._combFilter);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      dampening: 3000,
      delayTime: 0.1,
      resonance: 0.5
    });
  }
  /**
   * The dampening control of the feedback
   */


  get dampening() {
    return this._lowpass.frequency;
  }

  set dampening(fq) {
    this._lowpass.frequency = fq;
  }

  dispose() {
    super.dispose();

    this._combFilter.dispose();

    this._lowpass.dispose();

    return this;
  }

}

exports.LowpassCombFilter = LowpassCombFilter;
},{"../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./FeedbackCombFilter":"node_modules/tone/build/esm/component/filter/FeedbackCombFilter.js","./OnePoleFilter":"node_modules/tone/build/esm/component/filter/OnePoleFilter.js"}],"node_modules/tone/build/esm/instrument/PluckSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PluckSynth = void 0;

var _LowpassCombFilter = require("../component/filter/LowpassCombFilter");

var _Defaults = require("../core/util/Defaults");

var _Noise = require("../source/Noise");

var _Instrument = require("./Instrument");

/**
 * Karplus-String string synthesis.
 * @example
 * const plucky = new Tone.PluckSynth().toDestination();
 * plucky.triggerAttack("C4", "+0.5");
 * plucky.triggerAttack("C3", "+1");
 * plucky.triggerAttack("C2", "+1.5");
 * plucky.triggerAttack("C1", "+2");
 * @category Instrument
 */
class PluckSynth extends _Instrument.Instrument {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(PluckSynth.getDefaults(), arguments));
    this.name = "PluckSynth";
    const options = (0, _Defaults.optionsFromArguments)(PluckSynth.getDefaults(), arguments);
    this._noise = new _Noise.Noise({
      context: this.context,
      type: "pink"
    });
    this.attackNoise = options.attackNoise;
    this._lfcf = new _LowpassCombFilter.LowpassCombFilter({
      context: this.context,
      dampening: options.dampening,
      resonance: options.resonance
    });
    this.resonance = options.resonance;
    this.release = options.release;

    this._noise.connect(this._lfcf);

    this._lfcf.connect(this.output);
  }

  static getDefaults() {
    return (0, _Defaults.deepMerge)(_Instrument.Instrument.getDefaults(), {
      attackNoise: 1,
      dampening: 4000,
      resonance: 0.7,
      release: 1
    });
  }
  /**
   * The dampening control. i.e. the lowpass filter frequency of the comb filter
   * @min 0
   * @max 7000
   */


  get dampening() {
    return this._lfcf.dampening;
  }

  set dampening(fq) {
    this._lfcf.dampening = fq;
  }

  triggerAttack(note, time) {
    const freq = this.toFrequency(note);
    time = this.toSeconds(time);
    const delayAmount = 1 / freq;

    this._lfcf.delayTime.setValueAtTime(delayAmount, time);

    this._noise.start(time);

    this._noise.stop(time + delayAmount * this.attackNoise);

    this._lfcf.resonance.cancelScheduledValues(time);

    this._lfcf.resonance.setValueAtTime(this.resonance, time);

    return this;
  }
  /**
   * Ramp down the [[resonance]] to 0 over the duration of the release time.
   */


  triggerRelease(time) {
    this._lfcf.resonance.linearRampTo(0, this.release, time);

    return this;
  }

  dispose() {
    super.dispose();

    this._noise.dispose();

    this._lfcf.dispose();

    return this;
  }

}

exports.PluckSynth = PluckSynth;
},{"../component/filter/LowpassCombFilter":"node_modules/tone/build/esm/component/filter/LowpassCombFilter.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../source/Noise":"node_modules/tone/build/esm/source/Noise.js","./Instrument":"node_modules/tone/build/esm/instrument/Instrument.js"}],"node_modules/tone/build/esm/instrument/PolySynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PolySynth = void 0;

var _Midi = require("../core/type/Midi");

var _Defaults = require("../core/util/Defaults");

var _TypeCheck = require("../core/util/TypeCheck");

var _Instrument = require("./Instrument");

var _Synth = require("./Synth");

var _Debug = require("../core/util/Debug");

/**
 * PolySynth handles voice creation and allocation for any
 * instruments passed in as the second paramter. PolySynth is
 * not a synthesizer by itself, it merely manages voices of
 * one of the other types of synths, allowing any of the
 * monophonic synthesizers to be polyphonic.
 *
 * @example
 * const synth = new Tone.PolySynth().toDestination();
 * // set the attributes across all the voices using 'set'
 * synth.set({ detune: -1200 });
 * // play a chord
 * synth.triggerAttackRelease(["C4", "E4", "A4"], 1);
 * @category Instrument
 */
class PolySynth extends _Instrument.Instrument {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(PolySynth.getDefaults(), arguments, ["voice", "options"]));
    this.name = "PolySynth";
    /**
     * The voices which are not currently in use
     */

    this._availableVoices = [];
    /**
     * The currently active voices
     */

    this._activeVoices = [];
    /**
     * All of the allocated voices for this synth.
     */

    this._voices = [];
    /**
     * The GC timeout. Held so that it could be cancelled when the node is disposed.
     */

    this._gcTimeout = -1;
    /**
     * A moving average of the number of active voices
     */

    this._averageActiveVoices = 0;
    const options = (0, _Defaults.optionsFromArguments)(PolySynth.getDefaults(), arguments, ["voice", "options"]); // check against the old API (pre 14.3.0)

    (0, _Debug.assert)(!(0, _TypeCheck.isNumber)(options.voice), "DEPRECATED: The polyphony count is no longer the first argument.");
    const defaults = options.voice.getDefaults();
    this.options = Object.assign(defaults, options.options);
    this.voice = options.voice;
    this.maxPolyphony = options.maxPolyphony; // create the first voice

    this._dummyVoice = this._getNextAvailableVoice(); // remove it from the voices list

    const index = this._voices.indexOf(this._dummyVoice);

    this._voices.splice(index, 1); // kick off the GC interval


    this._gcTimeout = this.context.setInterval(this._collectGarbage.bind(this), 1);
  }

  static getDefaults() {
    return Object.assign(_Instrument.Instrument.getDefaults(), {
      maxPolyphony: 32,
      options: {},
      voice: _Synth.Synth
    });
  }
  /**
   * The number of active voices.
   */


  get activeVoices() {
    return this._activeVoices.length;
  }
  /**
   * Invoked when the source is done making sound, so that it can be
   * readded to the pool of available voices
   */


  _makeVoiceAvailable(voice) {
    this._availableVoices.push(voice); // remove the midi note from 'active voices'


    const activeVoiceIndex = this._activeVoices.findIndex(e => e.voice === voice);

    this._activeVoices.splice(activeVoiceIndex, 1);
  }
  /**
   * Get an available voice from the pool of available voices.
   * If one is not available and the maxPolyphony limit is reached,
   * steal a voice, otherwise return null.
   */


  _getNextAvailableVoice() {
    // if there are available voices, return the first one
    if (this._availableVoices.length) {
      return this._availableVoices.shift();
    } else if (this._voices.length < this.maxPolyphony) {
      // otherwise if there is still more maxPolyphony, make a new voice
      const voice = new this.voice(Object.assign(this.options, {
        context: this.context,
        onsilence: this._makeVoiceAvailable.bind(this)
      }));
      voice.connect(this.output);

      this._voices.push(voice);

      return voice;
    } else {
      (0, _Debug.warn)("Max polyphony exceeded. Note dropped.");
    }
  }
  /**
   * Occasionally check if there are any allocated voices which can be cleaned up.
   */


  _collectGarbage() {
    this._averageActiveVoices = Math.max(this._averageActiveVoices * 0.95, this.activeVoices);

    if (this._availableVoices.length && this._voices.length > Math.ceil(this._averageActiveVoices + 1)) {
      // take off an available note
      const firstAvail = this._availableVoices.shift();

      const index = this._voices.indexOf(firstAvail);

      this._voices.splice(index, 1);

      if (!this.context.isOffline) {
        firstAvail.dispose();
      }
    }
  }
  /**
   * Internal method which triggers the attack
   */


  _triggerAttack(notes, time, velocity) {
    notes.forEach(note => {
      const midiNote = new _Midi.MidiClass(this.context, note).toMidi();

      const voice = this._getNextAvailableVoice();

      if (voice) {
        voice.triggerAttack(note, time, velocity);

        this._activeVoices.push({
          midi: midiNote,
          voice,
          released: false
        });

        this.log("triggerAttack", note, time);
      }
    });
  }
  /**
   * Internal method which triggers the release
   */


  _triggerRelease(notes, time) {
    notes.forEach(note => {
      const midiNote = new _Midi.MidiClass(this.context, note).toMidi();

      const event = this._activeVoices.find(({
        midi,
        released
      }) => midi === midiNote && !released);

      if (event) {
        // trigger release on that note
        event.voice.triggerRelease(time); // mark it as released

        event.released = true;
        this.log("triggerRelease", note, time);
      }
    });
  }
  /**
   * Schedule the attack/release events. If the time is in the future, then it should set a timeout
   * to wait for just-in-time scheduling
   */


  _scheduleEvent(type, notes, time, velocity) {
    (0, _Debug.assert)(!this.disposed, "Synth was already disposed"); // if the notes are greater than this amount of time in the future, they should be scheduled with setTimeout

    if (time <= this.now()) {
      // do it immediately
      if (type === "attack") {
        this._triggerAttack(notes, time, velocity);
      } else {
        this._triggerRelease(notes, time);
      }
    } else {
      // schedule it to start in the future
      this.context.setTimeout(() => {
        this._scheduleEvent(type, notes, time, velocity);
      }, time - this.now());
    }
  }
  /**
   * Trigger the attack portion of the note
   * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.
   * @param  time  The start time of the note.
   * @param velocity The velocity of the note.
   * @example
   * const synth = new Tone.PolySynth(Tone.FMSynth).toDestination();
   * // trigger a chord immediately with a velocity of 0.2
   * synth.triggerAttack(["Ab3", "C4", "F5"], Tone.now(), 0.2);
   */


  triggerAttack(notes, time, velocity) {
    if (!Array.isArray(notes)) {
      notes = [notes];
    }

    const computedTime = this.toSeconds(time);

    this._scheduleEvent("attack", notes, computedTime, velocity);

    return this;
  }
  /**
   * Trigger the release of the note. Unlike monophonic instruments,
   * a note (or array of notes) needs to be passed in as the first argument.
   * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.
   * @param  time  When the release will be triggered.
   * @example
   * @example
   * const poly = new Tone.PolySynth(Tone.AMSynth).toDestination();
   * poly.triggerAttack(["Ab3", "C4", "F5"]);
   * // trigger the release of the given notes.
   * poly.triggerRelease(["Ab3", "C4"], "+1");
   * poly.triggerRelease("F5", "+3");
   */


  triggerRelease(notes, time) {
    if (!Array.isArray(notes)) {
      notes = [notes];
    }

    const computedTime = this.toSeconds(time);

    this._scheduleEvent("release", notes, computedTime);

    return this;
  }
  /**
   * Trigger the attack and release after the specified duration
   * @param  notes The notes to play. Accepts a single  Frequency or an array of frequencies.
   * @param  duration the duration of the note
   * @param  time  if no time is given, defaults to now
   * @param  velocity the velocity of the attack (0-1)
   * @example
   * const poly = new Tone.PolySynth(Tone.AMSynth).toDestination();
   * // can pass in an array of durations as well
   * poly.triggerAttackRelease(["Eb3", "G4", "Bb4", "D5"], [4, 3, 2, 1]);
   */


  triggerAttackRelease(notes, duration, time, velocity) {
    const computedTime = this.toSeconds(time);
    this.triggerAttack(notes, computedTime, velocity);

    if ((0, _TypeCheck.isArray)(duration)) {
      (0, _Debug.assert)((0, _TypeCheck.isArray)(notes), "If the duration is an array, the notes must also be an array");
      notes = notes;

      for (let i = 0; i < notes.length; i++) {
        const d = duration[Math.min(i, duration.length - 1)];
        const durationSeconds = this.toSeconds(d);
        (0, _Debug.assert)(durationSeconds > 0, "The duration must be greater than 0");
        this.triggerRelease(notes[i], computedTime + durationSeconds);
      }
    } else {
      const durationSeconds = this.toSeconds(duration);
      (0, _Debug.assert)(durationSeconds > 0, "The duration must be greater than 0");
      this.triggerRelease(notes, computedTime + durationSeconds);
    }

    return this;
  }

  sync() {
    if (this._syncState()) {
      this._syncMethod("triggerAttack", 1);

      this._syncMethod("triggerRelease", 1);
    }

    return this;
  }
  /**
   * Set a member/attribute of the voices
   * @example
   * const poly = new Tone.PolySynth().toDestination();
   * // set all of the voices using an options object for the synth type
   * poly.set({
   * 	envelope: {
   * 		attack: 0.25
   * 	}
   * });
   * poly.triggerAttackRelease("Bb3", 0.2);
   */


  set(options) {
    // remove options which are controlled by the PolySynth
    const sanitizedOptions = (0, _Defaults.omitFromObject)(options, ["onsilence", "context"]); // store all of the options

    this.options = (0, _Defaults.deepMerge)(this.options, sanitizedOptions);

    this._voices.forEach(voice => voice.set(sanitizedOptions));

    this._dummyVoice.set(sanitizedOptions);

    return this;
  }

  get() {
    return this._dummyVoice.get();
  }
  /**
   * Trigger the release portion of all the currently active voices immediately.
   * Useful for silencing the synth.
   */


  releaseAll(time) {
    const computedTime = this.toSeconds(time);

    this._activeVoices.forEach(({
      voice
    }) => {
      voice.triggerRelease(computedTime);
    });

    return this;
  }

  dispose() {
    super.dispose();

    this._dummyVoice.dispose();

    this._voices.forEach(v => v.dispose());

    this._activeVoices = [];
    this._availableVoices = [];
    this.context.clearInterval(this._gcTimeout);
    return this;
  }

}

exports.PolySynth = PolySynth;
},{"../core/type/Midi":"node_modules/tone/build/esm/core/type/Midi.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","./Instrument":"node_modules/tone/build/esm/instrument/Instrument.js","./Synth":"node_modules/tone/build/esm/instrument/Synth.js","../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/instrument/Sampler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sampler = void 0;

var _tslib = require("tslib");

var _ToneAudioBuffers = require("../core/context/ToneAudioBuffers");

var _Conversions = require("../core/type/Conversions");

var _Frequency = require("../core/type/Frequency");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _TypeCheck = require("../core/util/TypeCheck");

var _Instrument = require("../instrument/Instrument");

var _ToneBufferSource = require("../source/buffer/ToneBufferSource");

var _Decorator = require("../core/util/Decorator");

var _Debug = require("../core/util/Debug");

/**
 * Pass in an object which maps the note's pitch or midi value to the url,
 * then you can trigger the attack and release of that note like other instruments.
 * By automatically repitching the samples, it is possible to play pitches which
 * were not explicitly included which can save loading time.
 *
 * For sample or buffer playback where repitching is not necessary,
 * use [[Player]].
 * @example
 * const sampler = new Tone.Sampler({
 * 	urls: {
 * 		A1: "A1.mp3",
 * 		A2: "A2.mp3",
 * 	},
 * 	baseUrl: "https://tonejs.github.io/audio/casio/",
 * 	onload: () => {
 * 		sampler.triggerAttackRelease(["C1", "E1", "G1", "B1"], 0.5);
 * 	}
 * }).toDestination();
 * @category Instrument
 */
class Sampler extends _Instrument.Instrument {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Sampler.getDefaults(), arguments, ["urls", "onload", "baseUrl"], "urls"));
    this.name = "Sampler";
    /**
     * The object of all currently playing BufferSources
     */

    this._activeSources = new Map();
    const options = (0, _Defaults.optionsFromArguments)(Sampler.getDefaults(), arguments, ["urls", "onload", "baseUrl"], "urls");
    const urlMap = {};
    Object.keys(options.urls).forEach(note => {
      const noteNumber = parseInt(note, 10);
      (0, _Debug.assert)((0, _TypeCheck.isNote)(note) || (0, _TypeCheck.isNumber)(noteNumber) && isFinite(noteNumber), `url key is neither a note or midi pitch: ${note}`);

      if ((0, _TypeCheck.isNote)(note)) {
        // convert the note name to MIDI
        const mid = new _Frequency.FrequencyClass(this.context, note).toMidi();
        urlMap[mid] = options.urls[note];
      } else if ((0, _TypeCheck.isNumber)(noteNumber) && isFinite(noteNumber)) {
        // otherwise if it's numbers assume it's midi
        urlMap[noteNumber] = options.urls[noteNumber];
      }
    });
    this._buffers = new _ToneAudioBuffers.ToneAudioBuffers({
      urls: urlMap,
      onload: options.onload,
      baseUrl: options.baseUrl,
      onerror: options.onerror
    });
    this.attack = options.attack;
    this.release = options.release;
    this.curve = options.curve; // invoke the callback if it's already loaded

    if (this._buffers.loaded) {
      // invoke onload deferred
      Promise.resolve().then(options.onload);
    }
  }

  static getDefaults() {
    return Object.assign(_Instrument.Instrument.getDefaults(), {
      attack: 0,
      baseUrl: "",
      curve: "exponential",
      onload: _Interface.noOp,
      onerror: _Interface.noOp,
      release: 0.1,
      urls: {}
    });
  }
  /**
   * Returns the difference in steps between the given midi note at the closets sample.
   */


  _findClosest(midi) {
    // searches within 8 octaves of the given midi note
    const MAX_INTERVAL = 96;
    let interval = 0;

    while (interval < MAX_INTERVAL) {
      // check above and below
      if (this._buffers.has(midi + interval)) {
        return -interval;
      } else if (this._buffers.has(midi - interval)) {
        return interval;
      }

      interval++;
    }

    throw new Error(`No available buffers for note: ${midi}`);
  }
  /**
   * @param  notes	The note to play, or an array of notes.
   * @param  time     When to play the note
   * @param  velocity The velocity to play the sample back.
   */


  triggerAttack(notes, time, velocity = 1) {
    this.log("triggerAttack", notes, time, velocity);

    if (!Array.isArray(notes)) {
      notes = [notes];
    }

    notes.forEach(note => {
      const midiFloat = (0, _Conversions.ftomf)(new _Frequency.FrequencyClass(this.context, note).toFrequency());
      const midi = Math.round(midiFloat);
      const remainder = midiFloat - midi; // find the closest note pitch

      const difference = this._findClosest(midi);

      const closestNote = midi - difference;

      const buffer = this._buffers.get(closestNote);

      const playbackRate = (0, _Conversions.intervalToFrequencyRatio)(difference + remainder); // play that note

      const source = new _ToneBufferSource.ToneBufferSource({
        url: buffer,
        context: this.context,
        curve: this.curve,
        fadeIn: this.attack,
        fadeOut: this.release,
        playbackRate
      }).connect(this.output);
      source.start(time, 0, buffer.duration / playbackRate, velocity); // add it to the active sources

      if (!(0, _TypeCheck.isArray)(this._activeSources.get(midi))) {
        this._activeSources.set(midi, []);
      }

      this._activeSources.get(midi).push(source); // remove it when it's done


      source.onended = () => {
        if (this._activeSources && this._activeSources.has(midi)) {
          const sources = this._activeSources.get(midi);

          const index = sources.indexOf(source);

          if (index !== -1) {
            sources.splice(index, 1);
          }
        }
      };
    });
    return this;
  }
  /**
   * @param  notes	The note to release, or an array of notes.
   * @param  time     	When to release the note.
   */


  triggerRelease(notes, time) {
    this.log("triggerRelease", notes, time);

    if (!Array.isArray(notes)) {
      notes = [notes];
    }

    notes.forEach(note => {
      const midi = new _Frequency.FrequencyClass(this.context, note).toMidi(); // find the note

      if (this._activeSources.has(midi) && this._activeSources.get(midi).length) {
        const sources = this._activeSources.get(midi);

        time = this.toSeconds(time);
        sources.forEach(source => {
          source.stop(time);
        });

        this._activeSources.set(midi, []);
      }
    });
    return this;
  }
  /**
   * Release all currently active notes.
   * @param  time     	When to release the notes.
   */


  releaseAll(time) {
    const computedTime = this.toSeconds(time);

    this._activeSources.forEach(sources => {
      while (sources.length) {
        const source = sources.shift();
        source.stop(computedTime);
      }
    });

    return this;
  }

  sync() {
    if (this._syncState()) {
      this._syncMethod("triggerAttack", 1);

      this._syncMethod("triggerRelease", 1);
    }

    return this;
  }
  /**
   * Invoke the attack phase, then after the duration, invoke the release.
   * @param  notes	The note to play and release, or an array of notes.
   * @param  duration The time the note should be held
   * @param  time     When to start the attack
   * @param  velocity The velocity of the attack
   */


  triggerAttackRelease(notes, duration, time, velocity = 1) {
    const computedTime = this.toSeconds(time);
    this.triggerAttack(notes, computedTime, velocity);

    if ((0, _TypeCheck.isArray)(duration)) {
      (0, _Debug.assert)((0, _TypeCheck.isArray)(notes), "notes must be an array when duration is array");
      notes.forEach((note, index) => {
        const d = duration[Math.min(index, duration.length - 1)];
        this.triggerRelease(note, computedTime + this.toSeconds(d));
      });
    } else {
      this.triggerRelease(notes, computedTime + this.toSeconds(duration));
    }

    return this;
  }
  /**
   * Add a note to the sampler.
   * @param  note      The buffer's pitch.
   * @param  url  Either the url of the buffer, or a buffer which will be added with the given name.
   * @param  callback  The callback to invoke when the url is loaded.
   */


  add(note, url, callback) {
    (0, _Debug.assert)((0, _TypeCheck.isNote)(note) || isFinite(note), `note must be a pitch or midi: ${note}`);

    if ((0, _TypeCheck.isNote)(note)) {
      // convert the note name to MIDI
      const mid = new _Frequency.FrequencyClass(this.context, note).toMidi();

      this._buffers.add(mid, url, callback);
    } else {
      // otherwise if it's numbers assume it's midi
      this._buffers.add(note, url, callback);
    }

    return this;
  }
  /**
   * If the buffers are loaded or not
   */


  get loaded() {
    return this._buffers.loaded;
  }
  /**
   * Clean up
   */


  dispose() {
    super.dispose();

    this._buffers.dispose();

    this._activeSources.forEach(sources => {
      sources.forEach(source => source.dispose());
    });

    this._activeSources.clear();

    return this;
  }

}

exports.Sampler = Sampler;
(0, _tslib.__decorate)([(0, _Decorator.timeRange)(0)], Sampler.prototype, "attack", void 0);
(0, _tslib.__decorate)([(0, _Decorator.timeRange)(0)], Sampler.prototype, "release", void 0);
},{"tslib":"node_modules/tslib/tslib.es6.js","../core/context/ToneAudioBuffers":"node_modules/tone/build/esm/core/context/ToneAudioBuffers.js","../core/type/Conversions":"node_modules/tone/build/esm/core/type/Conversions.js","../core/type/Frequency":"node_modules/tone/build/esm/core/type/Frequency.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../core/util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","../instrument/Instrument":"node_modules/tone/build/esm/instrument/Instrument.js","../source/buffer/ToneBufferSource":"node_modules/tone/build/esm/source/buffer/ToneBufferSource.js","../core/util/Decorator":"node_modules/tone/build/esm/core/util/Decorator.js","../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/instrument/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _AMSynth = require("./AMSynth");

Object.keys(_AMSynth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _AMSynth[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AMSynth[key];
    }
  });
});

var _DuoSynth = require("./DuoSynth");

Object.keys(_DuoSynth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _DuoSynth[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _DuoSynth[key];
    }
  });
});

var _FMSynth = require("./FMSynth");

Object.keys(_FMSynth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _FMSynth[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _FMSynth[key];
    }
  });
});

var _MetalSynth = require("./MetalSynth");

Object.keys(_MetalSynth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _MetalSynth[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _MetalSynth[key];
    }
  });
});

var _MembraneSynth = require("./MembraneSynth");

Object.keys(_MembraneSynth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _MembraneSynth[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _MembraneSynth[key];
    }
  });
});

var _MonoSynth = require("./MonoSynth");

Object.keys(_MonoSynth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _MonoSynth[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _MonoSynth[key];
    }
  });
});

var _NoiseSynth = require("./NoiseSynth");

Object.keys(_NoiseSynth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _NoiseSynth[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _NoiseSynth[key];
    }
  });
});

var _PluckSynth = require("./PluckSynth");

Object.keys(_PluckSynth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _PluckSynth[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _PluckSynth[key];
    }
  });
});

var _PolySynth = require("./PolySynth");

Object.keys(_PolySynth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _PolySynth[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _PolySynth[key];
    }
  });
});

var _Sampler = require("./Sampler");

Object.keys(_Sampler).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Sampler[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Sampler[key];
    }
  });
});

var _Synth = require("./Synth");

Object.keys(_Synth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Synth[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Synth[key];
    }
  });
});
},{"./AMSynth":"node_modules/tone/build/esm/instrument/AMSynth.js","./DuoSynth":"node_modules/tone/build/esm/instrument/DuoSynth.js","./FMSynth":"node_modules/tone/build/esm/instrument/FMSynth.js","./MetalSynth":"node_modules/tone/build/esm/instrument/MetalSynth.js","./MembraneSynth":"node_modules/tone/build/esm/instrument/MembraneSynth.js","./MonoSynth":"node_modules/tone/build/esm/instrument/MonoSynth.js","./NoiseSynth":"node_modules/tone/build/esm/instrument/NoiseSynth.js","./PluckSynth":"node_modules/tone/build/esm/instrument/PluckSynth.js","./PolySynth":"node_modules/tone/build/esm/instrument/PolySynth.js","./Sampler":"node_modules/tone/build/esm/instrument/Sampler.js","./Synth":"node_modules/tone/build/esm/instrument/Synth.js"}],"node_modules/tone/build/esm/event/ToneEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToneEvent = void 0;

require("../core/clock/Transport");

var _ToneWithContext = require("../core/context/ToneWithContext");

var _Ticks = require("../core/type/Ticks");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _StateTimeline = require("../core/util/StateTimeline");

var _TypeCheck = require("../core/util/TypeCheck");

/**
 * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable
 * callback for a single or repeatable events along the timeline.
 *
 * @example
 * const synth = new Tone.PolySynth().toDestination();
 * const chordEvent = new Tone.ToneEvent(((time, chord) => {
 * 	// the chord as well as the exact time of the event
 * 	// are passed in as arguments to the callback function
 * 	synth.triggerAttackRelease(chord, 0.5, time);
 * }), ["D4", "E4", "F4"]);
 * // start the chord at the beginning of the transport timeline
 * chordEvent.start();
 * // loop it every measure for 8 measures
 * chordEvent.loop = 8;
 * chordEvent.loopEnd = "1m";
 * @category Event
 */
class ToneEvent extends _ToneWithContext.ToneWithContext {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(ToneEvent.getDefaults(), arguments, ["callback", "value"]));
    this.name = "ToneEvent";
    /**
     * Tracks the scheduled events
     */

    this._state = new _StateTimeline.StateTimeline("stopped");
    /**
     * A delay time from when the event is scheduled to start
     */

    this._startOffset = 0;
    const options = (0, _Defaults.optionsFromArguments)(ToneEvent.getDefaults(), arguments, ["callback", "value"]);
    this._loop = options.loop;
    this.callback = options.callback;
    this.value = options.value;
    this._loopStart = this.toTicks(options.loopStart);
    this._loopEnd = this.toTicks(options.loopEnd);
    this._playbackRate = options.playbackRate;
    this._probability = options.probability;
    this._humanize = options.humanize;
    this.mute = options.mute;
    this._playbackRate = options.playbackRate;
    this._state.increasing = true; // schedule the events for the first time

    this._rescheduleEvents();
  }

  static getDefaults() {
    return Object.assign(_ToneWithContext.ToneWithContext.getDefaults(), {
      callback: _Interface.noOp,
      humanize: false,
      loop: false,
      loopEnd: "1m",
      loopStart: 0,
      mute: false,
      playbackRate: 1,
      probability: 1,
      value: null
    });
  }
  /**
   * Reschedule all of the events along the timeline
   * with the updated values.
   * @param after Only reschedules events after the given time.
   */


  _rescheduleEvents(after = -1) {
    // if no argument is given, schedules all of the events
    this._state.forEachFrom(after, event => {
      let duration;

      if (event.state === "started") {
        if (event.id !== -1) {
          this.context.transport.clear(event.id);
        }

        const startTick = event.time + Math.round(this.startOffset / this._playbackRate);

        if (this._loop === true || (0, _TypeCheck.isNumber)(this._loop) && this._loop > 1) {
          duration = Infinity;

          if ((0, _TypeCheck.isNumber)(this._loop)) {
            duration = this._loop * this._getLoopDuration();
          }

          const nextEvent = this._state.getAfter(startTick);

          if (nextEvent !== null) {
            duration = Math.min(duration, nextEvent.time - startTick);
          }

          if (duration !== Infinity) {
            // schedule a stop since it's finite duration
            this._state.setStateAtTime("stopped", startTick + duration + 1, {
              id: -1
            });

            duration = new _Ticks.TicksClass(this.context, duration);
          }

          const interval = new _Ticks.TicksClass(this.context, this._getLoopDuration());
          event.id = this.context.transport.scheduleRepeat(this._tick.bind(this), interval, new _Ticks.TicksClass(this.context, startTick), duration);
        } else {
          event.id = this.context.transport.schedule(this._tick.bind(this), new _Ticks.TicksClass(this.context, startTick));
        }
      }
    });
  }
  /**
   * Returns the playback state of the note, either "started" or "stopped".
   */


  get state() {
    return this._state.getValueAtTime(this.context.transport.ticks);
  }
  /**
   * The start from the scheduled start time.
   */


  get startOffset() {
    return this._startOffset;
  }

  set startOffset(offset) {
    this._startOffset = offset;
  }
  /**
   * The probability of the notes being triggered.
   */


  get probability() {
    return this._probability;
  }

  set probability(prob) {
    this._probability = prob;
  }
  /**
   * If set to true, will apply small random variation
   * to the callback time. If the value is given as a time, it will randomize
   * by that amount.
   * @example
   * const event = new Tone.ToneEvent();
   * event.humanize = true;
   */


  get humanize() {
    return this._humanize;
  }

  set humanize(variation) {
    this._humanize = variation;
  }
  /**
   * Start the note at the given time.
   * @param  time  When the event should start.
   */


  start(time) {
    const ticks = this.toTicks(time);

    if (this._state.getValueAtTime(ticks) === "stopped") {
      this._state.add({
        id: -1,
        state: "started",
        time: ticks
      });

      this._rescheduleEvents(ticks);
    }

    return this;
  }
  /**
   * Stop the Event at the given time.
   * @param  time  When the event should stop.
   */


  stop(time) {
    this.cancel(time);
    const ticks = this.toTicks(time);

    if (this._state.getValueAtTime(ticks) === "started") {
      this._state.setStateAtTime("stopped", ticks, {
        id: -1
      });

      const previousEvent = this._state.getBefore(ticks);

      let reschedulTime = ticks;

      if (previousEvent !== null) {
        reschedulTime = previousEvent.time;
      }

      this._rescheduleEvents(reschedulTime);
    }

    return this;
  }
  /**
   * Cancel all scheduled events greater than or equal to the given time
   * @param  time  The time after which events will be cancel.
   */


  cancel(time) {
    time = (0, _Defaults.defaultArg)(time, -Infinity);
    const ticks = this.toTicks(time);

    this._state.forEachFrom(ticks, event => {
      this.context.transport.clear(event.id);
    });

    this._state.cancel(ticks);

    return this;
  }
  /**
   * The callback function invoker. Also
   * checks if the Event is done playing
   * @param  time  The time of the event in seconds
   */


  _tick(time) {
    const ticks = this.context.transport.getTicksAtTime(time);

    if (!this.mute && this._state.getValueAtTime(ticks) === "started") {
      if (this.probability < 1 && Math.random() > this.probability) {
        return;
      }

      if (this.humanize) {
        let variation = 0.02;

        if (!(0, _TypeCheck.isBoolean)(this.humanize)) {
          variation = this.toSeconds(this.humanize);
        }

        time += (Math.random() * 2 - 1) * variation;
      }

      this.callback(time, this.value);
    }
  }
  /**
   * Get the duration of the loop.
   */


  _getLoopDuration() {
    return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);
  }
  /**
   * If the note should loop or not
   * between ToneEvent.loopStart and
   * ToneEvent.loopEnd. If set to true,
   * the event will loop indefinitely,
   * if set to a number greater than 1
   * it will play a specific number of
   * times, if set to false, 0 or 1, the
   * part will only play once.
   */


  get loop() {
    return this._loop;
  }

  set loop(loop) {
    this._loop = loop;

    this._rescheduleEvents();
  }
  /**
   * The playback rate of the note. Defaults to 1.
   * @example
   * const note = new Tone.ToneEvent();
   * note.loop = true;
   * // repeat the note twice as fast
   * note.playbackRate = 2;
   */


  get playbackRate() {
    return this._playbackRate;
  }

  set playbackRate(rate) {
    this._playbackRate = rate;

    this._rescheduleEvents();
  }
  /**
   * The loopEnd point is the time the event will loop
   * if ToneEvent.loop is true.
   */


  get loopEnd() {
    return new _Ticks.TicksClass(this.context, this._loopEnd).toSeconds();
  }

  set loopEnd(loopEnd) {
    this._loopEnd = this.toTicks(loopEnd);

    if (this._loop) {
      this._rescheduleEvents();
    }
  }
  /**
   * The time when the loop should start.
   */


  get loopStart() {
    return new _Ticks.TicksClass(this.context, this._loopStart).toSeconds();
  }

  set loopStart(loopStart) {
    this._loopStart = this.toTicks(loopStart);

    if (this._loop) {
      this._rescheduleEvents();
    }
  }
  /**
   * The current progress of the loop interval.
   * Returns 0 if the event is not started yet or
   * it is not set to loop.
   */


  get progress() {
    if (this._loop) {
      const ticks = this.context.transport.ticks;

      const lastEvent = this._state.get(ticks);

      if (lastEvent !== null && lastEvent.state === "started") {
        const loopDuration = this._getLoopDuration();

        const progress = (ticks - lastEvent.time) % loopDuration;
        return progress / loopDuration;
      } else {
        return 0;
      }
    } else {
      return 0;
    }
  }

  dispose() {
    super.dispose();
    this.cancel();

    this._state.dispose();

    return this;
  }

}

exports.ToneEvent = ToneEvent;
},{"../core/clock/Transport":"node_modules/tone/build/esm/core/clock/Transport.js","../core/context/ToneWithContext":"node_modules/tone/build/esm/core/context/ToneWithContext.js","../core/type/Ticks":"node_modules/tone/build/esm/core/type/Ticks.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../core/util/StateTimeline":"node_modules/tone/build/esm/core/util/StateTimeline.js","../core/util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js"}],"node_modules/tone/build/esm/event/Loop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Loop = void 0;

var _ToneEvent = require("./ToneEvent");

var _ToneWithContext = require("../core/context/ToneWithContext");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

/**
 * Loop creates a looped callback at the
 * specified interval. The callback can be
 * started, stopped and scheduled along
 * the Transport's timeline.
 * @example
 * const loop = new Tone.Loop((time) => {
 * 	// triggered every eighth note.
 * 	console.log(time);
 * }, "8n").start(0);
 * Tone.Transport.start();
 * @category Event
 */
class Loop extends _ToneWithContext.ToneWithContext {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Loop.getDefaults(), arguments, ["callback", "interval"]));
    this.name = "Loop";
    const options = (0, _Defaults.optionsFromArguments)(Loop.getDefaults(), arguments, ["callback", "interval"]);
    this._event = new _ToneEvent.ToneEvent({
      context: this.context,
      callback: this._tick.bind(this),
      loop: true,
      loopEnd: options.interval,
      playbackRate: options.playbackRate,
      probability: options.probability
    });
    this.callback = options.callback; // set the iterations

    this.iterations = options.iterations;
  }

  static getDefaults() {
    return Object.assign(_ToneWithContext.ToneWithContext.getDefaults(), {
      interval: "4n",
      callback: _Interface.noOp,
      playbackRate: 1,
      iterations: Infinity,
      probability: 1,
      mute: false,
      humanize: false
    });
  }
  /**
   * Start the loop at the specified time along the Transport's timeline.
   * @param  time  When to start the Loop.
   */


  start(time) {
    this._event.start(time);

    return this;
  }
  /**
   * Stop the loop at the given time.
   * @param  time  When to stop the Loop.
   */


  stop(time) {
    this._event.stop(time);

    return this;
  }
  /**
   * Cancel all scheduled events greater than or equal to the given time
   * @param  time  The time after which events will be cancel.
   */


  cancel(time) {
    this._event.cancel(time);

    return this;
  }
  /**
   * Internal function called when the notes should be called
   * @param time  The time the event occurs
   */


  _tick(time) {
    this.callback(time);
  }
  /**
   * The state of the Loop, either started or stopped.
   */


  get state() {
    return this._event.state;
  }
  /**
   * The progress of the loop as a value between 0-1. 0, when the loop is stopped or done iterating.
   */


  get progress() {
    return this._event.progress;
  }
  /**
   * The time between successive callbacks.
   * @example
   * const loop = new Tone.Loop();
   * loop.interval = "8n"; // loop every 8n
   */


  get interval() {
    return this._event.loopEnd;
  }

  set interval(interval) {
    this._event.loopEnd = interval;
  }
  /**
   * The playback rate of the loop. The normal playback rate is 1 (no change).
   * A `playbackRate` of 2 would be twice as fast.
   */


  get playbackRate() {
    return this._event.playbackRate;
  }

  set playbackRate(rate) {
    this._event.playbackRate = rate;
  }
  /**
   * Random variation +/-0.01s to the scheduled time.
   * Or give it a time value which it will randomize by.
   */


  get humanize() {
    return this._event.humanize;
  }

  set humanize(variation) {
    this._event.humanize = variation;
  }
  /**
   * The probably of the callback being invoked.
   */


  get probability() {
    return this._event.probability;
  }

  set probability(prob) {
    this._event.probability = prob;
  }
  /**
   * Muting the Loop means that no callbacks are invoked.
   */


  get mute() {
    return this._event.mute;
  }

  set mute(mute) {
    this._event.mute = mute;
  }
  /**
   * The number of iterations of the loop. The default value is `Infinity` (loop forever).
   */


  get iterations() {
    if (this._event.loop === true) {
      return Infinity;
    } else {
      return this._event.loop;
    }
  }

  set iterations(iters) {
    if (iters === Infinity) {
      this._event.loop = true;
    } else {
      this._event.loop = iters;
    }
  }

  dispose() {
    super.dispose();

    this._event.dispose();

    return this;
  }

}

exports.Loop = Loop;
},{"./ToneEvent":"node_modules/tone/build/esm/event/ToneEvent.js","../core/context/ToneWithContext":"node_modules/tone/build/esm/core/context/ToneWithContext.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/event/Part.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Part = void 0;

var _Ticks = require("../core/type/Ticks");

var _TransportTime = require("../core/type/TransportTime");

var _Defaults = require("../core/util/Defaults");

var _StateTimeline = require("../core/util/StateTimeline");

var _TypeCheck = require("../core/util/TypeCheck");

var _ToneEvent = require("./ToneEvent");

/**
 * Part is a collection ToneEvents which can be started/stopped and looped as a single unit.
 *
 * @example
 * const synth = new Tone.Synth().toDestination();
 * const part = new Tone.Part(((time, note) => {
 * 	// the notes given as the second element in the array
 * 	// will be passed in as the second argument
 * 	synth.triggerAttackRelease(note, "8n", time);
 * }), [[0, "C2"], ["0:2", "C3"], ["0:3:2", "G2"]]);
 * Tone.Transport.start();
 * @example
 * const synth = new Tone.Synth().toDestination();
 * // use an array of objects as long as the object has a "time" attribute
 * const part = new Tone.Part(((time, value) => {
 * 	// the value is an object which contains both the note and the velocity
 * 	synth.triggerAttackRelease(value.note, "8n", time, value.velocity);
 * }), [{ time: 0, note: "C3", velocity: 0.9 },
 * 	{ time: "0:2", note: "C4", velocity: 0.5 }
 * ]).start(0);
 * Tone.Transport.start();
 * @category Event
 */
class Part extends _ToneEvent.ToneEvent {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Part.getDefaults(), arguments, ["callback", "events"]));
    this.name = "Part";
    /**
     * Tracks the scheduled events
     */

    this._state = new _StateTimeline.StateTimeline("stopped");
    /**
     * The events that belong to this part
     */

    this._events = new Set();
    const options = (0, _Defaults.optionsFromArguments)(Part.getDefaults(), arguments, ["callback", "events"]); // make sure things are assigned in the right order

    this._state.increasing = true; // add the events

    options.events.forEach(event => {
      if ((0, _TypeCheck.isArray)(event)) {
        this.add(event[0], event[1]);
      } else {
        this.add(event);
      }
    });
  }

  static getDefaults() {
    return Object.assign(_ToneEvent.ToneEvent.getDefaults(), {
      events: []
    });
  }
  /**
   * Start the part at the given time.
   * @param  time    When to start the part.
   * @param  offset  The offset from the start of the part to begin playing at.
   */


  start(time, offset) {
    const ticks = this.toTicks(time);

    if (this._state.getValueAtTime(ticks) !== "started") {
      offset = (0, _Defaults.defaultArg)(offset, this._loop ? this._loopStart : 0);

      if (this._loop) {
        offset = (0, _Defaults.defaultArg)(offset, this._loopStart);
      } else {
        offset = (0, _Defaults.defaultArg)(offset, 0);
      }

      const computedOffset = this.toTicks(offset);

      this._state.add({
        id: -1,
        offset: computedOffset,
        state: "started",
        time: ticks
      });

      this._forEach(event => {
        this._startNote(event, ticks, computedOffset);
      });
    }

    return this;
  }
  /**
   * Start the event in the given event at the correct time given
   * the ticks and offset and looping.
   * @param  event
   * @param  ticks
   * @param  offset
   */


  _startNote(event, ticks, offset) {
    ticks -= offset;

    if (this._loop) {
      if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {
        if (event.startOffset < offset) {
          // start it on the next loop
          ticks += this._getLoopDuration();
        }

        event.start(new _Ticks.TicksClass(this.context, ticks));
      } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {
        event.loop = false;
        event.start(new _Ticks.TicksClass(this.context, ticks));
      }
    } else if (event.startOffset >= offset) {
      event.start(new _Ticks.TicksClass(this.context, ticks));
    }
  }

  get startOffset() {
    return this._startOffset;
  }

  set startOffset(offset) {
    this._startOffset = offset;

    this._forEach(event => {
      event.startOffset += this._startOffset;
    });
  }
  /**
   * Stop the part at the given time.
   * @param  time  When to stop the part.
   */


  stop(time) {
    const ticks = this.toTicks(time);

    this._state.cancel(ticks);

    this._state.setStateAtTime("stopped", ticks);

    this._forEach(event => {
      event.stop(time);
    });

    return this;
  }
  /**
   * Get/Set an Event's value at the given time.
   * If a value is passed in and no event exists at
   * the given time, one will be created with that value.
   * If two events are at the same time, the first one will
   * be returned.
   * @example
   * const part = new Tone.Part();
   * part.at("1m"); // returns the part at the first measure
   * part.at("2m", "C2"); // set the value at "2m" to C2.
   * // if an event didn't exist at that time, it will be created.
   * @param time The time of the event to get or set.
   * @param value If a value is passed in, the value of the event at the given time will be set to it.
   */


  at(time, value) {
    const timeInTicks = new _TransportTime.TransportTimeClass(this.context, time).toTicks();
    const tickTime = new _Ticks.TicksClass(this.context, 1).toSeconds();

    const iterator = this._events.values();

    let result = iterator.next();

    while (!result.done) {
      const event = result.value;

      if (Math.abs(timeInTicks - event.startOffset) < tickTime) {
        if ((0, _TypeCheck.isDefined)(value)) {
          event.value = value;
        }

        return event;
      }

      result = iterator.next();
    } // if there was no event at that time, create one


    if ((0, _TypeCheck.isDefined)(value)) {
      this.add(time, value); // return the new event

      return this.at(time);
    } else {
      return null;
    }
  }

  add(time, value) {
    // extract the parameters
    if (time instanceof Object && Reflect.has(time, "time")) {
      value = time;
      time = value.time;
    }

    const ticks = this.toTicks(time);
    let event;

    if (value instanceof _ToneEvent.ToneEvent) {
      event = value;
      event.callback = this._tick.bind(this);
    } else {
      event = new _ToneEvent.ToneEvent({
        callback: this._tick.bind(this),
        context: this.context,
        value
      });
    } // the start offset


    event.startOffset = ticks; // initialize the values

    event.set({
      humanize: this.humanize,
      loop: this.loop,
      loopEnd: this.loopEnd,
      loopStart: this.loopStart,
      playbackRate: this.playbackRate,
      probability: this.probability
    });

    this._events.add(event); // start the note if it should be played right now


    this._restartEvent(event);

    return this;
  }
  /**
   * Restart the given event
   */


  _restartEvent(event) {
    this._state.forEach(stateEvent => {
      if (stateEvent.state === "started") {
        this._startNote(event, stateEvent.time, stateEvent.offset);
      } else {
        // stop the note
        event.stop(new _Ticks.TicksClass(this.context, stateEvent.time));
      }
    });
  }

  remove(time, value) {
    // extract the parameters
    if ((0, _TypeCheck.isObject)(time) && time.hasOwnProperty("time")) {
      value = time;
      time = value.time;
    }

    time = this.toTicks(time);

    this._events.forEach(event => {
      if (event.startOffset === time) {
        if ((0, _TypeCheck.isUndef)(value) || (0, _TypeCheck.isDefined)(value) && event.value === value) {
          this._events.delete(event);

          event.dispose();
        }
      }
    });

    return this;
  }
  /**
   * Remove all of the notes from the group.
   */


  clear() {
    this._forEach(event => event.dispose());

    this._events.clear();

    return this;
  }
  /**
   * Cancel scheduled state change events: i.e. "start" and "stop".
   * @param after The time after which to cancel the scheduled events.
   */


  cancel(after) {
    this._forEach(event => event.cancel(after));

    this._state.cancel(this.toTicks(after));

    return this;
  }
  /**
   * Iterate over all of the events
   */


  _forEach(callback) {
    if (this._events) {
      this._events.forEach(event => {
        if (event instanceof Part) {
          event._forEach(callback);
        } else {
          callback(event);
        }
      });
    }

    return this;
  }
  /**
   * Set the attribute of all of the events
   * @param  attr  the attribute to set
   * @param  value      The value to set it to
   */


  _setAll(attr, value) {
    this._forEach(event => {
      event[attr] = value;
    });
  }
  /**
   * Internal tick method
   * @param  time  The time of the event in seconds
   */


  _tick(time, value) {
    if (!this.mute) {
      this.callback(time, value);
    }
  }
  /**
   * Determine if the event should be currently looping
   * given the loop boundries of this Part.
   * @param  event  The event to test
   */


  _testLoopBoundries(event) {
    if (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {
      event.cancel(0);
    } else if (event.state === "stopped") {
      // reschedule it if it's stopped
      this._restartEvent(event);
    }
  }

  get probability() {
    return this._probability;
  }

  set probability(prob) {
    this._probability = prob;

    this._setAll("probability", prob);
  }

  get humanize() {
    return this._humanize;
  }

  set humanize(variation) {
    this._humanize = variation;

    this._setAll("humanize", variation);
  }
  /**
   * If the part should loop or not
   * between Part.loopStart and
   * Part.loopEnd. If set to true,
   * the part will loop indefinitely,
   * if set to a number greater than 1
   * it will play a specific number of
   * times, if set to false, 0 or 1, the
   * part will only play once.
   * @example
   * const part = new Tone.Part();
   * // loop the part 8 times
   * part.loop = 8;
   */


  get loop() {
    return this._loop;
  }

  set loop(loop) {
    this._loop = loop;

    this._forEach(event => {
      event.loopStart = this.loopStart;
      event.loopEnd = this.loopEnd;
      event.loop = loop;

      this._testLoopBoundries(event);
    });
  }
  /**
   * The loopEnd point determines when it will
   * loop if Part.loop is true.
   */


  get loopEnd() {
    return new _Ticks.TicksClass(this.context, this._loopEnd).toSeconds();
  }

  set loopEnd(loopEnd) {
    this._loopEnd = this.toTicks(loopEnd);

    if (this._loop) {
      this._forEach(event => {
        event.loopEnd = loopEnd;

        this._testLoopBoundries(event);
      });
    }
  }
  /**
   * The loopStart point determines when it will
   * loop if Part.loop is true.
   */


  get loopStart() {
    return new _Ticks.TicksClass(this.context, this._loopStart).toSeconds();
  }

  set loopStart(loopStart) {
    this._loopStart = this.toTicks(loopStart);

    if (this._loop) {
      this._forEach(event => {
        event.loopStart = this.loopStart;

        this._testLoopBoundries(event);
      });
    }
  }
  /**
   * The playback rate of the part
   */


  get playbackRate() {
    return this._playbackRate;
  }

  set playbackRate(rate) {
    this._playbackRate = rate;

    this._setAll("playbackRate", rate);
  }
  /**
   * The number of scheduled notes in the part.
   */


  get length() {
    return this._events.size;
  }

  dispose() {
    super.dispose();
    this.clear();
    return this;
  }

}

exports.Part = Part;
},{"../core/type/Ticks":"node_modules/tone/build/esm/core/type/Ticks.js","../core/type/TransportTime":"node_modules/tone/build/esm/core/type/TransportTime.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/StateTimeline":"node_modules/tone/build/esm/core/util/StateTimeline.js","../core/util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","./ToneEvent":"node_modules/tone/build/esm/event/ToneEvent.js"}],"node_modules/tone/build/esm/event/PatternGenerator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PatternGenerator = PatternGenerator;

var _Debug = require("../core/util/Debug");

var _Math = require("../core/util/Math");

/**
 * Start at the first value and go up to the last
 */
function* upPatternGen(values) {
  let index = 0;

  while (index < values.length) {
    index = clampToArraySize(index, values);
    yield values[index];
    index++;
  }
}
/**
 * Start at the last value and go down to 0
 */


function* downPatternGen(values) {
  let index = values.length - 1;

  while (index >= 0) {
    index = clampToArraySize(index, values);
    yield values[index];
    index--;
  }
}
/**
 * Infinitely yield the generator
 */


function* infiniteGen(values, gen) {
  while (true) {
    yield* gen(values);
  }
}
/**
 * Make sure that the index is in the given range
 */


function clampToArraySize(index, values) {
  return (0, _Math.clamp)(index, 0, values.length - 1);
}
/**
 * Alternate between two generators
 */


function* alternatingGenerator(values, directionUp) {
  let index = directionUp ? 0 : values.length - 1;

  while (true) {
    index = clampToArraySize(index, values);
    yield values[index];

    if (directionUp) {
      index++;

      if (index >= values.length - 1) {
        directionUp = false;
      }
    } else {
      index--;

      if (index <= 0) {
        directionUp = true;
      }
    }
  }
}
/**
 * Starting from the bottom move up 2, down 1
 */


function* jumpUp(values) {
  let index = 0;
  let stepIndex = 0;

  while (index < values.length) {
    index = clampToArraySize(index, values);
    yield values[index];
    stepIndex++;
    index += stepIndex % 2 ? 2 : -1;
  }
}
/**
 * Starting from the top move down 2, up 1
 */


function* jumpDown(values) {
  let index = values.length - 1;
  let stepIndex = 0;

  while (index >= 0) {
    index = clampToArraySize(index, values);
    yield values[index];
    stepIndex++;
    index += stepIndex % 2 ? -2 : 1;
  }
}
/**
 * Choose a random index each time
 */


function* randomGen(values) {
  while (true) {
    const randomIndex = Math.floor(Math.random() * values.length);
    yield values[randomIndex];
  }
}
/**
 * Randomly go through all of the values once before choosing a new random order
 */


function* randomOnce(values) {
  // create an array of indices
  const copy = [];

  for (let i = 0; i < values.length; i++) {
    copy.push(i);
  }

  while (copy.length > 0) {
    // random choose an index, and then remove it so it's not chosen again
    const randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);
    const index = clampToArraySize(randVal[0], values);
    yield values[index];
  }
}
/**
 * Randomly choose to walk up or down 1 index in the values array
 */


function* randomWalk(values) {
  // randomly choose a starting index in the values array
  let index = Math.floor(Math.random() * values.length);

  while (true) {
    if (index === 0) {
      index++; // at bottom of array, so force upward step
    } else if (index === values.length - 1) {
      index--; // at top of array, so force downward step
    } else if (Math.random() < 0.5) {
      // else choose random downward or upward step
      index--;
    } else {
      index++;
    }

    yield values[index];
  }
}
/**
 * PatternGenerator returns a generator which will iterate over the given array
 * of values and yield the items according to the passed in pattern
 * @param values An array of values to iterate over
 * @param pattern The name of the pattern use when iterating over
 * @param index Where to start in the offset of the values array
 */


function* PatternGenerator(values, pattern = "up", index = 0) {
  // safeguards
  (0, _Debug.assert)(values.length > 0, "The array must have more than one value in it");

  switch (pattern) {
    case "up":
      yield* infiniteGen(values, upPatternGen);

    case "down":
      yield* infiniteGen(values, downPatternGen);

    case "upDown":
      yield* alternatingGenerator(values, true);

    case "downUp":
      yield* alternatingGenerator(values, false);

    case "alternateUp":
      yield* infiniteGen(values, jumpUp);

    case "alternateDown":
      yield* infiniteGen(values, jumpDown);

    case "random":
      yield* randomGen(values);

    case "randomOnce":
      yield* infiniteGen(values, randomOnce);

    case "randomWalk":
      yield* randomWalk(values);
  }
}
},{"../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js","../core/util/Math":"node_modules/tone/build/esm/core/util/Math.js"}],"node_modules/tone/build/esm/event/Pattern.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pattern = void 0;

var _Loop = require("./Loop");

var _PatternGenerator = require("./PatternGenerator");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

/**
 * Pattern arpeggiates between the given notes
 * in a number of patterns.
 * @example
 * const pattern = new Tone.Pattern((time, note) => {
 * 	// the order of the notes passed in depends on the pattern
 * }, ["C2", "D4", "E5", "A6"], "upDown");
 * @category Event
 */
class Pattern extends _Loop.Loop {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Pattern.getDefaults(), arguments, ["callback", "values", "pattern"]));
    this.name = "Pattern";
    const options = (0, _Defaults.optionsFromArguments)(Pattern.getDefaults(), arguments, ["callback", "values", "pattern"]);
    this.callback = options.callback;
    this._values = options.values;
    this._pattern = (0, _PatternGenerator.PatternGenerator)(options.values, options.pattern);
    this._type = options.pattern;
  }

  static getDefaults() {
    return Object.assign(_Loop.Loop.getDefaults(), {
      pattern: "up",
      values: [],
      callback: _Interface.noOp
    });
  }
  /**
   * Internal function called when the notes should be called
   */


  _tick(time) {
    const value = this._pattern.next();

    this._value = value.value;
    this.callback(time, this._value);
  }
  /**
   * The array of events.
   */


  get values() {
    return this._values;
  }

  set values(val) {
    this._values = val; // reset the pattern

    this.pattern = this._type;
  }
  /**
   * The current value of the pattern.
   */


  get value() {
    return this._value;
  }
  /**
   * The pattern type. See Tone.CtrlPattern for the full list of patterns.
   */


  get pattern() {
    return this._type;
  }

  set pattern(pattern) {
    this._type = pattern;
    this._pattern = (0, _PatternGenerator.PatternGenerator)(this._values, this._type);
  }

}

exports.Pattern = Pattern;
},{"./Loop":"node_modules/tone/build/esm/event/Loop.js","./PatternGenerator":"node_modules/tone/build/esm/event/PatternGenerator.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/event/Sequence.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sequence = void 0;

var _Ticks = require("../core/type/Ticks");

var _Defaults = require("../core/util/Defaults");

var _TypeCheck = require("../core/util/TypeCheck");

var _Part = require("./Part");

var _ToneEvent = require("./ToneEvent");

/**
 * A sequence is an alternate notation of a part. Instead
 * of passing in an array of [time, event] pairs, pass
 * in an array of events which will be spaced at the
 * given subdivision. Sub-arrays will subdivide that beat
 * by the number of items are in the array.
 * Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)
 * @example
 * const synth = new Tone.Synth().toDestination();
 * const seq = new Tone.Sequence((time, note) => {
 * 	synth.triggerAttackRelease(note, 0.1, time);
 * 	// subdivisions are given as subarrays
 * }, ["C4", ["E4", "D4", "E4"], "G4", ["A4", "G4"]]).start(0);
 * Tone.Transport.start();
 * @category Event
 */
class Sequence extends _ToneEvent.ToneEvent {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Sequence.getDefaults(), arguments, ["callback", "events", "subdivision"]));
    this.name = "Sequence";
    /**
     * The object responsible for scheduling all of the events
     */

    this._part = new _Part.Part({
      callback: this._seqCallback.bind(this),
      context: this.context
    });
    /**
     * private reference to all of the sequence proxies
     */

    this._events = [];
    /**
     * The proxied array
     */

    this._eventsArray = [];
    const options = (0, _Defaults.optionsFromArguments)(Sequence.getDefaults(), arguments, ["callback", "events", "subdivision"]);
    this._subdivision = this.toTicks(options.subdivision);
    this.events = options.events; // set all of the values

    this.loop = options.loop;
    this.loopStart = options.loopStart;
    this.loopEnd = options.loopEnd;
    this.playbackRate = options.playbackRate;
    this.probability = options.probability;
    this.humanize = options.humanize;
    this.mute = options.mute;
    this.playbackRate = options.playbackRate;
  }

  static getDefaults() {
    return Object.assign((0, _Defaults.omitFromObject)(_ToneEvent.ToneEvent.getDefaults(), ["value"]), {
      events: [],
      loop: true,
      loopEnd: 0,
      loopStart: 0,
      subdivision: "8n"
    });
  }
  /**
   * The internal callback for when an event is invoked
   */


  _seqCallback(time, value) {
    if (value !== null) {
      this.callback(time, value);
    }
  }
  /**
   * The sequence
   */


  get events() {
    return this._events;
  }

  set events(s) {
    this.clear();
    this._eventsArray = s;
    this._events = this._createSequence(this._eventsArray);

    this._eventsUpdated();
  }
  /**
   * Start the part at the given time.
   * @param  time    When to start the part.
   * @param  offset  The offset index to start at
   */


  start(time, offset) {
    this._part.start(time, offset ? this._indexTime(offset) : offset);

    return this;
  }
  /**
   * Stop the part at the given time.
   * @param  time  When to stop the part.
   */


  stop(time) {
    this._part.stop(time);

    return this;
  }
  /**
   * The subdivision of the sequence. This can only be
   * set in the constructor. The subdivision is the
   * interval between successive steps.
   */


  get subdivision() {
    return new _Ticks.TicksClass(this.context, this._subdivision).toSeconds();
  }
  /**
   * Create a sequence proxy which can be monitored to create subsequences
   */


  _createSequence(array) {
    return new Proxy(array, {
      get: (target, property) => {
        // property is index in this case
        return target[property];
      },
      set: (target, property, value) => {
        if ((0, _TypeCheck.isString)(property) && isFinite(parseInt(property, 10))) {
          if ((0, _TypeCheck.isArray)(value)) {
            target[property] = this._createSequence(value);
          } else {
            target[property] = value;
          }
        } else {
          target[property] = value;
        }

        this._eventsUpdated(); // return true to accept the changes


        return true;
      }
    });
  }
  /**
   * When the sequence has changed, all of the events need to be recreated
   */


  _eventsUpdated() {
    this._part.clear();

    this._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset); // update the loopEnd


    this.loopEnd = this.loopEnd;
  }
  /**
   * reschedule all of the events that need to be rescheduled
   */


  _rescheduleSequence(sequence, subdivision, startOffset) {
    sequence.forEach((value, index) => {
      const eventOffset = index * subdivision + startOffset;

      if ((0, _TypeCheck.isArray)(value)) {
        this._rescheduleSequence(value, subdivision / value.length, eventOffset);
      } else {
        const startTime = new _Ticks.TicksClass(this.context, eventOffset, "i").toSeconds();

        this._part.add(startTime, value);
      }
    });
  }
  /**
   * Get the time of the index given the Sequence's subdivision
   * @param  index
   * @return The time of that index
   */


  _indexTime(index) {
    return new _Ticks.TicksClass(this.context, index * this._subdivision + this.startOffset).toSeconds();
  }
  /**
   * Clear all of the events
   */


  clear() {
    this._part.clear();

    return this;
  }

  dispose() {
    super.dispose();

    this._part.dispose();

    return this;
  } //-------------------------------------
  // PROXY CALLS
  //-------------------------------------


  get loop() {
    return this._part.loop;
  }

  set loop(l) {
    this._part.loop = l;
  }
  /**
   * The index at which the sequence should start looping
   */


  get loopStart() {
    return this._loopStart;
  }

  set loopStart(index) {
    this._loopStart = index;
    this._part.loopStart = this._indexTime(index);
  }
  /**
   * The index at which the sequence should end looping
   */


  get loopEnd() {
    return this._loopEnd;
  }

  set loopEnd(index) {
    this._loopEnd = index;

    if (index === 0) {
      this._part.loopEnd = this._indexTime(this._eventsArray.length);
    } else {
      this._part.loopEnd = this._indexTime(index);
    }
  }

  get startOffset() {
    return this._part.startOffset;
  }

  set startOffset(start) {
    this._part.startOffset = start;
  }

  get playbackRate() {
    return this._part.playbackRate;
  }

  set playbackRate(rate) {
    this._part.playbackRate = rate;
  }

  get probability() {
    return this._part.probability;
  }

  set probability(prob) {
    this._part.probability = prob;
  }

  get progress() {
    return this._part.progress;
  }

  get humanize() {
    return this._part.humanize;
  }

  set humanize(variation) {
    this._part.humanize = variation;
  }
  /**
   * The number of scheduled events
   */


  get length() {
    return this._part.length;
  }

}

exports.Sequence = Sequence;
},{"../core/type/Ticks":"node_modules/tone/build/esm/core/type/Ticks.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/TypeCheck":"node_modules/tone/build/esm/core/util/TypeCheck.js","./Part":"node_modules/tone/build/esm/event/Part.js","./ToneEvent":"node_modules/tone/build/esm/event/ToneEvent.js"}],"node_modules/tone/build/esm/event/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Loop = require("./Loop");

Object.keys(_Loop).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Loop[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Loop[key];
    }
  });
});

var _Part = require("./Part");

Object.keys(_Part).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Part[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Part[key];
    }
  });
});

var _Pattern = require("./Pattern");

Object.keys(_Pattern).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Pattern[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Pattern[key];
    }
  });
});

var _Sequence = require("./Sequence");

Object.keys(_Sequence).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Sequence[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Sequence[key];
    }
  });
});

var _ToneEvent = require("./ToneEvent");

Object.keys(_ToneEvent).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _ToneEvent[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ToneEvent[key];
    }
  });
});
},{"./Loop":"node_modules/tone/build/esm/event/Loop.js","./Part":"node_modules/tone/build/esm/event/Part.js","./Pattern":"node_modules/tone/build/esm/event/Pattern.js","./Sequence":"node_modules/tone/build/esm/event/Sequence.js","./ToneEvent":"node_modules/tone/build/esm/event/ToneEvent.js"}],"node_modules/tone/build/esm/component/channel/CrossFade.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CrossFade = void 0;

var _Gain = require("../../core/context/Gain");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _GainToAudio = require("../../signal/GainToAudio");

var _Signal = require("../../signal/Signal");

/**
 * Tone.Crossfade provides equal power fading between two inputs.
 * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).
 * ```
 *                                             +---------+
 *                                            +> input a +>--+
 * +-----------+   +---------------------+     |         |   |
 * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |
 * +-----------+   |                     |     +---------+   |
 *               +-> pan               R +>-+                |   +--------+
 *               | +---------------------+  |                +---> output +>
 *  +------+     |                          |  +---------+   |   +--------+
 *  | fade +>----+                          | +> input b +>--+
 *  +------+                                |  |         |
 *                                          +--> gain    |
 *                                             +---------+
 * ```
 * @example
 * const crossFade = new Tone.CrossFade().toDestination();
 * // connect two inputs Tone.to a/b
 * const inputA = new Tone.Oscillator(440, "square").connect(crossFade.a).start();
 * const inputB = new Tone.Oscillator(440, "sine").connect(crossFade.b).start();
 * // use the fade to control the mix between the two
 * crossFade.fade.value = 0.5;
 * @category Component
 */
class CrossFade extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(CrossFade.getDefaults(), arguments, ["fade"])));
    this.name = "CrossFade";
    /**
     * The crossfading is done by a StereoPannerNode
     */

    this._panner = this.context.createStereoPanner();
    /**
     * Split the output of the panner node into two values used to control the gains.
     */

    this._split = this.context.createChannelSplitter(2);
    /**
     * Convert the fade value into an audio range value so it can be connected
     * to the panner.pan AudioParam
     */

    this._g2a = new _GainToAudio.GainToAudio({
      context: this.context
    });
    /**
     * The input which is at full level when fade = 0
     */

    this.a = new _Gain.Gain({
      context: this.context,
      gain: 0
    });
    /**
     * The input which is at full level when fade = 1
     */

    this.b = new _Gain.Gain({
      context: this.context,
      gain: 0
    });
    /**
     * The output is a mix between `a` and `b` at the ratio of `fade`
     */

    this.output = new _Gain.Gain({
      context: this.context
    });
    this._internalChannels = [this.a, this.b];
    const options = (0, _Defaults.optionsFromArguments)(CrossFade.getDefaults(), arguments, ["fade"]);
    this.fade = new _Signal.Signal({
      context: this.context,
      units: "normalRange",
      value: options.fade
    });
    (0, _Interface.readOnly)(this, "fade");
    this.context.getConstant(1).connect(this._panner);

    this._panner.connect(this._split); // this is necessary for standardized-audio-context
    // doesn't make any difference for the native AudioContext
    // https://github.com/chrisguttandin/standardized-audio-context/issues/647


    this._panner.channelCount = 1;
    this._panner.channelCountMode = "explicit";
    (0, _ToneAudioNode.connect)(this._split, this.a.gain, 0);
    (0, _ToneAudioNode.connect)(this._split, this.b.gain, 1);
    this.fade.chain(this._g2a, this._panner.pan);
    this.a.connect(this.output);
    this.b.connect(this.output);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      fade: 0.5
    });
  }

  dispose() {
    super.dispose();
    this.a.dispose();
    this.b.dispose();
    this.output.dispose();
    this.fade.dispose();

    this._g2a.dispose();

    this._panner.disconnect();

    this._split.disconnect();

    return this;
  }

}

exports.CrossFade = CrossFade;
},{"../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../../signal/GainToAudio":"node_modules/tone/build/esm/signal/GainToAudio.js","../../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js"}],"node_modules/tone/build/esm/effect/Effect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Effect = void 0;

var _CrossFade = require("../component/channel/CrossFade");

var _Gain = require("../core/context/Gain");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Interface = require("../core/util/Interface");

/**
 * Effect is the base class for effects. Connect the effect between
 * the effectSend and effectReturn GainNodes, then control the amount of
 * effect which goes to the output using the wet control.
 */
class Effect extends _ToneAudioNode.ToneAudioNode {
  constructor(options) {
    super(options);
    this.name = "Effect";
    /**
     * the drywet knob to control the amount of effect
     */

    this._dryWet = new _CrossFade.CrossFade({
      context: this.context
    });
    /**
     * The wet control is how much of the effected
     * will pass through to the output. 1 = 100% effected
     * signal, 0 = 100% dry signal.
     */

    this.wet = this._dryWet.fade;
    /**
     * connect the effectSend to the input of hte effect
     */

    this.effectSend = new _Gain.Gain({
      context: this.context
    });
    /**
     * connect the output of the effect to the effectReturn
     */

    this.effectReturn = new _Gain.Gain({
      context: this.context
    });
    /**
     * The effect input node
     */

    this.input = new _Gain.Gain({
      context: this.context
    });
    /**
     * The effect output
     */

    this.output = this._dryWet; // connections

    this.input.fan(this._dryWet.a, this.effectSend);
    this.effectReturn.connect(this._dryWet.b);
    this.wet.setValueAtTime(options.wet, 0);
    this._internalChannels = [this.effectReturn, this.effectSend];
    (0, _Interface.readOnly)(this, "wet");
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      wet: 1
    });
  }
  /**
   * chains the effect in between the effectSend and effectReturn
   */


  connectEffect(effect) {
    // add it to the internal channels
    this._internalChannels.push(effect);

    this.effectSend.chain(effect, this.effectReturn);
    return this;
  }

  dispose() {
    super.dispose();

    this._dryWet.dispose();

    this.effectSend.dispose();
    this.effectReturn.dispose();
    this.wet.dispose();
    return this;
  }

}

exports.Effect = Effect;
},{"../component/channel/CrossFade":"node_modules/tone/build/esm/component/channel/CrossFade.js","../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/effect/LFOEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LFOEffect = void 0;

var _Effect = require("../effect/Effect");

var _LFO = require("../source/oscillator/LFO");

var _Interface = require("../core/util/Interface");

/**
 * Base class for LFO-based effects.
 */
class LFOEffect extends _Effect.Effect {
  constructor(options) {
    super(options);
    this.name = "LFOEffect";
    this._lfo = new _LFO.LFO({
      context: this.context,
      frequency: options.frequency,
      amplitude: options.depth
    });
    this.depth = this._lfo.amplitude;
    this.frequency = this._lfo.frequency;
    this.type = options.type;
    (0, _Interface.readOnly)(this, ["frequency", "depth"]);
  }

  static getDefaults() {
    return Object.assign(_Effect.Effect.getDefaults(), {
      frequency: 1,
      type: "sine",
      depth: 1
    });
  }
  /**
   * Start the effect.
   */


  start(time) {
    this._lfo.start(time);

    return this;
  }
  /**
   * Stop the lfo
   */


  stop(time) {
    this._lfo.stop(time);

    return this;
  }
  /**
   * Sync the filter to the transport. See [[LFO.sync]]
   */


  sync() {
    this._lfo.sync();

    return this;
  }
  /**
   * Unsync the filter from the transport.
   */


  unsync() {
    this._lfo.unsync();

    return this;
  }
  /**
   * The type of the LFO's oscillator: See [[Oscillator.type]]
   * @example
   * const autoFilter = new Tone.AutoFilter().start().toDestination();
   * const noise = new Tone.Noise().start().connect(autoFilter);
   * autoFilter.type = "square";
   */


  get type() {
    return this._lfo.type;
  }

  set type(type) {
    this._lfo.type = type;
  }

  dispose() {
    super.dispose();

    this._lfo.dispose();

    this.frequency.dispose();
    this.depth.dispose();
    return this;
  }

}

exports.LFOEffect = LFOEffect;
},{"../effect/Effect":"node_modules/tone/build/esm/effect/Effect.js","../source/oscillator/LFO":"node_modules/tone/build/esm/source/oscillator/LFO.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/effect/AutoFilter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AutoFilter = void 0;

var _Filter = require("../component/filter/Filter");

var _Defaults = require("../core/util/Defaults");

var _LFOEffect = require("./LFOEffect");

/**
 * AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.
 * Setting the LFO rate and depth allows for control over the filter modulation rate
 * and depth.
 *
 * @example
 * // create an autofilter and start it's LFO
 * const autoFilter = new Tone.AutoFilter("4n").toDestination().start();
 * // route an oscillator through the filter and start it
 * const oscillator = new Tone.Oscillator().connect(autoFilter).start();
 * @category Effect
 */
class AutoFilter extends _LFOEffect.LFOEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(AutoFilter.getDefaults(), arguments, ["frequency", "baseFrequency", "octaves"]));
    this.name = "AutoFilter";
    const options = (0, _Defaults.optionsFromArguments)(AutoFilter.getDefaults(), arguments, ["frequency", "baseFrequency", "octaves"]);
    this.filter = new _Filter.Filter(Object.assign(options.filter, {
      context: this.context
    })); // connections

    this.connectEffect(this.filter);

    this._lfo.connect(this.filter.frequency);

    this.octaves = options.octaves;
    this.baseFrequency = options.baseFrequency;
  }

  static getDefaults() {
    return Object.assign(_LFOEffect.LFOEffect.getDefaults(), {
      baseFrequency: 200,
      octaves: 2.6,
      filter: {
        type: "lowpass",
        rolloff: -12,
        Q: 1
      }
    });
  }
  /**
   * The minimum value of the filter's cutoff frequency.
   */


  get baseFrequency() {
    return this._lfo.min;
  }

  set baseFrequency(freq) {
    this._lfo.min = this.toFrequency(freq); // and set the max

    this.octaves = this._octaves;
  }
  /**
   * The maximum value of the filter's cutoff frequency.
   */


  get octaves() {
    return this._octaves;
  }

  set octaves(oct) {
    this._octaves = oct;
    this._lfo.max = this._lfo.min * Math.pow(2, oct);
  }

  dispose() {
    super.dispose();
    this.filter.dispose();
    return this;
  }

}

exports.AutoFilter = AutoFilter;
},{"../component/filter/Filter":"node_modules/tone/build/esm/component/filter/Filter.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./LFOEffect":"node_modules/tone/build/esm/effect/LFOEffect.js"}],"node_modules/tone/build/esm/component/channel/Panner.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Panner = void 0;

var _Param = require("../../core/context/Param");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

/**
 * Panner is an equal power Left/Right Panner. It is a wrapper around the StereoPannerNode.
 * @example
 * return Tone.Offline(() => {
 * // move the input signal from right to left
 * 	const panner = new Tone.Panner(1).toDestination();
 * 	panner.pan.rampTo(-1, 0.5);
 * 	const osc = new Tone.Oscillator(100).connect(panner).start();
 * }, 0.5, 2);
 * @category Component
 */
class Panner extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(Panner.getDefaults(), arguments, ["pan"])));
    this.name = "Panner";
    /**
     * the panner node
     */

    this._panner = this.context.createStereoPanner();
    this.input = this._panner;
    this.output = this._panner;
    const options = (0, _Defaults.optionsFromArguments)(Panner.getDefaults(), arguments, ["pan"]);
    this.pan = new _Param.Param({
      context: this.context,
      param: this._panner.pan,
      value: options.pan,
      minValue: -1,
      maxValue: 1
    }); // this is necessary for standardized-audio-context
    // doesn't make any difference for the native AudioContext
    // https://github.com/chrisguttandin/standardized-audio-context/issues/647

    this._panner.channelCount = options.channelCount;
    this._panner.channelCountMode = "explicit"; // initial value

    (0, _Interface.readOnly)(this, "pan");
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      pan: 0,
      channelCount: 1
    });
  }

  dispose() {
    super.dispose();

    this._panner.disconnect();

    this.pan.dispose();
    return this;
  }

}

exports.Panner = Panner;
},{"../../core/context/Param":"node_modules/tone/build/esm/core/context/Param.js","../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/effect/AutoPanner.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AutoPanner = void 0;

var _Panner = require("../component/channel/Panner");

var _Defaults = require("../core/util/Defaults");

var _LFOEffect = require("./LFOEffect");

/**
 * AutoPanner is a [[Panner]] with an [[LFO]] connected to the pan amount.
 * [Related Reading](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).
 *
 * @example
 * // create an autopanner and start it
 * const autoPanner = new Tone.AutoPanner("4n").toDestination().start();
 * // route an oscillator through the panner and start it
 * const oscillator = new Tone.Oscillator().connect(autoPanner).start();
 * @category Effect
 */
class AutoPanner extends _LFOEffect.LFOEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(AutoPanner.getDefaults(), arguments, ["frequency"]));
    this.name = "AutoPanner";
    const options = (0, _Defaults.optionsFromArguments)(AutoPanner.getDefaults(), arguments, ["frequency"]);
    this._panner = new _Panner.Panner({
      context: this.context,
      channelCount: options.channelCount
    }); // connections

    this.connectEffect(this._panner);

    this._lfo.connect(this._panner.pan);

    this._lfo.min = -1;
    this._lfo.max = 1;
  }

  static getDefaults() {
    return Object.assign(_LFOEffect.LFOEffect.getDefaults(), {
      channelCount: 1
    });
  }

  dispose() {
    super.dispose();

    this._panner.dispose();

    return this;
  }

}

exports.AutoPanner = AutoPanner;
},{"../component/channel/Panner":"node_modules/tone/build/esm/component/channel/Panner.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./LFOEffect":"node_modules/tone/build/esm/effect/LFOEffect.js"}],"node_modules/tone/build/esm/component/analysis/Follower.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Follower = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _OnePoleFilter = require("../filter/OnePoleFilter");

var _Abs = require("../../signal/Abs");

/**
 * Follower is a simple envelope follower.
 * It's implemented by applying a lowpass filter to the absolute value of the incoming signal.
 * ```
 *          +-----+    +---------------+
 * Input +--> Abs +----> OnePoleFilter +--> Output
 *          +-----+    +---------------+
 * ```
 * @category Component
 */
class Follower extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Follower.getDefaults(), arguments, ["smoothing"]));
    this.name = "Follower";
    const options = (0, _Defaults.optionsFromArguments)(Follower.getDefaults(), arguments, ["smoothing"]);
    this._abs = this.input = new _Abs.Abs({
      context: this.context
    });
    this._lowpass = this.output = new _OnePoleFilter.OnePoleFilter({
      context: this.context,
      frequency: 1 / this.toSeconds(options.smoothing),
      type: "lowpass"
    });

    this._abs.connect(this._lowpass);

    this._smoothing = options.smoothing;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      smoothing: 0.05
    });
  }
  /**
   * The amount of time it takes a value change to arrive at the updated value.
   */


  get smoothing() {
    return this._smoothing;
  }

  set smoothing(smoothing) {
    this._smoothing = smoothing;
    this._lowpass.frequency = 1 / this.toSeconds(this.smoothing);
  }

  dispose() {
    super.dispose();

    this._abs.dispose();

    this._lowpass.dispose();

    return this;
  }

}

exports.Follower = Follower;
},{"../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../filter/OnePoleFilter":"node_modules/tone/build/esm/component/filter/OnePoleFilter.js","../../signal/Abs":"node_modules/tone/build/esm/signal/Abs.js"}],"node_modules/tone/build/esm/effect/AutoWah.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AutoWah = void 0;

var _Effect = require("./Effect");

var _Filter = require("../component/filter/Filter");

var _Follower = require("../component/analysis/Follower");

var _Defaults = require("../core/util/Defaults");

var _Gain = require("../core/context/Gain");

var _Conversions = require("../core/type/Conversions");

var _ScaleExp = require("../signal/ScaleExp");

var _Interface = require("../core/util/Interface");

/**
 * AutoWah connects a [[Follower]] to a [[Filter]].
 * The frequency of the filter, follows the input amplitude curve.
 * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).
 *
 * @example
 * const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();
 * // initialize the synth and connect to autowah
 * const synth = new Tone.Synth().connect(autoWah);
 * // Q value influences the effect of the wah - default is 2
 * autoWah.Q.value = 6;
 * // more audible on higher notes
 * synth.triggerAttackRelease("C4", "8n");
 * @category Effect
 */
class AutoWah extends _Effect.Effect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(AutoWah.getDefaults(), arguments, ["baseFrequency", "octaves", "sensitivity"]));
    this.name = "AutoWah";
    const options = (0, _Defaults.optionsFromArguments)(AutoWah.getDefaults(), arguments, ["baseFrequency", "octaves", "sensitivity"]);
    this._follower = new _Follower.Follower({
      context: this.context,
      smoothing: options.follower
    });
    this._sweepRange = new _ScaleExp.ScaleExp({
      context: this.context,
      min: 0,
      max: 1,
      exponent: 0.5
    });
    this._baseFrequency = this.toFrequency(options.baseFrequency);
    this._octaves = options.octaves;
    this._inputBoost = new _Gain.Gain({
      context: this.context
    });
    this._bandpass = new _Filter.Filter({
      context: this.context,
      rolloff: -48,
      frequency: 0,
      Q: options.Q
    });
    this._peaking = new _Filter.Filter({
      context: this.context,
      type: "peaking"
    });
    this._peaking.gain.value = options.gain;
    this.gain = this._peaking.gain;
    this.Q = this._bandpass.Q; // the control signal path

    this.effectSend.chain(this._inputBoost, this._follower, this._sweepRange);

    this._sweepRange.connect(this._bandpass.frequency);

    this._sweepRange.connect(this._peaking.frequency); // the filtered path


    this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn); // set the initial value

    this._setSweepRange();

    this.sensitivity = options.sensitivity;
    (0, _Interface.readOnly)(this, ["gain", "Q"]);
  }

  static getDefaults() {
    return Object.assign(_Effect.Effect.getDefaults(), {
      baseFrequency: 100,
      octaves: 6,
      sensitivity: 0,
      Q: 2,
      gain: 2,
      follower: 0.2
    });
  }
  /**
   * The number of octaves that the filter will sweep above the baseFrequency.
   */


  get octaves() {
    return this._octaves;
  }

  set octaves(octaves) {
    this._octaves = octaves;

    this._setSweepRange();
  }
  /**
   * The follower's smoothing time
   */


  get follower() {
    return this._follower.smoothing;
  }

  set follower(follower) {
    this._follower.smoothing = follower;
  }
  /**
   * The base frequency from which the sweep will start from.
   */


  get baseFrequency() {
    return this._baseFrequency;
  }

  set baseFrequency(baseFreq) {
    this._baseFrequency = this.toFrequency(baseFreq);

    this._setSweepRange();
  }
  /**
   * The sensitivity to control how responsive to the input signal the filter is.
   */


  get sensitivity() {
    return (0, _Conversions.gainToDb)(1 / this._inputBoost.gain.value);
  }

  set sensitivity(sensitivity) {
    this._inputBoost.gain.value = 1 / (0, _Conversions.dbToGain)(sensitivity);
  }
  /**
   * sets the sweep range of the scaler
   */


  _setSweepRange() {
    this._sweepRange.min = this._baseFrequency;
    this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);
  }

  dispose() {
    super.dispose();

    this._follower.dispose();

    this._sweepRange.dispose();

    this._bandpass.dispose();

    this._peaking.dispose();

    this._inputBoost.dispose();

    return this;
  }

}

exports.AutoWah = AutoWah;
},{"./Effect":"node_modules/tone/build/esm/effect/Effect.js","../component/filter/Filter":"node_modules/tone/build/esm/component/filter/Filter.js","../component/analysis/Follower":"node_modules/tone/build/esm/component/analysis/Follower.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../core/type/Conversions":"node_modules/tone/build/esm/core/type/Conversions.js","../signal/ScaleExp":"node_modules/tone/build/esm/signal/ScaleExp.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/effect/BitCrusher.worklet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bitCrusherWorklet = exports.workletName = void 0;

require("../core/worklet/SingleIOProcessor.worklet");

var _WorkletGlobalScope = require("../core/worklet/WorkletGlobalScope");

const workletName = "bit-crusher";
exports.workletName = workletName;
const bitCrusherWorklet =
/* javascript */
`
	class BitCrusherWorklet extends SingleIOProcessor {

		static get parameterDescriptors() {
			return [{
				name: "bits",
				defaultValue: 12,
				minValue: 1,
				maxValue: 16,
				automationRate: 'k-rate'
			}];
		}

		generate(input, _channel, parameters) {
			const step = Math.pow(0.5, parameters.bits - 1);
			const val = step * Math.floor(input / step + 0.5);
			return val;
		}
	}
`;
exports.bitCrusherWorklet = bitCrusherWorklet;
(0, _WorkletGlobalScope.registerProcessor)(workletName, bitCrusherWorklet);
},{"../core/worklet/SingleIOProcessor.worklet":"node_modules/tone/build/esm/core/worklet/SingleIOProcessor.worklet.js","../core/worklet/WorkletGlobalScope":"node_modules/tone/build/esm/core/worklet/WorkletGlobalScope.js"}],"node_modules/tone/build/esm/effect/BitCrusher.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BitCrusher = void 0;

var _ToneAudioWorklet = require("../core/worklet/ToneAudioWorklet");

var _Effect = require("./Effect");

var _Gain = require("../core/context/Gain");

var _Defaults = require("../core/util/Defaults");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Param = require("../core/context/Param");

var _BitCrusher = require("./BitCrusher.worklet");

/**
 * BitCrusher down-samples the incoming signal to a different bit depth.
 * Lowering the bit depth of the signal creates distortion. Read more about BitCrushing
 * on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).
 * @example
 * // initialize crusher and route a synth through it
 * const crusher = new Tone.BitCrusher(4).toDestination();
 * const synth = new Tone.Synth().connect(crusher);
 * synth.triggerAttackRelease("C2", 2);
 *
 * @category Effect
 */
class BitCrusher extends _Effect.Effect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(BitCrusher.getDefaults(), arguments, ["bits"]));
    this.name = "BitCrusher";
    const options = (0, _Defaults.optionsFromArguments)(BitCrusher.getDefaults(), arguments, ["bits"]);
    this._bitCrusherWorklet = new BitCrusherWorklet({
      context: this.context,
      bits: options.bits
    }); // connect it up

    this.connectEffect(this._bitCrusherWorklet);
    this.bits = this._bitCrusherWorklet.bits;
  }

  static getDefaults() {
    return Object.assign(_Effect.Effect.getDefaults(), {
      bits: 4
    });
  }

  dispose() {
    super.dispose();

    this._bitCrusherWorklet.dispose();

    return this;
  }

}
/**
 * Internal class which creates an AudioWorklet to do the bit crushing
 */


exports.BitCrusher = BitCrusher;

class BitCrusherWorklet extends _ToneAudioWorklet.ToneAudioWorklet {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(BitCrusherWorklet.getDefaults(), arguments));
    this.name = "BitCrusherWorklet";
    const options = (0, _Defaults.optionsFromArguments)(BitCrusherWorklet.getDefaults(), arguments);
    this.input = new _Gain.Gain({
      context: this.context
    });
    this.output = new _Gain.Gain({
      context: this.context
    });
    this.bits = new _Param.Param({
      context: this.context,
      value: options.bits,
      units: "positive",
      minValue: 1,
      maxValue: 16,
      param: this._dummyParam,
      swappable: true
    });
  }

  static getDefaults() {
    return Object.assign(_ToneAudioWorklet.ToneAudioWorklet.getDefaults(), {
      bits: 12
    });
  }

  _audioWorkletName() {
    return _BitCrusher.workletName;
  }

  onReady(node) {
    (0, _ToneAudioNode.connectSeries)(this.input, node, this.output);
    const bits = node.parameters.get("bits");
    this.bits.setParam(bits);
  }

  dispose() {
    super.dispose();
    this.input.dispose();
    this.output.dispose();
    this.bits.dispose();
    return this;
  }

}
},{"../core/worklet/ToneAudioWorklet":"node_modules/tone/build/esm/core/worklet/ToneAudioWorklet.js","./Effect":"node_modules/tone/build/esm/effect/Effect.js","../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/context/Param":"node_modules/tone/build/esm/core/context/Param.js","./BitCrusher.worklet":"node_modules/tone/build/esm/effect/BitCrusher.worklet.js"}],"node_modules/tone/build/esm/effect/Chebyshev.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Chebyshev = void 0;

var _Effect = require("./Effect");

var _Defaults = require("../core/util/Defaults");

var _WaveShaper = require("../signal/WaveShaper");

/**
 * Chebyshev is a waveshaper which is good
 * for making different types of distortion sounds.
 * Note that odd orders sound very different from even ones,
 * and order = 1 is no change.
 * Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).
 * @example
 * // create a new cheby
 * const cheby = new Tone.Chebyshev(50).toDestination();
 * // create a monosynth connected to our cheby
 * const synth = new Tone.MonoSynth().connect(cheby);
 * synth.triggerAttackRelease("C2", 0.4);
 * @category Effect
 */
class Chebyshev extends _Effect.Effect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Chebyshev.getDefaults(), arguments, ["order"]));
    this.name = "Chebyshev";
    const options = (0, _Defaults.optionsFromArguments)(Chebyshev.getDefaults(), arguments, ["order"]);
    this._shaper = new _WaveShaper.WaveShaper({
      context: this.context,
      length: 4096
    });
    this._order = options.order;
    this.connectEffect(this._shaper);
    this.order = options.order;
    this.oversample = options.oversample;
  }

  static getDefaults() {
    return Object.assign(_Effect.Effect.getDefaults(), {
      order: 1,
      oversample: "none"
    });
  }
  /**
   * get the coefficient for that degree
   * @param  x the x value
   * @param  degree
   * @param  memo memoize the computed value. this speeds up computation greatly.
   */


  _getCoefficient(x, degree, memo) {
    if (memo.has(degree)) {
      return memo.get(degree);
    } else if (degree === 0) {
      memo.set(degree, 0);
    } else if (degree === 1) {
      memo.set(degree, x);
    } else {
      memo.set(degree, 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo));
    }

    return memo.get(degree);
  }
  /**
   * The order of the Chebyshev polynomial which creates the equation which is applied to the incoming
   * signal through a Tone.WaveShaper. The equations are in the form:
   * ```
   * order 2: 2x^2 + 1
   * order 3: 4x^3 + 3x
   * ```
   * @min 1
   * @max 100
   */


  get order() {
    return this._order;
  }

  set order(order) {
    this._order = order;

    this._shaper.setMap(x => {
      return this._getCoefficient(x, order, new Map());
    });
  }
  /**
   * The oversampling of the effect. Can either be "none", "2x" or "4x".
   */


  get oversample() {
    return this._shaper.oversample;
  }

  set oversample(oversampling) {
    this._shaper.oversample = oversampling;
  }

  dispose() {
    super.dispose();

    this._shaper.dispose();

    return this;
  }

}

exports.Chebyshev = Chebyshev;
},{"./Effect":"node_modules/tone/build/esm/effect/Effect.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../signal/WaveShaper":"node_modules/tone/build/esm/signal/WaveShaper.js"}],"node_modules/tone/build/esm/component/channel/Split.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Split = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

/**
 * Split splits an incoming signal into the number of given channels.
 *
 * @example
 * const split = new Tone.Split();
 * // stereoSignal.connect(split);
 * @category Component
 */
class Split extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Split.getDefaults(), arguments, ["channels"]));
    this.name = "Split";
    const options = (0, _Defaults.optionsFromArguments)(Split.getDefaults(), arguments, ["channels"]);
    this._splitter = this.input = this.output = this.context.createChannelSplitter(options.channels);
    this._internalChannels = [this._splitter];
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      channels: 2
    });
  }

  dispose() {
    super.dispose();

    this._splitter.disconnect();

    return this;
  }

}

exports.Split = Split;
},{"../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js"}],"node_modules/tone/build/esm/component/channel/Merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Merge = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

/**
 * Merge brings multiple mono input channels into a single multichannel output channel.
 *
 * @example
 * const merge = new Tone.Merge().toDestination();
 * // routing a sine tone in the left channel
 * const osc = new Tone.Oscillator().connect(merge, 0, 0).start();
 * // and noise in the right channel
 * const noise = new Tone.Noise().connect(merge, 0, 1).start();;
 * @category Component
 */
class Merge extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Merge.getDefaults(), arguments, ["channels"]));
    this.name = "Merge";
    const options = (0, _Defaults.optionsFromArguments)(Merge.getDefaults(), arguments, ["channels"]);
    this._merger = this.output = this.input = this.context.createChannelMerger(options.channels);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      channels: 2
    });
  }

  dispose() {
    super.dispose();

    this._merger.disconnect();

    return this;
  }

}

exports.Merge = Merge;
},{"../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js"}],"node_modules/tone/build/esm/effect/StereoEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StereoEffect = void 0;

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _CrossFade = require("../component/channel/CrossFade");

var _Split = require("../component/channel/Split");

var _Gain = require("../core/context/Gain");

var _Merge = require("../component/channel/Merge");

var _Interface = require("../core/util/Interface");

/**
 * Base class for Stereo effects.
 */
class StereoEffect extends _ToneAudioNode.ToneAudioNode {
  constructor(options) {
    super(options);
    this.name = "StereoEffect";
    this.input = new _Gain.Gain({
      context: this.context
    }); // force mono sources to be stereo

    this.input.channelCount = 2;
    this.input.channelCountMode = "explicit";
    this._dryWet = this.output = new _CrossFade.CrossFade({
      context: this.context,
      fade: options.wet
    });
    this.wet = this._dryWet.fade;
    this._split = new _Split.Split({
      context: this.context,
      channels: 2
    });
    this._merge = new _Merge.Merge({
      context: this.context,
      channels: 2
    }); // connections

    this.input.connect(this._split); // dry wet connections

    this.input.connect(this._dryWet.a);

    this._merge.connect(this._dryWet.b);

    (0, _Interface.readOnly)(this, ["wet"]);
  }
  /**
   * Connect the left part of the effect
   */


  connectEffectLeft(...nodes) {
    this._split.connect(nodes[0], 0, 0);

    (0, _ToneAudioNode.connectSeries)(...nodes);
    (0, _ToneAudioNode.connect)(nodes[nodes.length - 1], this._merge, 0, 0);
  }
  /**
   * Connect the right part of the effect
   */


  connectEffectRight(...nodes) {
    this._split.connect(nodes[0], 1, 0);

    (0, _ToneAudioNode.connectSeries)(...nodes);
    (0, _ToneAudioNode.connect)(nodes[nodes.length - 1], this._merge, 0, 1);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      wet: 1
    });
  }

  dispose() {
    super.dispose();

    this._dryWet.dispose();

    this._split.dispose();

    this._merge.dispose();

    return this;
  }

}

exports.StereoEffect = StereoEffect;
},{"../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../component/channel/CrossFade":"node_modules/tone/build/esm/component/channel/CrossFade.js","../component/channel/Split":"node_modules/tone/build/esm/component/channel/Split.js","../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../component/channel/Merge":"node_modules/tone/build/esm/component/channel/Merge.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/effect/StereoFeedbackEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StereoFeedbackEffect = void 0;

var _StereoEffect = require("./StereoEffect");

var _Signal = require("../signal/Signal");

var _Gain = require("../core/context/Gain");

var _Interface = require("../core/util/Interface");

var _Split = require("../component/channel/Split");

var _Merge = require("../component/channel/Merge");

/**
 * Base class for stereo feedback effects where the effectReturn is fed back into the same channel.
 */
class StereoFeedbackEffect extends _StereoEffect.StereoEffect {
  constructor(options) {
    super(options);
    this.feedback = new _Signal.Signal({
      context: this.context,
      value: options.feedback,
      units: "normalRange"
    });
    this._feedbackL = new _Gain.Gain({
      context: this.context
    });
    this._feedbackR = new _Gain.Gain({
      context: this.context
    });
    this._feedbackSplit = new _Split.Split({
      context: this.context,
      channels: 2
    });
    this._feedbackMerge = new _Merge.Merge({
      context: this.context,
      channels: 2
    });

    this._merge.connect(this._feedbackSplit);

    this._feedbackMerge.connect(this._split); // the left output connected to the left input


    this._feedbackSplit.connect(this._feedbackL, 0, 0);

    this._feedbackL.connect(this._feedbackMerge, 0, 0); // the right output connected to the right input


    this._feedbackSplit.connect(this._feedbackR, 1, 0);

    this._feedbackR.connect(this._feedbackMerge, 0, 1); // the feedback control


    this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);
    (0, _Interface.readOnly)(this, ["feedback"]);
  }

  static getDefaults() {
    return Object.assign(_StereoEffect.StereoEffect.getDefaults(), {
      feedback: 0.5
    });
  }

  dispose() {
    super.dispose();
    this.feedback.dispose();

    this._feedbackL.dispose();

    this._feedbackR.dispose();

    this._feedbackSplit.dispose();

    this._feedbackMerge.dispose();

    return this;
  }

}

exports.StereoFeedbackEffect = StereoFeedbackEffect;
},{"./StereoEffect":"node_modules/tone/build/esm/effect/StereoEffect.js","../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../component/channel/Split":"node_modules/tone/build/esm/component/channel/Split.js","../component/channel/Merge":"node_modules/tone/build/esm/component/channel/Merge.js"}],"node_modules/tone/build/esm/effect/Chorus.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Chorus = void 0;

var _StereoFeedbackEffect = require("../effect/StereoFeedbackEffect");

var _Defaults = require("../core/util/Defaults");

var _LFO = require("../source/oscillator/LFO");

var _Delay = require("../core/context/Delay");

var _Interface = require("../core/util/Interface");

/**
 * Chorus is a stereo chorus effect composed of a left and right delay with an [[LFO]] applied to the delayTime of each channel.
 * When [[feedback]] is set to a value larger than 0, you also get Flanger-type effects.
 * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).
 * Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).
 *
 * @example
 * const chorus = new Tone.Chorus(4, 2.5, 0.5).toDestination().start();
 * const synth = new Tone.PolySynth().connect(chorus);
 * synth.triggerAttackRelease(["C3", "E3", "G3"], "8n");
 *
 * @category Effect
 */
class Chorus extends _StereoFeedbackEffect.StereoFeedbackEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Chorus.getDefaults(), arguments, ["frequency", "delayTime", "depth"]));
    this.name = "Chorus";
    const options = (0, _Defaults.optionsFromArguments)(Chorus.getDefaults(), arguments, ["frequency", "delayTime", "depth"]);
    this._depth = options.depth;
    this._delayTime = options.delayTime / 1000;
    this._lfoL = new _LFO.LFO({
      context: this.context,
      frequency: options.frequency,
      min: 0,
      max: 1
    });
    this._lfoR = new _LFO.LFO({
      context: this.context,
      frequency: options.frequency,
      min: 0,
      max: 1,
      phase: 180
    });
    this._delayNodeL = new _Delay.Delay({
      context: this.context
    });
    this._delayNodeR = new _Delay.Delay({
      context: this.context
    });
    this.frequency = this._lfoL.frequency;
    (0, _Interface.readOnly)(this, ["frequency"]); // have one LFO frequency control the other

    this._lfoL.frequency.connect(this._lfoR.frequency); // connections


    this.connectEffectLeft(this._delayNodeL);
    this.connectEffectRight(this._delayNodeR); // lfo setup

    this._lfoL.connect(this._delayNodeL.delayTime);

    this._lfoR.connect(this._delayNodeR.delayTime); // set the initial values


    this.depth = this._depth;
    this.type = options.type;
    this.spread = options.spread;
  }

  static getDefaults() {
    return Object.assign(_StereoFeedbackEffect.StereoFeedbackEffect.getDefaults(), {
      frequency: 1.5,
      delayTime: 3.5,
      depth: 0.7,
      type: "sine",
      spread: 180,
      feedback: 0,
      wet: 0.5
    });
  }
  /**
   * The depth of the effect. A depth of 1 makes the delayTime
   * modulate between 0 and 2*delayTime (centered around the delayTime).
   */


  get depth() {
    return this._depth;
  }

  set depth(depth) {
    this._depth = depth;
    const deviation = this._delayTime * depth;
    this._lfoL.min = Math.max(this._delayTime - deviation, 0);
    this._lfoL.max = this._delayTime + deviation;
    this._lfoR.min = Math.max(this._delayTime - deviation, 0);
    this._lfoR.max = this._delayTime + deviation;
  }
  /**
   * The delayTime in milliseconds of the chorus. A larger delayTime
   * will give a more pronounced effect. Nominal range a delayTime
   * is between 2 and 20ms.
   */


  get delayTime() {
    return this._delayTime * 1000;
  }

  set delayTime(delayTime) {
    this._delayTime = delayTime / 1000;
    this.depth = this._depth;
  }
  /**
   * The oscillator type of the LFO.
   */


  get type() {
    return this._lfoL.type;
  }

  set type(type) {
    this._lfoL.type = type;
    this._lfoR.type = type;
  }
  /**
   * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.
   * When set to 180, LFO's will be panned hard left and right respectively.
   */


  get spread() {
    return this._lfoR.phase - this._lfoL.phase;
  }

  set spread(spread) {
    this._lfoL.phase = 90 - spread / 2;
    this._lfoR.phase = spread / 2 + 90;
  }
  /**
   * Start the effect.
   */


  start(time) {
    this._lfoL.start(time);

    this._lfoR.start(time);

    return this;
  }
  /**
   * Stop the lfo
   */


  stop(time) {
    this._lfoL.stop(time);

    this._lfoR.stop(time);

    return this;
  }
  /**
   * Sync the filter to the transport. See [[LFO.sync]]
   */


  sync() {
    this._lfoL.sync();

    this._lfoR.sync();

    return this;
  }
  /**
   * Unsync the filter from the transport.
   */


  unsync() {
    this._lfoL.unsync();

    this._lfoR.unsync();

    return this;
  }

  dispose() {
    super.dispose();

    this._lfoL.dispose();

    this._lfoR.dispose();

    this._delayNodeL.dispose();

    this._delayNodeR.dispose();

    this.frequency.dispose();
    return this;
  }

}

exports.Chorus = Chorus;
},{"../effect/StereoFeedbackEffect":"node_modules/tone/build/esm/effect/StereoFeedbackEffect.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../source/oscillator/LFO":"node_modules/tone/build/esm/source/oscillator/LFO.js","../core/context/Delay":"node_modules/tone/build/esm/core/context/Delay.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/effect/Distortion.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Distortion = void 0;

var _Defaults = require("../core/util/Defaults");

var _WaveShaper = require("../signal/WaveShaper");

var _Effect = require("./Effect");

/**
 * A simple distortion effect using Tone.WaveShaper.
 * Algorithm from [this stackoverflow answer](http://stackoverflow.com/a/22313408).
 *
 * @example
 * const dist = new Tone.Distortion(0.8).toDestination();
 * const fm = new Tone.FMSynth().connect(dist);
 * fm.triggerAttackRelease("A1", "8n");
 * @category Effect
 */
class Distortion extends _Effect.Effect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Distortion.getDefaults(), arguments, ["distortion"]));
    this.name = "Distortion";
    const options = (0, _Defaults.optionsFromArguments)(Distortion.getDefaults(), arguments, ["distortion"]);
    this._shaper = new _WaveShaper.WaveShaper({
      context: this.context,
      length: 4096
    });
    this._distortion = options.distortion;
    this.connectEffect(this._shaper);
    this.distortion = options.distortion;
    this.oversample = options.oversample;
  }

  static getDefaults() {
    return Object.assign(_Effect.Effect.getDefaults(), {
      distortion: 0.4,
      oversample: "none"
    });
  }
  /**
   * The amount of distortion. Nominal range is between 0 and 1.
   */


  get distortion() {
    return this._distortion;
  }

  set distortion(amount) {
    this._distortion = amount;
    const k = amount * 100;
    const deg = Math.PI / 180;

    this._shaper.setMap(x => {
      if (Math.abs(x) < 0.001) {
        // should output 0 when input is 0
        return 0;
      } else {
        return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));
      }
    });
  }
  /**
   * The oversampling of the effect. Can either be "none", "2x" or "4x".
   */


  get oversample() {
    return this._shaper.oversample;
  }

  set oversample(oversampling) {
    this._shaper.oversample = oversampling;
  }

  dispose() {
    super.dispose();

    this._shaper.dispose();

    return this;
  }

}

exports.Distortion = Distortion;
},{"../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../signal/WaveShaper":"node_modules/tone/build/esm/signal/WaveShaper.js","./Effect":"node_modules/tone/build/esm/effect/Effect.js"}],"node_modules/tone/build/esm/effect/FeedbackEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FeedbackEffect = void 0;

var _Gain = require("../core/context/Gain");

var _Interface = require("../core/util/Interface");

var _Effect = require("./Effect");

/**
 * FeedbackEffect provides a loop between an audio source and its own output.
 * This is a base-class for feedback effects.
 */
class FeedbackEffect extends _Effect.Effect {
  constructor(options) {
    super(options);
    this.name = "FeedbackEffect";
    this._feedbackGain = new _Gain.Gain({
      context: this.context,
      gain: options.feedback,
      units: "normalRange"
    });
    this.feedback = this._feedbackGain.gain;
    (0, _Interface.readOnly)(this, "feedback"); // the feedback loop

    this.effectReturn.chain(this._feedbackGain, this.effectSend);
  }

  static getDefaults() {
    return Object.assign(_Effect.Effect.getDefaults(), {
      feedback: 0.125
    });
  }

  dispose() {
    super.dispose();

    this._feedbackGain.dispose();

    this.feedback.dispose();
    return this;
  }

}

exports.FeedbackEffect = FeedbackEffect;
},{"../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","./Effect":"node_modules/tone/build/esm/effect/Effect.js"}],"node_modules/tone/build/esm/effect/FeedbackDelay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FeedbackDelay = void 0;

var _Delay = require("../core/context/Delay");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _FeedbackEffect = require("./FeedbackEffect");

/**
 * FeedbackDelay is a DelayNode in which part of output signal is fed back into the delay.
 *
 * @param delayTime The delay applied to the incoming signal.
 * @param feedback The amount of the effected signal which is fed back through the delay.
 * @example
 * const feedbackDelay = new Tone.FeedbackDelay("8n", 0.5).toDestination();
 * const tom = new Tone.MembraneSynth({
 * 	octaves: 4,
 * 	pitchDecay: 0.1
 * }).connect(feedbackDelay);
 * tom.triggerAttackRelease("A2", "32n");
 * @category Effect
 */
class FeedbackDelay extends _FeedbackEffect.FeedbackEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(FeedbackDelay.getDefaults(), arguments, ["delayTime", "feedback"]));
    this.name = "FeedbackDelay";
    const options = (0, _Defaults.optionsFromArguments)(FeedbackDelay.getDefaults(), arguments, ["delayTime", "feedback"]);
    this._delayNode = new _Delay.Delay({
      context: this.context,
      delayTime: options.delayTime,
      maxDelay: options.maxDelay
    });
    this.delayTime = this._delayNode.delayTime; // connect it up

    this.connectEffect(this._delayNode);
    (0, _Interface.readOnly)(this, "delayTime");
  }

  static getDefaults() {
    return Object.assign(_FeedbackEffect.FeedbackEffect.getDefaults(), {
      delayTime: 0.25,
      maxDelay: 1
    });
  }

  dispose() {
    super.dispose();

    this._delayNode.dispose();

    this.delayTime.dispose();
    return this;
  }

}

exports.FeedbackDelay = FeedbackDelay;
},{"../core/context/Delay":"node_modules/tone/build/esm/core/context/Delay.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","./FeedbackEffect":"node_modules/tone/build/esm/effect/FeedbackEffect.js"}],"node_modules/tone/build/esm/component/filter/PhaseShiftAllpass.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PhaseShiftAllpass = void 0;

var _Gain = require("../../core/context/Gain");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

/**
 * PhaseShiftAllpass is an very efficient implementation of a Hilbert Transform
 * using two Allpass filter banks whose outputs have a phase difference of 90°.
 * Here the `offset90` phase is offset by +90° in relation to `output`.
 * Coefficients and structure was developed by Olli Niemitalo.
 * For more details see: http://yehar.com/blog/?p=368
 * @category Component
 */
class PhaseShiftAllpass extends _ToneAudioNode.ToneAudioNode {
  constructor(options) {
    super(options);
    this.name = "PhaseShiftAllpass";
    this.input = new _Gain.Gain({
      context: this.context
    });
    /**
     * The phase shifted output
     */

    this.output = new _Gain.Gain({
      context: this.context
    });
    /**
     * The PhaseShifted allpass output
     */

    this.offset90 = new _Gain.Gain({
      context: this.context
    });
    const allpassBank1Values = [0.6923878, 0.9360654322959, 0.9882295226860, 0.9987488452737];
    const allpassBank2Values = [0.4021921162426, 0.8561710882420, 0.9722909545651, 0.9952884791278];
    this._bank0 = this._createAllPassFilterBank(allpassBank1Values);
    this._bank1 = this._createAllPassFilterBank(allpassBank2Values);
    this._oneSampleDelay = this.context.createIIRFilter([0.0, 1.0], [1.0, 0.0]); // connect Allpass filter banks

    (0, _ToneAudioNode.connectSeries)(this.input, ...this._bank0, this._oneSampleDelay, this.output);
    (0, _ToneAudioNode.connectSeries)(this.input, ...this._bank1, this.offset90);
  }
  /**
   * Create all of the IIR filters from an array of values using the coefficient calculation.
   */


  _createAllPassFilterBank(bankValues) {
    const nodes = bankValues.map(value => {
      const coefficients = [[value * value, 0, -1], [1, 0, -(value * value)]];
      return this.context.createIIRFilter(coefficients[0], coefficients[1]);
    });
    return nodes;
  }

  dispose() {
    super.dispose();
    this.input.dispose();
    this.output.dispose();
    this.offset90.dispose();

    this._bank0.forEach(f => f.disconnect());

    this._bank1.forEach(f => f.disconnect());

    this._oneSampleDelay.disconnect();

    return this;
  }

}

exports.PhaseShiftAllpass = PhaseShiftAllpass;
},{"../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js"}],"node_modules/tone/build/esm/effect/FrequencyShifter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FrequencyShifter = void 0;

var _PhaseShiftAllpass = require("../component/filter/PhaseShiftAllpass");

var _Defaults = require("../core/util/Defaults");

var _Effect = require("../effect/Effect");

var _Add = require("../signal/Add");

var _Multiply = require("../signal/Multiply");

var _Negate = require("../signal/Negate");

var _Signal = require("../signal/Signal");

var _Oscillator = require("../source/oscillator/Oscillator");

var _ToneOscillatorNode = require("../source/oscillator/ToneOscillatorNode");

/**
 * FrequencyShifter can be used to shift all frequencies of a signal by a fixed amount.
 * The amount can be changed at audio rate and the effect is applied in real time.
 * The frequency shifting is implemented with a technique called single side band modulation using a ring modulator.
 * Note: Contrary to pitch shifting, all frequencies are shifted by the same amount,
 * destroying the harmonic relationship between them. This leads to the classic ring modulator timbre distortion.
 * The algorithm will produces some aliasing towards the high end, especially if your source material
 * contains a lot of high frequencies. Unfortunatelly the webaudio API does not support resampling
 * buffers in real time, so it is not possible to fix it properly. Depending on the use case it might
 * be an option to low pass filter your input before frequency shifting it to get ride of the aliasing.
 * You can find a very detailed description of the algorithm here: https://larzeitlin.github.io/RMFS/
 *
 * @example
 * const input = new Tone.Oscillator(230, "sawtooth").start();
 * const shift = new Tone.FrequencyShifter(42).toDestination();
 * input.connect(shift);
 * @category Effect
 */
class FrequencyShifter extends _Effect.Effect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(FrequencyShifter.getDefaults(), arguments, ["frequency"]));
    this.name = "FrequencyShifter";
    const options = (0, _Defaults.optionsFromArguments)(FrequencyShifter.getDefaults(), arguments, ["frequency"]);
    this.frequency = new _Signal.Signal({
      context: this.context,
      units: "frequency",
      value: options.frequency,
      minValue: -this.context.sampleRate / 2,
      maxValue: this.context.sampleRate / 2
    });
    this._sine = new _ToneOscillatorNode.ToneOscillatorNode({
      context: this.context,
      type: "sine"
    });
    this._cosine = new _Oscillator.Oscillator({
      context: this.context,
      phase: -90,
      type: "sine"
    });
    this._sineMultiply = new _Multiply.Multiply({
      context: this.context
    });
    this._cosineMultiply = new _Multiply.Multiply({
      context: this.context
    });
    this._negate = new _Negate.Negate({
      context: this.context
    });
    this._add = new _Add.Add({
      context: this.context
    });
    this._phaseShifter = new _PhaseShiftAllpass.PhaseShiftAllpass({
      context: this.context
    });
    this.effectSend.connect(this._phaseShifter); // connect the carrier frequency signal to the two oscillators

    this.frequency.fan(this._sine.frequency, this._cosine.frequency);

    this._phaseShifter.offset90.connect(this._cosineMultiply);

    this._cosine.connect(this._cosineMultiply.factor);

    this._phaseShifter.connect(this._sineMultiply);

    this._sine.connect(this._sineMultiply.factor);

    this._sineMultiply.connect(this._negate);

    this._cosineMultiply.connect(this._add);

    this._negate.connect(this._add.addend);

    this._add.connect(this.effectReturn); // start the oscillators at the same time


    const now = this.immediate();

    this._sine.start(now);

    this._cosine.start(now);
  }

  static getDefaults() {
    return Object.assign(_Effect.Effect.getDefaults(), {
      frequency: 0
    });
  }

  dispose() {
    super.dispose();
    this.frequency.dispose();

    this._add.dispose();

    this._cosine.dispose();

    this._cosineMultiply.dispose();

    this._negate.dispose();

    this._phaseShifter.dispose();

    this._sine.dispose();

    this._sineMultiply.dispose();

    return this;
  }

}

exports.FrequencyShifter = FrequencyShifter;
},{"../component/filter/PhaseShiftAllpass":"node_modules/tone/build/esm/component/filter/PhaseShiftAllpass.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../effect/Effect":"node_modules/tone/build/esm/effect/Effect.js","../signal/Add":"node_modules/tone/build/esm/signal/Add.js","../signal/Multiply":"node_modules/tone/build/esm/signal/Multiply.js","../signal/Negate":"node_modules/tone/build/esm/signal/Negate.js","../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../source/oscillator/Oscillator":"node_modules/tone/build/esm/source/oscillator/Oscillator.js","../source/oscillator/ToneOscillatorNode":"node_modules/tone/build/esm/source/oscillator/ToneOscillatorNode.js"}],"node_modules/tone/build/esm/effect/Freeverb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Freeverb = void 0;

var _StereoEffect = require("./StereoEffect");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _Signal = require("../signal/Signal");

var _LowpassCombFilter = require("../component/filter/LowpassCombFilter");

/**
 * An array of comb filter delay values from Freeverb implementation
 */
const combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];
/**
 * An array of allpass filter frequency values from Freeverb implementation
 */

const allpassFilterFrequencies = [225, 556, 441, 341];
/**
 * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).
 * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).
 * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].
 * @example
 * const freeverb = new Tone.Freeverb().toDestination();
 * freeverb.dampening = 1000;
 * // routing synth through the reverb
 * const synth = new Tone.NoiseSynth().connect(freeverb);
 * synth.triggerAttackRelease(0.05);
 * @category Effect
 */

class Freeverb extends _StereoEffect.StereoEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Freeverb.getDefaults(), arguments, ["roomSize", "dampening"]));
    this.name = "Freeverb";
    /**
     * the comb filters
     */

    this._combFilters = [];
    /**
     * the allpass filters on the left
     */

    this._allpassFiltersL = [];
    /**
     * the allpass filters on the right
     */

    this._allpassFiltersR = [];
    const options = (0, _Defaults.optionsFromArguments)(Freeverb.getDefaults(), arguments, ["roomSize", "dampening"]);
    this.roomSize = new _Signal.Signal({
      context: this.context,
      value: options.roomSize,
      units: "normalRange"
    }); // make the allpass filters on the right

    this._allpassFiltersL = allpassFilterFrequencies.map(freq => {
      const allpassL = this.context.createBiquadFilter();
      allpassL.type = "allpass";
      allpassL.frequency.value = freq;
      return allpassL;
    }); // make the allpass filters on the left

    this._allpassFiltersR = allpassFilterFrequencies.map(freq => {
      const allpassR = this.context.createBiquadFilter();
      allpassR.type = "allpass";
      allpassR.frequency.value = freq;
      return allpassR;
    }); // make the comb filters

    this._combFilters = combFilterTunings.map((delayTime, index) => {
      const lfpf = new _LowpassCombFilter.LowpassCombFilter({
        context: this.context,
        dampening: options.dampening,
        delayTime
      });

      if (index < combFilterTunings.length / 2) {
        this.connectEffectLeft(lfpf, ...this._allpassFiltersL);
      } else {
        this.connectEffectRight(lfpf, ...this._allpassFiltersR);
      }

      this.roomSize.connect(lfpf.resonance);
      return lfpf;
    });
    (0, _Interface.readOnly)(this, ["roomSize"]);
  }

  static getDefaults() {
    return Object.assign(_StereoEffect.StereoEffect.getDefaults(), {
      roomSize: 0.7,
      dampening: 3000
    });
  }
  /**
   * The amount of dampening of the reverberant signal.
   */


  get dampening() {
    return this._combFilters[0].dampening;
  }

  set dampening(d) {
    this._combFilters.forEach(c => c.dampening = d);
  }

  dispose() {
    super.dispose();

    this._allpassFiltersL.forEach(al => al.disconnect());

    this._allpassFiltersR.forEach(ar => ar.disconnect());

    this._combFilters.forEach(cf => cf.dispose());

    this.roomSize.dispose();
    return this;
  }

}

exports.Freeverb = Freeverb;
},{"./StereoEffect":"node_modules/tone/build/esm/effect/StereoEffect.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../component/filter/LowpassCombFilter":"node_modules/tone/build/esm/component/filter/LowpassCombFilter.js"}],"node_modules/tone/build/esm/effect/JCReverb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JCReverb = void 0;

var _StereoEffect = require("./StereoEffect");

var _Defaults = require("../core/util/Defaults");

var _Scale = require("../signal/Scale");

var _Signal = require("../signal/Signal");

var _FeedbackCombFilter = require("../component/filter/FeedbackCombFilter");

var _Interface = require("../core/util/Interface");

/**
 * an array of the comb filter delay time values
 */
const combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];
/**
 * the resonances of each of the comb filters
 */

const combFilterResonances = [0.773, 0.802, 0.753, 0.733];
/**
 * the allpass filter frequencies
 */

const allpassFilterFreqs = [347, 113, 37];
/**
 * JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)
 * tuned by John Chowning in 1970.
 * It is made up of three allpass filters and four [[FeedbackCombFilter]].
 * JCReverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].
 * @example
 * const reverb = new Tone.JCReverb(0.4).toDestination();
 * const delay = new Tone.FeedbackDelay(0.5);
 * // connecting the synth to reverb through delay
 * const synth = new Tone.DuoSynth().chain(delay, reverb);
 * synth.triggerAttackRelease("A4", "8n");
 *
 * @category Effect
 */

class JCReverb extends _StereoEffect.StereoEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(JCReverb.getDefaults(), arguments, ["roomSize"]));
    this.name = "JCReverb";
    /**
     * a series of allpass filters
     */

    this._allpassFilters = [];
    /**
     * parallel feedback comb filters
     */

    this._feedbackCombFilters = [];
    const options = (0, _Defaults.optionsFromArguments)(JCReverb.getDefaults(), arguments, ["roomSize"]);
    this.roomSize = new _Signal.Signal({
      context: this.context,
      value: options.roomSize,
      units: "normalRange"
    });
    this._scaleRoomSize = new _Scale.Scale({
      context: this.context,
      min: -0.733,
      max: 0.197
    }); // make the allpass filters

    this._allpassFilters = allpassFilterFreqs.map(freq => {
      const allpass = this.context.createBiquadFilter();
      allpass.type = "allpass";
      allpass.frequency.value = freq;
      return allpass;
    }); // and the comb filters

    this._feedbackCombFilters = combFilterDelayTimes.map((delayTime, index) => {
      const fbcf = new _FeedbackCombFilter.FeedbackCombFilter({
        context: this.context,
        delayTime
      });

      this._scaleRoomSize.connect(fbcf.resonance);

      fbcf.resonance.value = combFilterResonances[index];

      if (index < combFilterDelayTimes.length / 2) {
        this.connectEffectLeft(...this._allpassFilters, fbcf);
      } else {
        this.connectEffectRight(...this._allpassFilters, fbcf);
      }

      return fbcf;
    }); // chain the allpass filters together

    this.roomSize.connect(this._scaleRoomSize);
    (0, _Interface.readOnly)(this, ["roomSize"]);
  }

  static getDefaults() {
    return Object.assign(_StereoEffect.StereoEffect.getDefaults(), {
      roomSize: 0.5
    });
  }

  dispose() {
    super.dispose();

    this._allpassFilters.forEach(apf => apf.disconnect());

    this._feedbackCombFilters.forEach(fbcf => fbcf.dispose());

    this.roomSize.dispose();

    this._scaleRoomSize.dispose();

    return this;
  }

}

exports.JCReverb = JCReverb;
},{"./StereoEffect":"node_modules/tone/build/esm/effect/StereoEffect.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../signal/Scale":"node_modules/tone/build/esm/signal/Scale.js","../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../component/filter/FeedbackCombFilter":"node_modules/tone/build/esm/component/filter/FeedbackCombFilter.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/effect/StereoXFeedbackEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StereoXFeedbackEffect = void 0;

var _StereoFeedbackEffect = require("./StereoFeedbackEffect");

var _Interface = require("../core/util/Interface");

/**
 * Just like a [[StereoFeedbackEffect]], but the feedback is routed from left to right
 * and right to left instead of on the same channel.
 * ```
 * +--------------------------------+ feedbackL <-----------------------------------+
 * |                                                                                |
 * +-->                          +----->        +---->                          +-----+
 *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit     | |
 * +-->                          +----->        +---->                          +---+ |
 * |                                                                                  |
 * +--------------------------------+ feedbackR <-------------------------------------+
 * ```
 */
class StereoXFeedbackEffect extends _StereoFeedbackEffect.StereoFeedbackEffect {
  constructor(options) {
    super(options); // the left output connected to the right input

    this._feedbackL.disconnect();

    this._feedbackL.connect(this._feedbackMerge, 0, 1); // the left output connected to the right input


    this._feedbackR.disconnect();

    this._feedbackR.connect(this._feedbackMerge, 0, 0);

    (0, _Interface.readOnly)(this, ["feedback"]);
  }

}

exports.StereoXFeedbackEffect = StereoXFeedbackEffect;
},{"./StereoFeedbackEffect":"node_modules/tone/build/esm/effect/StereoFeedbackEffect.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/effect/PingPongDelay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PingPongDelay = void 0;

var _StereoXFeedbackEffect = require("./StereoXFeedbackEffect");

var _Defaults = require("../core/util/Defaults");

var _Delay = require("../core/context/Delay");

var _Signal = require("../signal/Signal");

var _Interface = require("../core/util/Interface");

/**
 * PingPongDelay is a feedback delay effect where the echo is heard
 * first in one channel and next in the opposite channel. In a stereo
 * system these are the right and left channels.
 * PingPongDelay in more simplified terms is two Tone.FeedbackDelays
 * with independent delay values. Each delay is routed to one channel
 * (left or right), and the channel triggered second will always
 * trigger at the same interval after the first.
 * @example
 * const pingPong = new Tone.PingPongDelay("4n", 0.2).toDestination();
 * const drum = new Tone.MembraneSynth().connect(pingPong);
 * drum.triggerAttackRelease("C4", "32n");
 * @category Effect
 */
class PingPongDelay extends _StereoXFeedbackEffect.StereoXFeedbackEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(PingPongDelay.getDefaults(), arguments, ["delayTime", "feedback"]));
    this.name = "PingPongDelay";
    const options = (0, _Defaults.optionsFromArguments)(PingPongDelay.getDefaults(), arguments, ["delayTime", "feedback"]);
    this._leftDelay = new _Delay.Delay({
      context: this.context,
      maxDelay: options.maxDelay
    });
    this._rightDelay = new _Delay.Delay({
      context: this.context,
      maxDelay: options.maxDelay
    });
    this._rightPreDelay = new _Delay.Delay({
      context: this.context,
      maxDelay: options.maxDelay
    });
    this.delayTime = new _Signal.Signal({
      context: this.context,
      units: "time",
      value: options.delayTime
    }); // connect it up

    this.connectEffectLeft(this._leftDelay);
    this.connectEffectRight(this._rightPreDelay, this._rightDelay);
    this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime); // rearranged the feedback to be after the rightPreDelay

    this._feedbackL.disconnect();

    this._feedbackL.connect(this._rightDelay);

    (0, _Interface.readOnly)(this, ["delayTime"]);
  }

  static getDefaults() {
    return Object.assign(_StereoXFeedbackEffect.StereoXFeedbackEffect.getDefaults(), {
      delayTime: 0.25,
      maxDelay: 1
    });
  }

  dispose() {
    super.dispose();

    this._leftDelay.dispose();

    this._rightDelay.dispose();

    this._rightPreDelay.dispose();

    this.delayTime.dispose();
    return this;
  }

}

exports.PingPongDelay = PingPongDelay;
},{"./StereoXFeedbackEffect":"node_modules/tone/build/esm/effect/StereoXFeedbackEffect.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/context/Delay":"node_modules/tone/build/esm/core/context/Delay.js","../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/effect/PitchShift.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PitchShift = void 0;

var _FeedbackEffect = require("./FeedbackEffect");

var _Defaults = require("../core/util/Defaults");

var _LFO = require("../source/oscillator/LFO");

var _Delay = require("../core/context/Delay");

var _CrossFade = require("../component/channel/CrossFade");

var _Signal = require("../signal/Signal");

var _Interface = require("../core/util/Interface");

var _Conversions = require("../core/type/Conversions");

/**
 * PitchShift does near-realtime pitch shifting to the incoming signal.
 * The effect is achieved by speeding up or slowing down the delayTime
 * of a DelayNode using a sawtooth wave.
 * Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).
 * Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).
 * @category Effect
 */
class PitchShift extends _FeedbackEffect.FeedbackEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(PitchShift.getDefaults(), arguments, ["pitch"]));
    this.name = "PitchShift";
    const options = (0, _Defaults.optionsFromArguments)(PitchShift.getDefaults(), arguments, ["pitch"]);
    this._frequency = new _Signal.Signal({
      context: this.context
    });
    this._delayA = new _Delay.Delay({
      maxDelay: 1,
      context: this.context
    });
    this._lfoA = new _LFO.LFO({
      context: this.context,
      min: 0,
      max: 0.1,
      type: "sawtooth"
    }).connect(this._delayA.delayTime);
    this._delayB = new _Delay.Delay({
      maxDelay: 1,
      context: this.context
    });
    this._lfoB = new _LFO.LFO({
      context: this.context,
      min: 0,
      max: 0.1,
      type: "sawtooth",
      phase: 180
    }).connect(this._delayB.delayTime);
    this._crossFade = new _CrossFade.CrossFade({
      context: this.context
    });
    this._crossFadeLFO = new _LFO.LFO({
      context: this.context,
      min: 0,
      max: 1,
      type: "triangle",
      phase: 90
    }).connect(this._crossFade.fade);
    this._feedbackDelay = new _Delay.Delay({
      delayTime: options.delayTime,
      context: this.context
    });
    this.delayTime = this._feedbackDelay.delayTime;
    (0, _Interface.readOnly)(this, "delayTime");
    this._pitch = options.pitch;
    this._windowSize = options.windowSize; // connect the two delay lines up

    this._delayA.connect(this._crossFade.a);

    this._delayB.connect(this._crossFade.b); // connect the frequency


    this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency); // route the input


    this.effectSend.fan(this._delayA, this._delayB);

    this._crossFade.chain(this._feedbackDelay, this.effectReturn); // start the LFOs at the same time


    const now = this.now();

    this._lfoA.start(now);

    this._lfoB.start(now);

    this._crossFadeLFO.start(now); // set the initial value


    this.windowSize = this._windowSize;
  }

  static getDefaults() {
    return Object.assign(_FeedbackEffect.FeedbackEffect.getDefaults(), {
      pitch: 0,
      windowSize: 0.1,
      delayTime: 0,
      feedback: 0
    });
  }
  /**
   * Repitch the incoming signal by some interval (measured in semi-tones).
   * @example
   * const pitchShift = new Tone.PitchShift().toDestination();
   * const osc = new Tone.Oscillator().connect(pitchShift).start().toDestination();
   * pitchShift.pitch = -12; // down one octave
   * pitchShift.pitch = 7; // up a fifth
   */


  get pitch() {
    return this._pitch;
  }

  set pitch(interval) {
    this._pitch = interval;
    let factor = 0;

    if (interval < 0) {
      this._lfoA.min = 0;
      this._lfoA.max = this._windowSize;
      this._lfoB.min = 0;
      this._lfoB.max = this._windowSize;
      factor = (0, _Conversions.intervalToFrequencyRatio)(interval - 1) + 1;
    } else {
      this._lfoA.min = this._windowSize;
      this._lfoA.max = 0;
      this._lfoB.min = this._windowSize;
      this._lfoB.max = 0;
      factor = (0, _Conversions.intervalToFrequencyRatio)(interval) - 1;
    }

    this._frequency.value = factor * (1.2 / this._windowSize);
  }
  /**
   * The window size corresponds roughly to the sample length in a looping sampler.
   * Smaller values are desirable for a less noticeable delay time of the pitch shifted
   * signal, but larger values will result in smoother pitch shifting for larger intervals.
   * A nominal range of 0.03 to 0.1 is recommended.
   */


  get windowSize() {
    return this._windowSize;
  }

  set windowSize(size) {
    this._windowSize = this.toSeconds(size);
    this.pitch = this._pitch;
  }

  dispose() {
    super.dispose();

    this._frequency.dispose();

    this._delayA.dispose();

    this._delayB.dispose();

    this._lfoA.dispose();

    this._lfoB.dispose();

    this._crossFade.dispose();

    this._crossFadeLFO.dispose();

    this._feedbackDelay.dispose();

    return this;
  }

}

exports.PitchShift = PitchShift;
},{"./FeedbackEffect":"node_modules/tone/build/esm/effect/FeedbackEffect.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../source/oscillator/LFO":"node_modules/tone/build/esm/source/oscillator/LFO.js","../core/context/Delay":"node_modules/tone/build/esm/core/context/Delay.js","../component/channel/CrossFade":"node_modules/tone/build/esm/component/channel/CrossFade.js","../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../core/type/Conversions":"node_modules/tone/build/esm/core/type/Conversions.js"}],"node_modules/tone/build/esm/effect/Phaser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Phaser = void 0;

var _StereoEffect = require("./StereoEffect");

var _Defaults = require("../core/util/Defaults");

var _LFO = require("../source/oscillator/LFO");

var _Signal = require("../signal/Signal");

var _Interface = require("../core/util/Interface");

/**
 * Phaser is a phaser effect. Phasers work by changing the phase
 * of different frequency components of an incoming signal. Read more on
 * [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).
 * Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).
 * @example
 * const phaser = new Tone.Phaser({
 * 	frequency: 15,
 * 	octaves: 5,
 * 	baseFrequency: 1000
 * }).toDestination();
 * const synth = new Tone.FMSynth().connect(phaser);
 * synth.triggerAttackRelease("E3", "2n");
 * @category Effect
 */
class Phaser extends _StereoEffect.StereoEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Phaser.getDefaults(), arguments, ["frequency", "octaves", "baseFrequency"]));
    this.name = "Phaser";
    const options = (0, _Defaults.optionsFromArguments)(Phaser.getDefaults(), arguments, ["frequency", "octaves", "baseFrequency"]);
    this._lfoL = new _LFO.LFO({
      context: this.context,
      frequency: options.frequency,
      min: 0,
      max: 1
    });
    this._lfoR = new _LFO.LFO({
      context: this.context,
      frequency: options.frequency,
      min: 0,
      max: 1,
      phase: 180
    });
    this._baseFrequency = this.toFrequency(options.baseFrequency);
    this._octaves = options.octaves;
    this.Q = new _Signal.Signal({
      context: this.context,
      value: options.Q,
      units: "positive"
    });
    this._filtersL = this._makeFilters(options.stages, this._lfoL);
    this._filtersR = this._makeFilters(options.stages, this._lfoR);
    this.frequency = this._lfoL.frequency;
    this.frequency.value = options.frequency; // connect them up

    this.connectEffectLeft(...this._filtersL);
    this.connectEffectRight(...this._filtersR); // control the frequency with one LFO

    this._lfoL.frequency.connect(this._lfoR.frequency); // set the options


    this.baseFrequency = options.baseFrequency;
    this.octaves = options.octaves; // start the lfo

    this._lfoL.start();

    this._lfoR.start();

    (0, _Interface.readOnly)(this, ["frequency", "Q"]);
  }

  static getDefaults() {
    return Object.assign(_StereoEffect.StereoEffect.getDefaults(), {
      frequency: 0.5,
      octaves: 3,
      stages: 10,
      Q: 10,
      baseFrequency: 350
    });
  }

  _makeFilters(stages, connectToFreq) {
    const filters = []; // make all the filters

    for (let i = 0; i < stages; i++) {
      const filter = this.context.createBiquadFilter();
      filter.type = "allpass";
      this.Q.connect(filter.Q);
      connectToFreq.connect(filter.frequency);
      filters.push(filter);
    }

    return filters;
  }
  /**
   * The number of octaves the phase goes above the baseFrequency
   */


  get octaves() {
    return this._octaves;
  }

  set octaves(octaves) {
    this._octaves = octaves;
    const max = this._baseFrequency * Math.pow(2, octaves);
    this._lfoL.max = max;
    this._lfoR.max = max;
  }
  /**
   * The the base frequency of the filters.
   */


  get baseFrequency() {
    return this._baseFrequency;
  }

  set baseFrequency(freq) {
    this._baseFrequency = this.toFrequency(freq);
    this._lfoL.min = this._baseFrequency;
    this._lfoR.min = this._baseFrequency;
    this.octaves = this._octaves;
  }

  dispose() {
    super.dispose();
    this.Q.dispose();

    this._lfoL.dispose();

    this._lfoR.dispose();

    this._filtersL.forEach(f => f.disconnect());

    this._filtersR.forEach(f => f.disconnect());

    this.frequency.dispose();
    return this;
  }

}

exports.Phaser = Phaser;
},{"./StereoEffect":"node_modules/tone/build/esm/effect/StereoEffect.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../source/oscillator/LFO":"node_modules/tone/build/esm/source/oscillator/LFO.js","../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/effect/Reverb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Reverb = void 0;

var _tslib = require("tslib");

var _Merge = require("../component/channel/Merge");

var _Gain = require("../core/context/Gain");

var _Defaults = require("../core/util/Defaults");

var _Noise = require("../source/Noise");

var _Effect = require("./Effect");

var _OfflineContext = require("../core/context/OfflineContext");

var _Interface = require("../core/util/Interface");

var _Debug = require("../core/util/Debug");

/**
 * Simple convolution created with decaying noise.
 * Generates an Impulse Response Buffer
 * with Tone.Offline then feeds the IR into ConvolverNode.
 * The impulse response generation is async, so you have
 * to wait until [[ready]] resolves before it will make a sound.
 *
 * Inspiration from [ReverbGen](https://github.com/adelespinasse/reverbGen).
 * Copyright (c) 2014 Alan deLespinasse Apache 2.0 License.
 *
 * @category Effect
 */
class Reverb extends _Effect.Effect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Reverb.getDefaults(), arguments, ["decay"]));
    this.name = "Reverb";
    /**
     * Convolver node
     */

    this._convolver = this.context.createConvolver();
    /**
     * Resolves when the reverb buffer is generated. Whenever either [[decay]]
     * or [[preDelay]] are set, you have to wait until [[ready]] resolves
     * before the IR is generated with the latest values.
     */

    this.ready = Promise.resolve();
    const options = (0, _Defaults.optionsFromArguments)(Reverb.getDefaults(), arguments, ["decay"]);
    this._decay = options.decay;
    this._preDelay = options.preDelay;
    this.generate();
    this.connectEffect(this._convolver);
  }

  static getDefaults() {
    return Object.assign(_Effect.Effect.getDefaults(), {
      decay: 1.5,
      preDelay: 0.01
    });
  }
  /**
   * The duration of the reverb.
   */


  get decay() {
    return this._decay;
  }

  set decay(time) {
    time = this.toSeconds(time);
    (0, _Debug.assertRange)(time, 0.001);
    this._decay = time;
    this.generate();
  }
  /**
   * The amount of time before the reverb is fully ramped in.
   */


  get preDelay() {
    return this._preDelay;
  }

  set preDelay(time) {
    time = this.toSeconds(time);
    (0, _Debug.assertRange)(time, 0);
    this._preDelay = time;
    this.generate();
  }
  /**
   * Generate the Impulse Response. Returns a promise while the IR is being generated.
   * @return Promise which returns this object.
   */


  generate() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      const previousReady = this.ready; // create a noise burst which decays over the duration in each channel

      const context = new _OfflineContext.OfflineContext(2, this._decay + this._preDelay, this.context.sampleRate);
      const noiseL = new _Noise.Noise({
        context
      });
      const noiseR = new _Noise.Noise({
        context
      });
      const merge = new _Merge.Merge({
        context
      });
      noiseL.connect(merge, 0, 0);
      noiseR.connect(merge, 0, 1);
      const gainNode = new _Gain.Gain({
        context
      }).toDestination();
      merge.connect(gainNode);
      noiseL.start(0);
      noiseR.start(0); // predelay

      gainNode.gain.setValueAtTime(0, 0);
      gainNode.gain.setValueAtTime(1, this._preDelay); // decay

      gainNode.gain.exponentialApproachValueAtTime(0, this._preDelay, this.decay); // render the buffer

      const renderPromise = context.render();
      this.ready = renderPromise.then(_Interface.noOp); // wait for the previous `ready` to resolve

      yield previousReady; // set the buffer

      this._convolver.buffer = (yield renderPromise).get();
      return this;
    });
  }

  dispose() {
    super.dispose();

    this._convolver.disconnect();

    return this;
  }

}

exports.Reverb = Reverb;
},{"tslib":"node_modules/tslib/tslib.es6.js","../component/channel/Merge":"node_modules/tone/build/esm/component/channel/Merge.js","../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../source/Noise":"node_modules/tone/build/esm/source/Noise.js","./Effect":"node_modules/tone/build/esm/effect/Effect.js","../core/context/OfflineContext":"node_modules/tone/build/esm/core/context/OfflineContext.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/component/channel/MidSideSplit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MidSideSplit = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Split = require("./Split");

var _Add = require("../../signal/Add");

var _Multiply = require("../../signal/Multiply");

var _Subtract = require("../../signal/Subtract");

var _Defaults = require("../../core/util/Defaults");

/**
 * Mid/Side processing separates the the 'mid' signal (which comes out of both the left and the right channel)
 * and the 'side' (which only comes out of the the side channels).
 * ```
 * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right
 * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right
 * ```
 * @category Component
 */
class MidSideSplit extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(MidSideSplit.getDefaults(), arguments));
    this.name = "MidSideSplit";
    this._split = this.input = new _Split.Split({
      channels: 2,
      context: this.context
    });
    this._midAdd = new _Add.Add({
      context: this.context
    });
    this.mid = new _Multiply.Multiply({
      context: this.context,
      value: Math.SQRT1_2
    });
    this._sideSubtract = new _Subtract.Subtract({
      context: this.context
    });
    this.side = new _Multiply.Multiply({
      context: this.context,
      value: Math.SQRT1_2
    });

    this._split.connect(this._midAdd, 0);

    this._split.connect(this._midAdd.addend, 1);

    this._split.connect(this._sideSubtract, 0);

    this._split.connect(this._sideSubtract.subtrahend, 1);

    this._midAdd.connect(this.mid);

    this._sideSubtract.connect(this.side);
  }

  dispose() {
    super.dispose();
    this.mid.dispose();
    this.side.dispose();

    this._midAdd.dispose();

    this._sideSubtract.dispose();

    this._split.dispose();

    return this;
  }

}

exports.MidSideSplit = MidSideSplit;
},{"../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","./Split":"node_modules/tone/build/esm/component/channel/Split.js","../../signal/Add":"node_modules/tone/build/esm/signal/Add.js","../../signal/Multiply":"node_modules/tone/build/esm/signal/Multiply.js","../../signal/Subtract":"node_modules/tone/build/esm/signal/Subtract.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js"}],"node_modules/tone/build/esm/component/channel/MidSideMerge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MidSideMerge = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Merge = require("./Merge");

var _Add = require("../../signal/Add");

var _Multiply = require("../../signal/Multiply");

var _Subtract = require("../../signal/Subtract");

var _Gain = require("../../core/context/Gain");

var _Defaults = require("../../core/util/Defaults");

/**
 * MidSideMerge merges the mid and side signal after they've been separated by [[MidSideSplit]]
 * ```
 * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right
 * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right
 * ```
 * @category Component
 */
class MidSideMerge extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(MidSideMerge.getDefaults(), arguments));
    this.name = "MidSideMerge";
    this.mid = new _Gain.Gain({
      context: this.context
    });
    this.side = new _Gain.Gain({
      context: this.context
    });
    this._left = new _Add.Add({
      context: this.context
    });
    this._leftMult = new _Multiply.Multiply({
      context: this.context,
      value: Math.SQRT1_2
    });
    this._right = new _Subtract.Subtract({
      context: this.context
    });
    this._rightMult = new _Multiply.Multiply({
      context: this.context,
      value: Math.SQRT1_2
    });
    this._merge = this.output = new _Merge.Merge({
      context: this.context
    });
    this.mid.fan(this._left);
    this.side.connect(this._left.addend);
    this.mid.connect(this._right);
    this.side.connect(this._right.subtrahend);

    this._left.connect(this._leftMult);

    this._right.connect(this._rightMult);

    this._leftMult.connect(this._merge, 0, 0);

    this._rightMult.connect(this._merge, 0, 1);
  }

  dispose() {
    super.dispose();
    this.mid.dispose();
    this.side.dispose();

    this._leftMult.dispose();

    this._rightMult.dispose();

    this._left.dispose();

    this._right.dispose();

    return this;
  }

}

exports.MidSideMerge = MidSideMerge;
},{"../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","./Merge":"node_modules/tone/build/esm/component/channel/Merge.js","../../signal/Add":"node_modules/tone/build/esm/signal/Add.js","../../signal/Multiply":"node_modules/tone/build/esm/signal/Multiply.js","../../signal/Subtract":"node_modules/tone/build/esm/signal/Subtract.js","../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js"}],"node_modules/tone/build/esm/effect/MidSideEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MidSideEffect = void 0;

var _Effect = require("./Effect");

var _MidSideSplit = require("../component/channel/MidSideSplit");

var _MidSideMerge = require("../component/channel/MidSideMerge");

/**
 * Mid/Side processing separates the the 'mid' signal
 * (which comes out of both the left and the right channel)
 * and the 'side' (which only comes out of the the side channels)
 * and effects them separately before being recombined.
 * Applies a Mid/Side seperation and recombination.
 * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).
 * This is a base-class for Mid/Side Effects.
 * @category Effect
 */
class MidSideEffect extends _Effect.Effect {
  constructor(options) {
    super(options);
    this.name = "MidSideEffect";
    this._midSideMerge = new _MidSideMerge.MidSideMerge({
      context: this.context
    });
    this._midSideSplit = new _MidSideSplit.MidSideSplit({
      context: this.context
    });
    this._midSend = this._midSideSplit.mid;
    this._sideSend = this._midSideSplit.side;
    this._midReturn = this._midSideMerge.mid;
    this._sideReturn = this._midSideMerge.side; // the connections

    this.effectSend.connect(this._midSideSplit);

    this._midSideMerge.connect(this.effectReturn);
  }
  /**
   * Connect the mid chain of the effect
   */


  connectEffectMid(...nodes) {
    this._midSend.chain(...nodes, this._midReturn);
  }
  /**
   * Connect the side chain of the effect
   */


  connectEffectSide(...nodes) {
    this._sideSend.chain(...nodes, this._sideReturn);
  }

  dispose() {
    super.dispose();

    this._midSideSplit.dispose();

    this._midSideMerge.dispose();

    this._midSend.dispose();

    this._sideSend.dispose();

    this._midReturn.dispose();

    this._sideReturn.dispose();

    return this;
  }

}

exports.MidSideEffect = MidSideEffect;
},{"./Effect":"node_modules/tone/build/esm/effect/Effect.js","../component/channel/MidSideSplit":"node_modules/tone/build/esm/component/channel/MidSideSplit.js","../component/channel/MidSideMerge":"node_modules/tone/build/esm/component/channel/MidSideMerge.js"}],"node_modules/tone/build/esm/effect/StereoWidener.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StereoWidener = void 0;

var _MidSideEffect = require("../effect/MidSideEffect");

var _Signal = require("../signal/Signal");

var _Multiply = require("../signal/Multiply");

var _Subtract = require("../signal/Subtract");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

/**
 * Applies a width factor to the mid/side seperation.
 * 0 is all mid and 1 is all side.
 * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).
 * ```
 * Mid *= 2*(1-width)<br>
 * Side *= 2*width
 * ```
 * @category Effect
 */
class StereoWidener extends _MidSideEffect.MidSideEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(StereoWidener.getDefaults(), arguments, ["width"]));
    this.name = "StereoWidener";
    const options = (0, _Defaults.optionsFromArguments)(StereoWidener.getDefaults(), arguments, ["width"]);
    this.width = new _Signal.Signal({
      context: this.context,
      value: options.width,
      units: "normalRange"
    });
    (0, _Interface.readOnly)(this, ["width"]);
    this._twoTimesWidthMid = new _Multiply.Multiply({
      context: this.context,
      value: 2
    });
    this._twoTimesWidthSide = new _Multiply.Multiply({
      context: this.context,
      value: 2
    });
    this._midMult = new _Multiply.Multiply({
      context: this.context
    });

    this._twoTimesWidthMid.connect(this._midMult.factor);

    this.connectEffectMid(this._midMult);
    this._oneMinusWidth = new _Subtract.Subtract({
      context: this.context
    });

    this._oneMinusWidth.connect(this._twoTimesWidthMid);

    (0, _ToneAudioNode.connect)(this.context.getConstant(1), this._oneMinusWidth);
    this.width.connect(this._oneMinusWidth.subtrahend);
    this._sideMult = new _Multiply.Multiply({
      context: this.context
    });
    this.width.connect(this._twoTimesWidthSide);

    this._twoTimesWidthSide.connect(this._sideMult.factor);

    this.connectEffectSide(this._sideMult);
  }

  static getDefaults() {
    return Object.assign(_MidSideEffect.MidSideEffect.getDefaults(), {
      width: 0.5
    });
  }

  dispose() {
    super.dispose();
    this.width.dispose();

    this._midMult.dispose();

    this._sideMult.dispose();

    this._twoTimesWidthMid.dispose();

    this._twoTimesWidthSide.dispose();

    this._oneMinusWidth.dispose();

    return this;
  }

}

exports.StereoWidener = StereoWidener;
},{"../effect/MidSideEffect":"node_modules/tone/build/esm/effect/MidSideEffect.js","../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../signal/Multiply":"node_modules/tone/build/esm/signal/Multiply.js","../signal/Subtract":"node_modules/tone/build/esm/signal/Subtract.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js"}],"node_modules/tone/build/esm/effect/Tremolo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tremolo = void 0;

var _StereoEffect = require("./StereoEffect");

var _LFO = require("../source/oscillator/LFO");

var _Gain = require("../core/context/Gain");

var _Signal = require("../signal/Signal");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

/**
 * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].
 * The effect is a stereo effect where the modulation phase is inverted in each channel.
 *
 * @example
 * // create a tremolo and start it's LFO
 * const tremolo = new Tone.Tremolo(9, 0.75).toDestination().start();
 * // route an oscillator through the tremolo and start it
 * const oscillator = new Tone.Oscillator().connect(tremolo).start();
 *
 * @category Effect
 */
class Tremolo extends _StereoEffect.StereoEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Tremolo.getDefaults(), arguments, ["frequency", "depth"]));
    this.name = "Tremolo";
    const options = (0, _Defaults.optionsFromArguments)(Tremolo.getDefaults(), arguments, ["frequency", "depth"]);
    this._lfoL = new _LFO.LFO({
      context: this.context,
      type: options.type,
      min: 1,
      max: 0
    });
    this._lfoR = new _LFO.LFO({
      context: this.context,
      type: options.type,
      min: 1,
      max: 0
    });
    this._amplitudeL = new _Gain.Gain({
      context: this.context
    });
    this._amplitudeR = new _Gain.Gain({
      context: this.context
    });
    this.frequency = new _Signal.Signal({
      context: this.context,
      value: options.frequency,
      units: "frequency"
    });
    this.depth = new _Signal.Signal({
      context: this.context,
      value: options.depth,
      units: "normalRange"
    });
    (0, _Interface.readOnly)(this, ["frequency", "depth"]);
    this.connectEffectLeft(this._amplitudeL);
    this.connectEffectRight(this._amplitudeR);

    this._lfoL.connect(this._amplitudeL.gain);

    this._lfoR.connect(this._amplitudeR.gain);

    this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);
    this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);
    this.spread = options.spread;
  }

  static getDefaults() {
    return Object.assign(_StereoEffect.StereoEffect.getDefaults(), {
      frequency: 10,
      type: "sine",
      depth: 0.5,
      spread: 180
    });
  }
  /**
   * Start the tremolo.
   */


  start(time) {
    this._lfoL.start(time);

    this._lfoR.start(time);

    return this;
  }
  /**
   * Stop the tremolo.
   */


  stop(time) {
    this._lfoL.stop(time);

    this._lfoR.stop(time);

    return this;
  }
  /**
   * Sync the effect to the transport.
   */


  sync() {
    this._lfoL.sync();

    this._lfoR.sync();

    this.context.transport.syncSignal(this.frequency);
    return this;
  }
  /**
   * Unsync the filter from the transport
   */


  unsync() {
    this._lfoL.unsync();

    this._lfoR.unsync();

    this.context.transport.unsyncSignal(this.frequency);
    return this;
  }
  /**
   * The oscillator type.
   */


  get type() {
    return this._lfoL.type;
  }

  set type(type) {
    this._lfoL.type = type;
    this._lfoR.type = type;
  }
  /**
   * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.
   * When set to 180, LFO's will be panned hard left and right respectively.
   */


  get spread() {
    return this._lfoR.phase - this._lfoL.phase; // 180
  }

  set spread(spread) {
    this._lfoL.phase = 90 - spread / 2;
    this._lfoR.phase = spread / 2 + 90;
  }

  dispose() {
    super.dispose();

    this._lfoL.dispose();

    this._lfoR.dispose();

    this._amplitudeL.dispose();

    this._amplitudeR.dispose();

    this.frequency.dispose();
    this.depth.dispose();
    return this;
  }

}

exports.Tremolo = Tremolo;
},{"./StereoEffect":"node_modules/tone/build/esm/effect/StereoEffect.js","../source/oscillator/LFO":"node_modules/tone/build/esm/source/oscillator/LFO.js","../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/effect/Vibrato.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Vibrato = void 0;

var _Effect = require("./Effect");

var _Defaults = require("../core/util/Defaults");

var _LFO = require("../source/oscillator/LFO");

var _Delay = require("../core/context/Delay");

var _Interface = require("../core/util/Interface");

/**
 * A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO
 * modulates the delayTime of the delay, causing the pitch to rise and fall.
 * @category Effect
 */
class Vibrato extends _Effect.Effect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Vibrato.getDefaults(), arguments, ["frequency", "depth"]));
    this.name = "Vibrato";
    const options = (0, _Defaults.optionsFromArguments)(Vibrato.getDefaults(), arguments, ["frequency", "depth"]);
    this._delayNode = new _Delay.Delay({
      context: this.context,
      delayTime: 0,
      maxDelay: options.maxDelay
    });
    this._lfo = new _LFO.LFO({
      context: this.context,
      type: options.type,
      min: 0,
      max: options.maxDelay,
      frequency: options.frequency,
      phase: -90 // offse the phase so the resting position is in the center

    }).start().connect(this._delayNode.delayTime);
    this.frequency = this._lfo.frequency;
    this.depth = this._lfo.amplitude;
    this.depth.value = options.depth;
    (0, _Interface.readOnly)(this, ["frequency", "depth"]);
    this.effectSend.chain(this._delayNode, this.effectReturn);
  }

  static getDefaults() {
    return Object.assign(_Effect.Effect.getDefaults(), {
      maxDelay: 0.005,
      frequency: 5,
      depth: 0.1,
      type: "sine"
    });
  }
  /**
   * Type of oscillator attached to the Vibrato.
   */


  get type() {
    return this._lfo.type;
  }

  set type(type) {
    this._lfo.type = type;
  }

  dispose() {
    super.dispose();

    this._delayNode.dispose();

    this._lfo.dispose();

    this.frequency.dispose();
    this.depth.dispose();
    return this;
  }

}

exports.Vibrato = Vibrato;
},{"./Effect":"node_modules/tone/build/esm/effect/Effect.js","../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../source/oscillator/LFO":"node_modules/tone/build/esm/source/oscillator/LFO.js","../core/context/Delay":"node_modules/tone/build/esm/core/context/Delay.js","../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/effect/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _AutoFilter = require("./AutoFilter");

Object.keys(_AutoFilter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _AutoFilter[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AutoFilter[key];
    }
  });
});

var _AutoPanner = require("./AutoPanner");

Object.keys(_AutoPanner).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _AutoPanner[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AutoPanner[key];
    }
  });
});

var _AutoWah = require("./AutoWah");

Object.keys(_AutoWah).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _AutoWah[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AutoWah[key];
    }
  });
});

var _BitCrusher = require("./BitCrusher");

Object.keys(_BitCrusher).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _BitCrusher[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BitCrusher[key];
    }
  });
});

var _Chebyshev = require("./Chebyshev");

Object.keys(_Chebyshev).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Chebyshev[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Chebyshev[key];
    }
  });
});

var _Chorus = require("./Chorus");

Object.keys(_Chorus).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Chorus[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Chorus[key];
    }
  });
});

var _Distortion = require("./Distortion");

Object.keys(_Distortion).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Distortion[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Distortion[key];
    }
  });
});

var _FeedbackDelay = require("./FeedbackDelay");

Object.keys(_FeedbackDelay).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _FeedbackDelay[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _FeedbackDelay[key];
    }
  });
});

var _FrequencyShifter = require("./FrequencyShifter");

Object.keys(_FrequencyShifter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _FrequencyShifter[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _FrequencyShifter[key];
    }
  });
});

var _Freeverb = require("./Freeverb");

Object.keys(_Freeverb).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Freeverb[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Freeverb[key];
    }
  });
});

var _JCReverb = require("./JCReverb");

Object.keys(_JCReverb).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _JCReverb[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _JCReverb[key];
    }
  });
});

var _PingPongDelay = require("./PingPongDelay");

Object.keys(_PingPongDelay).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _PingPongDelay[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _PingPongDelay[key];
    }
  });
});

var _PitchShift = require("./PitchShift");

Object.keys(_PitchShift).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _PitchShift[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _PitchShift[key];
    }
  });
});

var _Phaser = require("./Phaser");

Object.keys(_Phaser).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Phaser[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Phaser[key];
    }
  });
});

var _Reverb = require("./Reverb");

Object.keys(_Reverb).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Reverb[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Reverb[key];
    }
  });
});

var _StereoWidener = require("./StereoWidener");

Object.keys(_StereoWidener).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _StereoWidener[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _StereoWidener[key];
    }
  });
});

var _Tremolo = require("./Tremolo");

Object.keys(_Tremolo).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Tremolo[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Tremolo[key];
    }
  });
});

var _Vibrato = require("./Vibrato");

Object.keys(_Vibrato).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Vibrato[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Vibrato[key];
    }
  });
});
},{"./AutoFilter":"node_modules/tone/build/esm/effect/AutoFilter.js","./AutoPanner":"node_modules/tone/build/esm/effect/AutoPanner.js","./AutoWah":"node_modules/tone/build/esm/effect/AutoWah.js","./BitCrusher":"node_modules/tone/build/esm/effect/BitCrusher.js","./Chebyshev":"node_modules/tone/build/esm/effect/Chebyshev.js","./Chorus":"node_modules/tone/build/esm/effect/Chorus.js","./Distortion":"node_modules/tone/build/esm/effect/Distortion.js","./FeedbackDelay":"node_modules/tone/build/esm/effect/FeedbackDelay.js","./FrequencyShifter":"node_modules/tone/build/esm/effect/FrequencyShifter.js","./Freeverb":"node_modules/tone/build/esm/effect/Freeverb.js","./JCReverb":"node_modules/tone/build/esm/effect/JCReverb.js","./PingPongDelay":"node_modules/tone/build/esm/effect/PingPongDelay.js","./PitchShift":"node_modules/tone/build/esm/effect/PitchShift.js","./Phaser":"node_modules/tone/build/esm/effect/Phaser.js","./Reverb":"node_modules/tone/build/esm/effect/Reverb.js","./StereoWidener":"node_modules/tone/build/esm/effect/StereoWidener.js","./Tremolo":"node_modules/tone/build/esm/effect/Tremolo.js","./Vibrato":"node_modules/tone/build/esm/effect/Vibrato.js"}],"node_modules/tone/build/esm/component/analysis/Analyser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Analyser = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Split = require("../channel/Split");

var _Gain = require("../../core/context/Gain");

var _Debug = require("../../core/util/Debug");

/**
 * Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).
 * Extracts FFT or Waveform data from the incoming signal.
 * @category Component
 */
class Analyser extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Analyser.getDefaults(), arguments, ["type", "size"]));
    this.name = "Analyser";
    /**
     * The analyser node.
     */

    this._analysers = [];
    /**
     * The buffer that the FFT data is written to
     */

    this._buffers = [];
    const options = (0, _Defaults.optionsFromArguments)(Analyser.getDefaults(), arguments, ["type", "size"]);
    this.input = this.output = this._gain = new _Gain.Gain({
      context: this.context
    });
    this._split = new _Split.Split({
      context: this.context,
      channels: options.channels
    });
    this.input.connect(this._split);
    (0, _Debug.assertRange)(options.channels, 1); // create the analysers

    for (let channel = 0; channel < options.channels; channel++) {
      this._analysers[channel] = this.context.createAnalyser();

      this._split.connect(this._analysers[channel], channel, 0);
    } // set the values initially


    this.size = options.size;
    this.type = options.type;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      size: 1024,
      smoothing: 0.8,
      type: "fft",
      channels: 1
    });
  }
  /**
   * Run the analysis given the current settings. If [[channels]] = 1,
   * it will return a Float32Array. If [[channels]] > 1, it will
   * return an array of Float32Arrays where each index in the array
   * represents the analysis done on a channel.
   */


  getValue() {
    this._analysers.forEach((analyser, index) => {
      const buffer = this._buffers[index];

      if (this._type === "fft") {
        analyser.getFloatFrequencyData(buffer);
      } else if (this._type === "waveform") {
        analyser.getFloatTimeDomainData(buffer);
      }
    });

    if (this.channels === 1) {
      return this._buffers[0];
    } else {
      return this._buffers;
    }
  }
  /**
   * The size of analysis. This must be a power of two in the range 16 to 16384.
   */


  get size() {
    return this._analysers[0].frequencyBinCount;
  }

  set size(size) {
    this._analysers.forEach((analyser, index) => {
      analyser.fftSize = size * 2;
      this._buffers[index] = new Float32Array(size);
    });
  }
  /**
   * The number of channels the analyser does the analysis on. Channel
   * separation is done using [[Split]]
   */


  get channels() {
    return this._analysers.length;
  }
  /**
   * The analysis function returned by analyser.getValue(), either "fft" or "waveform".
   */


  get type() {
    return this._type;
  }

  set type(type) {
    (0, _Debug.assert)(type === "waveform" || type === "fft", `Analyser: invalid type: ${type}`);
    this._type = type;
  }
  /**
   * 0 represents no time averaging with the last analysis frame.
   */


  get smoothing() {
    return this._analysers[0].smoothingTimeConstant;
  }

  set smoothing(val) {
    this._analysers.forEach(a => a.smoothingTimeConstant = val);
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    this._analysers.forEach(a => a.disconnect());

    this._split.dispose();

    this._gain.dispose();

    return this;
  }

}

exports.Analyser = Analyser;
},{"../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../channel/Split":"node_modules/tone/build/esm/component/channel/Split.js","../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/component/analysis/MeterBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MeterBase = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Analyser = require("./Analyser");

/**
 * The base class for Metering classes.
 */
class MeterBase extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(MeterBase.getDefaults(), arguments));
    this.name = "MeterBase";
    this.input = this.output = this._analyser = new _Analyser.Analyser({
      context: this.context,
      size: 256,
      type: "waveform"
    });
  }

  dispose() {
    super.dispose();

    this._analyser.dispose();

    return this;
  }

}

exports.MeterBase = MeterBase;
},{"../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./Analyser":"node_modules/tone/build/esm/component/analysis/Analyser.js"}],"node_modules/tone/build/esm/component/analysis/Meter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Meter = void 0;

var _Conversions = require("../../core/type/Conversions");

var _Defaults = require("../../core/util/Defaults");

var _MeterBase = require("./MeterBase");

var _Debug = require("../../core/util/Debug");

var _Analyser = require("./Analyser");

/**
 * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)
 * of an input signal. It can also get the raw value of the input signal.
 *
 * @example
 * const meter = new Tone.Meter();
 * const mic = new Tone.UserMedia();
 * mic.open();
 * // connect mic to the meter
 * mic.connect(meter);
 * // the current level of the mic
 * setInterval(() => console.log(meter.getValue()), 100);
 * @category Component
 */
class Meter extends _MeterBase.MeterBase {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Meter.getDefaults(), arguments, ["smoothing"]));
    this.name = "Meter";
    /**
     * The previous frame's value
     */

    this._rms = 0;
    const options = (0, _Defaults.optionsFromArguments)(Meter.getDefaults(), arguments, ["smoothing"]);
    this.input = this.output = this._analyser = new _Analyser.Analyser({
      context: this.context,
      size: 256,
      type: "waveform",
      channels: options.channels
    });
    this.smoothing = options.smoothing, this.normalRange = options.normalRange;
  }

  static getDefaults() {
    return Object.assign(_MeterBase.MeterBase.getDefaults(), {
      smoothing: 0.8,
      normalRange: false,
      channels: 1
    });
  }
  /**
   * Use [[getValue]] instead. For the previous getValue behavior, use DCMeter.
   * @deprecated
   */


  getLevel() {
    (0, _Debug.warn)("'getLevel' has been changed to 'getValue'");
    return this.getValue();
  }
  /**
   * Get the current value of the incoming signal.
   * Output is in decibels when [[normalRange]] is `false`.
   * If [[channels]] = 1, then the output is a single number
   * representing the value of the input signal. When [[channels]] > 1,
   * then each channel is returned as a value in a number array.
   */


  getValue() {
    const aValues = this._analyser.getValue();

    const channelValues = this.channels === 1 ? [aValues] : aValues;
    const vals = channelValues.map(values => {
      const totalSquared = values.reduce((total, current) => total + current * current, 0);
      const rms = Math.sqrt(totalSquared / values.length); // the rms can only fall at the rate of the smoothing
      // but can jump up instantly

      this._rms = Math.max(rms, this._rms * this.smoothing);
      return this.normalRange ? this._rms : (0, _Conversions.gainToDb)(this._rms);
    });

    if (this.channels === 1) {
      return vals[0];
    } else {
      return vals;
    }
  }
  /**
   * The number of channels of analysis.
   */


  get channels() {
    return this._analyser.channels;
  }

  dispose() {
    super.dispose();

    this._analyser.dispose();

    return this;
  }

}

exports.Meter = Meter;
},{"../../core/type/Conversions":"node_modules/tone/build/esm/core/type/Conversions.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./MeterBase":"node_modules/tone/build/esm/component/analysis/MeterBase.js","../../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js","./Analyser":"node_modules/tone/build/esm/component/analysis/Analyser.js"}],"node_modules/tone/build/esm/component/analysis/FFT.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FFT = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Conversions = require("../../core/type/Conversions");

var _Defaults = require("../../core/util/Defaults");

var _MeterBase = require("./MeterBase");

var _Debug = require("../../core/util/Debug");

/**
 * Get the current frequency data of the connected audio source using a fast Fourier transform.
 * @category Component
 */
class FFT extends _MeterBase.MeterBase {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(FFT.getDefaults(), arguments, ["size"]));
    this.name = "FFT";
    const options = (0, _Defaults.optionsFromArguments)(FFT.getDefaults(), arguments, ["size"]);
    this.normalRange = options.normalRange;
    this._analyser.type = "fft";
    this.size = options.size;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      normalRange: false,
      size: 1024,
      smoothing: 0.8
    });
  }
  /**
   * Gets the current frequency data from the connected audio source.
   * Returns the frequency data of length [[size]] as a Float32Array of decibel values.
   */


  getValue() {
    const values = this._analyser.getValue();

    return values.map(v => this.normalRange ? (0, _Conversions.dbToGain)(v) : v);
  }
  /**
   * The size of analysis. This must be a power of two in the range 16 to 16384.
   * Determines the size of the array returned by [[getValue]] (i.e. the number of
   * frequency bins). Large FFT sizes may be costly to compute.
   */


  get size() {
    return this._analyser.size;
  }

  set size(size) {
    this._analyser.size = size;
  }
  /**
   * 0 represents no time averaging with the last analysis frame.
   */


  get smoothing() {
    return this._analyser.smoothing;
  }

  set smoothing(val) {
    this._analyser.smoothing = val;
  }
  /**
   * Returns the frequency value in hertz of each of the indices of the FFT's [[getValue]] response.
   * @example
   * const fft = new Tone.FFT(32);
   * console.log([0, 1, 2, 3, 4].map(index => fft.getFrequencyOfIndex(index)));
   */


  getFrequencyOfIndex(index) {
    (0, _Debug.assert)(0 <= index && index < this.size, `index must be greater than or equal to 0 and less than ${this.size}`);
    return index * this.context.sampleRate / (this.size * 2);
  }

}

exports.FFT = FFT;
},{"../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/type/Conversions":"node_modules/tone/build/esm/core/type/Conversions.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./MeterBase":"node_modules/tone/build/esm/component/analysis/MeterBase.js","../../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js"}],"node_modules/tone/build/esm/component/analysis/DCMeter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DCMeter = void 0;

var _Defaults = require("../../core/util/Defaults");

var _MeterBase = require("./MeterBase");

/**
 * DCMeter gets the raw value of the input signal at the current time.
 *
 * @example
 * const meter = new Tone.DCMeter();
 * const mic = new Tone.UserMedia();
 * mic.open();
 * // connect mic to the meter
 * mic.connect(meter);
 * // the current level of the mic
 * const level = meter.getValue();
 * @category Component
 */
class DCMeter extends _MeterBase.MeterBase {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(DCMeter.getDefaults(), arguments));
    this.name = "DCMeter";
    this._analyser.type = "waveform";
    this._analyser.size = 256;
  }
  /**
   * Get the signal value of the incoming signal
   */


  getValue() {
    const value = this._analyser.getValue();

    return value[0];
  }

}

exports.DCMeter = DCMeter;
},{"../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./MeterBase":"node_modules/tone/build/esm/component/analysis/MeterBase.js"}],"node_modules/tone/build/esm/component/analysis/Waveform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Waveform = void 0;

var _Defaults = require("../../core/util/Defaults");

var _MeterBase = require("./MeterBase");

/**
 * Get the current waveform data of the connected audio source.
 * @category Component
 */
class Waveform extends _MeterBase.MeterBase {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Waveform.getDefaults(), arguments, ["size"]));
    this.name = "Waveform";
    const options = (0, _Defaults.optionsFromArguments)(Waveform.getDefaults(), arguments, ["size"]);
    this._analyser.type = "waveform";
    this.size = options.size;
  }

  static getDefaults() {
    return Object.assign(_MeterBase.MeterBase.getDefaults(), {
      size: 1024
    });
  }
  /**
   * Return the waveform for the current time as a Float32Array where each value in the array
   * represents a sample in the waveform.
   */


  getValue() {
    return this._analyser.getValue();
  }
  /**
   * The size of analysis. This must be a power of two in the range 16 to 16384.
   * Determines the size of the array returned by [[getValue]].
   */


  get size() {
    return this._analyser.size;
  }

  set size(size) {
    this._analyser.size = size;
  }

}

exports.Waveform = Waveform;
},{"../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./MeterBase":"node_modules/tone/build/esm/component/analysis/MeterBase.js"}],"node_modules/tone/build/esm/component/channel/Solo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Solo = void 0;

var _Gain = require("../../core/context/Gain");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

/**
 * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,
 * it will mute all other instances of Solo.
 * @example
 * const soloA = new Tone.Solo().toDestination();
 * const oscA = new Tone.Oscillator("C4", "sawtooth").connect(soloA);
 * const soloB = new Tone.Solo().toDestination();
 * const oscB = new Tone.Oscillator("E4", "square").connect(soloB);
 * soloA.solo = true;
 * // no audio will pass through soloB
 * @category Component
 */
class Solo extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Solo.getDefaults(), arguments, ["solo"]));
    this.name = "Solo";
    const options = (0, _Defaults.optionsFromArguments)(Solo.getDefaults(), arguments, ["solo"]);
    this.input = this.output = new _Gain.Gain({
      context: this.context
    });

    if (!Solo._allSolos.has(this.context)) {
      Solo._allSolos.set(this.context, new Set());
    }

    Solo._allSolos.get(this.context).add(this); // set initially


    this.solo = options.solo;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      solo: false
    });
  }
  /**
   * Isolates this instance and mutes all other instances of Solo.
   * Only one instance can be soloed at a time. A soloed
   * instance will report `solo=false` when another instance is soloed.
   */


  get solo() {
    return this._isSoloed();
  }

  set solo(solo) {
    if (solo) {
      this._addSolo();
    } else {
      this._removeSolo();
    }

    Solo._allSolos.get(this.context).forEach(instance => instance._updateSolo());
  }
  /**
   * If the current instance is muted, i.e. another instance is soloed
   */


  get muted() {
    return this.input.gain.value === 0;
  }
  /**
   * Add this to the soloed array
   */


  _addSolo() {
    if (!Solo._soloed.has(this.context)) {
      Solo._soloed.set(this.context, new Set());
    }

    Solo._soloed.get(this.context).add(this);
  }
  /**
   * Remove this from the soloed array
   */


  _removeSolo() {
    if (Solo._soloed.has(this.context)) {
      Solo._soloed.get(this.context).delete(this);
    }
  }
  /**
   * Is this on the soloed array
   */


  _isSoloed() {
    return Solo._soloed.has(this.context) && Solo._soloed.get(this.context).has(this);
  }
  /**
   * Returns true if no one is soloed
   */


  _noSolos() {
    // either does not have any soloed added
    return !Solo._soloed.has(this.context) || // or has a solo set but doesn't include any items
    Solo._soloed.has(this.context) && Solo._soloed.get(this.context).size === 0;
  }
  /**
   * Solo the current instance and unsolo all other instances.
   */


  _updateSolo() {
    if (this._isSoloed()) {
      this.input.gain.value = 1;
    } else if (this._noSolos()) {
      // no one is soloed
      this.input.gain.value = 1;
    } else {
      this.input.gain.value = 0;
    }
  }

  dispose() {
    super.dispose();

    Solo._allSolos.get(this.context).delete(this);

    this._removeSolo();

    return this;
  }

}
/**
 * Hold all of the solo'ed tracks belonging to a specific context
 */


exports.Solo = Solo;
Solo._allSolos = new Map();
/**
 * Hold the currently solo'ed instance(s)
 */

Solo._soloed = new Map();
},{"../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js"}],"node_modules/tone/build/esm/component/channel/PanVol.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PanVol = void 0;

var _Interface = require("../../core/util/Interface");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Panner = require("./Panner");

var _Volume = require("./Volume");

/**
 * PanVol is a Tone.Panner and Tone.Volume in one.
 * @example
 * // pan the incoming signal left and drop the volume
 * const panVol = new Tone.PanVol(-0.25, -12).toDestination();
 * const osc = new Tone.Oscillator().connect(panVol).start();
 * @category Component
 */
class PanVol extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(PanVol.getDefaults(), arguments, ["pan", "volume"]));
    this.name = "PanVol";
    const options = (0, _Defaults.optionsFromArguments)(PanVol.getDefaults(), arguments, ["pan", "volume"]);
    this._panner = this.input = new _Panner.Panner({
      context: this.context,
      pan: options.pan,
      channelCount: options.channelCount
    });
    this.pan = this._panner.pan;
    this._volume = this.output = new _Volume.Volume({
      context: this.context,
      volume: options.volume
    });
    this.volume = this._volume.volume; // connections

    this._panner.connect(this._volume);

    this.mute = options.mute;
    (0, _Interface.readOnly)(this, ["pan", "volume"]);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      mute: false,
      pan: 0,
      volume: 0,
      channelCount: 1
    });
  }
  /**
   * Mute/unmute the volume
   */


  get mute() {
    return this._volume.mute;
  }

  set mute(mute) {
    this._volume.mute = mute;
  }

  dispose() {
    super.dispose();

    this._panner.dispose();

    this.pan.dispose();

    this._volume.dispose();

    this.volume.dispose();
    return this;
  }

}

exports.PanVol = PanVol;
},{"../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./Panner":"node_modules/tone/build/esm/component/channel/Panner.js","./Volume":"node_modules/tone/build/esm/component/channel/Volume.js"}],"node_modules/tone/build/esm/component/channel/Channel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Channel = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Solo = require("./Solo");

var _PanVol = require("./PanVol");

var _Interface = require("../../core/util/Interface");

var _Gain = require("../../core/context/Gain");

/**
 * Channel provides a channel strip interface with volume, pan, solo and mute controls.
 * See [[PanVol]] and [[Solo]]
 * @example
 * // pan the incoming signal left and drop the volume 12db
 * const channel = new Tone.Channel(-0.25, -12);
 * @category Component
 */
class Channel extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Channel.getDefaults(), arguments, ["volume", "pan"]));
    this.name = "Channel";
    const options = (0, _Defaults.optionsFromArguments)(Channel.getDefaults(), arguments, ["volume", "pan"]);
    this._solo = this.input = new _Solo.Solo({
      solo: options.solo,
      context: this.context
    });
    this._panVol = this.output = new _PanVol.PanVol({
      context: this.context,
      pan: options.pan,
      volume: options.volume,
      mute: options.mute,
      channelCount: options.channelCount
    });
    this.pan = this._panVol.pan;
    this.volume = this._panVol.volume;

    this._solo.connect(this._panVol);

    (0, _Interface.readOnly)(this, ["pan", "volume"]);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      pan: 0,
      volume: 0,
      mute: false,
      solo: false,
      channelCount: 1
    });
  }
  /**
   * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances
   */


  get solo() {
    return this._solo.solo;
  }

  set solo(solo) {
    this._solo.solo = solo;
  }
  /**
   * If the current instance is muted, i.e. another instance is soloed,
   * or the channel is muted
   */


  get muted() {
    return this._solo.muted || this.mute;
  }
  /**
   * Mute/unmute the volume
   */


  get mute() {
    return this._panVol.mute;
  }

  set mute(mute) {
    this._panVol.mute = mute;
  }
  /**
   * Get the gain node belonging to the bus name. Create it if
   * it doesn't exist
   * @param name The bus name
   */


  _getBus(name) {
    if (!Channel.buses.has(name)) {
      Channel.buses.set(name, new _Gain.Gain({
        context: this.context
      }));
    }

    return Channel.buses.get(name);
  }
  /**
   * Send audio to another channel using a string. `send` is a lot like
   * [[connect]], except it uses a string instead of an object. This can
   * be useful in large applications to decouple sections since [[send]]
   * and [[receive]] can be invoked separately in order to connect an object
   * @param name The channel name to send the audio
   * @param volume The amount of the signal to send.
   * 	Defaults to 0db, i.e. send the entire signal
   * @returns Returns the gain node of this connection.
   */


  send(name, volume = 0) {
    const bus = this._getBus(name);

    const sendKnob = new _Gain.Gain({
      context: this.context,
      units: "decibels",
      gain: volume
    });
    this.connect(sendKnob);
    sendKnob.connect(bus);
    return sendKnob;
  }
  /**
   * Receive audio from a channel which was connected with [[send]].
   * @param name The channel name to receive audio from.
   */


  receive(name) {
    const bus = this._getBus(name);

    bus.connect(this);
    return this;
  }

  dispose() {
    super.dispose();

    this._panVol.dispose();

    this.pan.dispose();
    this.volume.dispose();

    this._solo.dispose();

    return this;
  }

}
/**
 * Store the send/receive channels by name.
 */


exports.Channel = Channel;
Channel.buses = new Map();
},{"../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./Solo":"node_modules/tone/build/esm/component/channel/Solo.js","./PanVol":"node_modules/tone/build/esm/component/channel/PanVol.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js"}],"node_modules/tone/build/esm/component/channel/Mono.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Mono = void 0;

var _Gain = require("../../core/context/Gain");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Merge = require("./Merge");

/**
 * Mono coerces the incoming mono or stereo signal into a mono signal
 * where both left and right channels have the same value. This can be useful
 * for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).
 * @category Component
 */
class Mono extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Mono.getDefaults(), arguments));
    this.name = "Mono";
    this.input = new _Gain.Gain({
      context: this.context
    });
    this._merge = this.output = new _Merge.Merge({
      channels: 2,
      context: this.context
    });
    this.input.connect(this._merge, 0, 0);
    this.input.connect(this._merge, 0, 1);
  }

  dispose() {
    super.dispose();

    this._merge.dispose();

    this.input.dispose();
    return this;
  }

}

exports.Mono = Mono;
},{"../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./Merge":"node_modules/tone/build/esm/component/channel/Merge.js"}],"node_modules/tone/build/esm/component/channel/MultibandSplit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultibandSplit = void 0;

var _Gain = require("../../core/context/Gain");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _Signal = require("../../signal/Signal");

var _Filter = require("../filter/Filter");

/**
 * Split the incoming signal into three bands (low, mid, high)
 * with two crossover frequency controls.
 * ```
 *            +----------------------+
 *          +-> input < lowFrequency +------------------> low
 *          | +----------------------+
 *          |
 *          | +--------------------------------------+
 * input ---+-> lowFrequency < input < highFrequency +--> mid
 *          | +--------------------------------------+
 *          |
 *          | +-----------------------+
 *          +-> highFrequency < input +-----------------> high
 *            +-----------------------+
 * ```
 * @category Component
 */
class MultibandSplit extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(MultibandSplit.getDefaults(), arguments, ["lowFrequency", "highFrequency"]));
    this.name = "MultibandSplit";
    /**
     * the input
     */

    this.input = new _Gain.Gain({
      context: this.context
    });
    /**
     * no output node, use either low, mid or high outputs
     */

    this.output = undefined;
    /**
     * The low band.
     */

    this.low = new _Filter.Filter({
      context: this.context,
      frequency: 0,
      type: "lowpass"
    });
    /**
     * the lower filter of the mid band
     */

    this._lowMidFilter = new _Filter.Filter({
      context: this.context,
      frequency: 0,
      type: "highpass"
    });
    /**
     * The mid band output.
     */

    this.mid = new _Filter.Filter({
      context: this.context,
      frequency: 0,
      type: "lowpass"
    });
    /**
     * The high band output.
     */

    this.high = new _Filter.Filter({
      context: this.context,
      frequency: 0,
      type: "highpass"
    });
    this._internalChannels = [this.low, this.mid, this.high];
    const options = (0, _Defaults.optionsFromArguments)(MultibandSplit.getDefaults(), arguments, ["lowFrequency", "highFrequency"]);
    this.lowFrequency = new _Signal.Signal({
      context: this.context,
      units: "frequency",
      value: options.lowFrequency
    });
    this.highFrequency = new _Signal.Signal({
      context: this.context,
      units: "frequency",
      value: options.highFrequency
    });
    this.Q = new _Signal.Signal({
      context: this.context,
      units: "positive",
      value: options.Q
    });
    this.input.fan(this.low, this.high);
    this.input.chain(this._lowMidFilter, this.mid); // the frequency control signal

    this.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);
    this.highFrequency.fan(this.mid.frequency, this.high.frequency); // the Q value

    this.Q.connect(this.low.Q);
    this.Q.connect(this._lowMidFilter.Q);
    this.Q.connect(this.mid.Q);
    this.Q.connect(this.high.Q);
    (0, _Interface.readOnly)(this, ["high", "mid", "low", "highFrequency", "lowFrequency"]);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      Q: 1,
      highFrequency: 2500,
      lowFrequency: 400
    });
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();
    (0, _Interface.writable)(this, ["high", "mid", "low", "highFrequency", "lowFrequency"]);
    this.low.dispose();

    this._lowMidFilter.dispose();

    this.mid.dispose();
    this.high.dispose();
    this.lowFrequency.dispose();
    this.highFrequency.dispose();
    this.Q.dispose();
    return this;
  }

}

exports.MultibandSplit = MultibandSplit;
},{"../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../../signal/Signal":"node_modules/tone/build/esm/signal/Signal.js","../filter/Filter":"node_modules/tone/build/esm/component/filter/Filter.js"}],"node_modules/tone/build/esm/core/context/Listener.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Listener = void 0;

var _ToneAudioNode = require("./ToneAudioNode");

var _Param = require("./Param");

var _ContextInitialization = require("./ContextInitialization");

/**
 * Tone.Listener is a thin wrapper around the AudioListener. Listener combined
 * with [[Panner3D]] makes up the Web Audio API's 3D panning system. Panner3D allows you
 * to place sounds in 3D and Listener allows you to navigate the 3D sound environment from
 * a first-person perspective. There is only one listener per audio context.
 */
class Listener extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super(...arguments);
    this.name = "Listener";
    this.positionX = new _Param.Param({
      context: this.context,
      param: this.context.rawContext.listener.positionX
    });
    this.positionY = new _Param.Param({
      context: this.context,
      param: this.context.rawContext.listener.positionY
    });
    this.positionZ = new _Param.Param({
      context: this.context,
      param: this.context.rawContext.listener.positionZ
    });
    this.forwardX = new _Param.Param({
      context: this.context,
      param: this.context.rawContext.listener.forwardX
    });
    this.forwardY = new _Param.Param({
      context: this.context,
      param: this.context.rawContext.listener.forwardY
    });
    this.forwardZ = new _Param.Param({
      context: this.context,
      param: this.context.rawContext.listener.forwardZ
    });
    this.upX = new _Param.Param({
      context: this.context,
      param: this.context.rawContext.listener.upX
    });
    this.upY = new _Param.Param({
      context: this.context,
      param: this.context.rawContext.listener.upY
    });
    this.upZ = new _Param.Param({
      context: this.context,
      param: this.context.rawContext.listener.upZ
    });
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      positionX: 0,
      positionY: 0,
      positionZ: 0,
      forwardX: 0,
      forwardY: 0,
      forwardZ: -1,
      upX: 0,
      upY: 1,
      upZ: 0
    });
  }

  dispose() {
    super.dispose();
    this.positionX.dispose();
    this.positionY.dispose();
    this.positionZ.dispose();
    this.forwardX.dispose();
    this.forwardY.dispose();
    this.forwardZ.dispose();
    this.upX.dispose();
    this.upY.dispose();
    this.upZ.dispose();
    return this;
  }

} //-------------------------------------
// 	INITIALIZATION
//-------------------------------------


exports.Listener = Listener;
(0, _ContextInitialization.onContextInit)(context => {
  context.listener = new Listener({
    context
  });
});
(0, _ContextInitialization.onContextClose)(context => {
  context.listener.dispose();
});
},{"./ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","./Param":"node_modules/tone/build/esm/core/context/Param.js","./ContextInitialization":"node_modules/tone/build/esm/core/context/ContextInitialization.js"}],"node_modules/tone/build/esm/component/channel/Panner3D.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Panner3D = void 0;

var _Param = require("../../core/context/Param");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

require("../../core/context/Listener");

/**
 * A spatialized panner node which supports equalpower or HRTF panning.
 * @category Component
 */
class Panner3D extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Panner3D.getDefaults(), arguments, ["positionX", "positionY", "positionZ"]));
    this.name = "Panner3D";
    const options = (0, _Defaults.optionsFromArguments)(Panner3D.getDefaults(), arguments, ["positionX", "positionY", "positionZ"]);
    this._panner = this.input = this.output = this.context.createPanner(); // set some values

    this.panningModel = options.panningModel;
    this.maxDistance = options.maxDistance;
    this.distanceModel = options.distanceModel;
    this.coneOuterGain = options.coneOuterGain;
    this.coneOuterAngle = options.coneOuterAngle;
    this.coneInnerAngle = options.coneInnerAngle;
    this.refDistance = options.refDistance;
    this.rolloffFactor = options.rolloffFactor;
    this.positionX = new _Param.Param({
      context: this.context,
      param: this._panner.positionX,
      value: options.positionX
    });
    this.positionY = new _Param.Param({
      context: this.context,
      param: this._panner.positionY,
      value: options.positionY
    });
    this.positionZ = new _Param.Param({
      context: this.context,
      param: this._panner.positionZ,
      value: options.positionZ
    });
    this.orientationX = new _Param.Param({
      context: this.context,
      param: this._panner.orientationX,
      value: options.orientationX
    });
    this.orientationY = new _Param.Param({
      context: this.context,
      param: this._panner.orientationY,
      value: options.orientationY
    });
    this.orientationZ = new _Param.Param({
      context: this.context,
      param: this._panner.orientationZ,
      value: options.orientationZ
    });
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      coneInnerAngle: 360,
      coneOuterAngle: 360,
      coneOuterGain: 0,
      distanceModel: "inverse",
      maxDistance: 10000,
      orientationX: 0,
      orientationY: 0,
      orientationZ: 0,
      panningModel: "equalpower",
      positionX: 0,
      positionY: 0,
      positionZ: 0,
      refDistance: 1,
      rolloffFactor: 1
    });
  }
  /**
   * Sets the position of the source in 3d space.
   */


  setPosition(x, y, z) {
    this.positionX.value = x;
    this.positionY.value = y;
    this.positionZ.value = z;
    return this;
  }
  /**
   * Sets the orientation of the source in 3d space.
   */


  setOrientation(x, y, z) {
    this.orientationX.value = x;
    this.orientationY.value = y;
    this.orientationZ.value = z;
    return this;
  }
  /**
   * The panning model. Either "equalpower" or "HRTF".
   */


  get panningModel() {
    return this._panner.panningModel;
  }

  set panningModel(val) {
    this._panner.panningModel = val;
  }
  /**
   * A reference distance for reducing volume as source move further from the listener
   */


  get refDistance() {
    return this._panner.refDistance;
  }

  set refDistance(val) {
    this._panner.refDistance = val;
  }
  /**
   * Describes how quickly the volume is reduced as source moves away from listener.
   */


  get rolloffFactor() {
    return this._panner.rolloffFactor;
  }

  set rolloffFactor(val) {
    this._panner.rolloffFactor = val;
  }
  /**
   * The distance model used by,  "linear", "inverse", or "exponential".
   */


  get distanceModel() {
    return this._panner.distanceModel;
  }

  set distanceModel(val) {
    this._panner.distanceModel = val;
  }
  /**
   * The angle, in degrees, inside of which there will be no volume reduction
   */


  get coneInnerAngle() {
    return this._panner.coneInnerAngle;
  }

  set coneInnerAngle(val) {
    this._panner.coneInnerAngle = val;
  }
  /**
   * The angle, in degrees, outside of which the volume will be reduced
   * to a constant value of coneOuterGain
   */


  get coneOuterAngle() {
    return this._panner.coneOuterAngle;
  }

  set coneOuterAngle(val) {
    this._panner.coneOuterAngle = val;
  }
  /**
   * The gain outside of the coneOuterAngle
   */


  get coneOuterGain() {
    return this._panner.coneOuterGain;
  }

  set coneOuterGain(val) {
    this._panner.coneOuterGain = val;
  }
  /**
   * The maximum distance between source and listener,
   * after which the volume will not be reduced any further.
   */


  get maxDistance() {
    return this._panner.maxDistance;
  }

  set maxDistance(val) {
    this._panner.maxDistance = val;
  }

  dispose() {
    super.dispose();

    this._panner.disconnect();

    this.orientationX.dispose();
    this.orientationY.dispose();
    this.orientationZ.dispose();
    this.positionX.dispose();
    this.positionY.dispose();
    this.positionZ.dispose();
    return this;
  }

}

exports.Panner3D = Panner3D;
},{"../../core/context/Param":"node_modules/tone/build/esm/core/context/Param.js","../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/context/Listener":"node_modules/tone/build/esm/core/context/Listener.js"}],"node_modules/tone/build/esm/component/channel/Recorder.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Recorder = void 0;

var _tslib = require("tslib");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Gain = require("../../core/context/Gain");

var _Debug = require("../../core/util/Debug");

var _AudioContext = require("../../core/context/AudioContext");

var _Defaults = require("../../core/util/Defaults");

/**
 * A wrapper around the MediaRecorder API. Unlike the rest of Tone.js, this module does not offer
 * any sample-accurate scheduling because it is not a feature of the MediaRecorder API.
 * This is only natively supported in Chrome and Firefox.
 * For a cross-browser shim, install (audio-recorder-polyfill)[https://www.npmjs.com/package/audio-recorder-polyfill].
 * @example
 * const recorder = new Tone.Recorder();
 * const synth = new Tone.Synth().connect(recorder);
 * // start recording
 * recorder.start();
 * // generate a few notes
 * synth.triggerAttackRelease("C3", 0.5);
 * synth.triggerAttackRelease("C4", 0.5, "+1");
 * synth.triggerAttackRelease("C5", 0.5, "+2");
 * // wait for the notes to end and stop the recording
 * setTimeout(async () => {
 * 	// the recorded audio is returned as a blob
 * 	const recording = await recorder.stop();
 * 	// download the recording by creating an anchor element and blob url
 * 	const url = URL.createObjectURL(recording);
 * 	const anchor = document.createElement("a");
 * 	anchor.download = "recording.webm";
 * 	anchor.href = url;
 * 	anchor.click();
 * }, 4000);
 * @category Component
 */
class Recorder extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Recorder.getDefaults(), arguments));
    this.name = "Recorder";
    const options = (0, _Defaults.optionsFromArguments)(Recorder.getDefaults(), arguments);
    this.input = new _Gain.Gain({
      context: this.context
    });
    (0, _Debug.assert)(Recorder.supported, "Media Recorder API is not available");
    this._stream = this.context.createMediaStreamDestination();
    this.input.connect(this._stream);
    this._recorder = new MediaRecorder(this._stream.stream, {
      mimeType: options.mimeType
    });
  }

  static getDefaults() {
    return _ToneAudioNode.ToneAudioNode.getDefaults();
  }
  /**
   * The mime type is the format that the audio is encoded in. For Chrome
   * that is typically webm encoded as "vorbis".
   */


  get mimeType() {
    return this._recorder.mimeType;
  }
  /**
   * Test if your platform supports the Media Recorder API. If it's not available,
   * try installing this (polyfill)[https://www.npmjs.com/package/audio-recorder-polyfill].
   */


  static get supported() {
    return _AudioContext.theWindow !== null && Reflect.has(_AudioContext.theWindow, "MediaRecorder");
  }
  /**
   * Get the playback state of the Recorder, either "started", "stopped" or "paused"
   */


  get state() {
    if (this._recorder.state === "inactive") {
      return "stopped";
    } else if (this._recorder.state === "paused") {
      return "paused";
    } else {
      return "started";
    }
  }
  /**
   * Start the Recorder. Returns a promise which resolves
   * when the recorder has started.
   */


  start() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      (0, _Debug.assert)(this.state !== "started", "Recorder is already started");
      const startPromise = new Promise(done => {
        const handleStart = () => {
          this._recorder.removeEventListener("start", handleStart, false);

          done();
        };

        this._recorder.addEventListener("start", handleStart, false);
      });

      this._recorder.start();

      return yield startPromise;
    });
  }
  /**
   * Stop the recorder. Returns a promise with the recorded content until this point
   * encoded as [[mimeType]]
   */


  stop() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      (0, _Debug.assert)(this.state !== "stopped", "Recorder is not started");
      const dataPromise = new Promise(done => {
        const handleData = e => {
          this._recorder.removeEventListener("dataavailable", handleData, false);

          done(e.data);
        };

        this._recorder.addEventListener("dataavailable", handleData, false);
      });

      this._recorder.stop();

      return yield dataPromise;
    });
  }
  /**
   * Pause the recorder
   */


  pause() {
    (0, _Debug.assert)(this.state === "started", "Recorder must be started");

    this._recorder.pause();

    return this;
  }

  dispose() {
    super.dispose();
    this.input.dispose();

    this._stream.disconnect();

    return this;
  }

}

exports.Recorder = Recorder;
},{"tslib":"node_modules/tslib/tslib.es6.js","../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../../core/util/Debug":"node_modules/tone/build/esm/core/util/Debug.js","../../core/context/AudioContext":"node_modules/tone/build/esm/core/context/AudioContext.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js"}],"node_modules/tone/build/esm/component/dynamics/Compressor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Compressor = void 0;

var _Param = require("../../core/context/Param");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

/**
 * Compressor is a thin wrapper around the Web Audio
 * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).
 * Compression reduces the volume of loud sounds or amplifies quiet sounds
 * by narrowing or "compressing" an audio signal's dynamic range.
 * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).
 * @example
 * const comp = new Tone.Compressor(-30, 3);
 * @category Component
 */
class Compressor extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Compressor.getDefaults(), arguments, ["threshold", "ratio"]));
    this.name = "Compressor";
    /**
     * the compressor node
     */

    this._compressor = this.context.createDynamicsCompressor();
    this.input = this._compressor;
    this.output = this._compressor;
    const options = (0, _Defaults.optionsFromArguments)(Compressor.getDefaults(), arguments, ["threshold", "ratio"]);
    this.threshold = new _Param.Param({
      minValue: this._compressor.threshold.minValue,
      maxValue: this._compressor.threshold.maxValue,
      context: this.context,
      convert: false,
      param: this._compressor.threshold,
      units: "decibels",
      value: options.threshold
    });
    this.attack = new _Param.Param({
      minValue: this._compressor.attack.minValue,
      maxValue: this._compressor.attack.maxValue,
      context: this.context,
      param: this._compressor.attack,
      units: "time",
      value: options.attack
    });
    this.release = new _Param.Param({
      minValue: this._compressor.release.minValue,
      maxValue: this._compressor.release.maxValue,
      context: this.context,
      param: this._compressor.release,
      units: "time",
      value: options.release
    });
    this.knee = new _Param.Param({
      minValue: this._compressor.knee.minValue,
      maxValue: this._compressor.knee.maxValue,
      context: this.context,
      convert: false,
      param: this._compressor.knee,
      units: "decibels",
      value: options.knee
    });
    this.ratio = new _Param.Param({
      minValue: this._compressor.ratio.minValue,
      maxValue: this._compressor.ratio.maxValue,
      context: this.context,
      convert: false,
      param: this._compressor.ratio,
      units: "positive",
      value: options.ratio
    }); // set the defaults

    (0, _Interface.readOnly)(this, ["knee", "release", "attack", "ratio", "threshold"]);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      attack: 0.003,
      knee: 30,
      ratio: 12,
      release: 0.25,
      threshold: -24
    });
  }
  /**
   * A read-only decibel value for metering purposes, representing the current amount of gain
   * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).
   */


  get reduction() {
    return this._compressor.reduction;
  }

  dispose() {
    super.dispose();

    this._compressor.disconnect();

    this.attack.dispose();
    this.release.dispose();
    this.threshold.dispose();
    this.ratio.dispose();
    this.knee.dispose();
    return this;
  }

}

exports.Compressor = Compressor;
},{"../../core/context/Param":"node_modules/tone/build/esm/core/context/Param.js","../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/component/dynamics/Gate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Gate = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _GreaterThan = require("../../signal/GreaterThan");

var _Gain = require("../../core/context/Gain");

var _Follower = require("../analysis/Follower");

var _Defaults = require("../../core/util/Defaults");

var _Conversions = require("../../core/type/Conversions");

/**
 * Gate only passes a signal through when the incoming
 * signal exceeds a specified threshold. It uses [[Follower]] to follow the ampltiude
 * of the incoming signal and compares it to the [[threshold]] value using [[GreaterThan]].
 *
 * @example
 * const gate = new Tone.Gate(-30, 0.2).toDestination();
 * const mic = new Tone.UserMedia().connect(gate);
 * // the gate will only pass through the incoming
 * // signal when it's louder than -30db
 * @category Component
 */
class Gate extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(Gate.getDefaults(), arguments, ["threshold", "smoothing"])));
    this.name = "Gate";
    const options = (0, _Defaults.optionsFromArguments)(Gate.getDefaults(), arguments, ["threshold", "smoothing"]);
    this._follower = new _Follower.Follower({
      context: this.context,
      smoothing: options.smoothing
    });
    this._gt = new _GreaterThan.GreaterThan({
      context: this.context,
      value: (0, _Conversions.dbToGain)(options.threshold)
    });
    this.input = new _Gain.Gain({
      context: this.context
    });
    this._gate = this.output = new _Gain.Gain({
      context: this.context
    }); // connections

    this.input.connect(this._gate); // the control signal

    this.input.chain(this._follower, this._gt, this._gate.gain);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      smoothing: 0.1,
      threshold: -40
    });
  }
  /**
   * The threshold of the gate in decibels
   */


  get threshold() {
    return (0, _Conversions.gainToDb)(this._gt.value);
  }

  set threshold(thresh) {
    this._gt.value = (0, _Conversions.dbToGain)(thresh);
  }
  /**
   * The attack/decay speed of the gate. See [[Follower.smoothing]]
   */


  get smoothing() {
    return this._follower.smoothing;
  }

  set smoothing(smoothingTime) {
    this._follower.smoothing = smoothingTime;
  }

  dispose() {
    super.dispose();
    this.input.dispose();

    this._follower.dispose();

    this._gt.dispose();

    this._gate.dispose();

    return this;
  }

}

exports.Gate = Gate;
},{"../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../signal/GreaterThan":"node_modules/tone/build/esm/signal/GreaterThan.js","../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../analysis/Follower":"node_modules/tone/build/esm/component/analysis/Follower.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/type/Conversions":"node_modules/tone/build/esm/core/type/Conversions.js"}],"node_modules/tone/build/esm/component/dynamics/Limiter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Limiter = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Compressor = require("./Compressor");

var _Interface = require("../../core/util/Interface");

;
/**
 * Limiter will limit the loudness of an incoming signal.
 * Under the hood it's composed of a [[Compressor]] with a fast attack
 * and release and max compression ratio.
 *
 * @example
 * const limiter = new Tone.Limiter(-20).toDestination();
 * const oscillator = new Tone.Oscillator().connect(limiter);
 * oscillator.start();
 * @category Component
 */

class Limiter extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(Limiter.getDefaults(), arguments, ["threshold"])));
    this.name = "Limiter";
    const options = (0, _Defaults.optionsFromArguments)(Limiter.getDefaults(), arguments, ["threshold"]);
    this._compressor = this.input = this.output = new _Compressor.Compressor({
      context: this.context,
      ratio: 20,
      attack: 0.003,
      release: 0.01,
      threshold: options.threshold
    });
    this.threshold = this._compressor.threshold;
    (0, _Interface.readOnly)(this, "threshold");
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      threshold: -12
    });
  }
  /**
   * A read-only decibel value for metering purposes, representing the current amount of gain
   * reduction that the compressor is applying to the signal.
   */


  get reduction() {
    return this._compressor.reduction;
  }

  dispose() {
    super.dispose();

    this._compressor.dispose();

    this.threshold.dispose();
    return this;
  }

}

exports.Limiter = Limiter;
},{"../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","./Compressor":"node_modules/tone/build/esm/component/dynamics/Compressor.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/component/dynamics/MidSideCompressor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MidSideCompressor = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Compressor = require("./Compressor");

var _Defaults = require("../../core/util/Defaults");

var _MidSideSplit = require("../channel/MidSideSplit");

var _MidSideMerge = require("../channel/MidSideMerge");

var _Interface = require("../../core/util/Interface");

/**
 * MidSideCompressor applies two different compressors to the [[mid]]
 * and [[side]] signal components of the input. See [[MidSideSplit]] and [[MidSideMerge]].
 * @category Component
 */
class MidSideCompressor extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(MidSideCompressor.getDefaults(), arguments)));
    this.name = "MidSideCompressor";
    const options = (0, _Defaults.optionsFromArguments)(MidSideCompressor.getDefaults(), arguments);
    this._midSideSplit = this.input = new _MidSideSplit.MidSideSplit({
      context: this.context
    });
    this._midSideMerge = this.output = new _MidSideMerge.MidSideMerge({
      context: this.context
    });
    this.mid = new _Compressor.Compressor(Object.assign(options.mid, {
      context: this.context
    }));
    this.side = new _Compressor.Compressor(Object.assign(options.side, {
      context: this.context
    }));

    this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);

    this._midSideSplit.side.chain(this.side, this._midSideMerge.side);

    (0, _Interface.readOnly)(this, ["mid", "side"]);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      mid: {
        ratio: 3,
        threshold: -24,
        release: 0.03,
        attack: 0.02,
        knee: 16
      },
      side: {
        ratio: 6,
        threshold: -30,
        release: 0.25,
        attack: 0.03,
        knee: 10
      }
    });
  }

  dispose() {
    super.dispose();
    this.mid.dispose();
    this.side.dispose();

    this._midSideSplit.dispose();

    this._midSideMerge.dispose();

    return this;
  }

}

exports.MidSideCompressor = MidSideCompressor;
},{"../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","./Compressor":"node_modules/tone/build/esm/component/dynamics/Compressor.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../channel/MidSideSplit":"node_modules/tone/build/esm/component/channel/MidSideSplit.js","../channel/MidSideMerge":"node_modules/tone/build/esm/component/channel/MidSideMerge.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/component/dynamics/MultibandCompressor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultibandCompressor = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Compressor = require("./Compressor");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _MultibandSplit = require("../channel/MultibandSplit");

var _Gain = require("../../core/context/Gain");

/**
 * A compressor with separate controls over low/mid/high dynamics. See [[Compressor]] and [[MultibandSplit]]
 *
 * @example
 * const multiband = new Tone.MultibandCompressor({
 * 	lowFrequency: 200,
 * 	highFrequency: 1300,
 * 	low: {
 * 		threshold: -12
 * 	}
 * });
 * @category Component
 */
class MultibandCompressor extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(MultibandCompressor.getDefaults(), arguments)));
    this.name = "MultibandCompressor";
    const options = (0, _Defaults.optionsFromArguments)(MultibandCompressor.getDefaults(), arguments);
    this._splitter = this.input = new _MultibandSplit.MultibandSplit({
      context: this.context,
      lowFrequency: options.lowFrequency,
      highFrequency: options.highFrequency
    });
    this.lowFrequency = this._splitter.lowFrequency;
    this.highFrequency = this._splitter.highFrequency;
    this.output = new _Gain.Gain({
      context: this.context
    });
    this.low = new _Compressor.Compressor(Object.assign(options.low, {
      context: this.context
    }));
    this.mid = new _Compressor.Compressor(Object.assign(options.mid, {
      context: this.context
    }));
    this.high = new _Compressor.Compressor(Object.assign(options.high, {
      context: this.context
    })); // connect the compressor

    this._splitter.low.chain(this.low, this.output);

    this._splitter.mid.chain(this.mid, this.output);

    this._splitter.high.chain(this.high, this.output);

    (0, _Interface.readOnly)(this, ["high", "mid", "low", "highFrequency", "lowFrequency"]);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      lowFrequency: 250,
      highFrequency: 2000,
      low: {
        ratio: 6,
        threshold: -30,
        release: 0.25,
        attack: 0.03,
        knee: 10
      },
      mid: {
        ratio: 3,
        threshold: -24,
        release: 0.03,
        attack: 0.02,
        knee: 16
      },
      high: {
        ratio: 3,
        threshold: -24,
        release: 0.03,
        attack: 0.02,
        knee: 16
      }
    });
  }

  dispose() {
    super.dispose();

    this._splitter.dispose();

    this.low.dispose();
    this.mid.dispose();
    this.high.dispose();
    this.output.dispose();
    return this;
  }

}

exports.MultibandCompressor = MultibandCompressor;
},{"../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","./Compressor":"node_modules/tone/build/esm/component/dynamics/Compressor.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../channel/MultibandSplit":"node_modules/tone/build/esm/component/channel/MultibandSplit.js","../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js"}],"node_modules/tone/build/esm/component/filter/EQ3.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EQ3 = void 0;

var _Gain = require("../../core/context/Gain");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _MultibandSplit = require("../channel/MultibandSplit");

/**
 * EQ3 provides 3 equalizer bins: Low/Mid/High.
 * @category Component
 */
class EQ3 extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(EQ3.getDefaults(), arguments, ["low", "mid", "high"]));
    this.name = "EQ3";
    /**
     * the output
     */

    this.output = new _Gain.Gain({
      context: this.context
    });
    this._internalChannels = [];
    const options = (0, _Defaults.optionsFromArguments)(EQ3.getDefaults(), arguments, ["low", "mid", "high"]);
    this.input = this._multibandSplit = new _MultibandSplit.MultibandSplit({
      context: this.context,
      highFrequency: options.highFrequency,
      lowFrequency: options.lowFrequency
    });
    this._lowGain = new _Gain.Gain({
      context: this.context,
      gain: options.low,
      units: "decibels"
    });
    this._midGain = new _Gain.Gain({
      context: this.context,
      gain: options.mid,
      units: "decibels"
    });
    this._highGain = new _Gain.Gain({
      context: this.context,
      gain: options.high,
      units: "decibels"
    });
    this.low = this._lowGain.gain;
    this.mid = this._midGain.gain;
    this.high = this._highGain.gain;
    this.Q = this._multibandSplit.Q;
    this.lowFrequency = this._multibandSplit.lowFrequency;
    this.highFrequency = this._multibandSplit.highFrequency; // the frequency bands

    this._multibandSplit.low.chain(this._lowGain, this.output);

    this._multibandSplit.mid.chain(this._midGain, this.output);

    this._multibandSplit.high.chain(this._highGain, this.output);

    (0, _Interface.readOnly)(this, ["low", "mid", "high", "lowFrequency", "highFrequency"]);
    this._internalChannels = [this._multibandSplit];
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      high: 0,
      highFrequency: 2500,
      low: 0,
      lowFrequency: 400,
      mid: 0
    });
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();
    (0, _Interface.writable)(this, ["low", "mid", "high", "lowFrequency", "highFrequency"]);

    this._multibandSplit.dispose();

    this.lowFrequency.dispose();
    this.highFrequency.dispose();

    this._lowGain.dispose();

    this._midGain.dispose();

    this._highGain.dispose();

    this.low.dispose();
    this.mid.dispose();
    this.high.dispose();
    this.Q.dispose();
    return this;
  }

}

exports.EQ3 = EQ3;
},{"../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js","../channel/MultibandSplit":"node_modules/tone/build/esm/component/channel/MultibandSplit.js"}],"node_modules/tone/build/esm/component/filter/Convolver.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Convolver = void 0;

var _tslib = require("tslib");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _ToneAudioBuffer = require("../../core/context/ToneAudioBuffer");

var _Defaults = require("../../core/util/Defaults");

var _Gain = require("../../core/context/Gain");

var _Interface = require("../../core/util/Interface");

/**
 * Convolver is a wrapper around the Native Web Audio
 * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).
 * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on
 * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).
 *
 * @example
 * // initializing the convolver with an impulse response
 * const convolver = new Tone.Convolver("./path/to/ir.wav").toDestination();
 * @category Component
 */
class Convolver extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Convolver.getDefaults(), arguments, ["url", "onload"]));
    this.name = "Convolver";
    /**
     * The native ConvolverNode
     */

    this._convolver = this.context.createConvolver();
    const options = (0, _Defaults.optionsFromArguments)(Convolver.getDefaults(), arguments, ["url", "onload"]);
    this._buffer = new _ToneAudioBuffer.ToneAudioBuffer(options.url, buffer => {
      this.buffer = buffer;
      options.onload();
    });
    this.input = new _Gain.Gain({
      context: this.context
    });
    this.output = new _Gain.Gain({
      context: this.context
    }); // set if it's already loaded, set it immediately

    if (this._buffer.loaded) {
      this.buffer = this._buffer;
    } // initially set normalization


    this.normalize = options.normalize; // connect it up

    this.input.chain(this._convolver, this.output);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      normalize: true,
      onload: _Interface.noOp
    });
  }
  /**
   * Load an impulse response url as an audio buffer.
   * Decodes the audio asynchronously and invokes
   * the callback once the audio buffer loads.
   * @param url The url of the buffer to load. filetype support depends on the browser.
   */


  load(url) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      this.buffer = yield this._buffer.load(url);
    });
  }
  /**
   * The convolver's buffer
   */


  get buffer() {
    if (this._buffer.length) {
      return this._buffer;
    } else {
      return null;
    }
  }

  set buffer(buffer) {
    if (buffer) {
      this._buffer.set(buffer);
    } // if it's already got a buffer, create a new one


    if (this._convolver.buffer) {
      // disconnect the old one
      this.input.disconnect();

      this._convolver.disconnect(); // create and connect a new one


      this._convolver = this.context.createConvolver();
      this.input.chain(this._convolver, this.output);
    }

    const buff = this._buffer.get();

    this._convolver.buffer = buff ? buff : null;
  }
  /**
   * The normalize property of the ConvolverNode interface is a boolean that
   * controls whether the impulse response from the buffer will be scaled by
   * an equal-power normalization when the buffer attribute is set, or not.
   */


  get normalize() {
    return this._convolver.normalize;
  }

  set normalize(norm) {
    this._convolver.normalize = norm;
  }

  dispose() {
    super.dispose();

    this._buffer.dispose();

    this._convolver.disconnect();

    return this;
  }

}

exports.Convolver = Convolver;
},{"tslib":"node_modules/tslib/tslib.es6.js","../../core/context/ToneAudioNode":"node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/context/ToneAudioBuffer":"node_modules/tone/build/esm/core/context/ToneAudioBuffer.js","../../core/util/Defaults":"node_modules/tone/build/esm/core/util/Defaults.js","../../core/context/Gain":"node_modules/tone/build/esm/core/context/Gain.js","../../core/util/Interface":"node_modules/tone/build/esm/core/util/Interface.js"}],"node_modules/tone/build/esm/component/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Analyser = require("./analysis/Analyser");

Object.keys(_Analyser).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Analyser[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Analyser[key];
    }
  });
});

var _Meter = require("./analysis/Meter");

Object.keys(_Meter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Meter[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Meter[key];
    }
  });
});

var _FFT = require("./analysis/FFT");

Object.keys(_FFT).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _FFT[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _FFT[key];
    }
  });
});

var _DCMeter = require("./analysis/DCMeter");

Object.keys(_DCMeter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _DCMeter[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _DCMeter[key];
    }
  });
});

var _Waveform = require("./analysis/Waveform");

Object.keys(_Waveform).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Waveform[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Waveform[key];
    }
  });
});

var _Follower = require("./analysis/Follower");

Object.keys(_Follower).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Follower[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Follower[key];
    }
  });
});

var _Channel = require("./channel/Channel");

Object.keys(_Channel).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Channel[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Channel[key];
    }
  });
});

var _CrossFade = require("./channel/CrossFade");

Object.keys(_CrossFade).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _CrossFade[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _CrossFade[key];
    }
  });
});

var _Merge = require("./channel/Merge");

Object.keys(_Merge).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Merge[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Merge[key];
    }
  });
});

var _MidSideMerge = require("./channel/MidSideMerge");

Object.keys(_MidSideMerge).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _MidSideMerge[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _MidSideMerge[key];
    }
  });
});

var _MidSideSplit = require("./channel/MidSideSplit");

Object.keys(_MidSideSplit).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _MidSideSplit[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _MidSideSplit[key];
    }
  });
});

var _Mono = require("./channel/Mono");

Object.keys(_Mono).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Mono[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Mono[key];
    }
  });
});

var _MultibandSplit = require("./channel/MultibandSplit");

Object.keys(_MultibandSplit).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _MultibandSplit[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _MultibandSplit[key];
    }
  });
});

var _Panner = require("./channel/Panner");

Object.keys(_Panner).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Panner[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Panner[key];
    }
  });
});

var _Panner3D = require("./channel/Panner3D");

Object.keys(_Panner3D).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Panner3D[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Panner3D[key];
    }
  });
});

var _PanVol = require("./channel/PanVol");

Object.keys(_PanVol).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _PanVol[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _PanVol[key];
    }
  });
});

var _Recorder = require("./channel/Recorder");

Object.keys(_Recorder).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Recorder[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Recorder[key];
    }
  });
});

var _Solo = require("./channel/Solo");

Object.keys(_Solo).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Solo[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Solo[key];
    }
  });
});

var _Split = require("./channel/Split");

Object.keys(_Split).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Split[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Split[key];
    }
  });
});

var _Volume = require("./channel/Volume");

Object.keys(_Volume).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Volume[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Volume[key];
    }
  });
});

var _Compressor = require("./dynamics/Compressor");

Object.keys(_Compressor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Compressor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Compressor[key];
    }
  });
});

var _Gate = require("./dynamics/Gate");

Object.keys(_Gate).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Gate[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Gate[key];
    }
  });
});

var _Limiter = require("./dynamics/Limiter");

Object.keys(_Limiter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Limiter[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Limiter[key];
    }
  });
});

var _MidSideCompressor = require("./dynamics/MidSideCompressor");

Object.keys(_MidSideCompressor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _MidSideCompressor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _MidSideCompressor[key];
    }
  });
});

var _MultibandCompressor = require("./dynamics/MultibandCompressor");

Object.keys(_MultibandCompressor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _MultibandCompressor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _MultibandCompressor[key];
    }
  });
});

var _AmplitudeEnvelope = require("./envelope/AmplitudeEnvelope");

Object.keys(_AmplitudeEnvelope).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _AmplitudeEnvelope[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AmplitudeEnvelope[key];
    }
  });
});

var _Envelope = require("./envelope/Envelope");

Object.keys(_Envelope).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Envelope[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Envelope[key];
    }
  });
});

var _FrequencyEnvelope = require("./envelope/FrequencyEnvelope");

Object.keys(_FrequencyEnvelope).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _FrequencyEnvelope[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _FrequencyEnvelope[key];
    }
  });
});

var _EQ = require("./filter/EQ3");

Object.keys(_EQ).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _EQ[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _EQ[key];
    }
  });
});

var _Filter = require("./filter/Filter");

Object.keys(_Filter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Filter[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Filter[key];
    }
  });
});

var _OnePoleFilter = require("./filter/OnePoleFilter");

Object.keys(_OnePoleFilter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _OnePoleFilter[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _OnePoleFilter[key];
    }
  });
});

var _FeedbackCombFilter = require("./filter/FeedbackCombFilter");

Object.keys(_FeedbackCombFilter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _FeedbackCombFilter[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _FeedbackCombFilter[key];
    }
  });
});

var _LowpassCombFilter = require("./filter/LowpassCombFilter");

Object.keys(_LowpassCombFilter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _LowpassCombFilter[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _LowpassCombFilter[key];
    }
  });
});

var _Convolver = require("./filter/Convolver");

Object.keys(_Convolver).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Convolver[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Convolver[key];
    }
  });
});

var _BiquadFilter = require("./filter/BiquadFilter");

Object.keys(_BiquadFilter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _BiquadFilter[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BiquadFilter[key];
    }
  });
});
},{"./analysis/Analyser":"node_modules/tone/build/esm/component/analysis/Analyser.js","./analysis/Meter":"node_modules/tone/build/esm/component/analysis/Meter.js","./analysis/FFT":"node_modules/tone/build/esm/component/analysis/FFT.js","./analysis/DCMeter":"node_modules/tone/build/esm/component/analysis/DCMeter.js","./analysis/Waveform":"node_modules/tone/build/esm/component/analysis/Waveform.js","./analysis/Follower":"node_modules/tone/build/esm/component/analysis/Follower.js","./channel/Channel":"node_modules/tone/build/esm/component/channel/Channel.js","./channel/CrossFade":"node_modules/tone/build/esm/component/channel/CrossFade.js","./channel/Merge":"node_modules/tone/build/esm/component/channel/Merge.js","./channel/MidSideMerge":"node_modules/tone/build/esm/component/channel/MidSideMerge.js","./channel/MidSideSplit":"node_modules/tone/build/esm/component/channel/MidSideSplit.js","./channel/Mono":"node_modules/tone/build/esm/component/channel/Mono.js","./channel/MultibandSplit":"node_modules/tone/build/esm/component/channel/MultibandSplit.js","./channel/Panner":"node_modules/tone/build/esm/component/channel/Panner.js","./channel/Panner3D":"node_modules/tone/build/esm/component/channel/Panner3D.js","./channel/PanVol":"node_modules/tone/build/esm/component/channel/PanVol.js","./channel/Recorder":"node_modules/tone/build/esm/component/channel/Recorder.js","./channel/Solo":"node_modules/tone/build/esm/component/channel/Solo.js","./channel/Split":"node_modules/tone/build/esm/component/channel/Split.js","./channel/Volume":"node_modules/tone/build/esm/component/channel/Volume.js","./dynamics/Compressor":"node_modules/tone/build/esm/component/dynamics/Compressor.js","./dynamics/Gate":"node_modules/tone/build/esm/component/dynamics/Gate.js","./dynamics/Limiter":"node_modules/tone/build/esm/component/dynamics/Limiter.js","./dynamics/MidSideCompressor":"node_modules/tone/build/esm/component/dynamics/MidSideCompressor.js","./dynamics/MultibandCompressor":"node_modules/tone/build/esm/component/dynamics/MultibandCompressor.js","./envelope/AmplitudeEnvelope":"node_modules/tone/build/esm/component/envelope/AmplitudeEnvelope.js","./envelope/Envelope":"node_modules/tone/build/esm/component/envelope/Envelope.js","./envelope/FrequencyEnvelope":"node_modules/tone/build/esm/component/envelope/FrequencyEnvelope.js","./filter/EQ3":"node_modules/tone/build/esm/component/filter/EQ3.js","./filter/Filter":"node_modules/tone/build/esm/component/filter/Filter.js","./filter/OnePoleFilter":"node_modules/tone/build/esm/component/filter/OnePoleFilter.js","./filter/FeedbackCombFilter":"node_modules/tone/build/esm/component/filter/FeedbackCombFilter.js","./filter/LowpassCombFilter":"node_modules/tone/build/esm/component/filter/LowpassCombFilter.js","./filter/Convolver":"node_modules/tone/build/esm/component/filter/Convolver.js","./filter/BiquadFilter":"node_modules/tone/build/esm/component/filter/BiquadFilter.js"}],"node_modules/tone/build/esm/classes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _index = require("./core/index");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});

var _index2 = require("./source/index");

Object.keys(_index2).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index2[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index2[key];
    }
  });
});

var _index3 = require("./signal/index");

Object.keys(_index3).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index3[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index3[key];
    }
  });
});

var _index4 = require("./instrument/index");

Object.keys(_index4).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index4[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index4[key];
    }
  });
});

var _index5 = require("./event/index");

Object.keys(_index5).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index5[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index5[key];
    }
  });
});

var _index6 = require("./effect/index");

Object.keys(_index6).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index6[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index6[key];
    }
  });
});

var _index7 = require("./component/index");

Object.keys(_index7).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index7[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index7[key];
    }
  });
});
},{"./core/index":"node_modules/tone/build/esm/core/index.js","./source/index":"node_modules/tone/build/esm/source/index.js","./signal/index":"node_modules/tone/build/esm/signal/index.js","./instrument/index":"node_modules/tone/build/esm/instrument/index.js","./event/index":"node_modules/tone/build/esm/event/index.js","./effect/index":"node_modules/tone/build/esm/effect/index.js","./component/index":"node_modules/tone/build/esm/component/index.js"}],"node_modules/tone/build/esm/index.js":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  now: true,
  immediate: true,
  Transport: true,
  getTransport: true,
  Destination: true,
  Master: true,
  getDestination: true,
  Listener: true,
  getListener: true,
  Draw: true,
  getDraw: true,
  context: true,
  loaded: true,
  Buffer: true,
  Buffers: true,
  BufferSource: true,
  getContext: true,
  setContext: true,
  start: true,
  supported: true
};
exports.now = now;
exports.immediate = immediate;
exports.getTransport = getTransport;
exports.getDestination = getDestination;
exports.getListener = getListener;
exports.getDraw = getDraw;
exports.loaded = loaded;
Object.defineProperty(exports, "getContext", {
  enumerable: true,
  get: function () {
    return _Global.getContext;
  }
});
Object.defineProperty(exports, "setContext", {
  enumerable: true,
  get: function () {
    return _Global.setContext;
  }
});
Object.defineProperty(exports, "start", {
  enumerable: true,
  get: function () {
    return _Global.start;
  }
});
Object.defineProperty(exports, "supported", {
  enumerable: true,
  get: function () {
    return _AudioContext.supported;
  }
});
exports.BufferSource = exports.Buffers = exports.Buffer = exports.context = exports.Draw = exports.Listener = exports.Master = exports.Destination = exports.Transport = void 0;

var _Global = require("./core/Global");

var _classes = require("./classes");

Object.keys(_classes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _classes[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _classes[key];
    }
  });
});

var _version = require("./version");

Object.keys(_version).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _version[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _version[key];
    }
  });
});

var _ToneAudioBuffer = require("./core/context/ToneAudioBuffer");

var _AudioContext = require("./core/context/AudioContext");

var _ToneAudioBuffers = require("./core/context/ToneAudioBuffers");

var _ToneBufferSource = require("./source/buffer/ToneBufferSource");

/**
 * The current audio context time of the global [[Context]].
 * See [[Context.now]]
 * @category Core
 */
function now() {
  return (0, _Global.getContext)().now();
}
/**
 * The current audio context time of the global [[Context]] without the [[Context.lookAhead]]
 * See [[Context.immediate]]
 * @category Core
 */


function immediate() {
  return (0, _Global.getContext)().immediate();
}
/**
 * The Transport object belonging to the global Tone.js Context.
 * See [[Transport]]
 * @category Core
 */


const Transport = (0, _Global.getContext)().transport;
/**
 * The Transport object belonging to the global Tone.js Context.
 * See [[Transport]]
 * @category Core
 */

exports.Transport = Transport;

function getTransport() {
  return (0, _Global.getContext)().transport;
}
/**
 * The Destination (output) belonging to the global Tone.js Context.
 * See [[Destination]]
 * @category Core
 */


const Destination = (0, _Global.getContext)().destination;
/**
 * @deprecated Use [[Destination]]
 */

exports.Destination = Destination;
const Master = (0, _Global.getContext)().destination;
/**
 * The Destination (output) belonging to the global Tone.js Context.
 * See [[Destination]]
 * @category Core
 */

exports.Master = Master;

function getDestination() {
  return (0, _Global.getContext)().destination;
}
/**
 * The [[Listener]] belonging to the global Tone.js Context.
 * @category Core
 */


const Listener = (0, _Global.getContext)().listener;
/**
 * The [[Listener]] belonging to the global Tone.js Context.
 * @category Core
 */

exports.Listener = Listener;

function getListener() {
  return (0, _Global.getContext)().listener;
}
/**
 * Draw is used to synchronize the draw frame with the Transport's callbacks.
 * See [[Draw]]
 * @category Core
 */


const Draw = (0, _Global.getContext)().draw;
/**
 * Get the singleton attached to the global context.
 * Draw is used to synchronize the draw frame with the Transport's callbacks.
 * See [[Draw]]
 * @category Core
 */

exports.Draw = Draw;

function getDraw() {
  return (0, _Global.getContext)().draw;
}
/**
 * A reference to the global context
 * See [[Context]]
 */


const context = (0, _Global.getContext)();
/**
 * Promise which resolves when all of the loading promises are resolved.
 * Alias for static [[ToneAudioBuffer.loaded]] method.
 * @category Core
 */

exports.context = context;

function loaded() {
  return _ToneAudioBuffer.ToneAudioBuffer.loaded();
} // this fills in name changes from 13.x to 14.x


const Buffer = _ToneAudioBuffer.ToneAudioBuffer;
exports.Buffer = Buffer;
const Buffers = _ToneAudioBuffers.ToneAudioBuffers;
exports.Buffers = Buffers;
const BufferSource = _ToneBufferSource.ToneBufferSource;
exports.BufferSource = BufferSource;
},{"./core/Global":"node_modules/tone/build/esm/core/Global.js","./classes":"node_modules/tone/build/esm/classes.js","./version":"node_modules/tone/build/esm/version.js","./core/context/ToneAudioBuffer":"node_modules/tone/build/esm/core/context/ToneAudioBuffer.js","./core/context/AudioContext":"node_modules/tone/build/esm/core/context/AudioContext.js","./core/context/ToneAudioBuffers":"node_modules/tone/build/esm/core/context/ToneAudioBuffers.js","./source/buffer/ToneBufferSource":"node_modules/tone/build/esm/source/buffer/ToneBufferSource.js"}],"effects.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var Tone = _interopRequireWildcard(require("tone"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let effects = [{
  label: "Echo",
  type: "mic",
  params: [{
    label: "Delay Time",
    key: "delayTime",
    min: 0,
    max: 1,
    val: 0
  }, {
    label: "Feedback",
    key: "feedback",
    min: 0,
    max: 1,
    val: 0
  }],
  function: "FeedbackDelay"
}, {
  label: "Pitch Shift",
  type: "mic",
  params: [{
    label: "Interval",
    key: "interval",
    min: -22,
    max: 22,
    val: 0
  }],
  function: "PitchShift"
}, {
  label: "Upset Baby",
  file: "assets/185575__ciccarelli__crying-baby.wav.mp3"
}, {
  label: "Man Weeping",
  file: "assets/200428__qubodup__man-crying-and-whimmering.flac.mp3"
}, {
  label: "Wind",
  file: "assets/244807__meepalicious__strong-wind-and-moving-cars.wav.mp3"
}, {
  label: "Dogs",
  file: "assets/474484__rpdud27__aaa-3-0-1.wav.mp3"
}, {
  label: "Construction",
  file: "assets/400991__inspectorj__construction-jackhammer-excavator-a.wav.mp3"
}, {
  label: "Urination",
  file: "assets/473997__nomerodin1__pee-in-the-toilet.wav.mp3"
}];

for (let e of effects) {
  if (e.file) {
    e.params = [{
      label: "Volume",
      key: "volume",
      min: -30,
      max: 30,
      val: 0
    }];
    e.type = "file";
    e.function = "Player";
  }
}

var _default = effects;
exports.default = _default;
},{"tone":"node_modules/tone/build/esm/index.js"}],"../../../../usr/local/lib/node_modules/parcel-bundler/src/builtins/bundle-url.js":[function(require,module,exports) {
var bundleURL = null;

function getBundleURLCached() {
  if (!bundleURL) {
    bundleURL = getBundleURL();
  }

  return bundleURL;
}

function getBundleURL() {
  // Attempt to find the URL of the current script and use that as the base URL
  try {
    throw new Error();
  } catch (err) {
    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\/\/[^)\n]+/g);

    if (matches) {
      return getBaseURL(matches[0]);
    }
  }

  return '/';
}

function getBaseURL(url) {
  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\/\/.+)\/[^/]+$/, '$1') + '/';
}

exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
},{}],"../../../../usr/local/lib/node_modules/parcel-bundler/src/builtins/css-loader.js":[function(require,module,exports) {
var bundle = require('./bundle-url');

function updateLink(link) {
  var newLink = link.cloneNode();

  newLink.onload = function () {
    link.remove();
  };

  newLink.href = link.href.split('?')[0] + '?' + Date.now();
  link.parentNode.insertBefore(newLink, link.nextSibling);
}

var cssTimeout = null;

function reloadCSS() {
  if (cssTimeout) {
    return;
  }

  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');

    for (var i = 0; i < links.length; i++) {
      if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {
        updateLink(links[i]);
      }
    }

    cssTimeout = null;
  }, 50);
}

module.exports = reloadCSS;
},{"./bundle-url":"../../../../usr/local/lib/node_modules/parcel-bundler/src/builtins/bundle-url.js"}],"node_modules/vue-hot-reload-api/dist/index.js":[function(require,module,exports) {
var Vue // late bind
var version
var map = Object.create(null)
if (typeof window !== 'undefined') {
  window.__VUE_HOT_MAP__ = map
}
var installed = false
var isBrowserify = false
var initHookName = 'beforeCreate'

exports.install = function (vue, browserify) {
  if (installed) { return }
  installed = true

  Vue = vue.__esModule ? vue.default : vue
  version = Vue.version.split('.').map(Number)
  isBrowserify = browserify

  // compat with < 2.0.0-alpha.7
  if (Vue.config._lifecycleHooks.indexOf('init') > -1) {
    initHookName = 'init'
  }

  exports.compatible = version[0] >= 2
  if (!exports.compatible) {
    console.warn(
      '[HMR] You are using a version of vue-hot-reload-api that is ' +
        'only compatible with Vue.js core ^2.0.0.'
    )
    return
  }
}

/**
 * Create a record for a hot module, which keeps track of its constructor
 * and instances
 *
 * @param {String} id
 * @param {Object} options
 */

exports.createRecord = function (id, options) {
  if(map[id]) { return }

  var Ctor = null
  if (typeof options === 'function') {
    Ctor = options
    options = Ctor.options
  }
  makeOptionsHot(id, options)
  map[id] = {
    Ctor: Ctor,
    options: options,
    instances: []
  }
}

/**
 * Check if module is recorded
 *
 * @param {String} id
 */

exports.isRecorded = function (id) {
  return typeof map[id] !== 'undefined'
}

/**
 * Make a Component options object hot.
 *
 * @param {String} id
 * @param {Object} options
 */

function makeOptionsHot(id, options) {
  if (options.functional) {
    var render = options.render
    options.render = function (h, ctx) {
      var instances = map[id].instances
      if (ctx && instances.indexOf(ctx.parent) < 0) {
        instances.push(ctx.parent)
      }
      return render(h, ctx)
    }
  } else {
    injectHook(options, initHookName, function() {
      var record = map[id]
      if (!record.Ctor) {
        record.Ctor = this.constructor
      }
      record.instances.push(this)
    })
    injectHook(options, 'beforeDestroy', function() {
      var instances = map[id].instances
      instances.splice(instances.indexOf(this), 1)
    })
  }
}

/**
 * Inject a hook to a hot reloadable component so that
 * we can keep track of it.
 *
 * @param {Object} options
 * @param {String} name
 * @param {Function} hook
 */

function injectHook(options, name, hook) {
  var existing = options[name]
  options[name] = existing
    ? Array.isArray(existing) ? existing.concat(hook) : [existing, hook]
    : [hook]
}

function tryWrap(fn) {
  return function (id, arg) {
    try {
      fn(id, arg)
    } catch (e) {
      console.error(e)
      console.warn(
        'Something went wrong during Vue component hot-reload. Full reload required.'
      )
    }
  }
}

function updateOptions (oldOptions, newOptions) {
  for (var key in oldOptions) {
    if (!(key in newOptions)) {
      delete oldOptions[key]
    }
  }
  for (var key$1 in newOptions) {
    oldOptions[key$1] = newOptions[key$1]
  }
}

exports.rerender = tryWrap(function (id, options) {
  var record = map[id]
  if (!options) {
    record.instances.slice().forEach(function (instance) {
      instance.$forceUpdate()
    })
    return
  }
  if (typeof options === 'function') {
    options = options.options
  }
  if (record.Ctor) {
    record.Ctor.options.render = options.render
    record.Ctor.options.staticRenderFns = options.staticRenderFns
    record.instances.slice().forEach(function (instance) {
      instance.$options.render = options.render
      instance.$options.staticRenderFns = options.staticRenderFns
      // reset static trees
      // pre 2.5, all static trees are cached together on the instance
      if (instance._staticTrees) {
        instance._staticTrees = []
      }
      // 2.5.0
      if (Array.isArray(record.Ctor.options.cached)) {
        record.Ctor.options.cached = []
      }
      // 2.5.3
      if (Array.isArray(instance.$options.cached)) {
        instance.$options.cached = []
      }

      // post 2.5.4: v-once trees are cached on instance._staticTrees.
      // Pure static trees are cached on the staticRenderFns array
      // (both already reset above)

      // 2.6: temporarily mark rendered scoped slots as unstable so that
      // child components can be forced to update
      var restore = patchScopedSlots(instance)
      instance.$forceUpdate()
      instance.$nextTick(restore)
    })
  } else {
    // functional or no instance created yet
    record.options.render = options.render
    record.options.staticRenderFns = options.staticRenderFns

    // handle functional component re-render
    if (record.options.functional) {
      // rerender with full options
      if (Object.keys(options).length > 2) {
        updateOptions(record.options, options)
      } else {
        // template-only rerender.
        // need to inject the style injection code for CSS modules
        // to work properly.
        var injectStyles = record.options._injectStyles
        if (injectStyles) {
          var render = options.render
          record.options.render = function (h, ctx) {
            injectStyles.call(ctx)
            return render(h, ctx)
          }
        }
      }
      record.options._Ctor = null
      // 2.5.3
      if (Array.isArray(record.options.cached)) {
        record.options.cached = []
      }
      record.instances.slice().forEach(function (instance) {
        instance.$forceUpdate()
      })
    }
  }
})

exports.reload = tryWrap(function (id, options) {
  var record = map[id]
  if (options) {
    if (typeof options === 'function') {
      options = options.options
    }
    makeOptionsHot(id, options)
    if (record.Ctor) {
      if (version[1] < 2) {
        // preserve pre 2.2 behavior for global mixin handling
        record.Ctor.extendOptions = options
      }
      var newCtor = record.Ctor.super.extend(options)
      // prevent record.options._Ctor from being overwritten accidentally
      newCtor.options._Ctor = record.options._Ctor
      record.Ctor.options = newCtor.options
      record.Ctor.cid = newCtor.cid
      record.Ctor.prototype = newCtor.prototype
      if (newCtor.release) {
        // temporary global mixin strategy used in < 2.0.0-alpha.6
        newCtor.release()
      }
    } else {
      updateOptions(record.options, options)
    }
  }
  record.instances.slice().forEach(function (instance) {
    if (instance.$vnode && instance.$vnode.context) {
      instance.$vnode.context.$forceUpdate()
    } else {
      console.warn(
        'Root or manually mounted instance modified. Full reload required.'
      )
    }
  })
})

// 2.6 optimizes template-compiled scoped slots and skips updates if child
// only uses scoped slots. We need to patch the scoped slots resolving helper
// to temporarily mark all scoped slots as unstable in order to force child
// updates.
function patchScopedSlots (instance) {
  if (!instance._u) { return }
  // https://github.com/vuejs/vue/blob/dev/src/core/instance/render-helpers/resolve-scoped-slots.js
  var original = instance._u
  instance._u = function (slots) {
    try {
      // 2.6.4 ~ 2.6.6
      return original(slots, true)
    } catch (e) {
      // 2.5 / >= 2.6.7
      return original(slots, null, true)
    }
  }
  return function () {
    instance._u = original
  }
}

},{}],"App.vue":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _vue = _interopRequireDefault(require("vue"));

var Tone = _interopRequireWildcard(require("tone"));

var _effects = _interopRequireDefault(require("./effects"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var _default = _vue.default.extend({
  async created() {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: true,
        video: false
      });
      this.permission = true;
      this.enableMic();
    } catch (e) {
      console.log(e);
    }
  },

  data() {
    return {
      inputs: [],
      outputs: [],
      inputDevice: null,
      outputDevice: null,
      hasSink: false,
      running: false,
      effects: [],
      permission: false
    };
  },

  methods: {
    async enableMic() {
      this.getDevices();

      for (let e of _effects.default) {
        const effect = {
          label: e.label,
          type: e.type,
          params: e.params,
          on: false
        };
        this.effects.push(effect);
      }
    },

    async getDevices() {
      const sink = Audio.prototype.setSinkId;
      this.hasSink = sink ? true : false;

      if (!sink) {
        return false;
      }

      this.mic = new Tone.UserMedia();

      if (!this.permission) {
        try {
          const stream = await navigator.mediaDevices.getUserMedia({
            audio: true,
            video: false
          });
        } catch (e) {
          console.log(e);
          this.permission = false;
          return false;
        }
      }

      const devices = await navigator.mediaDevices.enumerateDevices();
      const inputs = devices.filter(d => d.kind === "audioinput").map(d => ({
        text: d.label,
        value: d.deviceId
      }));
      const outputs = devices.filter(d => d.kind === "audiooutput").map(d => ({
        text: d.label,
        value: d.deviceId
      }));
      this.inputDevice = inputs[0].value;
      const vbDevice = outputs.find(d => d.text.includes("VB"));
      if (vbDevice) this.outputDevice = vbDevice.value;
      this.inputs = inputs;
      this.outputs = outputs;
      this.permission = true;
    },

    async startAudio() {
      this.context = new AudioContext({
        sampleRate: 48000
      });
      this.destination = new MediaStreamAudioDestinationNode(this.context, {
        channelCountMode: "explicit",
        channelCount: 1,
        channelInterpretation: "speakers"
      });
      this.audio = new Audio();
      this.audio.srcObject = this.destination.stream;
      await this.audio.setSinkId(this.outputDevice);
      this.audio.play();
      Tone.setContext(this.context);
      this.mic = new Tone.UserMedia();
      this.mic.open(this.inputDevice);
      this.mic.connect(this.destination); // actually instantiate the tone effects now that everything else is good to go

      for (let e of _effects.default) {
        if (e.type === "mic") {
          const params = e.params.map(p => p.val);
          e.effect = new Tone[e.function](...params);
        } else if (e.type === "file") {
          e.effect = new Tone.Player(e.file);
        }
      }

      this.running = true;
    },

    async start() {
      if (!this.running) {
        this.startAudio();
      } else {
        this.running = false;
        this.mic.close();
        this.audio = null;
        this.context.close();
        this.destination = null;
      }
    },

    async changeDevice() {
      if (this.running) {
        console.log(this.effects.filter(e => e.on));
        this.effects.filter(e => e.on).forEach(e => {
          e.on = false;
          this.toggle(e);
        });
      }

      this.startAudio();
    },

    toggle(effect) {
      const toneEffect = _effects.default.find(e => e.label === effect.label).effect;

      if (effect.on) {
        if (effect.type === "mic") {
          this.mic.connect(toneEffect);
        } else if (effect.type === "file") {
          toneEffect.loop = true;
          toneEffect.start();
        }

        toneEffect.connect(this.destination);
      } else {
        if (effect.type === "mic") {
          this.mic.disconnect(toneEffect);
        } else if (effect.type === "file") {
          toneEffect.stop();
        }

        toneEffect.disconnect(this.destination);
      }
    },

    adjust(effect) {
      const toneEffect = _effects.default.find(e => e.label === effect.label).effect;

      let params = {};

      for (const p of effect.params) {
        params[p.key] = p.val;
      }

      toneEffect.set(params);
    }

  }
});

exports.default = _default;
        var $142efb = exports.default || module.exports;
      
      if (typeof $142efb === 'function') {
        $142efb = $142efb.options;
      }
    
        /* template */
        Object.assign($142efb, (function () {
          var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "container" }, [
    _c("h1", [_vm._v("Zoom Escaper")]),
    _vm._v(" "),
    _c("p", { staticClass: "about" }, [
      _vm._v(
        "\n    Zoom Escaper is a simple tool to help you escape Zoom meetings and other videoconferencing\n    scenarios. It allows you to self-sabotage your audio stream, making your presence unbearable\n    to others.\n  "
      )
    ]),
    _vm._v(" "),
    _vm.permission
      ? _c("div", [
          _vm._m(0),
          _vm._v(" "),
          _vm.hasSink
            ? _c("div", [
                _c("div", { staticClass: "devices" }, [
                  _c("label", { attrs: { for: "input-device" } }, [
                    _vm._v("Microphone")
                  ]),
                  _vm._v(" "),
                  _c(
                    "select",
                    {
                      directives: [
                        {
                          name: "model",
                          rawName: "v-model",
                          value: _vm.inputDevice,
                          expression: "inputDevice"
                        }
                      ],
                      attrs: { id: "input-device" },
                      on: {
                        change: [
                          function($event) {
                            var $$selectedVal = Array.prototype.filter
                              .call($event.target.options, function(o) {
                                return o.selected
                              })
                              .map(function(o) {
                                var val = "_value" in o ? o._value : o.value
                                return val
                              })
                            _vm.inputDevice = $event.target.multiple
                              ? $$selectedVal
                              : $$selectedVal[0]
                          },
                          _vm.changeDevice
                        ]
                      }
                    },
                    _vm._l(_vm.inputs, function(input) {
                      return _c(
                        "option",
                        { domProps: { value: input.value } },
                        [
                          _vm._v(
                            "\n            " +
                              _vm._s(input.text) +
                              "\n          "
                          )
                        ]
                      )
                    }),
                    0
                  )
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "devices" }, [
                  _c("label", { attrs: { for: "output-device" } }, [
                    _vm._v("Output")
                  ]),
                  _vm._v(" "),
                  _c(
                    "select",
                    {
                      directives: [
                        {
                          name: "model",
                          rawName: "v-model",
                          value: _vm.outputDevice,
                          expression: "outputDevice"
                        }
                      ],
                      attrs: { id: "output-device" },
                      on: {
                        change: [
                          function($event) {
                            var $$selectedVal = Array.prototype.filter
                              .call($event.target.options, function(o) {
                                return o.selected
                              })
                              .map(function(o) {
                                var val = "_value" in o ? o._value : o.value
                                return val
                              })
                            _vm.outputDevice = $event.target.multiple
                              ? $$selectedVal
                              : $$selectedVal[0]
                          },
                          _vm.changeDevice
                        ]
                      }
                    },
                    _vm._l(_vm.outputs, function(output) {
                      return _c(
                        "option",
                        { domProps: { value: output.value } },
                        [
                          _vm._v(
                            "\n            " +
                              _vm._s(output.text) +
                              "\n          "
                          )
                        ]
                      )
                    }),
                    0
                  )
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "start-holder" }, [
                  _c("button", { on: { click: _vm.start } }, [
                    _vm._v(_vm._s(_vm.running ? "Stop" : "Start"))
                  ])
                ]),
                _vm._v(" "),
                _c(
                  "div",
                  { staticClass: "effects", class: { disabled: !_vm.running } },
                  _vm._l(_vm.effects, function(e) {
                    return _c(
                      "div",
                      { staticClass: "effect", class: { active: e.on } },
                      [
                        _c("div", { staticClass: "toggle" }, [
                          _c("input", {
                            directives: [
                              {
                                name: "model",
                                rawName: "v-model",
                                value: e.on,
                                expression: "e.on"
                              }
                            ],
                            attrs: {
                              type: "checkbox",
                              disabled: !_vm.running,
                              id: e.label
                            },
                            domProps: {
                              checked: Array.isArray(e.on)
                                ? _vm._i(e.on, null) > -1
                                : e.on
                            },
                            on: {
                              change: [
                                function($event) {
                                  var $$a = e.on,
                                    $$el = $event.target,
                                    $$c = $$el.checked ? true : false
                                  if (Array.isArray($$a)) {
                                    var $$v = null,
                                      $$i = _vm._i($$a, $$v)
                                    if ($$el.checked) {
                                      $$i < 0 &&
                                        _vm.$set(e, "on", $$a.concat([$$v]))
                                    } else {
                                      $$i > -1 &&
                                        _vm.$set(
                                          e,
                                          "on",
                                          $$a
                                            .slice(0, $$i)
                                            .concat($$a.slice($$i + 1))
                                        )
                                    }
                                  } else {
                                    _vm.$set(e, "on", $$c)
                                  }
                                },
                                function($event) {
                                  return _vm.toggle(e)
                                }
                              ]
                            }
                          }),
                          _c("label", { attrs: { for: e.label } }, [
                            _vm._v(_vm._s(e.label))
                          ])
                        ]),
                        _vm._v(" "),
                        _c(
                          "div",
                          { staticClass: "params" },
                          _vm._l(e.params, function(param) {
                            return _c("div", { staticClass: "param" }, [
                              _c("label", [_vm._v(_vm._s(param.label))]),
                              _vm._v(" "),
                              _c("input", {
                                directives: [
                                  {
                                    name: "model",
                                    rawName: "v-model",
                                    value: param.val,
                                    expression: "param.val"
                                  }
                                ],
                                attrs: {
                                  type: "range",
                                  min: param.min,
                                  max: param.max,
                                  step: "0.01",
                                  disabled: !_vm.running
                                },
                                domProps: { value: param.val },
                                on: {
                                  change: function($event) {
                                    return _vm.adjust(e)
                                  },
                                  __r: function($event) {
                                    return _vm.$set(
                                      param,
                                      "val",
                                      $event.target.value
                                    )
                                  }
                                }
                              })
                            ])
                          }),
                          0
                        )
                      ]
                    )
                  }),
                  0
                )
              ])
            : _vm._e()
        ])
      : _c("div", [
          _c("div", { staticClass: "start-holder" }, [
            _c("button", { on: { click: _vm.enableMic } }, [
              _vm._v("Enable Microphone")
            ])
          ])
        ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "instructions" }, [
      _c("strong", [_vm._v("Setup:")]),
      _vm._v(" Install\n      "),
      _c(
        "a",
        { attrs: { href: "https://vb-audio.com/Cable/", target: "_blank" } },
        [_vm._v("VB-Cable")]
      ),
      _vm._v(
        ' (donationware, no\n      affiliation with Zoom Escaper), then set your microphone to "VB-Cable" in your Zoom\n      settings. Also make sure "VB-Cable" is selected as output on this website.\n    '
      )
    ])
  }
]
render._withStripped = true

          return {
            render: render,
            staticRenderFns: staticRenderFns,
            _compiled: true,
            _scopeId: null,
            functional: undefined
          };
        })());
      
    /* hot reload */
    (function () {
      if (module.hot) {
        var api = require('vue-hot-reload-api');
        api.install(require('vue'));
        if (api.compatible) {
          module.hot.accept();
          if (!module.hot.data) {
            api.createRecord('$142efb', $142efb);
          } else {
            api.reload('$142efb', $142efb);
          }
        }

        
        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
      }
    })();
},{"vue":"node_modules/vue/dist/vue.runtime.esm.js","tone":"node_modules/tone/build/esm/index.js","./effects":"effects.js","_css_loader":"../../../../usr/local/lib/node_modules/parcel-bundler/src/builtins/css-loader.js","vue-hot-reload-api":"node_modules/vue-hot-reload-api/dist/index.js"}],"index.js":[function(require,module,exports) {
"use strict";

var _vue = _interopRequireDefault(require("vue"));

var _App = _interopRequireDefault(require("./App.vue"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

new _vue.default({
  render: createElement => createElement(_App.default)
}).$mount('#app');
},{"vue":"node_modules/vue/dist/vue.runtime.esm.js","./App.vue":"App.vue"}],"../../../../usr/local/lib/node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "51685" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else {
        window.location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../../../../usr/local/lib/node_modules/parcel-bundler/src/builtins/hmr-runtime.js","index.js"], null)
//# sourceMappingURL=/voice-sabotage.e31bb0bc.js.map